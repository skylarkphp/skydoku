{"version":3,"sources":["skylark-widgets-uploads.js"],"names":["define","skylark","attach","langx","$","FileUpload","Widget","uploads","MultiUploader","inherit","klassName","pluginName","options","uploadUrl","params","formParamName","maxConnections","allowedExtensions","sizeLimit","minSizeLimit","autoUpload","selectors","fileList","fileItem","nodata","picker","dropzone","pastezone","startUploads","cancelUploads","template","dataType","name","size","cancel","clear","progress","message","state","_init","this","_initEventHandler","_initFileHandlers","_initUpoadHandler","_updateFileList","self","dzSelector","pzSelector","pkSelector","_velm","dropped","files","_addFiles","pasted","multiple","picked","_handler","url","onProgress","id","fileName","loaded","total","_onProgress","onComplete","result","_onComplete","onCancel","_onCancel","onFailure","e","_onFailure","itemSelectors","_listElement","on","$fileItem","closest","fileId","data","remove","click","$files","find","forEach","send","$item","_getItemByFileId","percent","parseInt","progressHTML","_formatSize","css","parent","html","_updateFile","_filesInProgress","doneMsg","_addToList","getName","fileSize","getSize","item","_formatFileName","append","with_files_elements","without_files_elements","length","removeClass","addClass","when_pending","when_running","when_done","status","add","i","item2","_validateFile","_addFile","file","value","replace","_isAllowedExtension","_error","code","messages","r","replacement","join","showMessage","slice","ext","indexOf","toLowerCase","allowed","bytes","Math","max","toFixed","main"],"mappings":"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","file":"../skylark-widgets-uploads.js","sourcesContent":["define('skylark-widgets-uploads/uploads',[\r\n  \"skylark-langx/skylark\"\r\n],function(skylark){\r\n\treturn skylark.attach(\"widgets.updates\",{});\r\n});\ndefine('skylark-widgets-uploads/MultiUploader',[\r\n  \"skylark-langx/skylark\",\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-query\",\r\n  \"skylark-net-http/Upload\",\r\n  \"skylark-widgets-base/Widget\",\r\n  \"./uploads\"\r\n]  ,function(skylark,langx,$, FileUpload, Widget,uploads){\r\n\r\n    var fileListTemplate = '<div class=\"lark-multiuploader\">' + \r\n        '    <h3 class=\"popover-title\">Upload files</h3>' + \r\n        '    <div class=\"popover-content container-fluid\" class=\"file-list file-dropzone file-pastezone\">' + \r\n        '        <div class=\"no-data\"><em>Add files.</em></div>' + \r\n        '    </div>' + \r\n        '    <footer>' + \r\n        '        <button class=\"btn btn-warning pull-right btn-sm\" id=\"cancel-uploads-button\"><i class=\"icon-cancel\"></i>Cancel uploads</button>' + \r\n        '        <span class=\"btn btn-success fileinput-button btn-sm\" id=\"fileinput-button\">' + \r\n        '            <i class=\"icon-plus\"></i>' + \r\n        '            <span>Add files...</span>' + \r\n        '            <input id=\"fileupload\" type=\"file\" name=\"files[]\" multiple=\"multiple\">' + \r\n        '        </span>' + \r\n        '        <button class=\"btn btn-primary btn-sm\" id=\"start-uploads-button\"><i class=\"icon-start\"></i>Start uploads</button>' + \r\n        '    </footer>' + \r\n        '</div>',\r\n        fileItemTemplate = '<div class=\"file-item row\">' +\r\n        '   <div class=\"col-md-6\"><span class=\"name\"></span></div>' + \r\n        '   <div class=\"col-md-3\">' +\r\n        '    <span class=\"size\"></span>' +\r\n        '    <div class=\"progress hidden\">' +\r\n        '        <div class=\"progress-label\"></div>' +\r\n        '        <div class=\"bar\"></div>' +\r\n        '    </div>' +\r\n        '    <span class=\"message hidden\"></span>' +\r\n        '   </div>' +\r\n        '   <div class=\"col-md-3\">' +\r\n        '    <button class=\"btn btn-warning btn-xs cancel\"><i class=\"icon-remove\"></i>Cancel</button>' +\r\n        '    <button class=\"btn btn-xs clear hidden\">Clear</button>' +\r\n        '   </div>' +\r\n        '</div>';\r\n\r\n    var MultiUploader =  Widget.inherit({\r\n        klassName : \"Uploader\",\r\n        pluginName : \"lark.multiuploader\",\r\n\r\n        options: {\r\n            uploadUrl: '/upload',\r\n\r\n        \tparams: {\r\n                formParamName : \"file\"\r\n            },\r\n\r\n    \t    maxConnections: 3,\r\n        \t// validation\r\n        \tallowedExtensions: [],\r\n        \tsizeLimit: 0,\r\n        \tminSizeLimit: 0,\r\n\r\n            autoUpload: false,\r\n            selectors : {\r\n              fileList : \".file-list\",\r\n              fileItem : \".file-item\",\r\n              nodata : \".file-list .no-data\",\r\n\r\n              picker   : \".file-picker\",\r\n              dropzone : \".file-dropzone\",\r\n              pastezone: \".file-pastezone\",\r\n\r\n              startUploads: '.start-uploads',\r\n              cancelUploads: '.cancel-uploads',\r\n            },\r\n\r\n            template : fileListTemplate,\r\n\r\n            dataType: 'json',\r\n\r\n            fileItem : {\r\n            \tselectors : {\r\n                    name : \".name\",\r\n                    size : \".size\",\r\n                    cancel: \".cancel\",\r\n                    clear : \".clear\",\r\n                    progress : \".progress\",\r\n                    message : \".message\"                   \r\n            \t},\r\n\r\n            \ttemplate : fileItemTemplate\r\n            }\r\n        },\r\n\r\n        state : {\r\n        },\r\n\r\n        _init: function () {\r\n            var self = this;\r\n\r\n\r\n            // Render current files\r\n            /*\r\n            this.files.forEach(function (file) {\r\n                self.renderFile(file);\r\n            });\r\n            */\r\n\r\n            //this._refresh({files:true});\r\n        \r\n\r\n            //this._files.on('all', function(){\r\n            //  self._refresh({files:true});\r\n            //});\r\n\r\n            this._initEventHandler();\r\n            this._initFileHandlers();\r\n            this._initUpoadHandler();\r\n            this._updateFileList();\r\n        },\r\n\r\n        _initFileHandlers : function() {\r\n            var self = this;\r\n\r\n            var selectors = this.options.selectors,\r\n            \tdzSelector = selectors.dropzone,\r\n            \tpzSelector = selectors.pastezone,\r\n            \tpkSelector = selectors.picker;\r\n\r\n            if (dzSelector) {\r\n\t\t\t\tthis._velm.$(dzSelector).dropzone({\r\n\t                dropped : function (files) {\r\n                        self._addFiles(files);\r\n\t                }\r\n\t\t\t\t});\r\n            }\r\n\r\n\r\n            if (pzSelector) {\r\n                this._velm.$(pzSelector).pastezone({\r\n                    pasted : function (files) {\r\n                        self._addFiles(files);\r\n                    }\r\n                });                \r\n            }\r\n\r\n            if (pkSelector) {\r\n                this._velm.$(pkSelector).picker({\r\n                    multiple: true,\r\n                    picked : function (files) {\r\n                        self._addFiles(files);\r\n                    }\r\n                });                \r\n            }\r\n        },\r\n\r\n        _initUpoadHandler: function(){\r\n            var self = this,\r\n                handlerClass;\r\n\r\n            this._handler = new FileUpload({\r\n                url: this.options.uploadUrl,\r\n                maxConnections: this.options.maxConnections,\r\n                onProgress: function(id, fileName, loaded, total){\r\n                    self._onProgress(id, fileName, loaded, total);\r\n                },\r\n                onComplete: function(id, fileName, result){\r\n                    self._onComplete(id, fileName, result);\r\n                },\r\n                onCancel: function(id, fileName){\r\n                    self._onCancel(id, fileName);\r\n                },\r\n                onFailure: function(id,fileName,e){\r\n                    self._onFailure(id,fileName,e);\r\n                }\r\n            });\r\n        },\r\n        \r\n         /**\r\n         * delegate click event for cancel link\r\n         **/\r\n        _initEventHandler: function(){\r\n            var self = this,\r\n               selectors = this.options.selectors,\r\n               itemSelectors = this.options.fileItem.selectors, \r\n               list = this._listElement;\r\n\r\n            // Add cancel handler\r\n            this._velm.$(selectors.fileList).on(\"click\",itemSelectors.cancel,function(e){\r\n                var $fileItem = $(this).closest(selectors.fileItem),\r\n                    fileId = $fileItem.data(\"fileId\");\r\n                self._handler.cancel(fileId);\r\n                $fileItem.remove();\r\n                self._updateFileList();\r\n            });\r\n\r\n            // Add clear handler\r\n            this._velm.$(selectors.fileList).on(\"click\",itemSelectors.clear,function(e){\r\n                var $fileItem = $(this).closest(selectors.fileItem),\r\n                    fileId = $fileItem.data(\"fileId\");\r\n                $fileItem.remove();\r\n                self._updateFileList();\r\n            });\r\n\r\n            // Add cancel all handler\r\n            this._velm.$(selectors.cancelUploads).click(function(){\r\n                var $files = self._velm.$(selectors.fileList).find(selectors.fileItem);           \r\n                $files.forEach(function(fileItem){\r\n                    var $fileItem = $(fileItem),\r\n                        fileId = $fileItem.data(\"fileId\");\r\n                    self._handler.cancel(fileId);\r\n                    $fileItem.remove();\r\n                });\r\n                self._updateFileList();\r\n\r\n            });\r\n\r\n            // Add start uploads handler\r\n            this._velm.$(selectors.startUploads).click(function(){\r\n                var $files = self._velm.$(selectors.fileList).find(selectors.fileItem);           \r\n                $files.forEach(function(fileItem){\r\n                    var $fileItem = $(fileItem),\r\n                        fileId = $fileItem.data(\"fileId\");\r\n                    if (!$fileItem.data(\"status\")) {\r\n                        // The file has not yet been sent\r\n                        self._handler.send(fileId,self.options.params);\r\n                    }\r\n                });\r\n\r\n            });\r\n            \r\n\r\n        },       \r\n\r\n        _onProgress: function(id, fileName, loaded, total){          \r\n            var $item = this._getItemByFileId(id);\r\n\r\n            var percent = parseInt(loaded / total * 100, 10);\r\n            var progressHTML = this._formatSize(loaded)+' of '+ this._formatSize(total);\r\n\r\n            $item.data(\"status\",\"running\");\r\n            $item.find('.progress')\r\n                .find('.bar')\r\n                .css('width', percent+'%')\r\n                .parent()\r\n                .find('.progress-label')\r\n                .html(progressHTML);\r\n            this._updateFile($item);\r\n\r\n        },\r\n\r\n        _onComplete: function(id, fileName, result){\r\n            this._filesInProgress--;\r\n            var $item = this._getItemByFileId(id);\r\n            $item.data(\"status\",\"done\");\r\n            $item.find('.message').html('<i class=\"icon-success\"></i> ' + (this.doneMsg || 'Uploaded'));\r\n            this._updateFile($item);\r\n        },\r\n\r\n        _onFailure : function(id,fileName,e) {\r\n            this._filesInProgress--;\r\n            var $item = this._getItemByFileId(id);\r\n            $item.data(\"status\",\"error\");\r\n            $item.find('.message').html('<i class=\"icon-error\"></i> ');;\r\n            this._updateFile($item)\r\n\r\n        },\r\n\r\n        _onCancel: function(id, fileName){\r\n            this._filesInProgress--;\r\n            var $item = this._getItemByFileId(id);\r\n            $item.data(\"status\",\"cancel\");\r\n            this._updateFile($item)\r\n        },\r\n\r\n        _addToList: function(id, fileName){\r\n            var self = this;\r\n\r\n\r\n            var fileName = this._handler.getName(id),\r\n                fileSize = this._handler.getSize(id);\r\n\r\n            var item = $(this.options.fileItem.template);\r\n            item.data(\"fileId\",id);\r\n\r\n            item.find(this.options.fileItem.selectors.name).html(this._formatFileName(fileName));\r\n            item.find(this.options.fileItem.selectors.size).html(this._formatSize(fileSize));\r\n\r\n            this._velm.$(this.options.selectors.fileList).append(item);\r\n\r\n            this._updateFileList();\r\n        },\r\n    \r\n        _updateFileList : function ()  {\r\n            var selectors = this.options.selectors,\r\n                itemSelectors = this.options.fileItem.selectors,\r\n                files = this._velm.$(selectors.fileList).find(selectors.fileItem);\r\n\r\n            var with_files_elements = this._velm.$(selectors.cancelUploads + ',' + selectors.startUploads);\r\n            var without_files_elements = this._velm.$(selectors.nodata);\r\n            if (files.length > 0) {\r\n                with_files_elements.removeClass('hidden');\r\n                without_files_elements.addClass('hidden');\r\n            } else {\r\n                with_files_elements.addClass('hidden');\r\n                without_files_elements.removeClass('hidden');\r\n            }\r\n        },\r\n        \r\n        _updateFile: function ($item) {\r\n            var selectors = this.options.fileItem.selectors,\r\n                when_pending = $item.find(selectors.size + \",\" + selectors.cancel),\r\n                when_running = $item.find(selectors.progress + \",\" + selectors.cancel),\r\n                when_done = $item.find(selectors.message + \",\" + selectors.clear);\r\n\r\n            var status = $item.data(\"status\");    \r\n            if (status == \"pending\") {\r\n                when_running.add(when_done).addClass('hidden');\r\n                when_pending.removeClass('hidden');\r\n            } else if (status == \"running\") {\r\n                when_pending.add(when_done).addClass('hidden');\r\n                when_running.removeClass('hidden');\r\n            } else if (status == \"done\" || status == \"error\") {\r\n                when_pending.add(when_running).addClass('hidden');\r\n                when_done.removeClass('hidden');\r\n            }\r\n        },\r\n\r\n        _getItemByFileId: function(id){\r\n            var selectors = this.options.selectors,\r\n                files = this._velm.$(selectors.fileList).find(selectors.fileItem),\r\n                item;\r\n\r\n            // there can't be txt nodes in dynamically created list\r\n            // and we can  use nextSibling\r\n\r\n            for (var i = 0; i<files.length;i++){\r\n                var item2 = files[i];\r\n                if ($(item2).data(\"fileId\") == id) {\r\n                    item = item2;\r\n                    break;\r\n                }\r\n            }\r\n            if (item) {\r\n                return $(item);\r\n            }\r\n        },\r\n\r\n\r\n            \r\n        _addFiles: function(files){\r\n            for (var i=0; i<files.length; i++){\r\n                if ( !this._validateFile(files[i])){\r\n                    return;\r\n                }\r\n            }\r\n\r\n            for (var i=0; i<files.length; i++){\r\n                this._addFile(files[i]);\r\n            }\r\n        },\r\n\r\n        _addFile: function(file){\r\n            var id = this._handler.add(file);\r\n\r\n            this._filesInProgress++;\r\n            this._addToList(id);\r\n\r\n            //this._handler.upload(id, this.options.params);\r\n        },\r\n\r\n        _validateFile: function(file){\r\n            var name, size;\r\n\r\n            if (file.value){\r\n                // it is a file input\r\n                // get input value and remove path to normalize\r\n                name = file.value.replace(/.*(\\/|\\\\)/, \"\");\r\n            } else {\r\n                // fix missing properties in Safari\r\n                name = file.fileName != null ? file.fileName : file.name;\r\n                size = file.fileSize != null ? file.fileSize : file.size;\r\n            }\r\n\r\n            if (! this._isAllowedExtension(name)){\r\n                this._error('typeError', name);\r\n                return false;\r\n\r\n            } else if (size === 0){\r\n                this._error('emptyError', name);\r\n                return false;\r\n\r\n            } else if (size && this.options.sizeLimit && size > this.options.sizeLimit){\r\n                this._error('sizeError', name);\r\n                return false;\r\n\r\n            } else if (size && size < this.options.minSizeLimit){\r\n                this._error('minSizeError', name);\r\n                return false;\r\n            }\r\n\r\n            return true;\r\n        },\r\n\r\n        _error: function(code, fileName){\r\n            var message = this.options.messages[code];\r\n            function r(name, replacement){ message = message.replace(name, replacement); }\r\n\r\n            r('{file}', this._formatFileName(fileName));\r\n            r('{extensions}', this.options.allowedExtensions.join(', '));\r\n            r('{sizeLimit}', this._formatSize(this.options.sizeLimit));\r\n            r('{minSizeLimit}', this._formatSize(this.options.minSizeLimit));\r\n\r\n            this.options.showMessage(message);\r\n        },\r\n\r\n        _formatFileName: function(name){\r\n            if (name.length > 33){\r\n                name = name.slice(0, 19) + '...' + name.slice(-13);\r\n            }\r\n            return name;\r\n        },\r\n\r\n        _isAllowedExtension: function(fileName){\r\n            var ext = (-1 !== fileName.indexOf('.')) ? fileName.replace(/.*[.]/, '').toLowerCase() : '';\r\n            var allowed = this.options.allowedExtensions;\r\n\r\n            if (!allowed.length){return true;}\r\n\r\n            for (var i=0; i<allowed.length; i++){\r\n                if (allowed[i].toLowerCase() == ext){ return true;}\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        _formatSize: function(bytes){\r\n            var i = -1;\r\n            do {\r\n                bytes = bytes / 1024;\r\n                i++;\r\n            } while (bytes > 99);\r\n\r\n            return Math.max(bytes, 0.1).toFixed(1) + ['KB', 'MB', 'GB', 'TB', 'PB', 'EB'][i];\r\n        }\r\n\r\n    });\r\n\r\n\r\n\treturn uploads.MultiUploader = MultiUploader;\r\n});\ndefine('skylark-widgets-uploads/main',[\r\n\t\"./uploads\",\r\n\t\"./MultiUploader\"\r\n],function(uploads){\r\n\treturn uploads;\r\n});\ndefine('skylark-widgets-uploads', ['skylark-widgets-uploads/main'], function (main) { return main; });\n\n"]}