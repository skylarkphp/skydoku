{"version":3,"sources":["skylark-domx-colorpicker.js"],"names":["define","skylark","langx","browser","noder","eventer","finder","$","element","onmove","onstart","onstop","doc","document","dragging","offset","maxHeight","maxWidth","hasTouch","window","duringDragEvents","prevent","e","stopPropagation","preventDefault","returnValue","move","isIE","documentMode","button","stop","t0","originalEvent","touches","pageX","pageY","dragX","Math","max","min","left","dragY","top","apply","off","body","removeClass","setTimeout","arguments","on","which","height","width","addClass","styler","fx","colors","Color","draggable","noop","defaultOpts","beforeShow","change","show","hide","color","flat","showInput","allowEmpty","showButtons","clickoutFiresChange","showInitial","showPalette","showPaletteOnly","hideAfterPaletteSelect","togglePaletteOnly","showSelectionPalette","localStorageKey","appendTo","maxSelectionSize","cancelText","chooseText","togglePaletteMoreText","togglePaletteLessText","clearText","noColorSelectedText","preferredFormat","className","containerClassName","replacerClassName","showAlpha","theme","palette","selectionPalette","disabled","pickers","replaceInput","join","markup","gradientFix","i","paletteTemplate","p","opts","html","length","current","tiny","c","toHsl","l","equals","formattedString","toString","swatchStyle","toRgbString","push","append","attr","ColorPicker","Evented","inherit","klassName","init","o","callbackContext","mixin","callbacks","bind","instanceOptions","resize","debounce","reflow","visible","isDragging","dragWidth","dragHeight","dragHelperHeight","slideHeight","alphaWidth","alphaSlideHelperWidth","slideHelperHeight","currentHue","currentSaturation","currentValue","currentAlpha","paletteArray","paletteLookup","slice","draggingClass","shiftMovementDirection","ownerDocument","boundElement","container","pickerContainer","find","dragger","dragHelper","slider","slideHelper","alphaSliderInner","alphaSlider","alphaSlideHelper","textInput","paletteContainer","initialColorContainer","cancelButton","clearButton","chooseButton","toggleButton","isInput","is","isInputTypeColor","inputTypeColorSupport","shouldReplace","replacer","offsetElement","previewElement","initialColor","val","colorOnShow","currentPreferredFormat","isEmpty","applyOptions","text","isArray","j","rgb","toggleClass","updateSelectionPaletteFromStorage","localStorage","oldPalette","split","each","addColorToSelectionPalette","inArray","shift","drawPalette","currentColor","get","map","unique","reverse","getUniqueSelectionPalette","drawInitial","initial","dragStart","trigger","dragStop","setFromTextInput","value","isValid","set","updateOriginalInput","toggle","event","create","isDefaultPrevented","hideAll","onkeydown","clickout","updateUI","keyCode","revert","ignoreFormatChange","newColor","newHsv","toHsv","h","s","v","a","getFormat","fromRatio","round","format","updateHelperLocations","flatColor","css","toHexString","realColor","displayColor","realHex","realRgb","toRgb","realAlpha","gradient","toFilter","gradientType","alphaX","slideY","fireCallback","hasChanged","picker","input","dpWidth","dpHeight","inputHeight","docElem","viewWidth","viewHeight","offsetLeft","offsetTop","outerWidth","outerHeight","documentElement","clientWidth","scrollLeft","clientHeight","scrollTop","abs","bottom","right","disable","after","parent","target","click","keydown","hasClass","shiftKey","parseFloat","oldDragX","oldDragY","furtherFromX","setValue","paletteElementClick","data","ignore","closest","paletteEvent","initialize","spect","option","optionName","optionValue","undefined","enable","coord","destroy","remove","id","func","obj","Array","prototype","args","call","concat","dataID","load","loadOpts","defaults","localization","palettes","fn","colorPicker","extra","this","method","Error","removeData","options","attach","main"],"mappings":"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","file":"../skylark-domx-colorpicker.js","sourcesContent":["define('skylark-domx-colorpicker/draggable',[\r\n   \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-browser\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-eventer\",\r\n    \"skylark-domx-finder\",\r\n    \"skylark-domx-query\"\r\n],function(skylark, langx, browser, noder, eventer,finder, $) {\r\n    /**\r\n    * Lightweight drag helper.  Handles containment within the element, so that\r\n    * when dragging, the x is within [0,element.width] and y is within [0,element.height]\r\n    */\r\n    function draggable(element, onmove, onstart, onstop) {\r\n        onmove = onmove || function () { };\r\n        onstart = onstart || function () { };\r\n        onstop = onstop || function () { };\r\n        var doc = document;\r\n        var dragging = false;\r\n        var offset = {};\r\n        var maxHeight = 0;\r\n        var maxWidth = 0;\r\n        var hasTouch = ('ontouchstart' in window);\r\n\r\n        var duringDragEvents = {};\r\n        duringDragEvents[\"selectstart\"] = prevent;\r\n        duringDragEvents[\"dragstart\"] = prevent;\r\n        duringDragEvents[\"touchmove mousemove\"] = move;\r\n        duringDragEvents[\"touchend mouseup\"] = stop;\r\n\r\n        function prevent(e) {\r\n            if (e.stopPropagation) {\r\n                e.stopPropagation();\r\n            }\r\n            if (e.preventDefault) {\r\n                e.preventDefault();\r\n            }\r\n            e.returnValue = false;\r\n        }\r\n\r\n        function move(e) {\r\n            if (dragging) {\r\n                // Mouseup happened outside of window\r\n                if (browser.isIE && doc.documentMode < 9 && !e.button) {\r\n                    return stop();\r\n                }\r\n\r\n                var t0 = e.originalEvent && e.originalEvent.touches && e.originalEvent.touches[0];\r\n                var pageX = t0 && t0.pageX || e.pageX;\r\n                var pageY = t0 && t0.pageY || e.pageY;\r\n\r\n                var dragX = Math.max(0, Math.min(pageX - offset.left, maxWidth));\r\n                var dragY = Math.max(0, Math.min(pageY - offset.top, maxHeight));\r\n\r\n                if (hasTouch) {\r\n                    // Stop scrolling in iOS\r\n                    prevent(e);\r\n                }\r\n\r\n                onmove.apply(element, [dragX, dragY, e]);\r\n            }\r\n        }\r\n\r\n        function start(e) {\r\n            var rightclick = (e.which) ? (e.which == 3) : (e.button == 2);\r\n\r\n            if (!rightclick && !dragging) {\r\n                if (onstart.apply(element, arguments) !== false) {\r\n                    dragging = true;\r\n                    maxHeight = $(element).height();\r\n                    maxWidth = $(element).width();\r\n                    offset = $(element).offset();\r\n\r\n                    $(doc).on(duringDragEvents);\r\n                    $(doc.body).addClass(\"sp-dragging\");\r\n\r\n                    move(e);\r\n\r\n                    prevent(e);\r\n                }\r\n            }\r\n        }\r\n\r\n        function stop() {\r\n            if (dragging) {\r\n                $(doc).off(duringDragEvents);\r\n                $(doc.body).removeClass(\"sp-dragging\");\r\n\r\n                // Wait a tick before notifying observers to allow the click event\r\n                // to fire in Chrome.\r\n                setTimeout(function() {\r\n                    onstop.apply(element, arguments);\r\n                }, 0);\r\n            }\r\n            dragging = false;\r\n        }\r\n\r\n        $(element).on(\"touchstart mousedown\", start);\r\n    }\r\n\t\r\n\treturn draggable;\r\n});\ndefine('skylark-domx-colorpicker/ColorPicker',[\r\n   \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-browser\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-finder\",\r\n    \"skylark-domx-query\",\r\n    \"skylark-domx-eventer\",\r\n    \"skylark-domx-styler\",\r\n    \"skylark-domx-fx\",\r\n    \"skylark-data-color/colors\",\r\n    \"skylark-data-color/Color\",\r\n    \"./draggable\"\r\n],function(skylark, langx, browser, noder, finder, $,eventer, styler,fx,colors, Color,draggable) {\r\n    \"use strict\";\r\n\r\n    var noop = langx.noop;\r\n\r\n    var defaultOpts = {\r\n\r\n        // Callbacks\r\n        beforeShow: noop,\r\n        move: noop,\r\n        change: noop,\r\n        show: noop,\r\n        hide: noop,\r\n\r\n        // Options\r\n        color: false,\r\n        flat: false,\r\n        showInput: false,\r\n        allowEmpty: false,\r\n        showButtons: true,\r\n        clickoutFiresChange: true,\r\n        showInitial: false,\r\n        showPalette: false,\r\n        showPaletteOnly: false,\r\n        hideAfterPaletteSelect: false,\r\n        togglePaletteOnly: false,\r\n        showSelectionPalette: true,\r\n        localStorageKey: false,\r\n        appendTo: \"body\",\r\n        maxSelectionSize: 7,\r\n        cancelText: \"cancel\",\r\n        chooseText: \"choose\",\r\n        togglePaletteMoreText: \"more\",\r\n        togglePaletteLessText: \"less\",\r\n        clearText: \"Clear Color Selection\",\r\n        noColorSelectedText: \"No Color Selected\",\r\n        preferredFormat: false,\r\n        className: \"\", // Deprecated - use containerClassName and replacerClassName instead.\r\n        containerClassName: \"\",\r\n        replacerClassName: \"\",\r\n        showAlpha: false,\r\n        theme: \"sp-light\",\r\n        palette: [[\"#ffffff\", \"#000000\", \"#ff0000\", \"#ff8000\", \"#ffff00\", \"#008000\", \"#0000ff\", \"#4b0082\", \"#9400d3\"]],\r\n        selectionPalette: [],\r\n        disabled: false,\r\n        offset: null\r\n    },\r\n    pickers = [],\r\n    replaceInput = [\r\n        \"<div class='sp-replacer'>\",\r\n            \"<div class='sp-preview'><div class='sp-preview-inner'></div></div>\",\r\n            \"<div class='sp-dd'>&#9660;</div>\",\r\n        \"</div>\"\r\n    ].join(''),\r\n    \r\n    markup = (function () {\r\n\r\n        // IE7-10 does not support gradients with multiple stops, so we need to simulate\r\n        //  that for the rainbow slider with 8 divs that each have a single gradient\r\n        var gradientFix = \"\";\r\n        if (browser.isIE) {\r\n            for (var i = 1; i <= 6; i++) {\r\n                gradientFix += \"<div class='sp-\" + i + \"'></div>\";\r\n            }\r\n        }\r\n\r\n        return [\r\n            \"<div class='sp-container sp-hidden'>\",\r\n                \"<div class='sp-palette-container'>\",\r\n                    \"<div class='sp-palette sp-thumb sp-cf'></div>\",\r\n                    \"<div class='sp-palette-button-container sp-cf'>\",\r\n                        \"<button type='button' class='sp-palette-toggle'></button>\",\r\n                    \"</div>\",\r\n                \"</div>\",\r\n                \"<div class='sp-picker-container'>\",\r\n                    \"<div class='sp-top sp-cf'>\",\r\n                        \"<div class='sp-fill'></div>\",\r\n                        \"<div class='sp-top-inner'>\",\r\n                            \"<div class='sp-color'>\",\r\n                                \"<div class='sp-sat'>\",\r\n                                    \"<div class='sp-val'>\",\r\n                                        \"<div class='sp-dragger'></div>\",\r\n                                    \"</div>\",\r\n                                \"</div>\",\r\n                            \"</div>\",\r\n                            \"<div class='sp-clear sp-clear-display'>\",\r\n                            \"</div>\",\r\n                            \"<div class='sp-hue'>\",\r\n                                \"<div class='sp-slider'></div>\",\r\n                                gradientFix,\r\n                            \"</div>\",\r\n                        \"</div>\",\r\n                        \"<div class='sp-alpha'><div class='sp-alpha-inner'><div class='sp-alpha-handle'></div></div></div>\",\r\n                    \"</div>\",\r\n                    \"<div class='sp-input-container sp-cf'>\",\r\n                        \"<input class='sp-input' type='text' spellcheck='false'  />\",\r\n                    \"</div>\",\r\n                    \"<div class='sp-initial sp-thumb sp-cf'></div>\",\r\n                    \"<div class='sp-button-container sp-cf'>\",\r\n                        \"<a class='sp-cancel' href='#'></a>\",\r\n                        \"<button type='button' class='sp-choose'></button>\",\r\n                    \"</div>\",\r\n                \"</div>\",\r\n            \"</div>\"\r\n        ].join(\"\");\r\n    })();\r\n\r\n    function paletteTemplate (p, color, className, opts) {\r\n        var html = [];\r\n        for (var i = 0; i < p.length; i++) {\r\n            var current = p[i];\r\n            if(current) {\r\n                var tiny = colors.Color(current);\r\n                var c = tiny.toHsl().l < 0.5 ? \"sp-thumb-el sp-thumb-dark\" : \"sp-thumb-el sp-thumb-light\";\r\n                c += (Color.equals(color, current)) ? \" sp-thumb-active\" : \"\";\r\n                var formattedString = tiny.toString(opts.preferredFormat || \"rgb\");\r\n                var swatchStyle = \"background-color:\" + tiny.toRgbString();\r\n                html.push('<span title=\"' + formattedString + '\" data-color=\"' + tiny.toRgbString() + '\" class=\"' + c + '\"><span class=\"sp-thumb-inner\" style=\"' + swatchStyle + ';\" /></span>');\r\n            } else {\r\n                var cls = 'sp-clear-display';\r\n                html.push($('<div />')\r\n                    .append($('<span data-color=\"\" style=\"background-color:transparent;\" class=\"' + cls + '\"></span>')\r\n                        .attr('title', opts.noColorSelectedText)\r\n                    )\r\n                    .html()\r\n                );\r\n            }\r\n        }\r\n        return \"<div class='sp-cf \" + className + \"'>\" + html.join('') + \"</div>\";\r\n    }\r\n\r\n    function hideAll() {\r\n        for (var i = 0; i < pickers.length; i++) {\r\n            if (pickers[i]) {\r\n                pickers[i].hide();\r\n            }\r\n        }\r\n    }\r\n\r\n    function instanceOptions(o, callbackContext) {\r\n        var opts = langx.mixin({}, defaultOpts, o);\r\n        opts.callbacks = {\r\n            'move': bind(opts.move, callbackContext),\r\n            'change': bind(opts.change, callbackContext),\r\n            'show': bind(opts.show, callbackContext),\r\n            'hide': bind(opts.hide, callbackContext),\r\n            'beforeShow': bind(opts.beforeShow, callbackContext)\r\n        };\r\n\r\n        return opts;\r\n    }\r\n\r\n\r\n\r\n    var ColorPicker = langx.Evented.inherit({\r\n        klassName : \"ColorPicker\",\r\n\r\n        init:function (element, o) {\r\n\r\n            var opts = instanceOptions(o, element),\r\n                flat = opts.flat,\r\n                showSelectionPalette = opts.showSelectionPalette,\r\n                localStorageKey = opts.localStorageKey,\r\n                theme = opts.theme,\r\n                callbacks = opts.callbacks,\r\n                resize = langx.debounce(reflow, 10),\r\n                visible = false,\r\n                isDragging = false,\r\n                dragWidth = 0,\r\n                dragHeight = 0,\r\n                dragHelperHeight = 0,\r\n                slideHeight = 0,\r\n                slideWidth = 0,\r\n                alphaWidth = 0,\r\n                alphaSlideHelperWidth = 0,\r\n                slideHelperHeight = 0,\r\n                currentHue = 0,\r\n                currentSaturation = 0,\r\n                currentValue = 0,\r\n                currentAlpha = 1,\r\n                palette = [],\r\n                paletteArray = [],\r\n                paletteLookup = {},\r\n                selectionPalette = opts.selectionPalette.slice(0),\r\n                maxSelectionSize = opts.maxSelectionSize,\r\n                draggingClass = \"sp-dragging\",\r\n                shiftMovementDirection = null;\r\n\r\n            var doc = element.ownerDocument,\r\n                body = doc.body,\r\n                boundElement = $(element),\r\n                disabled = false,\r\n                container = $(markup, doc).addClass(theme),\r\n                pickerContainer = container.find(\".sp-picker-container\"),\r\n                dragger = container.find(\".sp-color\"),\r\n                dragHelper = container.find(\".sp-dragger\"),\r\n                slider = container.find(\".sp-hue\"),\r\n                slideHelper = container.find(\".sp-slider\"),\r\n                alphaSliderInner = container.find(\".sp-alpha-inner\"),\r\n                alphaSlider = container.find(\".sp-alpha\"),\r\n                alphaSlideHelper = container.find(\".sp-alpha-handle\"),\r\n                textInput = container.find(\".sp-input\"),\r\n                paletteContainer = container.find(\".sp-palette\"),\r\n                initialColorContainer = container.find(\".sp-initial\"),\r\n                cancelButton = container.find(\".sp-cancel\"),\r\n                clearButton = container.find(\".sp-clear\"),\r\n                chooseButton = container.find(\".sp-choose\"),\r\n                toggleButton = container.find(\".sp-palette-toggle\"),\r\n                isInput = boundElement.is(\"input\"),\r\n                isInputTypeColor = isInput && boundElement.attr(\"type\") === \"color\" && inputTypeColorSupport(),\r\n                shouldReplace = isInput && !flat,\r\n                replacer = (shouldReplace) ? $(replaceInput).addClass(theme).addClass(opts.className).addClass(opts.replacerClassName) : $([]),\r\n                offsetElement = (shouldReplace) ? replacer : boundElement,\r\n                previewElement = replacer.find(\".sp-preview-inner\"),\r\n                initialColor = opts.color || (isInput && boundElement.val()),\r\n                colorOnShow = false,\r\n                currentPreferredFormat = opts.preferredFormat,\r\n                clickoutFiresChange = !opts.showButtons || opts.clickoutFiresChange,\r\n                isEmpty = !initialColor,\r\n                allowEmpty = opts.allowEmpty && !isInputTypeColor;\r\n\r\n            function applyOptions() {\r\n\r\n                if (opts.showPaletteOnly) {\r\n                    opts.showPalette = true;\r\n                }\r\n\r\n                toggleButton.text(opts.showPaletteOnly ? opts.togglePaletteMoreText : opts.togglePaletteLessText);\r\n\r\n                if (opts.palette) {\r\n                    palette = opts.palette.slice(0);\r\n                    paletteArray = langx.isArray(palette[0]) ? palette : [palette];\r\n                    paletteLookup = {};\r\n                    for (var i = 0; i < paletteArray.length; i++) {\r\n                        for (var j = 0; j < paletteArray[i].length; j++) {\r\n                            var rgb = Color(paletteArray[i][j]).toRgbString();\r\n                            paletteLookup[rgb] = true;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                container.toggleClass(\"sp-flat\", flat);\r\n                container.toggleClass(\"sp-input-disabled\", !opts.showInput);\r\n                container.toggleClass(\"sp-alpha-enabled\", opts.showAlpha);\r\n                container.toggleClass(\"sp-clear-enabled\", allowEmpty);\r\n                container.toggleClass(\"sp-buttons-disabled\", !opts.showButtons);\r\n                container.toggleClass(\"sp-palette-buttons-disabled\", !opts.togglePaletteOnly);\r\n                container.toggleClass(\"sp-palette-disabled\", !opts.showPalette);\r\n                container.toggleClass(\"sp-palette-only\", opts.showPaletteOnly);\r\n                container.toggleClass(\"sp-initial-disabled\", !opts.showInitial);\r\n                container.addClass(opts.className).addClass(opts.containerClassName);\r\n\r\n                reflow();\r\n            }\r\n\r\n            function initialize() {\r\n\r\n                if (browser.isIE) {\r\n                    container.find(\"*:not(input)\").attr(\"unselectable\", \"on\");\r\n                }\r\n\r\n                applyOptions();\r\n\r\n                if (shouldReplace) {\r\n                    boundElement.after(replacer).hide();\r\n                }\r\n\r\n                if (!allowEmpty) {\r\n                    clearButton.hide();\r\n                }\r\n\r\n                if (flat) {\r\n                    boundElement.after(container).hide();\r\n                }\r\n                else {\r\n\r\n                    var appendTo = opts.appendTo === \"parent\" ? boundElement.parent() : $(opts.appendTo);\r\n                    if (appendTo.length !== 1) {\r\n                        appendTo = $(\"body\");\r\n                    }\r\n\r\n                    appendTo.append(container);\r\n                }\r\n\r\n                updateSelectionPaletteFromStorage();\r\n\r\n                offsetElement.on(\"click.ColorPicker touchstart.ColorPicker\", function (e) {\r\n                    if (!disabled) {\r\n                        toggle();\r\n                    }\r\n\r\n                    e.stopPropagation();\r\n\r\n                    if (!$(e.target).is(\"input\")) {\r\n                        e.preventDefault();\r\n                    }\r\n                });\r\n\r\n                if(boundElement.is(\":disabled\") || (opts.disabled === true)) {\r\n                    disable();\r\n                }\r\n\r\n                // Prevent clicks from bubbling up to document.  This would cause it to be hidden.\r\n                container.click(stopPropagation);\r\n\r\n                // Handle user typed input\r\n                textInput.change(setFromTextInput);\r\n                textInput.on(\"paste\", function () {\r\n                    setTimeout(setFromTextInput, 1);\r\n                });\r\n                textInput.keydown(function (e) { if (e.keyCode == 13) { setFromTextInput(); } });\r\n\r\n                cancelButton.text(opts.cancelText);\r\n                cancelButton.on(\"click.ColorPicker\", function (e) {\r\n                    e.stopPropagation();\r\n                    e.preventDefault();\r\n                    revert();\r\n                    hide();\r\n                });\r\n\r\n                clearButton.attr(\"title\", opts.clearText);\r\n                clearButton.on(\"click.ColorPicker\", function (e) {\r\n                    e.stopPropagation();\r\n                    e.preventDefault();\r\n                    isEmpty = true;\r\n                    move();\r\n\r\n                    if(flat) {\r\n                        //for the flat style, this is a change event\r\n                        updateOriginalInput(true);\r\n                    }\r\n                });\r\n\r\n                chooseButton.text(opts.chooseText);\r\n                chooseButton.on(\"click.ColorPicker\", function (e) {\r\n                    e.stopPropagation();\r\n                    e.preventDefault();\r\n\r\n                    if (browser.isIE && textInput.is(\":focus\")) {\r\n                        textInput.trigger('change');\r\n                    }\r\n\r\n                    if (isValid()) {\r\n                        updateOriginalInput(true);\r\n                        hide();\r\n                    }\r\n                });\r\n\r\n                toggleButton.text(opts.showPaletteOnly ? opts.togglePaletteMoreText : opts.togglePaletteLessText);\r\n                toggleButton.on(\"click.spectrum\", function (e) {\r\n                    e.stopPropagation();\r\n                    e.preventDefault();\r\n\r\n                    opts.showPaletteOnly = !opts.showPaletteOnly;\r\n\r\n                    // To make sure the Picker area is drawn on the right, next to the\r\n                    // Palette area (and not below the palette), first move the Palette\r\n                    // to the left to make space for the picker, plus 5px extra.\r\n                    // The 'applyOptions' function puts the whole container back into place\r\n                    // and takes care of the button-text and the sp-palette-only CSS class.\r\n                    if (!opts.showPaletteOnly && !flat) {\r\n                        container.css('left', '-=' + (pickerContainer.outerWidth(true) + 5));\r\n                    }\r\n                    applyOptions();\r\n                });\r\n\r\n                draggable(alphaSlider, function (dragX, dragY, e) {\r\n                    currentAlpha = (dragX / alphaWidth);\r\n                    isEmpty = false;\r\n                    if (e.shiftKey) {\r\n                        currentAlpha = Math.round(currentAlpha * 10) / 10;\r\n                    }\r\n\r\n                    move();\r\n                }, dragStart, dragStop);\r\n\r\n                draggable(slider, function (dragX, dragY) {\r\n                    currentHue = parseFloat(dragY / slideHeight);\r\n                    isEmpty = false;\r\n                    if (!opts.showAlpha) {\r\n                        currentAlpha = 1;\r\n                    }\r\n                    move();\r\n                }, dragStart, dragStop);\r\n\r\n                draggable(dragger, function (dragX, dragY, e) {\r\n\r\n                    // shift+drag should snap the movement to either the x or y axis.\r\n                    if (!e.shiftKey) {\r\n                        shiftMovementDirection = null;\r\n                    }\r\n                    else if (!shiftMovementDirection) {\r\n                        var oldDragX = currentSaturation * dragWidth;\r\n                        var oldDragY = dragHeight - (currentValue * dragHeight);\r\n                        var furtherFromX = Math.abs(dragX - oldDragX) > Math.abs(dragY - oldDragY);\r\n\r\n                        shiftMovementDirection = furtherFromX ? \"x\" : \"y\";\r\n                    }\r\n\r\n                    var setSaturation = !shiftMovementDirection || shiftMovementDirection === \"x\";\r\n                    var setValue = !shiftMovementDirection || shiftMovementDirection === \"y\";\r\n\r\n                    if (setSaturation) {\r\n                        currentSaturation = parseFloat(dragX / dragWidth);\r\n                    }\r\n                    if (setValue) {\r\n                        currentValue = parseFloat((dragHeight - dragY) / dragHeight);\r\n                    }\r\n\r\n                    isEmpty = false;\r\n                    if (!opts.showAlpha) {\r\n                        currentAlpha = 1;\r\n                    }\r\n\r\n                    move();\r\n\r\n                }, dragStart, dragStop);\r\n\r\n                if (!!initialColor) {\r\n                    set(initialColor);\r\n\r\n                    // In case color was black - update the preview UI and set the format\r\n                    // since the set function will not run (default color is black).\r\n                    updateUI();\r\n                    currentPreferredFormat = opts.preferredFormat || Color(initialColor).format;\r\n\r\n                    addColorToSelectionPalette(initialColor);\r\n                }\r\n                else {\r\n                    updateUI();\r\n                }\r\n\r\n                if (flat) {\r\n                    show();\r\n                }\r\n\r\n                function paletteElementClick(e) {\r\n                    if (e.data && e.data.ignore) {\r\n                        set($(e.target).closest(\".sp-thumb-el\").data(\"color\"));\r\n                        move();\r\n                    }\r\n                    else {\r\n                        set($(e.target).closest(\".sp-thumb-el\").data(\"color\"));\r\n                        move();\r\n\r\n                        // If the picker is going to close immediately, a palette selection\r\n                        // is a change.  Otherwise, it's a move only.\r\n                        if (opts.hideAfterPaletteSelect) {\r\n                            updateOriginalInput(true);\r\n                            hide();\r\n                        } else {\r\n                            updateOriginalInput();\r\n                        }\r\n                    }\r\n\r\n                    return false;\r\n                }\r\n\r\n                var paletteEvent = browser.isIE ? \"mousedown.ColorPicker\" : \"click.ColorPicker touchstart.ColorPicker\";\r\n                paletteContainer.on(paletteEvent, \".sp-thumb-el\", paletteElementClick);\r\n                initialColorContainer.on(paletteEvent, \".sp-thumb-el:nth-child(1)\", { ignore: true }, paletteElementClick);\r\n            }\r\n\r\n            function updateSelectionPaletteFromStorage() {\r\n\r\n                if (localStorageKey && window.localStorage) {\r\n\r\n                    // Migrate old palettes over to new format.  May want to remove this eventually.\r\n                    try {\r\n                        var oldPalette = window.localStorage[localStorageKey].split(\",#\");\r\n                        if (oldPalette.length > 1) {\r\n                            delete window.localStorage[localStorageKey];\r\n                            langx.each(oldPalette, function(i, c) {\r\n                                 addColorToSelectionPalette(c);\r\n                            });\r\n                        }\r\n                    }\r\n                    catch(e) { }\r\n\r\n                    try {\r\n                        selectionPalette = window.localStorage[localStorageKey].split(\";\");\r\n                    }\r\n                    catch (e) { }\r\n                }\r\n            }\r\n\r\n            function addColorToSelectionPalette(color) {\r\n                if (showSelectionPalette) {\r\n                    var rgb = Color(color).toRgbString();\r\n                    if (!paletteLookup[rgb] && langx.inArray(rgb, selectionPalette) === -1) {\r\n                        selectionPalette.push(rgb);\r\n                        while(selectionPalette.length > maxSelectionSize) {\r\n                            selectionPalette.shift();\r\n                        }\r\n                    }\r\n\r\n                    if (localStorageKey && window.localStorage) {\r\n                        try {\r\n                            window.localStorage[localStorageKey] = selectionPalette.join(\";\");\r\n                        }\r\n                        catch(e) { }\r\n                    }\r\n                }\r\n            }\r\n\r\n            function getUniqueSelectionPalette() {\r\n                var unique = [];\r\n                if (opts.showPalette) {\r\n                    for (var i = 0; i < selectionPalette.length; i++) {\r\n                        var rgb = Color(selectionPalette[i]).toRgbString();\r\n\r\n                        if (!paletteLookup[rgb]) {\r\n                            unique.push(selectionPalette[i]);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                return unique.reverse().slice(0, opts.maxSelectionSize);\r\n            }\r\n\r\n            function drawPalette() {\r\n\r\n                var currentColor = get();\r\n\r\n                var html = langx.map(paletteArray, function (palette, i) {\r\n                    return paletteTemplate(palette, currentColor, \"sp-palette-row sp-palette-row-\" + i, opts);\r\n                });\r\n\r\n                updateSelectionPaletteFromStorage();\r\n\r\n                if (selectionPalette) {\r\n                    html.push(paletteTemplate(getUniqueSelectionPalette(), currentColor, \"sp-palette-row sp-palette-row-selection\", opts));\r\n                }\r\n\r\n                paletteContainer.html(html.join(\"\"));\r\n            }\r\n\r\n            function drawInitial() {\r\n                if (opts.showInitial) {\r\n                    var initial = colorOnShow;\r\n                    var current = get();\r\n                    initialColorContainer.html(paletteTemplate([initial, current], current, \"sp-palette-row-initial\", opts));\r\n                }\r\n            }\r\n\r\n            function dragStart() {\r\n                if (dragHeight <= 0 || dragWidth <= 0 || slideHeight <= 0) {\r\n                    reflow();\r\n                }\r\n                isDragging = true;\r\n                container.addClass(draggingClass);\r\n                shiftMovementDirection = null;\r\n                boundElement.trigger('dragstart.ColorPicker', [ get() ]);\r\n            }\r\n\r\n            function dragStop() {\r\n                isDragging = false;\r\n                container.removeClass(draggingClass);\r\n                boundElement.trigger('dragstop.ColorPicker', [ get() ]);\r\n            }\r\n\r\n            function setFromTextInput() {\r\n\r\n                var value = textInput.val();\r\n\r\n                if ((value === null || value === \"\") && allowEmpty) {\r\n                    set(null);\r\n                    move();\r\n                    updateOriginalInput();\r\n                }\r\n                else {\r\n                    var tiny = Color(value);\r\n                    if (tiny.isValid()) {\r\n                        set(tiny);\r\n                        move();\r\n                        updateOriginalInput();\r\n                    }\r\n                    else {\r\n                        textInput.addClass(\"sp-validation-error\");\r\n                    }\r\n                }\r\n            }\r\n\r\n            function toggle() {\r\n                if (visible) {\r\n                    hide();\r\n                }\r\n                else {\r\n                    show();\r\n                }\r\n            }\r\n\r\n            function show() {\r\n                var event = eventer.create('beforeShow.ColorPicker');\r\n\r\n                if (visible) {\r\n                    reflow();\r\n                    return;\r\n                }\r\n\r\n                boundElement.trigger(event, [ get() ]);\r\n\r\n                if (callbacks.beforeShow(get()) === false || event.isDefaultPrevented()) {\r\n                    return;\r\n                }\r\n\r\n                hideAll();\r\n                visible = true;\r\n\r\n                $(doc).on(\"keydown.ColorPicker\", onkeydown);\r\n                $(doc).on(\"click.ColorPicker\", clickout);\r\n                $(window).on(\"resize.ColorPicker\", resize);\r\n                replacer.addClass(\"sp-active\");\r\n                container.removeClass(\"sp-hidden\");\r\n\r\n                reflow();\r\n                updateUI();\r\n\r\n                colorOnShow = get();\r\n\r\n                drawInitial();\r\n                callbacks.show(colorOnShow);\r\n                boundElement.trigger('show.ColorPicker', [ colorOnShow ]);\r\n            }\r\n\r\n            function onkeydown(e) {\r\n                // Close on ESC\r\n                if (e.keyCode === 27) {\r\n                    hide();\r\n                }\r\n            }\r\n\r\n            function clickout(e) {\r\n                // Return on right click.\r\n                if (e.button == 2) { return; }\r\n\r\n                // If a drag event was happening during the mouseup, don't hide\r\n                // on click.\r\n                if (isDragging) { return; }\r\n\r\n                if (clickoutFiresChange) {\r\n                    updateOriginalInput(true);\r\n                }\r\n                else {\r\n                    revert();\r\n                }\r\n                hide();\r\n            }\r\n\r\n            function hide() {\r\n                // Return if hiding is unnecessary\r\n                if (!visible || flat) { return; }\r\n                visible = false;\r\n\r\n                $(doc).off(\"keydown.ColorPicker\", onkeydown);\r\n                $(doc).off(\"click.ColorPicker\", clickout);\r\n                $(window).off(\"resize.ColorPicker\", resize);\r\n\r\n                replacer.removeClass(\"sp-active\");\r\n                container.addClass(\"sp-hidden\");\r\n\r\n                callbacks.hide(get());\r\n                boundElement.trigger('hide.ColorPicker', [ get() ]);\r\n            }\r\n\r\n            function revert() {\r\n                set(colorOnShow, true);\r\n                updateOriginalInput(true);\r\n            }\r\n\r\n            function set(color, ignoreFormatChange) {\r\n                if (Color.equals(color, get())) {\r\n                    // Update UI just in case a validation error needs\r\n                    // to be cleared.\r\n                    updateUI();\r\n                    return;\r\n                }\r\n\r\n                var newColor, newHsv;\r\n                if (!color && allowEmpty) {\r\n                    isEmpty = true;\r\n                } else {\r\n                    isEmpty = false;\r\n                    newColor = colors.Color(color);\r\n                    newHsv = newColor.toHsv();\r\n\r\n                    currentHue = (newHsv.h % 360) / 360;\r\n                    currentSaturation = newHsv.s;\r\n                    currentValue = newHsv.v;\r\n                    currentAlpha = newHsv.a;\r\n                }\r\n                updateUI();\r\n\r\n                if (newColor && newColor.isValid() && !ignoreFormatChange) {\r\n                    currentPreferredFormat = opts.preferredFormat || newColor.getFormat();\r\n                }\r\n            }\r\n\r\n            function get(opts) {\r\n                opts = opts || { };\r\n\r\n                if (allowEmpty && isEmpty) {\r\n                    return null;\r\n                }\r\n\r\n                return Color.fromRatio({\r\n                    h: currentHue,\r\n                    s: currentSaturation,\r\n                    v: currentValue,\r\n                    a: Math.round(currentAlpha * 1000) / 1000\r\n                }, { format: opts.format || currentPreferredFormat });\r\n            }\r\n\r\n            function isValid() {\r\n                return !textInput.hasClass(\"sp-validation-error\");\r\n            }\r\n\r\n            function move() {\r\n                updateUI();\r\n\r\n                callbacks.move(get());\r\n                boundElement.trigger('move.ColorPicker', [ get() ]);\r\n            }\r\n\r\n            function updateUI() {\r\n\r\n                textInput.removeClass(\"sp-validation-error\");\r\n\r\n                updateHelperLocations();\r\n\r\n                // Update dragger background color (gradients take care of saturation and value).\r\n                var flatColor = Color.fromRatio({ h: currentHue, s: 1, v: 1 });\r\n                dragger.css(\"background-color\", flatColor.toHexString());\r\n\r\n                // Get a format that alpha will be included in (hex and names ignore alpha)\r\n                var format = currentPreferredFormat;\r\n                if (currentAlpha < 1 && !(currentAlpha === 0 && format === \"name\")) {\r\n                    if (format === \"hex\" || format === \"hex3\" || format === \"hex6\" || format === \"name\") {\r\n                        format = \"rgb\";\r\n                    }\r\n                }\r\n\r\n                var realColor = get({ format: format }),\r\n                    displayColor = '';\r\n\r\n                 //reset background info for preview element\r\n                previewElement.removeClass(\"sp-clear-display\");\r\n                previewElement.css('background-color', 'transparent');\r\n\r\n                if (!realColor && allowEmpty) {\r\n                    // Update the replaced elements background with icon indicating no color selection\r\n                    previewElement.addClass(\"sp-clear-display\");\r\n                }\r\n                else {\r\n                    var realHex = realColor.toHexString(),\r\n                        realRgb = realColor.toRgbString();\r\n\r\n                    // Update the replaced elements background color (with actual selected color)\r\n                    previewElement.css(\"background-color\", realRgb);\r\n\r\n                    if (opts.showAlpha) {\r\n                        var rgb = realColor.toRgb();\r\n                        rgb.a = 0;\r\n                        var realAlpha = Color(rgb).toRgbString();\r\n                        var gradient = \"linear-gradient(left, \" + realAlpha + \", \" + realHex + \")\";\r\n\r\n                        if (browser.isIE) {\r\n                            alphaSliderInner.css(\"filter\", Color(realAlpha).toFilter({ gradientType: 1 }, realHex));\r\n                        }\r\n                        else {\r\n                            alphaSliderInner.css(\"background\", \"-webkit-\" + gradient);\r\n                            alphaSliderInner.css(\"background\", \"-moz-\" + gradient);\r\n                            alphaSliderInner.css(\"background\", \"-ms-\" + gradient);\r\n                            // Use current syntax gradient on unprefixed property.\r\n                            alphaSliderInner.css(\"background\",\r\n                                \"linear-gradient(to right, \" + realAlpha + \", \" + realHex + \")\");\r\n                        }\r\n                    }\r\n\r\n                    displayColor = realColor.toString(format);\r\n                }\r\n\r\n                // Update the text entry input as it changes happen\r\n                if (opts.showInput) {\r\n                    textInput.val(displayColor);\r\n                }\r\n\r\n                if (opts.showPalette) {\r\n                    drawPalette();\r\n                }\r\n\r\n                drawInitial();\r\n            }\r\n\r\n            function updateHelperLocations() {\r\n                var s = currentSaturation;\r\n                var v = currentValue;\r\n\r\n                if(allowEmpty && isEmpty) {\r\n                    //if selected color is empty, hide the helpers\r\n                    alphaSlideHelper.hide();\r\n                    slideHelper.hide();\r\n                    dragHelper.hide();\r\n                }\r\n                else {\r\n                    //make sure helpers are visible\r\n                    alphaSlideHelper.show();\r\n                    slideHelper.show();\r\n                    dragHelper.show();\r\n\r\n                    // Where to show the little circle in that displays your current selected color\r\n                    var dragX = s * dragWidth;\r\n                    var dragY = dragHeight - (v * dragHeight);\r\n                    dragX = Math.max(\r\n                        -dragHelperHeight,\r\n                        Math.min(dragWidth - dragHelperHeight, dragX - dragHelperHeight)\r\n                    );\r\n                    dragY = Math.max(\r\n                        -dragHelperHeight,\r\n                        Math.min(dragHeight - dragHelperHeight, dragY - dragHelperHeight)\r\n                    );\r\n                    dragHelper.css({\r\n                        \"top\": dragY + \"px\",\r\n                        \"left\": dragX + \"px\"\r\n                    });\r\n\r\n                    var alphaX = currentAlpha * alphaWidth;\r\n                    alphaSlideHelper.css({\r\n                        \"left\": (alphaX - (alphaSlideHelperWidth / 2)) + \"px\"\r\n                    });\r\n\r\n                    // Where to show the bar that displays your current selected hue\r\n                    var slideY = (currentHue) * slideHeight;\r\n                    slideHelper.css({\r\n                        \"top\": (slideY - slideHelperHeight) + \"px\"\r\n                    });\r\n                }\r\n            }\r\n\r\n            function updateOriginalInput(fireCallback) {\r\n                var color = get(),\r\n                    displayColor = '',\r\n                    hasChanged = !Color.equals(color, colorOnShow);\r\n\r\n                if (color) {\r\n                    displayColor = color.toString(currentPreferredFormat);\r\n                    // Update the selection palette with the current color\r\n                    addColorToSelectionPalette(color);\r\n                }\r\n\r\n                if (isInput) {\r\n                    boundElement.val(displayColor);\r\n                }\r\n\r\n                if (fireCallback && hasChanged) {\r\n                    callbacks.change(color);\r\n                    boundElement.trigger('change', [ color ]);\r\n                }\r\n            }\r\n\r\n            function reflow() {\r\n                if (!visible) {\r\n                    return; // Calculations would be useless and wouldn't be reliable anyways\r\n                }\r\n                dragWidth = dragger.width();\r\n                dragHeight = dragger.height();\r\n                dragHelperHeight = dragHelper.height();\r\n                slideWidth = slider.width();\r\n                slideHeight = slider.height();\r\n                slideHelperHeight = slideHelper.height();\r\n                alphaWidth = alphaSlider.width();\r\n                alphaSlideHelperWidth = alphaSlideHelper.width();\r\n\r\n                if (!flat) {\r\n                    container.css(\"position\", \"absolute\");\r\n                    if (opts.offset) {\r\n                        container.offset(opts.offset);\r\n                    } else {\r\n                        container.offset(getOffset(container, offsetElement));\r\n                    }\r\n                }\r\n\r\n                updateHelperLocations();\r\n\r\n                if (opts.showPalette) {\r\n                    drawPalette();\r\n                }\r\n\r\n                boundElement.trigger('reflow.ColorPicker');\r\n            }\r\n\r\n            function destroy() {\r\n                boundElement.show();\r\n                offsetElement.off(\"click.ColorPicker touchstart.ColorPicker\");\r\n                container.remove();\r\n                replacer.remove();\r\n                pickers[spect.id] = null;\r\n            }\r\n\r\n            function option(optionName, optionValue) {\r\n                if (optionName === undefined) {\r\n                    return langx.mixin({}, opts);\r\n                }\r\n                if (optionValue === undefined) {\r\n                    return opts[optionName];\r\n                }\r\n\r\n                opts[optionName] = optionValue;\r\n\r\n                if (optionName === \"preferredFormat\") {\r\n                    currentPreferredFormat = opts.preferredFormat;\r\n                }\r\n                applyOptions();\r\n            }\r\n\r\n            function enable() {\r\n                disabled = false;\r\n                boundElement.attr(\"disabled\", false);\r\n                offsetElement.removeClass(\"sp-disabled\");\r\n            }\r\n\r\n            function disable() {\r\n                hide();\r\n                disabled = true;\r\n                boundElement.attr(\"disabled\", true);\r\n                offsetElement.addClass(\"sp-disabled\");\r\n            }\r\n\r\n            function setOffset(coord) {\r\n                opts.offset = coord;\r\n                reflow();\r\n            }\r\n\r\n            initialize();\r\n\r\n            var spect = {\r\n                show: show,\r\n                hide: hide,\r\n                toggle: toggle,\r\n                reflow: reflow,\r\n                option: option,\r\n                enable: enable,\r\n                disable: disable,\r\n                offset: setOffset,\r\n                set: function (c) {\r\n                    set(c);\r\n                    updateOriginalInput();\r\n                },\r\n                get: get,\r\n                destroy: destroy,\r\n                container: container\r\n            };\r\n\r\n            spect.id = pickers.push(spect) - 1;\r\n\r\n            return spect;\r\n        }\r\n    });\r\n\r\n\r\n    /**\r\n    * checkOffset - get the offset below/above and left/right element depending on screen position\r\n    * Thanks https://github.com/jquery/jquery-ui/blob/master/ui/jquery.ui.datepicker.js\r\n    */\r\n    function getOffset(picker, input) {\r\n        var extraY = 0;\r\n        var dpWidth = picker.outerWidth();\r\n        var dpHeight = picker.outerHeight();\r\n        var inputHeight = input.outerHeight();\r\n        var doc = picker[0].ownerDocument;\r\n        var docElem = doc.documentElement;\r\n        var viewWidth = docElem.clientWidth + $(doc).scrollLeft();\r\n        var viewHeight = docElem.clientHeight + $(doc).scrollTop();\r\n        var offset = input.offset();\r\n        var offsetLeft = offset.left;\r\n        var offsetTop = offset.top;\r\n\r\n        offsetTop += inputHeight;\r\n\r\n        offsetLeft -=\r\n            Math.min(offsetLeft, (offsetLeft + dpWidth > viewWidth && viewWidth > dpWidth) ?\r\n            Math.abs(offsetLeft + dpWidth - viewWidth) : 0);\r\n\r\n        offsetTop -=\r\n            Math.min(offsetTop, ((offsetTop + dpHeight > viewHeight && viewHeight > dpHeight) ?\r\n            Math.abs(dpHeight + inputHeight - extraY) : extraY));\r\n\r\n        return {\r\n            top: offsetTop,\r\n            bottom: offset.bottom,\r\n            left: offsetLeft,\r\n            right: offset.right,\r\n            width: offset.width,\r\n            height: offset.height\r\n        };\r\n    }\r\n\r\n    /**\r\n    * stopPropagation - makes the code only doing this a little easier to read in line\r\n    */\r\n    function stopPropagation(e) {\r\n        e.stopPropagation();\r\n    }\r\n\r\n    /**\r\n    * Create a function bound to a given object\r\n    * Thanks to underscore.js\r\n    */\r\n    function bind(func, obj) {\r\n        var slice = Array.prototype.slice;\r\n        var args = slice.call(arguments, 2);\r\n        return function () {\r\n            return func.apply(obj, args.concat(slice.call(arguments)));\r\n        };\r\n    }\r\n\r\n\r\n    /**\r\n    * Define a query plugin\r\n    */\r\n    var dataID = \"ColorPicker.id\";\r\n    \r\n    function Plugin(opts, extra) {\r\n\r\n        if (typeof opts == \"string\") {\r\n\r\n            var returnValue = this;\r\n            var args = Array.prototype.slice.call( arguments, 1 );\r\n\r\n            this.each(function () {\r\n                var spect = pickers[$(this).data(dataID)];\r\n                if (spect) {\r\n                    var method = spect[opts];\r\n                    if (!method) {\r\n                        throw new Error( \"skylark-ui-colorpicker: no such method: '\" + opts + \"'\" );\r\n                    }\r\n\r\n                    if (opts == \"get\") {\r\n                        returnValue = spect.get();\r\n                    }\r\n                    else if (opts == \"container\") {\r\n                        returnValue = spect.container;\r\n                    }\r\n                    else if (opts == \"option\") {\r\n                        returnValue = spect.option.apply(spect, args);\r\n                    }\r\n                    else if (opts == \"destroy\") {\r\n                        spect.destroy();\r\n                        $(this).removeData(dataID);\r\n                    }\r\n                    else {\r\n                        method.apply(spect, args);\r\n                    }\r\n                }\r\n            });\r\n\r\n            return returnValue;\r\n        }\r\n\r\n        // Initializing a new instance of ColorPicker\r\n        return this.colorPicker(\"destroy\").each(function () {\r\n            var options = langx.mixin({}, $(this).data(), opts);\r\n            var spect = ColorPicker(this, options);\r\n            $(this).data(dataID, spect.id);\r\n        });\r\n    }\r\n\r\n    ColorPicker.load = true;\r\n    ColorPicker.loadOpts = {};\r\n    ColorPicker.draggable = draggable;\r\n    ColorPicker.defaults = defaultOpts;\r\n\r\n    ColorPicker.localization = { };\r\n    ColorPicker.palettes = { };\r\n\r\n    $.fn.colorPicker = Plugin;\r\n\r\n    return skylark.attach(\"domx.ColorPicker\",ColorPicker);\r\n\r\n});\r\n\ndefine('skylark-domx-colorpicker/i18n/texts_ja',[\r\n\t\"../ColorPicker\"\r\n],function(ColorPicker) {\r\n    var localization = ColorPicker.localization[\"ja\"] = {\r\n        cancelText: \"中止\",\r\n        chooseText: \"選択\"\r\n    };\r\n\r\n    return localization;\r\n});\ndefine('skylark-domx-colorpicker/i18n/texts_zh-cn',[\r\n\t\"../ColorPicker\"\r\n],function(ColorPicker) {\r\n    var localization = ColorPicker.localization[\"zh-cn\"] = {\r\n        cancelText: \"取消\",\r\n        chooseText: \"选择\",\r\n        clearText: \"清除\",\r\n        togglePaletteMoreText: \"更多选项\",\r\n        togglePaletteLessText: \"隐藏\",\r\n        noColorSelectedText: \"尚未选择任何颜色\"\r\n    };\r\n\r\n    return localization;\r\n\r\n});\r\n\ndefine('skylark-domx-colorpicker/i18n/texts_zh-tw',[\r\n\t\"../ColorPicker\"\r\n],function(ColorPicker) {\r\n    var localization = ColorPicker.localization[\"zh-tw\"] = {\r\n        cancelText: \"取消\",\r\n        chooseText: \"選擇\",\r\n        clearText: \"清除\",\r\n        togglePaletteMoreText: \"更多選項\",\r\n        togglePaletteLessText: \"隱藏\",\r\n        noColorSelectedText: \"尚未選擇任何顏色\"\r\n    };\r\n\r\n    return localization;\r\n\r\n});\ndefine('skylark-domx-colorpicker/main',[\r\n    \"./ColorPicker\",\r\n    \"./i18n/texts_ja\",\r\n    \"./i18n/texts_zh-cn\",\r\n    \"./i18n/texts_zh-tw\"\r\n], function(ColorPicker) {\r\n    return ColorPicker;\r\n});\r\n\ndefine('skylark-domx-colorpicker', ['skylark-domx-colorpicker/main'], function (main) { return main; });\n\n"]}