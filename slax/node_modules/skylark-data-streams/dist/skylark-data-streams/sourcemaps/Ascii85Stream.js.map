{"version":3,"sources":["Ascii85Stream.js"],"names":["define","skylark","langx","streams","DecodeStream","Ascii85Stream","inherit","klassName","init","str","this","dict","input","Uint8Array","prototype","call","readBlock","tildaCode","charCodeAt","zCode","c","getByte","Lexer","isSpace","String","fromCharCode","buffer","bufferLength","ensureBuffer","i","eof","t"],"mappings":";;;;;;;AAAAA,QACI,wBACA,sBACA,YACA,kBACD,SAASC,EAASC,EAAOC,EAASC,GAEjC,IAAIC,EAAgBD,EAAaE,SAC7BC,UAAY,gBAEZC,KAAO,SAASC,GACZC,KAAKD,IAAMA,EACXC,KAAKC,KAAOF,EAAIE,KAChBD,KAAKE,MAAQ,IAAIC,WAAW,GAE5BT,EAAaU,UAAUN,KAAKO,KAAKL,OAGrCM,UAAY,WAMR,IALA,IAAIC,EAAY,IAAIC,WAAW,GAC3BC,EAAQ,IAAID,WAAW,GACvBT,EAAMC,KAAKD,IAEXW,EAAIX,EAAIY,UACLC,MAAMC,QAAQC,OAAOC,aAAaL,KACrCA,EAAIX,EAAIY,UAEZ,GAAKD,GAAKA,IAAMH,EAAhB,CAKA,IACIS,EADAC,EAAejB,KAAKiB,aAIxB,GAAIP,GAAKD,EAAO,CACZO,EAAShB,KAAKkB,aAAaD,EAAe,GAC1C,IAAK,IAAIE,EAAI,EAAGA,EAAI,IAAKA,EACrBH,EAAOC,EAAeE,GAAK,EAC/BnB,KAAKiB,cAAgB,MAClB,CACH,IAAIf,EAAQF,KAAKE,MACjBA,EAAM,GAAKQ,EACX,IAASS,EAAI,EAAGA,EAAI,IAAKA,EAAG,CAExB,IADAT,EAAIX,EAAIY,UACDC,MAAMC,QAAQC,OAAOC,aAAaL,KACrCA,EAAIX,EAAIY,UAIZ,GAFAT,EAAMiB,GAAKT,GAENA,GAAKA,GAAKH,EACX,MAMR,GAJAS,EAAShB,KAAKkB,aAAaD,EAAeE,EAAI,GAC9CnB,KAAKiB,cAAgBE,EAAI,EAGrBA,EAAI,EAAG,CACP,KAAOA,EAAI,IAAKA,EACZjB,EAAMiB,GAAK,IACfnB,KAAKoB,KAAM,EAEf,IAAIC,EAAI,EACR,IAASF,EAAI,EAAGA,EAAI,IAAKA,EACrBE,EAAQ,GAAJA,GAAUnB,EAAMiB,GAAK,IAE7B,IAASA,EAAI,EAAGA,GAAK,IAAKA,EACtBH,EAAOC,EAAeE,GAAS,IAAJE,EAC3BA,IAAM,QAzCVrB,KAAKoB,KAAM,KAiDvB,OAAO3B,EAAQE,cAAgBA","file":"../Ascii85Stream.js","sourcesContent":["define([\r\n    \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\",\r\n    \"./streams\",\r\n    \"./DecodeStream\"\r\n], function(skylark, langx, streams, DecodeStream) {\r\n\r\n    var Ascii85Stream = DecodeStream.inherit({\r\n        klassName : \"Ascii85Stream\",\r\n\r\n        init : function(str) {\r\n            this.str = str;\r\n            this.dict = str.dict;\r\n            this.input = new Uint8Array(5);\r\n\r\n            DecodeStream.prototype.init.call(this);          \r\n        },\r\n\r\n        readBlock : function() {\r\n            var tildaCode = '~'.charCodeAt(0);\r\n            var zCode = 'z'.charCodeAt(0);\r\n            var str = this.str;\r\n\r\n            var c = str.getByte();\r\n            while (Lexer.isSpace(String.fromCharCode(c)))\r\n                c = str.getByte();\r\n\r\n            if (!c || c === tildaCode) {\r\n                this.eof = true;\r\n                return;\r\n            }\r\n\r\n            var bufferLength = this.bufferLength,\r\n                buffer;\r\n\r\n            // special code for z\r\n            if (c == zCode) {\r\n                buffer = this.ensureBuffer(bufferLength + 4);\r\n                for (var i = 0; i < 4; ++i)\r\n                    buffer[bufferLength + i] = 0;\r\n                this.bufferLength += 4;\r\n            } else {\r\n                var input = this.input;\r\n                input[0] = c;\r\n                for (var i = 1; i < 5; ++i) {\r\n                    c = str.getByte();\r\n                    while (Lexer.isSpace(String.fromCharCode(c)))\r\n                        c = str.getByte();\r\n\r\n                    input[i] = c;\r\n\r\n                    if (!c || c == tildaCode)\r\n                        break;\r\n                }\r\n                buffer = this.ensureBuffer(bufferLength + i - 1);\r\n                this.bufferLength += i - 1;\r\n\r\n                // partial ending;\r\n                if (i < 5) {\r\n                    for (; i < 5; ++i)\r\n                        input[i] = 0x21 + 84;\r\n                    this.eof = true;\r\n                }\r\n                var t = 0;\r\n                for (var i = 0; i < 5; ++i)\r\n                    t = t * 85 + (input[i] - 0x21);\r\n\r\n                for (var i = 3; i >= 0; --i) {\r\n                    buffer[bufferLength + i] = t & 0xFF;\r\n                    t >>= 8;\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n    });\r\n\r\n    return streams.Ascii85Stream = Ascii85Stream;\r\n\r\n});\r\n"]}