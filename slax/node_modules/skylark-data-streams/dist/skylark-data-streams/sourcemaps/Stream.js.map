{"version":3,"sources":["Stream.js"],"names":["define","skylark","langx","streams","Stream","Evented","inherit","klassName","init","arrayBuffer","start","length","dict","this","bytes","Uint8Array","pos","end","get","getByte","getBytes","strEnd","subarray","lookChar","String","fromCharCode","getChar","skip","n","reset","moveStart","makeSubStream","buffer","isStream"],"mappings":";;;;;;;AAAAA,QACI,wBACA,sBACA,aACD,SAASC,EAASC,EAAMC,GAEvB,IAAIC,EAASF,EAAMG,QAAQC,SACvBC,UAAW,SACXC,KAAM,SAASC,EAAaC,EAAOC,EAAQC,GAC1CC,KAAKC,MAAQ,IAAIC,WAAWN,GAC5BI,KAAKH,MAAQA,GAAS,EACtBG,KAAKG,IAAMH,KAAKH,MAChBG,KAAKI,IAAOP,EAAQC,GAAWE,KAAKC,MAAMH,OAC1CE,KAAKD,KAAOA,GAIbD,QACCO,IAAM,WACF,OAAOL,KAAKI,IAAMJ,KAAKH,QAI5BS,QAAS,WACL,OAAIN,KAAKG,KAAOH,KAAKI,IACV,KACJJ,KAAKC,MAAMD,KAAKG,QAI3BI,SAAU,SAAUT,GAChB,IAAIG,EAAQD,KAAKC,MACbE,EAAMH,KAAKG,IACXK,EAASR,KAAKI,IAElB,IAAKN,EACD,OAAOG,EAAMQ,SAASN,EAAKK,GAE/B,IAAIJ,EAAMD,EAAML,EAKhB,OAJIM,EAAMI,IACNJ,EAAMI,GAEVR,KAAKG,IAAMC,EACJH,EAAMQ,SAASN,EAAKC,IAG/BM,SAAU,WACN,OAAIV,KAAKG,KAAOH,KAAKI,IACV,KACJO,OAAOC,aAAaZ,KAAKC,MAAMD,KAAKG,OAE/CU,QAAS,WACL,OAAIb,KAAKG,KAAOH,KAAKI,IACV,KACJO,OAAOC,aAAaZ,KAAKC,MAAMD,KAAKG,SAE/CW,KAAM,SAAUC,GACPA,IACDA,EAAI,GACRf,KAAKG,KAAOY,GAEhBC,MAAO,WACHhB,KAAKG,IAAMH,KAAKH,OAEpBoB,UAAW,WACPjB,KAAKH,MAAQG,KAAKG,KAEtBe,cAAe,SAAUrB,EAAOC,EAAQC,GACpC,OAAO,IAAIR,EAAOS,KAAKC,MAAMkB,OAAQtB,EAAOC,EAAQC,IAExDqB,UAAU,IAGd,OAAO9B,EAAQC,OAASA","file":"../Stream.js","sourcesContent":["define([\r\n    \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\",\r\n    \"./streams\"\r\n], function(skylark, langx,streams) {\r\n\r\n   \tvar Stream = langx.Evented.inherit({\r\n        klassName: \"Stream\",\r\n        init: function(arrayBuffer, start, length, dict) {\r\n\t        this.bytes = new Uint8Array(arrayBuffer);\r\n\t        this.start = start || 0;\r\n\t        this.pos = this.start;\r\n\t        this.end = (start + length) || this.bytes.length;\r\n\t        this.dict = dict;\r\n        },\r\n\r\n\r\n        length : {\r\n        \tget : function() {\r\n            \treturn this.end - this.start;\r\n        \t}\r\n        },\r\n\r\n        getByte: function () {\r\n            if (this.pos >= this.end)\r\n                return null;\r\n            return this.bytes[this.pos++];\r\n        },\r\n        // returns subarray of original buffer\r\n        // should only be read\r\n        getBytes: function (length) {\r\n            var bytes = this.bytes;\r\n            var pos = this.pos;\r\n            var strEnd = this.end;\r\n\r\n            if (!length)\r\n                return bytes.subarray(pos, strEnd);\r\n\r\n            var end = pos + length;\r\n            if (end > strEnd)\r\n                end = strEnd;\r\n\r\n            this.pos = end;\r\n            return bytes.subarray(pos, end);\r\n        },\r\n\r\n        lookChar: function () {\r\n            if (this.pos >= this.end)\r\n                return null;\r\n            return String.fromCharCode(this.bytes[this.pos]);\r\n        },\r\n        getChar: function () {\r\n            if (this.pos >= this.end)\r\n                return null;\r\n            return String.fromCharCode(this.bytes[this.pos++]);\r\n        },\r\n        skip: function (n) {\r\n            if (!n)\r\n                n = 1;\r\n            this.pos += n;\r\n        },\r\n        reset: function () {\r\n            this.pos = this.start;\r\n        },\r\n        moveStart: function () {\r\n            this.start = this.pos;\r\n        },\r\n        makeSubStream: function (start, length, dict) {\r\n            return new Stream(this.bytes.buffer, start, length, dict);\r\n        },\r\n        isStream: true\r\n    });\r\n    \r\n    return streams.Stream = Stream;\r\n\t\r\n});\r\n"]}