{"version":3,"sources":["DecodeStream.js"],"names":["define","skylark","langx","streams","Stream","DecodeStream","inherit","klassName","init","this","pos","bufferLength","eof","buffer","ensureBuffer","requested","current","byteLength","size","buffer2","Uint8Array","i","getByte","readBlock","getBytes","length","end","bufEnd","subarray","lookChar","String","fromCharCode","getChar","makeSubStream","start","dict","skip","n","reset"],"mappings":";;;;;;;AAAAA,QACI,wBACA,sBACA,YACA,YACD,SAASC,EAASC,EAAOC,EAASC,GAEjC,IAAIC,EAAeD,EAAOE,SACtBC,UAAY,eAEZC,KAAO,WACHC,KAAKC,IAAM,EACXD,KAAKE,aAAe,EACpBF,KAAKG,KAAM,EACXH,KAAKI,OAAS,MAGlBC,aAAc,SAASC,GACnB,IAAIF,EAASJ,KAAKI,OACdG,EAAUH,EAASA,EAAOI,WAAa,EAC3C,GAAIF,EAAYC,EACZ,OAAOH,EAEX,IADA,IAAIK,EAAO,IACJA,EAAOH,GACVG,IAAS,EAEb,IADA,IAAIC,EAAU,IAAIC,WAAWF,GACpBG,EAAI,EAAGA,EAAIL,IAAWK,EAC3BF,EAAQE,GAAKR,EAAOQ,GACxB,OAAQZ,KAAKI,OAASM,GAE1BG,QAAS,WAEL,IADA,IAAIZ,EAAMD,KAAKC,IACRD,KAAKE,cAAgBD,GAAK,CAC7B,GAAID,KAAKG,IACL,OAAO,KACXH,KAAKc,YAET,OAAOd,KAAKI,OAAOJ,KAAKC,QAE5Bc,SAAU,SAASC,GACf,IAAIC,EAAKhB,EAAMD,KAAKC,IAEpB,GAAIe,EAAQ,CAIR,IAHAhB,KAAKK,aAAaJ,EAAMe,GACxBC,EAAMhB,EAAMe,GAEJhB,KAAKG,KAAOH,KAAKE,aAAee,GACpCjB,KAAKc,YAET,IAAII,EAASlB,KAAKE,aACde,EAAMC,IACND,EAAMC,OACP,CACH,MAAQlB,KAAKG,KACTH,KAAKc,aAETG,EAAMjB,KAAKE,gBAKPF,KAAKI,OAAS,IAAIO,WAAW,IAIrC,OADAX,KAAKC,IAAMgB,EACJjB,KAAKI,OAAOe,SAASlB,EAAKgB,IAErCG,SAAU,WAEN,IADA,IAAInB,EAAMD,KAAKC,IACRD,KAAKE,cAAgBD,GAAK,CAC7B,GAAID,KAAKG,IACL,OAAO,KACXH,KAAKc,YAET,OAAOO,OAAOC,aAAatB,KAAKI,OAAOJ,KAAKC,OAEhDsB,QAAS,WAEL,IADA,IAAItB,EAAMD,KAAKC,IACRD,KAAKE,cAAgBD,GAAK,CAC7B,GAAID,KAAKG,IACL,OAAO,KACXH,KAAKc,YAET,OAAOO,OAAOC,aAAatB,KAAKI,OAAOJ,KAAKC,SAEhDuB,cAAe,SAAUC,EAAOT,EAAQU,GAEpC,IADA,IAAIT,EAAMQ,EAAQT,EACXhB,KAAKE,cAAgBe,IAAQjB,KAAKG,KACrCH,KAAKc,YACT,OAAO,IAAInB,EAAOK,KAAKI,OAAQqB,EAAOT,EAAQU,IAElDC,KAAM,SAAUC,GACPA,IACDA,EAAI,GACR5B,KAAKC,KAAO2B,GAEhBC,MAAO,WACH7B,KAAKC,IAAM,KAKnB,OAAOP,EAAQE,aAAeA","file":"../DecodeStream.js","sourcesContent":["define([\r\n    \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\",\r\n    \"./streams\",\r\n    \"./Stream\"\r\n], function(skylark, langx, streams, Stream) {\r\n\r\n    var DecodeStream = Stream.inherit({\r\n        klassName : \"DecodeStream\",\r\n\r\n        init : function() {\r\n            this.pos = 0;\r\n            this.bufferLength = 0;\r\n            this.eof = false;\r\n            this.buffer = null;     \r\n        },\r\n\r\n        ensureBuffer: function(requested) {\r\n            var buffer = this.buffer;\r\n            var current = buffer ? buffer.byteLength : 0;\r\n            if (requested < current)\r\n                return buffer;\r\n            var size = 512;\r\n            while (size < requested)\r\n                size <<= 1;\r\n            var buffer2 = new Uint8Array(size);\r\n            for (var i = 0; i < current; ++i)\r\n                buffer2[i] = buffer[i];\r\n            return (this.buffer = buffer2);\r\n        },\r\n        getByte: function () {\r\n            var pos = this.pos;\r\n            while (this.bufferLength <= pos) {\r\n                if (this.eof)\r\n                    return null;\r\n                this.readBlock();\r\n            }\r\n            return this.buffer[this.pos++];\r\n        },\r\n        getBytes: function(length) {\r\n            var end, pos = this.pos;\r\n\r\n            if (length) {\r\n                this.ensureBuffer(pos + length);\r\n                end = pos + length;\r\n\r\n                while (!this.eof && this.bufferLength < end)\r\n                    this.readBlock();\r\n\r\n                var bufEnd = this.bufferLength;\r\n                if (end > bufEnd)\r\n                    end = bufEnd;\r\n            } else {\r\n                while (!this.eof)\r\n                    this.readBlock();\r\n\r\n                end = this.bufferLength;\r\n\r\n                // checking if bufferLength is still 0 then\r\n                // the buffer has to be initialized\r\n                if (!end)\r\n                    this.buffer = new Uint8Array(0);\r\n            }\r\n\r\n            this.pos = end;\r\n            return this.buffer.subarray(pos, end);\r\n        },\r\n        lookChar: function() {\r\n            var pos = this.pos;\r\n            while (this.bufferLength <= pos) {\r\n                if (this.eof)\r\n                    return null;\r\n                this.readBlock();\r\n            }\r\n            return String.fromCharCode(this.buffer[this.pos]);\r\n        },\r\n        getChar: function () {\r\n            var pos = this.pos;\r\n            while (this.bufferLength <= pos) {\r\n                if (this.eof)\r\n                    return null;\r\n                this.readBlock();\r\n            }\r\n            return String.fromCharCode(this.buffer[this.pos++]);\r\n        },\r\n        makeSubStream: function (start, length, dict) {\r\n            var end = start + length;\r\n            while (this.bufferLength <= end && !this.eof)\r\n                this.readBlock();\r\n            return new Stream(this.buffer, start, length, dict);\r\n        },\r\n        skip: function (n) {\r\n            if (!n)\r\n                n = 1;\r\n            this.pos += n;\r\n        },\r\n        reset: function () {\r\n            this.pos = 0;\r\n        }\r\n\r\n    });\r\n\r\n    return streams.DecodeStream = DecodeStream;\r\n\r\n});\r\n"]}