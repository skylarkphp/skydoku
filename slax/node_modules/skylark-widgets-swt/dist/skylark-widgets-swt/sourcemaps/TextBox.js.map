{"version":3,"sources":["TextBox.js"],"names":["define","langx","browser","eventer","noder","geom","$","swt","Widget","TextBox","inherit","klassName","pluginName","_parse","velm","this","_velm","options","multiline","is","value","$chk","prop","disabled","state","set","_create","tagName","attrs","each","name","subtype","type","_elm","_dom","createElement","_init","_sync","self","on","evt","_refresh","updates","undefined","e","disable","overrided","changed"],"mappings":";;;;;;;AAAAA,QACE,sBACA,uBACA,uBACA,qBACA,oBACA,qBACA,QACA,YACA,SAASC,EAAMC,EAAQC,EAAQC,EAAMC,EAAKC,EAAEC,EAAIC,GA4FjD,OArFeD,EAAIE,QAAUD,EAAOE,SACnCC,UAAW,UAETC,WAAY,eAMZC,OAAS,WACP,IAAKC,EAAOC,KAAKC,MAGjBD,KAAKE,QAAQC,UAAYJ,EAAKK,GAAG,YAGjC,IAAIC,EAAQC,KAAKC,KAAK,WAClBC,EAAWF,KAAKC,KAAK,YACzBP,KAAKS,MAAMC,IAAI,QAAQL,GACvBL,KAAKS,MAAMC,IAAgBF,IAQ7BG,QAAU,WACR,IAAIC,EAAU,QAAQC,KAClBX,EAAUF,KAAKE,QAEnBhB,EAAM4B,MACJ,OAAQ,aAAc,YAAa,OAAQ,WAAY,MACvD,MAAO,OAAQ,OAAQ,UAAW,cAAe,WAAY,YAC5D,SAAUC,GACXF,EAAME,GAAQb,EAAQa,KAGpBb,EAAQC,YACVS,EAAU,YAERV,EAAQc,UACVH,EAAMI,KAAOf,EAAQc,SAEvBhB,KAAKkB,KAAOlB,KAAKmB,KAAK9B,MAAM+B,cAAcR,EAAQC,IAOpDQ,MAAQ,aAORC,MAAQ,WAEN,IAAIC,EAAOvB,KACXA,KAAKC,MAAMuB,GAAG,SAAU,SAASC,GAC/B,IAAIpB,EAAQkB,EAAKtB,MAAMM,KAAK,SAC5BgB,EAAKd,MAAMC,IAAI,QAAQL,MAI3BqB,SAAW,SAASC,QAGSC,IAArBD,EAAe,OAFP3B,KAGDC,MAAMI,UAAYwB,EAAExB,OAHnBL,KAIHC,MAAMI,MAAMsB,EAAQtB,YAGDuB,IAAxBD,EAAkB,UAPV3B,KAQLC,MAAM6B,QAAQH,EAAkB,UAIvC3B,KAAK+B,UAAUC","file":"../TextBox.js","sourcesContent":["define([\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-browser\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-geom\",\r\n  \"skylark-domx-query\",\r\n  \"./swt\",\r\n  \"./Widget\"\r\n],function(langx,browser,eventer,noder,geom,$,swt,Widget){\r\n\r\n  var SyncAttrs = [\r\n    'rows', 'spellcheck', 'maxLength', 'size', 'readonly', 'min',\r\n    'max', 'step', 'list', 'pattern', 'placeholder', 'required', 'multiple'\r\n  ];\r\n\r\n\tvar TextBox =  swt.TextBox = Widget.inherit({\r\n\t\tklassName: \"TextBox\",\r\n\r\n    pluginName: \"lark.textbox\",\r\n\r\n    /*\r\n     * Parse options from attached dom element.\r\n     * @override\r\n     */\r\n    _parse : function() {\r\n      var  velm = this._velm;\r\n\r\n      // get multiline option\r\n      this.options.multiline = velm.is(\"textarea\");\r\n      \r\n      // get current state of input\r\n      var value = $chk.prop('checked');\r\n      var disabled = $chk.prop('disabled');\r\n      this.state.set(\"value\",value);\r\n      this.state.set((\"disabled\",disabled));\r\n\r\n    },\r\n\r\n    /*\r\n     * Create a new  dom element for this widget\r\n     * @override\r\n     */\r\n    _create : function() {\r\n      var tagName = \"input\",attrs = {},\r\n          options = this.options;\r\n\r\n      langx.each([\r\n        'rows', 'spellcheck', 'maxLength', 'size', 'readonly', 'min',\r\n        'max', 'step', 'list', 'pattern', 'placeholder', 'required', 'multiple'\r\n      ], function (name) {\r\n        attrs[name] = options[name];\r\n      });\r\n\r\n      if (options.multiline) {\r\n        tagName = \"textarea\"\r\n      } \r\n      if (options.subtype) {\r\n        attrs.type = options.subtype;\r\n      }\r\n      this._elm = this._dom.noder.createElement(tagName,attrs);\r\n    },\r\n\r\n    /*\r\n     * Init this widget\r\n     * @override\r\n     */\r\n    _init : function() {\r\n    },\r\n\r\n    /*\r\n     * Sync dom element to widget state \r\n     * @override\r\n     */\r\n    _sync : function() {\r\n      // handle internal events\r\n      var self = this;\r\n      this._velm.on('change', function(evt) {\r\n        var value = self._velm.prop('value');\r\n        self.state.set(\"value\",value);\r\n      });\r\n    },\r\n\r\n    _refresh : function(updates) {\r\n        var self  = this;\r\n\r\n        if (updates[\"value\"] !== undefined) {\r\n          if (self._velm.value() !== e.value) {\r\n            self._velm.value(updates.value);\r\n          }\r\n        }\r\n        if (updates[\"disabled\"] !== undefined) {\r\n          self._velm.disable(updates[\"disabled\"]);\r\n        }\r\n\r\n        // update visual with attribute values from control\r\n        this.overrided(changed);\r\n    },\r\n\r\n  });\r\n\r\n\treturn TextBox;\r\n});\r\n\r\n\r\n"]}