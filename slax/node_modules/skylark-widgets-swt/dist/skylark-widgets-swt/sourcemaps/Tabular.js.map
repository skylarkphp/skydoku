{"version":3,"sources":["Tabular.js"],"names":["define","langx","browser","eventer","noder","geom","$","swt","Widget","Tabular","inherit","klassName","pluginName","options","buttonClasses","append","removeLast","insert","remove","moveUp","moveDown","rowDrag","sectionClasses","caption","header","body","subPanel","footer","hideButtons","_showEmptyMessage","settings","skipWidthCalculation","tbWrap","this","_tbWrap","$emptyCell","text","_i18n","rowEmpty","attr","_finalColSpan","addClass","_calculateColumnWidth","$tbWhole","$scroller","data","tbHeadRow","tbColGp","_rowOrder","length","width","tbBodyRow","marginThreshold","fn","modal","colLimit","Math","min","childNodes","z","headCellWidth","clientWidth","bodyCellWidth","style","offsetWidth","_createGridButton","param","uiIcon","genButton","isFunction","nodeType","clone","icon","label","type","plugin","showLabel","_sortSequence","startIndex","tbWhole","_elm","hideRowNumColumn","idPrefix","_emptyGrid","empty","_uniqueIndex","_saveSetting","_gridRowDragged","isMoveUp","uniqueIndex","tbRowIndex","splice","afterRowDragged","val","join","_checkGridAndGetSettings","noMsg","$grid","alert","_systemMessages","notInit","getValueMultiGrid","_insertRow","numOfRowOrRowArray","rowIndex","callerUniqueIndex","ctrl","tbRow","tbCell","self","addedRows","parentIndex","hidden","tbBody","getElementsByTagName","tbSubRow","reachMaxRow","oldHeight","oldScroll","numOfRow","loadData","isArray","isNumeric","maintainScroll","height","scrollParent","scrollTop","maxRowsAllowed","useSubPanel","insertBefore","document","createElement","push","appendChild","id","_sectionClasses","className","rowSpan","y","columns","invisible","name","cellCss","css","ctrlName","ctrlId","nameFormatter","customBuilder","ctrlOptions","isPlainObject","lastGroupName","lastGroupElem","x","isEmpty","group","option","value","title","appendTo","Option","arrayOpt","split","eqIndex","indexOf","substring","selectmenu","uiOption","textAlign","search","err","datepicker","spinner","autocomplete","ctrlAttr","ctrlProp","prop","ctrlCss","ctrlClass","uiTooltip","tooltip","onClick","click","caller","callback","evt","appendGrid","onChange","change","getRowIndex","setCtrlValue","_hideLastColumn","_visibleCount","rowButtonsInFront","firstChild","display","button","customGridButtons","tabindex","rowUniqueIndex","insertRow","preventDefault","_buttonClasses","_removeRow","moveUpRow","moveDownRow","rowDragging","customRowButtons","buttonCfg","uiButton","atTheFront","prepend","makeCustomRowButton","colSpan","subPanelBuilder","afterRowInserted","afterRowAppended","maxNumRowsReached","newHeight","force","beforeRowRemove","removeChild","afterRowRemoved","pop","lastChild","_loadData","records","isInit","insertResult","r","c","rowDataLoaded","_isDataLoaded","initData","dataLoaded","_init","noColumnInfo","tbHead","tbFoot","tagName","elemNotTable","tbHeadCellRowNum","tbHeadCellRowButton","extend","_defaultInitOptions","_defaultCallbackContainer","_wrapperId","_calculateWidth","i18n","_defaultTextResources","_defaultButtonClasses","_defaultSectionClasses","_defaultHideButtons","Date","getTime","insertAfter","pendingSkipCol","columnOpt","_defaultColumnOptions","resizable","displayCss","headerSpan","displayTooltip","handles","childnodes","captionTooltip","customFooterButtons","makeCustomBottomButton","sortable","axis","containment","handle","helper","e","tr","org","children","each","index","eq","helperSelect","orgSelect","find","update","event","ui","item","lastIndexOf","originalPosition","top","position","appendRow","initRows","isReady","isDataLoaded","load","insertUniqueIndex","focus","removeRow","emptyGrid","target","trTarget","trSwap","trAdtTarget","swapSeq","oldIndex","findRowIndex","getElementById","html","removeClass","blur","afterRowSwapped","trAdtSwap","showColumn","colIndex","hideColumn","isColumnInvisible","getRowCount","getUniqueIndex","getRowValue","loopIndex","result","getAllValue","objectMode","rowValue","rowCountName","getCtrlValue","getCellCtrl","getCellCtrlByUniqueIndex","getRowOrder","slice","getColumns","isRowEmpty","removeEmptyRows","maxBodyHeight","autoColumnWidth","subPanelGetter","emptyCriteria","customGetter","customSetter","notSupportMethod","exButton","btnClass","btnCss","btnAttr","rowData","suffix","adtData","newData","key","columnName","checked","element","currentValue","defaultValue"],"mappings":"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","file":"../Tabular.js","sourcesContent":["define([\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-browser\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-geom\",\r\n  \"skylark-domx-query\",\r\n  \"./swt\",\r\n  \"./Widget\"\r\n],function(langx,browser,eventer,noder,geom,$,swt,Widget){\r\n\r\n    var Tabular = Widget.inherit({\r\n        klassName : \"Tabular\",\r\n\r\n        pluginName : \"lark.tabular\",\r\n\r\n        options : {\r\n            buttonClasses : { \r\n                append: null, \r\n                removeLast: null, \r\n                insert: null, \r\n                remove: null, \r\n                moveUp: null, \r\n                moveDown: null, \r\n                rowDrag: null \r\n            },\r\n            sectionClasses : { \r\n                caption: null, \r\n                header: null, \r\n                body: null, \r\n                subPanel: null, \r\n                footer: null \r\n            },\r\n            hideButtons : { \r\n                append: false, \r\n                removeLast: false, \r\n                insert: false, \r\n                remove: false, \r\n                moveUp: false, \r\n                moveDown: false \r\n            }\r\n\r\n        },\r\n\r\n        _showEmptyMessage : function (settings, skipWidthCalculation) {\r\n            var tbWrap = this._tbWrap;\r\n\r\n            var $emptyCell = $('<td></td>').text(settings._i18n.rowEmpty).attr('colspan', settings._finalColSpan);\r\n            $('table.body tbody', tbWrap).append($('<tr></tr>').addClass('empty').append($emptyCell));\r\n\r\n            /*\r\n            if (!skipWidthCalculation && settings.maxBodyHeight > 0) {\r\n                // Check scrolling enabled\r\n                if (settings.autoColumnWidth) {\r\n                    this._calculateColumnWidth();\r\n                } else {\r\n                    // Set the width of empty message cell to the thead width\r\n                    $emptyCell.width($('table.head', tbWrap).width() - 4);\r\n                }\r\n            }\r\n            */\r\n        },  \r\n\r\n        _calculateColumnWidth : function () {\r\n            var tbWrap = this._tbWrap;\r\n\r\n            var $tbWhole = $('table.body', tbWrap);\r\n            var $scroller = $('div.scroller', tbWrap);\r\n            var settings = $tbWhole.data('appendGrid');\r\n            var tbHeadRow = $('table.head tr.columnHead', tbWrap)[0];\r\n            var tbColGp = $('table.body colgroup', tbWrap)[0];\r\n            // Check any rows within the grid\r\n            if (settings._rowOrder.length > 0) {\r\n                // Reset the table/column width\r\n                $('td', tbHeadRow).width('auto');\r\n                $('col', tbColGp).width('auto');\r\n                $tbWhole.width('auto');\r\n                $scroller.width('auto');\r\n                // Check the total number of columns\r\n                var tbBodyRow = $('tbody tr', $tbWhole)[0];\r\n                var marginThreshold = -2;\r\n                if ($.fn.modal) {\r\n                    // If bootstrap is loaded, cell margin was reset\r\n                    marginThreshold = 1;\r\n                }\r\n                var colLimit = Math.min(tbHeadRow.childNodes.length, tbBodyRow.childNodes.length);\r\n                for (var z = 0; z < colLimit; z++) {\r\n                    var headCellWidth = tbHeadRow.childNodes[z].clientWidth + 1;\r\n                    var bodyCellWidth = tbBodyRow.childNodes[z].clientWidth + marginThreshold;\r\n                    if (bodyCellWidth > headCellWidth) {\r\n                        tbHeadRow.childNodes[z].style.width = bodyCellWidth + 'px';\r\n                    } else {\r\n                        tbColGp.childNodes[z].style.width = headCellWidth + 'px';\r\n                    }\r\n                }\r\n            } else {\r\n                $('table.body,table.foot', tbWrap).width($('table.head').width());\r\n            }\r\n            // Set the width of footer row\r\n            $('table.foot', tbWrap).width($tbWhole.width());\r\n            // Check the scroll panel width\r\n            $scroller.width($tbWhole.width() + $scroller[0].offsetWidth - $scroller[0].clientWidth + 1);\r\n        },\r\n\r\n\r\n        _createGridButton : function (param, uiIcon) {\r\n            // Generate the standard grid action button based on its parameter.\r\n            var genButton = null;\r\n            if (param) {\r\n                if (langx.isFunction(param)) {\r\n                    // Generate button if it is a function.\r\n                    genButton = $(param());\r\n                } else if (param.nodeType) {\r\n                    // Clone the button if it is a DOM element.\r\n                    genButton = $(param).clone();\r\n                } else if (param.icon || param.label) {\r\n                    // Generate jQuery UI Button if it is a plain object with `icon` or `label` property.\r\n                    genButton = $('<button/>').attr({ type: 'button' });\r\n                    genButton.plugin(\"lark.button\",param);\r\n                }\r\n            }\r\n            if (!genButton) {\r\n                // Use default setting (jQuery UI Button) if button is not created.\r\n                genButton = $('<button/>').attr({ type: 'button' });\r\n                genButton.plugin(\"lark.button\",{ icon: uiIcon, showLabel: false });\r\n            }\r\n            return genButton;\r\n        },\r\n\r\n        _sortSequence : function (startIndex) {\r\n            var tbWhole = this._elm;\r\n            var settings = $(tbWhole).data('appendGrid');\r\n            if (!settings.hideRowNumColumn) {\r\n                for (var z = startIndex; z < settings._rowOrder.length; z++) {\r\n                    $('#' + settings.idPrefix + '_Row_' + settings._rowOrder[z] + ' td.first', tbWhole).text(z + 1);\r\n                }\r\n            }\r\n        },\r\n\r\n        _emptyGrid : function () {\r\n            var tbWhole = this._elm;\r\n\r\n            // Load settings\r\n            var settings = $(tbWhole).data('appendGrid');\r\n            // Remove rows\r\n            $('tbody', tbWhole).empty();\r\n            settings._rowOrder.length = 0;\r\n            settings._uniqueIndex = 0;\r\n            // Save setting\r\n            this._saveSetting(settings);\r\n            // Add empty row\r\n            this._showEmptyMessage(settings);\r\n        },        \r\n\r\n        _gridRowDragged : function (isMoveUp, uniqueIndex, tbRowIndex) {\r\n            var tbWhole = this._elm;\r\n\r\n            // Get setting\r\n            var settings = $(tbWhole).data('appendGrid');\r\n            // Find the start sorting index\r\n            var startIndex = -1;\r\n            for (var z = 0; z < settings._rowOrder.length; z++) {\r\n                if (settings._rowOrder[z] == uniqueIndex) {\r\n                    if (isMoveUp) {\r\n                        startIndex = tbRowIndex;\r\n                        settings._rowOrder.splice(z, 1);\r\n                        settings._rowOrder.splice(tbRowIndex, 0, uniqueIndex);\r\n                    } else {\r\n                        startIndex = z;\r\n                        settings._rowOrder.splice(tbRowIndex + 1, 0, uniqueIndex);\r\n                        settings._rowOrder.splice(z, 1);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n            // Do re-order\r\n            this._sortSequence( startIndex);\r\n            // Save setting\r\n            this._saveSetting(settings);\r\n\r\n            // Trigger event\r\n            if (langx.isFunction(settings.afterRowDragged)) {\r\n                settings.afterRowDragged(tbWhole, tbRowIndex, uniqueIndex);\r\n            }\r\n        },\r\n\r\n       _saveSetting : function (settings) {\r\n            var tbWhole = this._elm;\r\n\r\n            $(tbWhole).data('appendGrid', settings);\r\n            $('#' + settings.idPrefix + '_rowOrder', tbWhole).val(settings._rowOrder.join());\r\n        },\r\n\r\n\r\n        _checkGridAndGetSettings : function (noMsg) {\r\n            // Check the jQuery grid object is initialized and return its settings\r\n\r\n            var settings = null,\r\n                $grid = $(this._elm);\r\n\r\n            if ($grid.length == 1) {\r\n                settings = $grid.data('appendGrid');\r\n                if (!settings && !noMsg) {\r\n                    alert(_systemMessages.notInit);\r\n                }\r\n            } else if (!noMsg) {\r\n                alert(_systemMessages.getValueMultiGrid);\r\n            }\r\n            return settings;\r\n        },\r\n\r\n        _insertRow : function (numOfRowOrRowArray, rowIndex, callerUniqueIndex) {\r\n            // Define variables\r\n            var self = this,\r\n                tbWhole = this._elm;\r\n            var settings = $(tbWhole).data('appendGrid');\r\n            var addedRows = [], parentIndex = null, uniqueIndex, ctrl, hidden = [];\r\n            var tbHead = tbWhole.getElementsByTagName('thead')[0];\r\n            var tbBody = tbWhole.getElementsByTagName('tbody')[0];\r\n            var tbRow, tbSubRow = null, tbCell, reachMaxRow = false, calColWidth = false;\r\n            var oldHeight = 0, oldScroll = 0;\r\n            /*\r\n            if (settings.maxBodyHeight > 0) {\r\n                tbHead = $('#' + settings._wrapperId + ' table thead')[0];\r\n            }\r\n            */\r\n            // Check number of row to be inserted\r\n            var numOfRow = numOfRowOrRowArray, loadData = false;\r\n            if (langx.isArray(numOfRowOrRowArray)) {\r\n                numOfRow = numOfRowOrRowArray.length;\r\n                loadData = true;\r\n            }\r\n            // Check parent row\r\n            if (langx.isNumeric(callerUniqueIndex)) {\r\n                for (var z = 0; z < settings._rowOrder.length; z++) {\r\n                    if (settings._rowOrder[z] == callerUniqueIndex) {\r\n                        rowIndex = z;\r\n                        if (z != 0) parentIndex = z - 1;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            else if (langx.isNumeric(rowIndex)) {\r\n                if (rowIndex >= settings._rowOrder.length) {\r\n                    rowIndex = null;\r\n                } else {\r\n                    parentIndex = rowIndex - 1;\r\n                }\r\n            }\r\n            else if (settings._rowOrder.length != 0) {\r\n                rowIndex = null;\r\n                parentIndex = settings._rowOrder.length - 1;\r\n            }\r\n            // Store old grid height\r\n            if (settings.maintainScroll && !langx.isNumeric(rowIndex)) {\r\n                oldHeight = $(tbWhole).height();\r\n                oldScroll = $(tbWhole).scrollParent().scrollTop();\r\n            }\r\n            // Remove empty row\r\n            if (settings._rowOrder.length == 0) {\r\n                $('tr.empty', tbWhole).remove();\r\n                calColWidth = true;\r\n            }\r\n            // Add total number of row\r\n            for (var z = 0; z < numOfRow; z++) {\r\n                // Check maximum number of rows\r\n                if (0 < settings.maxRowsAllowed && settings._rowOrder.length >= settings.maxRowsAllowed) {\r\n                    reachMaxRow = true;\r\n                    break;\r\n                }\r\n                // Update variables\r\n                settings._uniqueIndex++;\r\n                uniqueIndex = settings._uniqueIndex;\r\n                hidden.length = 0;\r\n                // Check row insert index\r\n                if (langx.isNumeric(rowIndex)) {\r\n                    settings._rowOrder.splice(rowIndex, 0, uniqueIndex);\r\n                    if (settings.useSubPanel) {\r\n                        tbBody.insertBefore(tbSubRow = document.createElement('tr'), tbBody.childNodes[rowIndex * 2]);\r\n                        tbBody.insertBefore(tbRow = document.createElement('tr'), tbBody.childNodes[rowIndex * 2]);\r\n                    } else {\r\n                        tbBody.insertBefore(tbRow = document.createElement('tr'), tbBody.childNodes[rowIndex]);\r\n                    }\r\n                    addedRows.push(rowIndex);\r\n                }\r\n                else {\r\n                    settings._rowOrder.push(uniqueIndex);\r\n                    tbBody.appendChild(tbRow = document.createElement('tr'));\r\n                    if (settings.useSubPanel) {\r\n                        tbBody.appendChild(tbSubRow = document.createElement('tr'));\r\n                    }\r\n                    addedRows.push(settings._rowOrder.length - 1);\r\n                }\r\n                tbRow.id = settings.idPrefix + '_Row_' + uniqueIndex;\r\n                if (settings._sectionClasses.body) {\r\n                    tbRow.className = settings._sectionClasses.body;\r\n                }\r\n                $(tbRow).data('appendGrid', uniqueIndex);\r\n                // Config on the sub panel row\r\n                if (tbSubRow != null) {\r\n                    tbSubRow.id = settings.idPrefix + '_SubRow_' + uniqueIndex;\r\n                    $(tbSubRow).data('appendGrid', uniqueIndex);\r\n                    if (settings._sectionClasses.subPanel) {\r\n                        tbSubRow.className = settings._sectionClasses.subPanel;\r\n                    }\r\n                }\r\n                // Add row number\r\n                if (!settings.hideRowNumColumn) {\r\n                    tbRow.appendChild(tbCell = document.createElement('td'));\r\n                    $(tbCell).addClass('ui-widget-content first').text(settings._rowOrder.length);\r\n                    if (settings.useSubPanel) tbCell.rowSpan = 2;\r\n                }\r\n                // Process on each columns\r\n                for (var y = 0; y < settings.columns.length; y++) {\r\n                    // Skip hidden\r\n                    if (settings.columns[y].type == 'hidden') {\r\n                        hidden.push(y);\r\n                        continue;\r\n                    }\r\n                    // Check column invisble\r\n                    var className = 'ui-widget-content';\r\n                    if (settings.columns[y].invisible) className += ' invisible';\r\n                    // Insert cell\r\n                    tbRow.appendChild(tbCell = document.createElement('td'));\r\n                    tbCell.id = settings.idPrefix + '_' + settings.columns[y].name + '_td_' + uniqueIndex;\r\n                    tbCell.className = className;\r\n                    if (settings.columns[y].cellCss != null) $(tbCell).css(settings.columns[y].cellCss);\r\n                    // Prepare control id and name\r\n                    var ctrlId = settings.idPrefix + '_' + settings.columns[y].name + '_' + uniqueIndex, ctrlName;\r\n                    if (langx.isFunction(settings.nameFormatter)) {\r\n                        ctrlName = settings.nameFormatter(settings.idPrefix, settings.columns[y].name, uniqueIndex);\r\n                    } else {\r\n                        ctrlName = ctrlId;\r\n                    }\r\n                    // Check control type\r\n                    ctrl = null;\r\n                    if (settings.columns[y].type == 'custom') {\r\n                        if (langx.isFunction(settings.columns[y].customBuilder)) {\r\n                            ctrl = settings.columns[y].customBuilder(tbCell, settings.idPrefix, settings.columns[y].name, uniqueIndex);\r\n                        }\r\n                    } else if (settings.columns[y].type == 'select' || settings.columns[y].type == 'ui-selectmenu') {\r\n                        ctrl = document.createElement('select');\r\n                        ctrl.id = ctrlId;\r\n                        ctrl.name = ctrlName;\r\n                        // Build option list\r\n                        if (langx.isArray(settings.columns[y].ctrlOptions)) {\r\n                            // For array type option list\r\n                            if (settings.columns[y].ctrlOptions.length > 0) {\r\n                                if (langx.isPlainObject(settings.columns[y].ctrlOptions[0])) {\r\n                                    // Check to generate optGroup or not\r\n                                    var lastGroupName = null, lastGroupElem = null;\r\n                                    for (var x = 0; x < settings.columns[y].ctrlOptions.length; x++) {\r\n                                        if (!isEmpty(settings.columns[y].ctrlOptions[x].group)) {\r\n                                            if (lastGroupName != settings.columns[y].ctrlOptions[x].group) {\r\n                                                lastGroupName = settings.columns[y].ctrlOptions[x].group;\r\n                                                lastGroupElem = document.createElement('optgroup');\r\n                                                lastGroupElem.label = lastGroupName;\r\n                                                ctrl.appendChild(lastGroupElem);\r\n                                            }\r\n                                        } else {\r\n                                            lastGroupElem = null;\r\n                                        }\r\n                                        var option = $('<option/>').val(settings.columns[y].ctrlOptions[x].value).text(settings.columns[y].ctrlOptions[x].label);\r\n                                        if (!isEmpty(settings.columns[y].ctrlOptions[x].title)) {\r\n                                            option.attr('title', settings.columns[y].ctrlOptions[x].title);\r\n                                        }\r\n                                        if (null == lastGroupElem) {\r\n                                            option.appendTo(ctrl);\r\n                                        }\r\n                                        else {\r\n                                            option.appendTo(lastGroupElem);\r\n                                        }\r\n                                        // ctrl.options[ctrl.options.length] = new Option(settings.columns[y].ctrlOptions[x].label, settings.columns[y].ctrlOptions[x].value);\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    for (var x = 0; x < settings.columns[y].ctrlOptions.length; x++) {\r\n                                        ctrl.options[ctrl.options.length] = new Option(settings.columns[y].ctrlOptions[x], settings.columns[y].ctrlOptions[x]);\r\n                                    }\r\n                                }\r\n                            }\r\n                        } else if (langx.isPlainObject(settings.columns[y].ctrlOptions)) {\r\n                            // For plain object type option list\r\n                            for (var x in settings.columns[y].ctrlOptions) {\r\n                                ctrl.options[ctrl.options.length] = new Option(settings.columns[y].ctrlOptions[x], x);\r\n                            }\r\n                        } else if (typeof (settings.columns[y].ctrlOptions) == 'string') {\r\n                            // For string type option list\r\n                            var arrayOpt = settings.columns[y].ctrlOptions.split(';');\r\n                            for (var x = 0; x < arrayOpt.length; x++) {\r\n                                var eqIndex = arrayOpt[x].indexOf(':');\r\n                                if (-1 == eqIndex) {\r\n                                    ctrl.options[ctrl.options.length] = new Option(arrayOpt[x], arrayOpt[x]);\r\n                                } else {\r\n                                    ctrl.options[ctrl.options.length] = new Option(arrayOpt[x].substring(eqIndex + 1, arrayOpt[x].length), arrayOpt[x].substring(0, eqIndex));\r\n                                }\r\n                            }\r\n                        } else if (langx.isFunction(settings.columns[y].ctrlOptions)) {\r\n                            settings.columns[y].ctrlOptions(ctrl);\r\n                        }\r\n                        tbCell.appendChild(ctrl);\r\n                        // Handle UI widget\r\n                        if (settings.columns[y].type == 'ui-selectmenu') {\r\n                            $(ctrl).selectmenu(settings.columns[y].uiOption);\r\n                        }\r\n                    }\r\n                    else if (settings.columns[y].type == 'checkbox') {\r\n                        ctrl = document.createElement('input');\r\n                        ctrl.type = 'checkbox';\r\n                        ctrl.id = ctrlId;\r\n                        ctrl.name = ctrlName;\r\n                        ctrl.value = 1;\r\n                        tbCell.appendChild(ctrl);\r\n                        tbCell.style.textAlign = 'center';\r\n                    }\r\n                    else if (settings.columns[y].type == 'textarea') {\r\n                        ctrl = document.createElement('textarea');\r\n                        ctrl.id = ctrlId;\r\n                        ctrl.name = ctrlName;\r\n                        tbCell.appendChild(ctrl);\r\n                    }\r\n                    else if (-1 != settings.columns[y].type.search(/^(color|date|datetime|datetime\\-local|email|month|number|range|search|tel|time|url|week)$/)) {\r\n                        ctrl = document.createElement('input');\r\n                        try {\r\n                            ctrl.type = settings.columns[y].type;\r\n                        }\r\n                        catch (err) { /* Not supported type */ }\r\n                        ctrl.id = ctrlId;\r\n                        ctrl.name = ctrlName;\r\n                        tbCell.appendChild(ctrl);\r\n                    }\r\n                    else {\r\n                        // Generate text input\r\n                        ctrl = document.createElement('input');\r\n                        ctrl.type = 'text';\r\n                        ctrl.id = ctrlId;\r\n                        ctrl.name = ctrlName;\r\n                        tbCell.appendChild(ctrl);\r\n                        // Handle UI widget\r\n                        if (settings.columns[y].type == 'ui-datepicker') {\r\n                            $(ctrl).datepicker(settings.columns[y].uiOption);\r\n                        } else if (settings.columns[y].type == 'ui-spinner') {\r\n                            $(ctrl).spinner(settings.columns[y].uiOption);\r\n                        } else if (settings.columns[y].type == 'ui-autocomplete') {\r\n                            $(ctrl).autocomplete(settings.columns[y].uiOption);\r\n                        }\r\n                    }\r\n                    // Add extra control properties\r\n                    if (settings.columns[y].type != 'custom') {\r\n                        // Add control attributes as needed\r\n                        if (settings.columns[y].ctrlAttr != null) $(ctrl).attr(settings.columns[y].ctrlAttr);\r\n                        // Add control properties as needed\r\n                        if (settings.columns[y].ctrlProp != null) $(ctrl).prop(settings.columns[y].ctrlProp);\r\n                        // Add control CSS as needed\r\n                        if (settings.columns[y].ctrlCss != null) $(ctrl).css(settings.columns[y].ctrlCss);\r\n                        // Add control class as needed\r\n                        if (settings.columns[y].ctrlClass != null) $(ctrl).addClass(settings.columns[y].ctrlClass);\r\n                        // Add jQuery UI tooltip as needed\r\n                        if (settings.columns[y].uiTooltip) $(ctrl).tooltip(settings.columns[y].uiTooltip);\r\n                        // Add control events as needed\r\n                        if (langx.isFunction(settings.columns[y].onClick)) {\r\n                            $(ctrl).click({ caller: tbWhole, callback: settings.columns[y].onClick, uniqueIndex: uniqueIndex }, function (evt) {\r\n                                evt.data.callback(evt, $(evt.data.caller).appendGrid('getRowIndex', evt.data.uniqueIndex));\r\n                            });\r\n                        }\r\n                        if (langx.isFunction(settings.columns[y].onChange)) {\r\n                            $(ctrl).change({ caller: tbWhole, callback: settings.columns[y].onChange, uniqueIndex: uniqueIndex }, function (evt) {\r\n                                evt.data.callback(evt, $(evt.data.caller).plugin(\"lark.tabular\").getRowIndex(evt.data.uniqueIndex));\r\n                            });\r\n                        }\r\n                    }\r\n                    if (loadData) {\r\n                        // Load data if needed\r\n                        setCtrlValue(settings, y, uniqueIndex, numOfRowOrRowArray[z][settings.columns[y].name]);\r\n                    } else if (!isEmpty(settings.columns[y].value)) {\r\n                        // Set default value\r\n                        setCtrlValue(settings, y, uniqueIndex, settings.columns[y].value);\r\n                    }\r\n                }\r\n                // Add button cell if needed\r\n                if (!settings._hideLastColumn || settings.columns.length > settings._visibleCount) {\r\n                    if (!settings.rowButtonsInFront) {\r\n                        tbRow.appendChild(tbCell = document.createElement('td'));\r\n                    } else if (!settings.hideRowNumColumn) {\r\n                        tbRow.insertBefore(tbCell = document.createElement('td'), tbRow.childNodes[1]);\r\n                    } else {\r\n                        tbRow.insertBefore(tbCell = document.createElement('td'), tbRow.firstChild);\r\n                    }\r\n                    tbCell.className = 'ui-widget-content last';\r\n                    tbCell.id = settings.idPrefix + '_last_td_' + uniqueIndex;\r\n                    if (settings._hideLastColumn) tbCell.style.display = 'none';\r\n                    // Add standard buttons\r\n                    if (!settings.hideButtons.insert) {\r\n                        var button = this._createGridButton(settings.customGridButtons.insert, 'ui-icon-arrowreturnthick-1-w')\r\n                            .attr({ id: settings.idPrefix + '_Insert_' + uniqueIndex, title: settings._i18n.insert, tabindex: -1 })\r\n                            .addClass('insert').data('appendGrid', { uniqueIndex: uniqueIndex })\r\n                            .click(function (evt) {\r\n                                var rowUniqueIndex = $(this).data('appendGrid').uniqueIndex;\r\n                                $(tbWhole).plugin(\"lark.tabular\").insertRow(1, null, rowUniqueIndex);\r\n                                if (evt && evt.preventDefault) evt.preventDefault(settings._buttonClasses.insert);\r\n                                return false;\r\n                            }).appendTo(tbCell);\r\n                        if (!isEmpty(settings._buttonClasses.insert)) button.addClass(settings._buttonClasses.insert);\r\n                    }\r\n                    if (!settings.hideButtons.remove) {\r\n                        var button = this._createGridButton(settings.customGridButtons.remove, 'ui-icon-trash')\r\n                            .attr({ id: settings.idPrefix + '_Delete_' + uniqueIndex, title: settings._i18n.remove, tabindex: -1 })\r\n                            .addClass('remove').data('appendGrid', { uniqueIndex: uniqueIndex })\r\n                            .click(function (evt) {\r\n                                var rowUniqueIndex = $(this).data('appendGrid').uniqueIndex;\r\n                                self._removeRow( null, rowUniqueIndex, false);\r\n                                if (evt && evt.preventDefault) evt.preventDefault();\r\n                                return false;\r\n                            }).appendTo(tbCell);\r\n                        if (!isEmpty(settings._buttonClasses.remove)) button.addClass(settings._buttonClasses.remove);\r\n                    }\r\n                    if (!settings.hideButtons.moveUp) {\r\n                        var button = this._createGridButton(settings.customGridButtons.moveUp, 'ui-icon-arrowthick-1-n')\r\n                            .attr({ id: settings.idPrefix + '_MoveUp_' + uniqueIndex, title: settings._i18n.moveUp, tabindex: -1 })\r\n                            .addClass('moveUp').data('appendGrid', { uniqueIndex: uniqueIndex })\r\n                            .click(function (evt) {\r\n                                var rowUniqueIndex = $(this).data('appendGrid').uniqueIndex;\r\n                                $(tbWhole).plugin(\"lark.tabular\").moveUpRow(null, rowUniqueIndex);\r\n                                if (evt && evt.preventDefault) evt.preventDefault();\r\n                                return false;\r\n                            }).appendTo(tbCell);\r\n                        if (!isEmpty(settings._buttonClasses.moveUp)) button.addClass(settings._buttonClasses.moveUp);\r\n                    }\r\n                    if (!settings.hideButtons.moveDown) {\r\n                        var button = this._createGridButton(settings.customGridButtons.moveDown, 'ui-icon-arrowthick-1-s')\r\n                            .attr({ id: settings.idPrefix + '_MoveDown_' + uniqueIndex, title: settings._i18n.moveDown, tabindex: -1 })\r\n                            .addClass('moveDown').data('appendGrid', { uniqueIndex: uniqueIndex })\r\n                            .click(function (evt) {\r\n                                var rowUniqueIndex = $(this).data('appendGrid').uniqueIndex;\r\n                                $(tbWhole).plugin(\"lark.tabular\").moveDownRow(null, rowUniqueIndex);\r\n                                if (evt && evt.preventDefault) evt.preventDefault();\r\n                                return false;\r\n                            }).appendTo(tbCell);\r\n                        if (!isEmpty(settings._buttonClasses.moveDown)) button.addClass(settings._buttonClasses.moveDown);\r\n                    }\r\n                    // Handle row dragging\r\n                    if (settings.rowDragging) {\r\n                        var button = $('<div/>').addClass('rowDrag ui-state-default ui-corner-all')\r\n                            .attr('title', settings._i18n.rowDrag).append($('<div/>').addClass('ui-icon ui-icon-caret-2-n-s').append($('<span/>').addClass('ui-button-text').text('Drag')))\r\n                            .appendTo(tbCell);\r\n                        if (!isEmpty(settings._buttonClasses.rowDrag)) button.addClass(settings._buttonClasses.rowDrag);\r\n                    }\r\n                    // Add hidden\r\n                    for (var y = 0; y < hidden.length; y++) {\r\n                        ctrl = document.createElement('input');\r\n                        ctrl.id = settings.idPrefix + '_' + settings.columns[hidden[y]].name + '_' + uniqueIndex;\r\n                        if (langx.isFunction(settings.nameFormatter)) {\r\n                            ctrl.name = settings.nameFormatter(settings.idPrefix, settings.columns[y].name, uniqueIndex);\r\n                        } else {\r\n                            ctrl.name = ctrl.id;\r\n                        }\r\n                        ctrl.type = 'hidden';\r\n\r\n                        if (loadData) {\r\n                            // Load data if needed\r\n                            ctrl.value = numOfRowOrRowArray[z][settings.columns[hidden[y]].name];\r\n                        } else if (!isEmpty(settings.columns[hidden[y]].value)) {\r\n                            // Set default value\r\n                            ctrl.value = settings.columns[hidden[y]].value;\r\n                        }\r\n                        tbCell.appendChild(ctrl);\r\n                    }\r\n                    // Add extra buttons\r\n                    if (settings.customRowButtons && settings.customRowButtons.length) {\r\n                        // Add front buttons\r\n                        for (var y = settings.customRowButtons.length - 1; y >= 0; y--) {\r\n                            var buttonCfg = settings.customRowButtons[y];\r\n                            if (buttonCfg && buttonCfg.uiButton && buttonCfg.click && buttonCfg.atTheFront) {\r\n                                $(tbCell).prepend(makeCustomRowButton(tbWhole, buttonCfg, uniqueIndex));\r\n                            }\r\n                        }\r\n                        // Add end buttons\r\n                        for (var y = 0; y < settings.customRowButtons.length; y++) {\r\n                            var buttonCfg = settings.customRowButtons[y];\r\n                            if (buttonCfg && buttonCfg.uiButton && buttonCfg.click && !buttonCfg.atTheFront) {\r\n                                $(tbCell).append(makeCustomRowButton(tbWhole, buttonCfg, uniqueIndex));\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                // Create sub panel\r\n                if (settings.useSubPanel) {\r\n                    tbSubRow.appendChild(tbCell = document.createElement('td'));\r\n                    tbCell.className = 'ui-widget-content';\r\n                    tbCell.colSpan = settings._visibleCount + (settings._hideLastColumn ? 0 : 1);\r\n                    if (langx.isFunction(settings.subPanelBuilder)) {\r\n                        settings.subPanelBuilder(tbCell, uniqueIndex);\r\n                    }\r\n                }\r\n            }\r\n            // Check if re-calculate column width is required\r\n            /*\r\n            if (0 < settings.maxBodyHeight && settings._calculateWidth && !calColWidth) {\r\n                var scroll = $('#' + settings._wrapperId + '>div.scroller')[0];\r\n                if (scroll.scrollHeight > scroll.offsetHeight) {\r\n                    calColWidth = true;\r\n                    settings._calculateWidth = false;\r\n                }\r\n            }\r\n            */\r\n            // Save setting\r\n            this._saveSetting(settings);\r\n            // Calculate column width\r\n            /*\r\n            if (calColWidth && settings.autoColumnWidth && settings.maxBodyHeight > 0) {\r\n                this._calculateColumnWidth();\r\n            }\r\n            */\r\n            // Trigger events\r\n            if (langx.isNumeric(rowIndex)) {\r\n                if (langx.isFunction(settings.afterRowInserted)) {\r\n                    settings.afterRowInserted(tbWhole, parentIndex, addedRows);\r\n                }\r\n            }\r\n            else {\r\n                if (langx.isFunction(settings.afterRowAppended)) {\r\n                    settings.afterRowAppended(tbWhole, parentIndex, addedRows);\r\n                }\r\n            }\r\n            if (reachMaxRow && langx.isFunction(settings.maxNumRowsReached)) {\r\n                settings.maxNumRowsReached();\r\n            }\r\n            // Scroll the page when append row\r\n            if (settings.maintainScroll && !langx.isNumeric(rowIndex)) {\r\n                // Try to maintain the height so that user no need to scroll every time when row added\r\n                var newHeight = $(tbWhole).height();\r\n                $(tbWhole).scrollParent().scrollTop(oldScroll + newHeight - oldHeight);\r\n            }\r\n            // Return added rows' uniqueIndex\r\n            return { addedRows: addedRows, parentIndex: parentIndex, rowIndex: rowIndex };\r\n        },\r\n\r\n        _removeRow : function (rowIndex, uniqueIndex, force) {\r\n            var tbWhole = this._elm;\r\n\r\n            var settings = $(tbWhole).data('appendGrid');\r\n            var tbBody = tbWhole.getElementsByTagName('tbody')[0];\r\n            if (langx.isNumeric(uniqueIndex)) {\r\n                for (var z = 0; z < settings._rowOrder.length; z++) {\r\n                    if (settings._rowOrder[z] == uniqueIndex) {\r\n                        rowIndex = z;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            if (langx.isNumeric(rowIndex)) {\r\n                // Remove middle row\r\n                if (force || typeof (settings.beforeRowRemove) != 'function' || settings.beforeRowRemove(tbWhole, rowIndex)) {\r\n                    settings._rowOrder.splice(rowIndex, 1);\r\n                    if (settings.useSubPanel) {\r\n                        tbBody.removeChild(tbBody.childNodes[rowIndex * 2]);\r\n                        tbBody.removeChild(tbBody.childNodes[rowIndex * 2]);\r\n                    } else {\r\n                        tbBody.removeChild(tbBody.childNodes[rowIndex]);\r\n                    }\r\n                    // Save setting\r\n                    this._saveSetting(settings);\r\n                    // Sort sequence\r\n                    this._sortSequence( rowIndex);\r\n                    // Trigger event\r\n                    if (langx.isFunction(settings.afterRowRemoved)) {\r\n                        settings.afterRowRemoved(tbWhole, rowIndex);\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                // Store old window scroll value\r\n                var oldHeight = 0, oldScroll = 0;\r\n                if (settings.maintainScroll) {\r\n                    oldHeight = $(tbWhole).height();\r\n                    oldScroll = $(tbWhole).scrollParent().scrollTop();\r\n                }\r\n                // Remove last row\r\n                if (force || !langx.isFunction(settings.beforeRowRemove) || settings.beforeRowRemove(tbWhole, settings._rowOrder.length - 1)) {\r\n                    uniqueIndex = settings._rowOrder.pop();\r\n                    tbBody.removeChild(tbBody.lastChild);\r\n                    if (settings.useSubPanel) {\r\n                        tbBody.removeChild(tbBody.lastChild);\r\n                    }\r\n                    // Save setting\r\n                    this._saveSetting(settings);\r\n                    // Trigger event\r\n                    if (langx.isFunction(settings.afterRowRemoved)) {\r\n                        settings.afterRowRemoved(tbWhole, null);\r\n                    }\r\n                }\r\n                // Scroll the page when append row\r\n                if (settings.maintainScroll) {\r\n                    // Try to maintain the height so that user no need to scroll every time when row added\r\n                    var newHeight = $(tbWhole).height();\r\n                    $(tbWhole).scrollParent().scrollTop(oldScroll + newHeight - oldHeight);\r\n                }\r\n            }\r\n            // Add empty row\r\n            if (settings._rowOrder.length == 0) {\r\n                this._showEmptyMessage(settings);\r\n            }\r\n        },\r\n\r\n        _loadData : function (records, isInit) {\r\n            var tbWhole = this._elm;\r\n            var tbBody, tbRow, tbCell, uniqueIndex, insertResult;\r\n            var settings = $(tbWhole).data('appendGrid');\r\n            if (settings) {\r\n                // Clear existing content\r\n                tbBody = tbWhole.getElementsByTagName('tbody')[0];\r\n                $(tbBody).empty();\r\n                settings._rowOrder.length = 0;\r\n                settings._uniqueIndex = 0;\r\n                // Check any records\r\n                if (records != null && records.length) {\r\n                    // Add rows\r\n                    insertResult = this._insertRow(records.length, null, null);\r\n                    // Set data\r\n                    for (var r = 0; r < insertResult.addedRows.length; r++) {\r\n                        for (var c = 0; c < settings.columns.length; c++) {\r\n                            setCtrlValue(settings, c, settings._rowOrder[r], records[r][settings.columns[c].name]);\r\n                        }\r\n                        if (langx.isFunction(settings.rowDataLoaded)) {\r\n                            settings.rowDataLoaded(tbWhole, records[r], r, settings._rowOrder[r]);\r\n                        }\r\n                    }\r\n                }\r\n                // Save setting\r\n                settings._isDataLoaded = true;\r\n                if (isInit) settings.initData = null;\r\n                $(tbWhole).data('appendGrid', settings);\r\n                // Trigger data loaded event\r\n                if (langx.isFunction(settings.dataLoaded)) {\r\n                    settings.dataLoaded(tbWhole, records);\r\n                }\r\n            }\r\n        },\r\n\r\n        _init: function () {\r\n            var options = this.options,\r\n                self = this;\r\n            // Check mandatory paramters included\r\n            if (!langx.isArray(options.columns) || options.columns.length == 0) {\r\n                alert(_systemMessages.noColumnInfo);\r\n            }\r\n            // Check target element is table or not\r\n            var tbWhole = this._elm, tbWrap, tbHead, tbBody, tbFoot, tbColGp, tbRow, tbCell;\r\n            if (isEmpty(tbWhole.tagName) || tbWhole.tagName != 'TABLE') {\r\n                alert(_systemMessages.elemNotTable);\r\n            }\r\n            // Generate settings\r\n            var settings = langx.extend({}, _defaultInitOptions, _defaultCallbackContainer, options);\r\n            // Add internal settings\r\n            langx.extend(settings, {\r\n                // The UniqueIndex accumulate counter\r\n                _uniqueIndex: 0,\r\n                // The row order array\r\n                _rowOrder: [],\r\n                // Indicate data is loaded or not\r\n                _isDataLoaded: false,\r\n                // Visible column count for internal calculation\r\n                _visibleCount: 0,\r\n                // Total colSpan count after excluding `hideRowNumColumn` and not generating last column\r\n                _finalColSpan: 0,\r\n                // Indicate to hide last column or not\r\n                _hideLastColumn: false,\r\n                // The element ID of the `appendGrid` wrapper\r\n                _wrapperId: null,\r\n                // \r\n                _calculateWidth: true\r\n            });\r\n            // Labels or messages used in grid\r\n            if (langx.isPlainObject(options.i18n))\r\n                settings._i18n = langx.extend({}, _defaultTextResources, options.i18n);\r\n            else\r\n                settings._i18n = langx.extend({}, _defaultTextResources);\r\n            // The extra class names for buttons\r\n            if (langx.isPlainObject(options.buttonClasses))\r\n                settings._buttonClasses = langx.extend({}, _defaultButtonClasses, options.buttonClasses);\r\n            else\r\n                settings._buttonClasses = langx.extend({}, _defaultButtonClasses);\r\n            // The extra class names for sections\r\n            if (langx.isPlainObject(options.sectionClasses))\r\n                settings._sectionClasses = langx.extend({}, _defaultSectionClasses, options.sectionClasses);\r\n            else\r\n                settings._sectionClasses = langx.extend({}, _defaultSectionClasses);\r\n            // Make sure the `hideButtons` setting defined\r\n            if (langx.isPlainObject(options.hideButtons))\r\n                settings.hideButtons = langx.extend({}, _defaultHideButtons, options.hideButtons);\r\n            else\r\n                settings.hideButtons = langx.extend({}, _defaultHideButtons);\r\n            // Check `idPrefix` is defined\r\n            if (isEmpty(settings.idPrefix)) {\r\n                // Check table ID defined\r\n                if (isEmpty(tbWhole.id) || tbWhole.id == '') {\r\n                    // Generate an ID using current time\r\n                    settings.idPrefix = 'ag' + new Date().getTime();\r\n                }\r\n                else {\r\n                    settings.idPrefix = tbWhole.id;\r\n                }\r\n            }\r\n            // Check custom grid button parameters\r\n            if (!langx.isPlainObject(settings.customGridButtons)) {\r\n                settings.customGridButtons = {};\r\n            }\r\n            // Check rowDragging and useSubPanel option\r\n            if (settings.useSubPanel && settings.rowDragging) {\r\n                settings.rowDragging = false;\r\n            }\r\n            // Create thead and tbody\r\n            tbHead = document.createElement('thead');\r\n            tbHead.className = 'ui-widget-header';\r\n            tbBody = document.createElement('tbody');\r\n            tbBody.className = 'ui-widget-content';\r\n            tbFoot = document.createElement('tfoot');\r\n            tbFoot.className = 'ui-widget-header';\r\n            tbColGp = document.createElement('colgroup');\r\n            // Prepare the table element\r\n            settings._wrapperId = settings.idPrefix + '-wrapper';\r\n            tbWrap = this._tbWrap = document.createElement('div');\r\n            $(tbWrap).attr('id', settings._wrapperId).addClass('appendGrid').insertAfter(tbWhole);\r\n            $(tbWhole).empty().addClass('ui-widget').appendTo(tbWrap);\r\n            // Check if content scrolling is enabled\r\n            /*\r\n            if (settings.maxBodyHeight > 0) {\r\n                // Seperate the thead and tfoot from source table\r\n                $('<table></table>').addClass('ui-widget head').append(tbHead).prependTo(tbWrap);\r\n                $(tbWhole).addClass('body').wrap($('<div></div>').addClass('scroller').css('max-height', settings.maxBodyHeight)).append(tbColGp, tbBody);\r\n                $('<table></table>').addClass('ui-widget foot').append(tbFoot).appendTo(tbWrap);\r\n            } else {\r\n                // Add thead, tbody and tfoot to the same table\r\n                $(tbWhole).addClass('head body foot').append(tbColGp, tbHead, tbBody, tbFoot);\r\n            }\r\n            */\r\n            // Add thead, tbody and tfoot to the same table\r\n            $(tbWhole).addClass('head body foot').append(tbColGp, tbHead, tbBody, tbFoot);\r\n\r\n            // Handle header row\r\n            var tbHeadCellRowNum, tbHeadCellRowButton;\r\n            tbHead.appendChild(tbRow = document.createElement('tr'));\r\n            if (settings._sectionClasses.header) {\r\n                tbRow.className = 'columnHead ' + settings._sectionClasses.header;\r\n            } else {\r\n                tbRow.className = 'columnHead';\r\n            }\r\n            if (!settings.hideRowNumColumn) {\r\n                tbRow.appendChild(tbHeadCellRowNum = document.createElement('td'));\r\n                tbHeadCellRowNum.className = 'ui-widget-header first';\r\n                // Add column group for scrolling\r\n                tbColGp.appendChild(document.createElement('col'));\r\n            }\r\n            // Prepare column information and add column header\r\n            var pendingSkipCol = 0;\r\n            for (var z = 0; z < settings.columns.length; z++) {\r\n                // Assign default setting\r\n                var columnOpt = langx.extend({}, _defaultColumnOptions, settings.columns[z]);\r\n                settings.columns[z] = columnOpt;\r\n                // Skip hidden\r\n                if (settings.columns[z].type != 'hidden') {\r\n                    // Check column is invisible\r\n                    if (!settings.columns[z].invisible) {\r\n                        settings._visibleCount++;\r\n                    }\r\n                    // Check skip header colSpan\r\n                    if (pendingSkipCol == 0) {\r\n                        var className = 'ui-widget-header';\r\n                        if (settings.columns[z].invisible) className += ' invisible';\r\n                        if (settings.columns[z].resizable) className += ' resizable';\r\n                        tbRow.appendChild(tbCell = document.createElement('td'));\r\n                        tbCell.id = settings.idPrefix + '_' + settings.columns[z].name + '_td_head';\r\n                        tbCell.className = className;\r\n                        if (settings.columns[z].displayCss) $(tbCell).css(settings.columns[z].displayCss);\r\n                        if (settings.columns[z].headerSpan > 1) {\r\n                            $(tbCell).attr('colSpan', settings.columns[z].headerSpan);\r\n                            pendingSkipCol = settings.columns[z].headerSpan - 1;\r\n                        }\r\n                        // Add tooltip\r\n                        if (langx.isPlainObject(settings.columns[z].displayTooltip)) {\r\n                            $(tbCell).tooltip(settings.columns[z].displayTooltip);\r\n                        }\r\n                        else if (!isEmpty(settings.columns[z].displayTooltip)) {\r\n                            $(tbCell).attr('title', settings.columns[z].displayTooltip).tooltip();\r\n                        }\r\n                        // Check to set display text or generate by function\r\n                        if (langx.isFunction(settings.columns[z].display)) {\r\n                            settings.columns[z].display(tbCell);\r\n                        } else if (!isEmpty(settings.columns[z].display)) {\r\n                            $(tbCell).text(settings.columns[z].display);\r\n                        }\r\n                        // Add column group for scrolling\r\n                        tbColGp.appendChild(document.createElement('col'));\r\n                    } else {\r\n                        pendingSkipCol--;\r\n                    }\r\n                }\r\n            }\r\n            // Enable columns resizable\r\n            if ($.fn.resizable ) {\r\n                $('td.resizable', tbHead).resizable({ handles: 'e' });\r\n            }\r\n            // Check to hide last column or not\r\n            if (settings.hideButtons.insert && settings.hideButtons.remove\r\n                    && settings.hideButtons.moveUp && settings.hideButtons.moveDown\r\n                    && (!langx.isArray(settings.customRowButtons) || settings.customRowButtons.length == 0)) {\r\n                settings._hideLastColumn = true;\r\n            }\r\n            // Calculate the `_finalColSpan` value\r\n            settings._finalColSpan = settings._visibleCount;\r\n            if (!settings.hideRowNumColumn) settings._finalColSpan++;\r\n            if (!settings._hideLastColumn) settings._finalColSpan++;\r\n            // Generate last column header if needed\r\n            if (!settings._hideLastColumn) {\r\n                if (settings.rowButtonsInFront) {\r\n                    if (settings.hideRowNumColumn) {\r\n                        // Insert a cell at the front\r\n                        tbRow.insertBefore(tbHeadCellRowButton = document.createElement('td'), tbRow.firstChild);\r\n                    } else {\r\n                        // Span the first cell that across row number and row button cells\r\n                        // tbHeadCellRowNum.colSpan = 2;\r\n                        // tbHeadCellRowButton = tbHeadCellRowNum;\r\n\r\n                        // Insert a cell as the second column\r\n                        tbRow.insertBefore(tbHeadCellRowButton = document.createElement('td'), tbRow.childnodes[1]);\r\n                    }\r\n                } else {\r\n                    tbRow.appendChild(tbHeadCellRowButton = document.createElement('td'));\r\n                }\r\n                tbHeadCellRowButton.className = 'ui-widget-header last';\r\n                tbHeadCellRowButton.id = settings.idPrefix + '_last_td_head';\r\n                // Add column group for scrolling\r\n                tbColGp.appendChild(document.createElement('col'));\r\n            }\r\n            // Add caption when defined\r\n            if (settings.caption) {\r\n                tbHead.insertBefore(tbRow = document.createElement('tr'), tbHead.firstChild);\r\n                if (settings._sectionClasses.caption) {\r\n                    tbRow.className = settings._sectionClasses.caption;\r\n                }\r\n                tbRow.appendChild(tbCell = document.createElement('td'));\r\n                tbCell.id = settings.idPrefix + '_caption_td';\r\n                tbCell.className = 'ui-state-active caption';\r\n                tbCell.colSpan = settings._finalColSpan;\r\n                // Add tooltip\r\n                if (langx.isPlainObject(settings.captionTooltip)) {\r\n                    $(tbCell).tooltip(settings.captionTooltip);\r\n                } else if (!isEmpty(settings.captionTooltip)) {\r\n                    $(tbCell).attr('title', settings.captionTooltip).tooltip();\r\n                }\r\n                // Check to set display text or generate by function\r\n                if (langx.isFunction(settings.caption)) {\r\n                    settings.caption(tbCell);\r\n                } else {\r\n                    $(tbCell).text(settings.caption);\r\n                }\r\n            }\r\n            // Handle footer row\r\n            tbFoot.appendChild(tbRow = document.createElement('tr'));\r\n            if (settings._sectionClasses.footer) {\r\n                tbRow.className = settings._sectionClasses.footer;\r\n            }\r\n            tbRow.appendChild(tbCell = document.createElement('td'));\r\n            tbCell.id = settings.idPrefix + '_footer_td';\r\n            tbCell.colSpan = settings._finalColSpan;\r\n            $('<input/>').attr({\r\n                type: 'hidden',\r\n                id: settings.idPrefix + '_rowOrder',\r\n                name: settings.idPrefix + '_rowOrder'\r\n            }).appendTo(tbCell);\r\n            // Make row invisible if all buttons are hidden\r\n            if (settings.hideButtons.append && settings.hideButtons.removeLast\r\n                    && (!langx.isArray(settings.customFooterButtons) || settings.customFooterButtons.length == 0)) {\r\n                tbRow.style.display = 'none';\r\n            } else {\r\n                if (!settings.hideButtons.append) {\r\n                    var button = this._createGridButton(settings.customGridButtons.append, 'ui-icon-plusthick')\r\n                    .attr({ title: settings._i18n.append }).addClass('append')\r\n                    .click(function (evt) {\r\n                        self._insertRow(1, null, null);\r\n                        if (evt && evt.preventDefault) evt.preventDefault();\r\n                        return false;\r\n                    }).appendTo(tbCell);\r\n                    if (!isEmpty(settings._buttonClasses.append)) button.addClass(settings._buttonClasses.append);\r\n                }\r\n                if (!settings.hideButtons.removeLast) {\r\n                    var button = this._createGridButton(settings.customGridButtons.removeLast, 'ui-icon-closethick')\r\n                    .attr({ title: settings._i18n.removeLast }).addClass('removeLast')\r\n                    .click(function (evt) {\r\n                        self._removeRow( null, this.value, false);\r\n                        if (evt && evt.preventDefault) evt.preventDefault();\r\n                        return false;\r\n                    }).appendTo(tbCell);\r\n                    if (!isEmpty(settings._buttonClasses.removeLast)) button.addClass(settings._buttonClasses.removeLast);\r\n                }\r\n                if (settings.customFooterButtons && settings.customFooterButtons.length) {\r\n                    // Add front buttons\r\n                    for (var y = settings.customFooterButtons.length - 1; y >= 0; y--) {\r\n                        var buttonCfg = settings.customFooterButtons[y];\r\n                        if (buttonCfg && buttonCfg.uiButton && buttonCfg.click && buttonCfg.atTheFront) {\r\n                            $(tbCell).prepend(makeCustomBottomButton(tbWhole, buttonCfg));\r\n                        }\r\n                    }\r\n                    // Add end buttons\r\n                    for (var y = 0; y < settings.customFooterButtons.length; y++) {\r\n                        var buttonCfg = settings.customFooterButtons[y];\r\n                        if (buttonCfg && buttonCfg.uiButton && buttonCfg.click && !buttonCfg.atTheFront) {\r\n                            $(tbCell).append(makeCustomBottomButton(tbWhole, buttonCfg));\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            // Enable dragging\r\n            if (settings.rowDragging) {\r\n                $(tbBody).sortable({\r\n                    axis: 'y',\r\n                    containment: tbWhole,\r\n                    handle: '.rowDrag',\r\n                    helper: function (e, tr) {\r\n                        var org = tr.children();\r\n                        var helper = tr.clone();\r\n                        // Fix the cell width of cloned table cell\r\n                        helper.children().each(function (index) {\r\n                            $(this).width(org.eq(index).width());\r\n                            // Set the value of drop down list when drag (Issue #18)\r\n                            var helperSelect = $('select', this);\r\n                            if (helperSelect.length > 0) {\r\n                                for (var y = 0; y < helperSelect.length; y++) {\r\n                                    var orgSelect = org.eq(index).find('select');\r\n                                    if (orgSelect.length > y) {\r\n                                        helperSelect[y].value = orgSelect[y].value;\r\n                                    }\r\n                                }\r\n                            }\r\n                        });\r\n                        return helper;\r\n                    },\r\n                    update: function (event, ui) {\r\n                        var uniqueIndex = ui.item[0].id.substring(ui.item[0].id.lastIndexOf('_') + 1);\r\n                        var tbRowIndex = ui.item[0].rowIndex - $('tr', tbHead).length;\r\n                        self._gridRowDragged(ui.originalPosition.top > ui.position.top, uniqueIndex, tbRowIndex);\r\n                    }\r\n                });\r\n            }\r\n            // Save options\r\n            $(tbWhole).data('appendGrid', settings);\r\n            if (langx.isArray(options.initData)) {\r\n                // Load data if initData is array\r\n                this._loadData(options.initData, true);\r\n            } else {\r\n                // Add empty rows\r\n                //$(tbWhole).appendGrid('appendRow', settings.initRows);\r\n                this.appendRow(settings.initRows);\r\n            }\r\n            // Show no rows in grid\r\n            if (settings._rowOrder.length == 0) {\r\n                this._showEmptyMessage(settings, true);\r\n            }\r\n\r\n            /*\r\n            // Calculate column width\r\n            if (settings.maxBodyHeight > 0) {\r\n                if (settings.autoColumnWidth) {\r\n                    this._calculateColumnWidth();\r\n                } else {\r\n                    $('table.foot', tbWrap).width($(tbWhole).width());\r\n                }\r\n            }\r\n            */\r\n        },\r\n\r\n        isReady: function () {\r\n            // Check the appendGrid is initialized or not\r\n            var settings = this._checkGridAndGetSettings( true);\r\n            if (settings) {\r\n                return true;\r\n            }\r\n            return false;\r\n        },\r\n\r\n        isDataLoaded: function () {\r\n            // Check the grid data is loaded by `load` method or `initData` parameter or not\r\n            var settings = this._checkGridAndGetSettings();\r\n            if (settings) {\r\n                return settings._isDataLoaded;\r\n            }\r\n            return false;\r\n        },\r\n\r\n        load: function (records) {\r\n            var settings = this._checkGridAndGetSettings();\r\n            if (settings) {\r\n                if (records != null && records.length > 0) {\r\n                    this._loadData(records, false);\r\n                } else {\r\n                    this._emptyGrid();\r\n                }\r\n            }\r\n            return this;\r\n        },\r\n\r\n        appendRow: function (numOfRowOrRowArray) {\r\n            return this.insertRow(numOfRowOrRowArray);\r\n        },\r\n\r\n        insertRow: function (numOfRowOrRowArray, rowIndex, callerUniqueIndex) {\r\n            var settings = this._checkGridAndGetSettings();\r\n            if (settings) {\r\n                if ((langx.isArray(numOfRowOrRowArray) && numOfRowOrRowArray.length > 0) || (langx.isNumeric(numOfRowOrRowArray) && numOfRowOrRowArray > 0)) {\r\n                    // Define variables\r\n                    var tbWhole = this[0];\r\n                    insertResult = this._insertRow(numOfRowOrRowArray, rowIndex, callerUniqueIndex);\r\n                    // Reorder sequence as needed\r\n                    if (langx.isNumeric(rowIndex) || langx.isNumeric(callerUniqueIndex)) {\r\n                        // Sort sequence\r\n                        this._sortSequence( insertResult.rowIndex);\r\n                        // Move focus\r\n                        var insertUniqueIndex = settings._rowOrder[insertResult.addedRows[0]];\r\n                        $('#' + settings.idPrefix + '_Insert_' + insertUniqueIndex, tbWhole).focus();\r\n                    }\r\n                }\r\n            }\r\n            return this;\r\n        },\r\n        removeRow: function (rowIndex, uniqueIndex) {\r\n            var settings = this._checkGridAndGetSettings();\r\n            if (settings && settings._rowOrder.length > 0) {\r\n                this._removeRow(rowIndex, uniqueIndex, true);\r\n            }\r\n            return this;\r\n        },\r\n        emptyGrid: function () {\r\n            var settings = this._checkGridAndGetSettings();\r\n            if (settings) {\r\n                this._emptyGrid();\r\n            }\r\n            return target;\r\n        },\r\n        moveUpRow: function (rowIndex, uniqueIndex) {\r\n            var settings = this._checkGridAndGetSettings(), target = this;\r\n            if (settings) {\r\n                var tbWhole = target[0], trTarget, trSwap, trAdtTarget, swapSeq, oldIndex = null;\r\n                var tbBody = tbWhole.getElementsByTagName('tbody')[0];\r\n                if (langx.isNumeric(rowIndex) && rowIndex > 0 && rowIndex < settings._rowOrder.length) {\r\n                    oldIndex = rowIndex;\r\n                    uniqueIndex = settings._rowOrder[rowIndex];\r\n                } else if (langx.isNumeric(uniqueIndex)) {\r\n                    oldIndex = findRowIndex(uniqueIndex, settings);\r\n                }\r\n                if (oldIndex != null && oldIndex > 0) {\r\n                    // Get row to swap\r\n                    trTarget = document.getElementById(settings.idPrefix + '_Row_' + uniqueIndex, tbWhole);\r\n                    trSwap = document.getElementById(settings.idPrefix + '_Row_' + settings._rowOrder[oldIndex - 1], tbWhole);\r\n                    // Get the sub panel row if used\r\n                    if (settings.useSubPanel) {\r\n                        trAdtTarget = document.getElementById(settings.idPrefix + '_SubRow_' + uniqueIndex, tbWhole);\r\n                    }\r\n                    // Remove current row\r\n                    tbBody.removeChild(trTarget);\r\n                    if (settings.useSubPanel) {\r\n                        tbBody.removeChild(trAdtTarget);\r\n                    }\r\n                    // Insert before the above row\r\n                    tbBody.insertBefore(trTarget, trSwap);\r\n                    if (settings.useSubPanel) {\r\n                        tbBody.insertBefore(trAdtTarget, trSwap);\r\n                    }\r\n                    // Update rowOrder\r\n                    settings._rowOrder[oldIndex] = settings._rowOrder[oldIndex - 1];\r\n                    settings._rowOrder[oldIndex - 1] = uniqueIndex;\r\n                    // Update row label\r\n                    swapSeq = $('td.first', trSwap).html();\r\n                    $('td.first', trSwap).html($('td.first', trTarget).html());\r\n                    $('td.first', trTarget).html(swapSeq)\r\n                    // Save setting\r\n                    this._saveSetting(settings);\r\n                    // Change focus\r\n                    $('td.last button.moveUp', trTarget).removeClass('ui-state-hover').blur();\r\n                    $('td.last button.moveUp', trSwap).focus();\r\n                    // Trigger event\r\n                    if (settings.afterRowSwapped) {\r\n                        settings.afterRowSwapped(tbWhole, oldIndex, oldIndex - 1);\r\n                    }\r\n                }\r\n            }\r\n            return target;\r\n        },\r\n        moveDownRow: function (rowIndex, uniqueIndex) {\r\n            var settings = this._checkGridAndGetSettings(), target = this;\r\n            if (settings) {\r\n                var tbWhole = target[0], trTarget, trSwap, trAdtSwap, swapSeq, oldIndex = null;\r\n                var tbBody = tbWhole.getElementsByTagName('tbody')[0];\r\n                if (langx.isNumeric(rowIndex) && rowIndex >= 0 && rowIndex < settings._rowOrder.length - 1) {\r\n                    oldIndex = rowIndex;\r\n                    uniqueIndex = settings._rowOrder[rowIndex];\r\n                } else if (langx.isNumeric(uniqueIndex)) {\r\n                    oldIndex = findRowIndex(uniqueIndex, settings);\r\n                }\r\n                if (oldIndex != null && oldIndex != settings._rowOrder.length - 1) {\r\n                    // Get row to swap\r\n                    trTarget = document.getElementById(settings.idPrefix + '_Row_' + uniqueIndex, tbWhole);\r\n                    trSwap = document.getElementById(settings.idPrefix + '_Row_' + settings._rowOrder[oldIndex + 1], tbWhole);\r\n                    // Get the sub panel row if used\r\n                    if (settings.useSubPanel) {\r\n                        trAdtSwap = document.getElementById(settings.idPrefix + '_SubRow_' + settings._rowOrder[oldIndex + 1], tbWhole);\r\n                    }\r\n                    // Remove current row\r\n                    tbBody.removeChild(trSwap);\r\n                    // Insert before the above row\r\n                    tbBody.insertBefore(trSwap, trTarget);\r\n                    if (settings.useSubPanel) {\r\n                        tbBody.insertBefore(trAdtSwap, trTarget);\r\n                    }\r\n                    // Update rowOrder\r\n                    settings._rowOrder[oldIndex] = settings._rowOrder[oldIndex + 1];\r\n                    settings._rowOrder[oldIndex + 1] = uniqueIndex;\r\n                    // Update row label\r\n                    swapSeq = $('td.first', trSwap).html();\r\n                    $('td.first', trSwap).html($('td.first', trTarget).html());\r\n                    $('td.first', trTarget).html(swapSeq)\r\n                    // Save setting\r\n                    this._saveSetting(settings);\r\n                    // Change focus\r\n                    $('td.last button.moveDown', trTarget).removeClass('ui-state-hover').blur();\r\n                    $('td.last button.moveDown', trSwap).focus();\r\n                    // Trigger event\r\n                    if (settings.afterRowSwapped) {\r\n                        settings.afterRowSwapped(tbWhole, oldIndex, oldIndex + 1);\r\n                    }\r\n                }\r\n            }\r\n            return target;\r\n        },\r\n        showColumn: function (name) {\r\n            var settings = this._checkGridAndGetSettings();\r\n            if (settings && name) {\r\n                // Find column index\r\n                var colIndex = -1, tbWhole = this[0];\r\n                for (var z = 0; z < settings.columns.length; z++) {\r\n                    if (settings.columns[z].name == name) {\r\n                        colIndex = z;\r\n                        break;\r\n                    }\r\n                }\r\n                // Make sure the column exist and show the column if it is invisible only\r\n                if (colIndex != -1 && settings.columns[colIndex].invisible) {\r\n                    // Change caption and footer column span\r\n                    settings._visibleCount++;\r\n                    settings._finalColSpan++;\r\n                    $('#' + settings.idPrefix + '_caption_td').attr('colSpan', settings._finalColSpan);\r\n                    $('#' + settings.idPrefix + '_footer_td').attr('colSpan', settings._finalColSpan);\r\n                    // Remove invisible class on each row\r\n                    $('#' + settings.idPrefix + '_' + name + '_td_head').removeClass('invisible');\r\n                    for (var z = 0; z < settings._rowOrder.length; z++) {\r\n                        var uniqueIndex = settings._rowOrder[z];\r\n                        $('#' + settings.idPrefix + '_' + name + '_td_' + uniqueIndex).removeClass('invisible');\r\n                        if (settings.useSubPanel) {\r\n                            $('#' + settings.idPrefix + '_SubRow_' + uniqueIndex).attr('colSpan', settings._visibleCount + (settings._hideLastColumn ? 0 : 1));\r\n                        }\r\n                    }\r\n                    // Save changes\r\n                    settings.columns[colIndex].invisible = false;\r\n                    this._saveSetting(settings);\r\n                }\r\n            }\r\n            return this;\r\n        },\r\n        hideColumn: function (name) {\r\n            var settings = this._checkGridAndGetSettings();\r\n            if (settings && name) {\r\n                // Find column index\r\n                var colIndex = -1, tbWhole = this[0];\r\n                for (var z = 0; z < settings.columns.length; z++) {\r\n                    if (settings.columns[z].name == name) {\r\n                        colIndex = z;\r\n                        break;\r\n                    }\r\n                }\r\n                // Make sure the column exist and hide the column if it is visible only\r\n                if (colIndex != -1 && !settings.columns[colIndex].invisible) {\r\n                    // Change caption and footer column span\r\n                    settings._visibleCount--;\r\n                    settings._finalColSpan--;\r\n                    $('#' + settings.idPrefix + '_caption_td').attr('colSpan', settings._finalColSpan);\r\n                    $('#' + settings.idPrefix + '_footer_td').attr('colSpan', settings._finalColSpan);\r\n                    // Add invisible class on each row\r\n                    $('#' + settings.idPrefix + '_' + name + '_td_head').addClass('invisible');\r\n                    for (var z = 0; z < settings._rowOrder.length; z++) {\r\n                        var uniqueIndex = settings._rowOrder[z];\r\n                        $('#' + settings.idPrefix + '_' + name + '_td_' + uniqueIndex).addClass('invisible');\r\n                        if (settings.useSubPanel) {\r\n                            $('#' + settings.idPrefix + '_SubRow_' + uniqueIndex).attr('colSpan', settings._visibleCount + (settings._hideLastColumn ? 0 : 1));\r\n                        }\r\n                    }\r\n                    // Save changes\r\n                    settings.columns[colIndex].invisible = true;\r\n                    this._saveSetting(settings);\r\n                }\r\n            }\r\n            return this;\r\n        },\r\n        isColumnInvisible: function (name) {\r\n            var settings = this._checkGridAndGetSettings();\r\n            if (settings && name) {\r\n                for (var z = 0; z < settings.columns.length; z++) {\r\n                    if (settings.columns[z].name == name) {\r\n                        return settings.columns[z].invisible;\r\n                    }\r\n                }\r\n            }\r\n            return null;\r\n        },\r\n        getRowCount: function () {\r\n            var settings = this._checkGridAndGetSettings();\r\n            if (settings) {\r\n                return settings._rowOrder.length;\r\n            }\r\n            return null;\r\n        },\r\n        getUniqueIndex: function (rowIndex) {\r\n            var settings = this._checkGridAndGetSettings();\r\n            if (settings && langx.isNumeric(rowIndex) && rowIndex < settings._rowOrder.length) {\r\n                return settings._rowOrder[rowIndex];\r\n            }\r\n            return null;\r\n        },\r\n        getRowIndex: function (uniqueIndex) {\r\n            var settings = this._checkGridAndGetSettings();\r\n            if (settings && langx.isNumeric(uniqueIndex)) {\r\n                for (var z = 0; z < settings._rowOrder.length; z++) {\r\n                    if (settings._rowOrder[z] == uniqueIndex) {\r\n                        return z;\r\n                    }\r\n                }\r\n            }\r\n            return null;\r\n        },\r\n        getRowValue: function (rowIndex, uniqueIndex, loopIndex) {\r\n            var settings = this._checkGridAndGetSettings(), result = null;\r\n            if (settings) {\r\n                if (langx.isNumeric(rowIndex) && rowIndex >= 0 && rowIndex < settings._rowOrder.length) {\r\n                    uniqueIndex = settings._rowOrder[rowIndex];\r\n                }\r\n                if (!isEmpty(uniqueIndex)) {\r\n                    result = getRowValue(settings, uniqueIndex, loopIndex);\r\n                }\r\n            }\r\n            return result;\r\n        },\r\n        getAllValue: function (objectMode) {\r\n            var settings = this._checkGridAndGetSettings(), result = null;\r\n            if (settings) {\r\n                // Prepare result based on objectMode setting\r\n                result = objectMode ? {} : [];\r\n                // Process on each rows\r\n                for (var z = 0; z < settings._rowOrder.length; z++) {\r\n                    if (objectMode) {\r\n                        rowValue = getRowValue(settings, settings._rowOrder[z], z);\r\n                        langx.extend(result, rowValue)\r\n                    } else {\r\n                        rowValue = getRowValue(settings, settings._rowOrder[z]);\r\n                        result.push(rowValue);\r\n                    }\r\n                }\r\n                if (objectMode) {\r\n                    result[settings.rowCountName] = settings._rowOrder.length;\r\n                }\r\n            }\r\n            return result;\r\n        },\r\n        getCtrlValue: function (name, rowIndex) {\r\n            var settings = this._checkGridAndGetSettings();\r\n            if (settings && rowIndex >= 0 && rowIndex < settings._rowOrder.length) {\r\n                for (var z = 0; z < settings.columns.length; z++) {\r\n                    if (settings.columns[z].name === name) {\r\n                        return getCtrlValue(settings, z, settings._rowOrder[rowIndex]);\r\n                    }\r\n                }\r\n            }\r\n            return null;\r\n        },\r\n        setCtrlValue: function (name, rowIndex, value) {\r\n            var settings = this._checkGridAndGetSettings();\r\n            if (settings && rowIndex >= 0 && rowIndex < settings._rowOrder.length) {\r\n                for (var z = 0; z < settings.columns.length; z++) {\r\n                    if (settings.columns[z].name == name) {\r\n                        setCtrlValue(settings, z, settings._rowOrder[rowIndex], value);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            return this;\r\n        },\r\n        getCellCtrl: function (name, rowIndex) {\r\n            var settings = this._checkGridAndGetSettings();\r\n            if (settings && rowIndex >= 0 && rowIndex < settings._rowOrder.length) {\r\n                var uniqueIndex = settings._rowOrder[rowIndex];\r\n                for (var z = 0; z < settings.columns.length; z++) {\r\n                    if (settings.columns[z].name === name) {\r\n                        return getCellCtrl(settings.columns[z].type, settings.idPrefix, name, uniqueIndex);\r\n                    }\r\n                }\r\n            }\r\n            return null;\r\n        },\r\n        getCellCtrlByUniqueIndex: function (name, uniqueIndex) {\r\n            var settings = this._checkGridAndGetSettings();\r\n            if (settings) {\r\n                for (var z = 0; z < settings.columns.length; z++) {\r\n                    if (settings.columns[z].name === name) {\r\n                        return getCellCtrl(settings.columns[z].type, settings.idPrefix, name, uniqueIndex);\r\n                    }\r\n                }\r\n            }\r\n            return null;\r\n        },\r\n        getRowOrder: function () {\r\n            var settings = this._checkGridAndGetSettings();\r\n            if (settings) {\r\n                // Return a copy of `Row Order` array\r\n                return settings._rowOrder.slice();\r\n            }\r\n            return null;\r\n        },\r\n        getColumns: function () {\r\n            var settings = this._checkGridAndGetSettings();\r\n            if (settings) {\r\n                // Return a copy of the columns array\r\n                return settings.columns.slice();\r\n            }\r\n            return null;\r\n        },\r\n        isRowEmpty: function (rowIndex) {\r\n            var settings = this._checkGridAndGetSettings();\r\n            if (settings) {\r\n                return isRowEmpty(settings, rowIndex);\r\n            }\r\n            return null;\r\n        },\r\n        removeEmptyRows: function () {\r\n            var settings = this._checkGridAndGetSettings();\r\n            if (settings) {\r\n                var tbWhole = this[0];\r\n                for (var z = settings._rowOrder.length; z >= 0; z--) {\r\n                    if (isRowEmpty(settings, z)) {\r\n                        // Remove itself\r\n                        this._removeRow( null, settings._rowOrder[z], true);\r\n                    }\r\n                }\r\n                return this;\r\n            }\r\n            return null;\r\n        }\r\n\r\n\r\n\r\n    });\r\n    // The default initial options.\r\n    var _defaultInitOptions = {\r\n        // The text as table caption, set null to disable caption generation.\r\n        caption: null,\r\n        // Tooltip for caption.\r\n        captionTooltip: null,\r\n        // The total number of empty rows generated when init the grid. This will be ignored if `initData` is assigned.\r\n        initRows: 3,\r\n        // The maximum number of rows allowed in this grid.\r\n        maxRowsAllowed: 0,\r\n        // An array of data to be filled after initialized the grid.\r\n        initData: null,\r\n        // Array of column options.\r\n        columns: null,\r\n        // Labels or messages used in grid.\r\n        i18n: null,\r\n        // The ID prefix of controls generated inside the grid. Table ID will be used if not defined.\r\n        idPrefix: null,\r\n        // Enable row dragging by using jQuery UI sortable on grid rows.\r\n        rowDragging: false,\r\n        // Hide the buttons at the end of rows or bottom of grid.\r\n        hideButtons: null,\r\n        // Hide the row number column.\r\n        hideRowNumColumn: false,\r\n        // Generate row buttom column in the front of input columns.\r\n        rowButtonsInFront: false,\r\n        // The variable name of row count used for object mode of getAllValue\r\n        rowCountName: '_RowCount',\r\n        // The extra class names for buttons.\r\n        buttonClasses: null,\r\n        // The extra class names for table sections.\r\n        sectionClasses: null,\r\n        // Custom the standard grid buttons.\r\n        customGridButtons: null,\r\n        // Adding extra button(s) at the end of rows.\r\n        customRowButtons: null,\r\n        // Adding extra button(s) at the bottom of grid.\r\n        customFooterButtons: null,\r\n        // Use the sub panel or not\r\n        useSubPanel: false,\r\n        // Maintain the scroll position after appended or removed last row.\r\n        maintainScroll: false,\r\n        // The maximum height of grid content, scroll bar will be display when the height is greater than this value.\r\n        maxBodyHeight: 0,\r\n        // Auto calculate the column width when scroll bar on table body is in use.\r\n        autoColumnWidth: true\r\n    };\r\n    var _defaultCallbackContainer = {\r\n        // The callback function for format the HTML name of generated controls.\r\n        nameFormatter: null,\r\n        // The callback function to be triggered after all data loaded to grid.\r\n        dataLoaded: null,\r\n        // The callback function to be triggered after data loaded to a row.\r\n        rowDataLoaded: null,\r\n        // The callback function to be triggered after new row appended.\r\n        afterRowAppended: null,\r\n        // The callback function to be triggered after new row inserted.\r\n        afterRowInserted: null,\r\n        // The callback function to be triggered after grid row swapped.\r\n        afterRowSwapped: null,\r\n        // The callback function to be triggered before grid row remove.\r\n        beforeRowRemove: null,\r\n        // The callback function to be triggered after grid row removed.\r\n        afterRowRemoved: null,\r\n        // The callback function to be triggered after grid row dragged.\r\n        afterRowDragged: null,\r\n        // The callback function for generating sub panel content.\r\n        subPanelBuilder: null,\r\n        // The callback function for getting values from sub panel. Used for `getAllValue` method.\r\n        subPanelGetter: null,\r\n        // The callback function to be triggered when row(s) is/are adding to grid but the maximum number of rows allowed is reached.\r\n        maxNumRowsReached: null\r\n    };\r\n    // Default column options.\r\n    var _defaultColumnOptions = {\r\n        // Type of column control.\r\n        type: 'text',\r\n        // Name of column.\r\n        name: null,\r\n        // Default value.\r\n        value: null,\r\n        // Display text on the header section.\r\n        display: null,\r\n        // Extra CSS setting to be added to display text.\r\n        displayCss: null,\r\n        // Tooltip for column head.\r\n        displayTooltip: null,\r\n        // The `colspan` setting on the column header.\r\n        headerSpan: 1,\r\n        // Extra CSS setting to be added to the control container table cell.\r\n        cellCss: null,\r\n        // Extra attributes to be added to the control.\r\n        ctrlAttr: null,\r\n        // Extra properties to be added to the control.\r\n        ctrlProp: null,\r\n        // Extra CSS to be added to the control.\r\n        ctrlCss: null,\r\n        // Extra name of class to be added to the control.\r\n        ctrlClass: null,\r\n        // The available option for building `select` type control.\r\n        ctrlOptions: null,\r\n        // Options for initalize jQuery UI widget.\r\n        uiOption: null,\r\n        // Options for initalize jQuery UI tooltip.\r\n        uiTooltip: null,\r\n        // Let column resizable by using jQuery UI Resizable Interaction.\r\n        resizable: false,\r\n        // Show or hide column after initialized.\r\n        invisible: false,\r\n        // The value to compare for indentify this column value is empty.\r\n        emptyCriteria: null,\r\n        // Callback function to build custom type control.\r\n        customBuilder: null,\r\n        // Callback function to get control value.\r\n        customGetter: null,\r\n        // Callback function to set control value.\r\n        customSetter: null,\r\n        // The `OnClick` event callback of control.\r\n        onClick: null,\r\n        // The `OnChange` event callback of control.\r\n        onChange: null\r\n    };\r\n    var _systemMessages = {\r\n        noColumnInfo: 'Cannot initial grid without column information!',\r\n        elemNotTable: 'Cannot initial grid on element other than TABLE!',\r\n        notInit: '`appendGrid` does not initialized',\r\n        getValueMultiGrid: 'Cannot get values on multiple grid',\r\n        notSupportMethod: 'Method is not supported by `appendGrid`: '\r\n    };\r\n    var _defaultTextResources = {\r\n        append: 'Append Row',\r\n        removeLast: 'Remove Last Row',\r\n        insert: 'Insert Row Above',\r\n        remove: 'Remove Current Row',\r\n        moveUp: 'Move Up',\r\n        moveDown: 'Move Down',\r\n        rowDrag: 'Sort Row',\r\n        rowEmpty: 'This Grid Is Empty'\r\n    };\r\n    var _defaultButtonClasses = { append: null, removeLast: null, insert: null, remove: null, moveUp: null, moveDown: null, rowDrag: null };\r\n    var _defaultSectionClasses = { caption: null, header: null, body: null, subPanel: null, footer: null };\r\n    var _defaultHideButtons = { append: false, removeLast: false, insert: false, remove: false, moveUp: false, moveDown: false };\r\n\r\n\r\n    function makeCustomBottomButton(tbWhole, buttonCfg) {\r\n        var exButton = $('<button/>').attr({ type: 'button', tabindex: -1 })\r\n        .button(buttonCfg.uiButton).click({ tbWhole: tbWhole }, buttonCfg.click);\r\n        if (buttonCfg.btnClass) exButton.addClass(buttonCfg.btnClass);\r\n        if (buttonCfg.btnCss) exButton.css(buttonCfg.btnCss);\r\n        if (buttonCfg.btnAttr) exButton.attr(buttonCfg.btnAttr);\r\n        return exButton;\r\n    }\r\n    function makeCustomRowButton(tbWhole, buttonCfg, uniqueIndex) {\r\n        var exButton = $('<button/>').val(uniqueIndex).attr({ type: 'button', tabindex: -1 })\r\n        .button(buttonCfg.uiButton).click({ tbWhole: tbWhole, uniqueIndex: uniqueIndex }, function (evt) {\r\n            var rowData = $(evt.data.tbWhole).plugin(\"lark.tabular\").getRowValue(null, evt.data.uniqueIndex);\r\n            buttonCfg.click(evt, evt.data.uniqueIndex, rowData);\r\n        });\r\n        if (buttonCfg.btnClass) exButton.addClass(buttonCfg.btnClass);\r\n        if (buttonCfg.btnCss) exButton.css(buttonCfg.btnCss);\r\n        if (buttonCfg.btnAttr) exButton.attr(buttonCfg.btnAttr);\r\n        return exButton;\r\n    }\r\n\r\n\r\n\r\n\r\n    function findRowIndex(uniqueIndex, settings) {\r\n        for (var z = 0; z < settings._rowOrder.length; z++) {\r\n            if (settings._rowOrder[z] == uniqueIndex) {\r\n                return z;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    function isEmpty(value) {\r\n        return typeof (value) == 'undefined' || value == null;\r\n    }\r\n    function getObjValue(obj, key) {\r\n        if (!isEmpty(obj) && langx.isPlainObject(obj) && !isEmpty(obj[key])) {\r\n            return obj[key];\r\n        }\r\n        return null;\r\n    }\r\n    function getRowIndex(settings, uniqueIndex) {\r\n        var rowIndex = null;\r\n        for (var z = 0; z < settings._rowOrder.length; z++) {\r\n            if (settings._rowOrder[z] == uniqueIndex) {\r\n                return z;\r\n            }\r\n        }\r\n        return rowIndex;\r\n    }\r\n    function getRowValue(settings, uniqueIndex, loopIndex) {\r\n        var result = {}, keyName = null, suffix = (isEmpty(loopIndex) ? '' : '_' + loopIndex);\r\n        for (var z = 0; z < settings.columns.length; z++) {\r\n            keyName = settings.columns[z].name + suffix;\r\n            result[keyName] = getCtrlValue(settings, z, uniqueIndex);\r\n        }\r\n        // Merge control values from sub panel if getter method defined\r\n        if (settings.useSubPanel && langx.isFunction(settings.subPanelGetter)) {\r\n            var adtData = settings.subPanelGetter(uniqueIndex);\r\n            if (langx.isPlainObject(adtData)) {\r\n                if (suffix == '') {\r\n                    // Extend to row data directly for array mode\r\n                    langx.extend(result, adtData);\r\n                } else {\r\n                    // For returning values in object mode, add suffix to all keys\r\n                    var newData = {};\r\n                    for (var key in adtData) {\r\n                        newData[key + suffix] = adtData[key];\r\n                    }\r\n                    langx.extend(result, newData);\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    function getCtrlValue(settings, colIndex, uniqueIndex) {\r\n        var type = settings.columns[colIndex].type, columnName = settings.columns[colIndex].name;\r\n        if (type == 'custom') {\r\n            if (langx.isFunction(settings.columns[colIndex].customGetter)) {\r\n                return settings.columns[colIndex].customGetter(settings.idPrefix, columnName, uniqueIndex);\r\n            } else {\r\n                return null;\r\n            }\r\n        } else {\r\n            var ctrl = getCellCtrl(type, settings.idPrefix, columnName, uniqueIndex);\r\n            if (ctrl == null) {\r\n                return null;\r\n            }\r\n            else if (type == 'checkbox') {\r\n                return ctrl.checked ? 1 : 0;\r\n            } else {\r\n                return $(ctrl).val();\r\n            }\r\n        }\r\n    }\r\n    function getCellCtrl(type, idPrefix, columnName, uniqueIndex) {\r\n        return document.getElementById(idPrefix + '_' + columnName + '_' + uniqueIndex);\r\n    }\r\n    function setCtrlValue(settings, colIndex, uniqueIndex, data) {\r\n        var type = settings.columns[colIndex].type;\r\n        var columnName = settings.columns[colIndex].name;\r\n        // Handle values by type\r\n        if (type == 'custom') {\r\n            if (langx.isFunction(settings.columns[colIndex].customSetter)) {\r\n                settings.columns[colIndex].customSetter(settings.idPrefix, columnName, uniqueIndex, data);\r\n            } else {\r\n                // `customSetter` is not a function?? Skip handling...\r\n            }\r\n        } else {\r\n            var element = getCellCtrl(type, settings.idPrefix, columnName, uniqueIndex);\r\n            if (type == 'checkbox') {\r\n                element.checked = (data != null && data != 0);\r\n            } else if (type == 'ui-selectmenu') {\r\n                element.value = (data == null ? '' : data);\r\n                $(element).selectmenu('refresh');\r\n            }\r\n            else {\r\n                $(element).val(data == null ? '' : data);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    function isRowEmpty(settings, rowIndex) {\r\n        for (var z = 0; z < settings.columns.length; z++) {\r\n            var uniqueIndex = settings._rowOrder[rowIndex];\r\n            var currentValue = getCtrlValue(settings, z, uniqueIndex);\r\n            // Check the empty criteria is function\r\n            if (langx.isFunction(settings.columns[z].emptyCriteria)) {\r\n                if (!settings.columns[z].emptyCriteria(currentValue)) {\r\n                    return false;\r\n                }\r\n            } else {\r\n                // Find the default value\r\n                var defaultValue = null;\r\n                if (!isEmpty(settings.columns[z].emptyCriteria)) {\r\n                    defaultValue = settings.columns[z].emptyCriteria;\r\n                } else {\r\n                    // Check default value based on its type\r\n                    if (settings.columns[z].type == 'checkbox') {\r\n                        defaultValue = 0;\r\n                    } else if (settings.columns[z].type == 'select' || settings.columns[z].type == 'ui-selectmenu') {\r\n                        var options = getCellCtrl(settings.columns[z].type, settings.idPrefix, settings.columns[z].name, uniqueIndex).options;\r\n                        if (options.length > 0) {\r\n                            defaultValue = options[0].value;\r\n                        } else {\r\n                            defaultValue = '';\r\n                        }\r\n                    } else {\r\n                        defaultValue = '';\r\n                    }\r\n                }\r\n                // Compare with the default value\r\n                if (currentValue != defaultValue) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n\r\n    /*\r\n    /// <summary>\r\n    /// Initialize append grid or calling its methods.\r\n    /// </summary>\r\n    $.fn.appendGrid = function (params) {\r\n        if (_methods[params]) {\r\n            return _methods[params].apply(this, Array.prototype.slice.call(arguments, 1));\r\n        } else if (typeof (params) === 'object' || !params) {\r\n            return _methods.init.apply(this, arguments);\r\n        } else {\r\n            alert(_systemMessages.notSupportMethod + params);\r\n        }\r\n    };\r\n    */\r\n\r\n    return Tabular ;\r\n});\r\n"]}