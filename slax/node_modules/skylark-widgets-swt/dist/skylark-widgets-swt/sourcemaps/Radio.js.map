{"version":3,"sources":["Radio.js"],"names":["define","langx","browser","eventer","noder","geom","$","swt","_Toggler","Radio","inherit","klassName","pluginName","_parse","$radio","this","checked","prop","disabled","state","set","_init","element","domNode","$element","tagName","toLowerCase","$label","find","$container","parent","options","ignoreVisibilityCheck","css","match","logError","containerSelector","attr","$toggleContainer","setInitialState","_sync","self","on","evt","_refresh","updates","overrided","changed","$lbl","$containerToggle","resetGroup","addClass","removeClass","setCheckedState","value","groupName","each","index","item"],"mappings":";;;;;;;AAAAA,QACE,sBACA,uBACA,uBACA,qBACA,oBACA,qBACA,QACA,cACA,SAASC,EAAMC,EAAQC,EAAQC,EAAMC,EAAKC,EAAEC,EAAIC,GAsHhD,OApHYD,EAAIE,MAAQD,EAASE,SAC/BC,UAAW,QAEXC,WAAa,aAEbC,OAAS,WACP,IAAIC,EAASC,KAAKD,OAGdE,EAAUF,EAAOG,KAAK,WACtBC,EAAWJ,EAAOG,KAAK,YAE3BF,KAAKI,MAAMC,IAAI,UAAUJ,GACzBD,KAAKI,MAAMC,IAAgBF,IAI7BG,MAAQ,WAEN,IAAIC,EAAUP,KAAKQ,QACfC,EAAWlB,EAAEgB,GAEjB,GAAsC,UAAlCA,EAAQG,QAAQC,cAApB,CAMAX,KAAKY,OAASH,EACdT,KAAKD,OAASC,KAAKY,OAAOC,KAAK,0BAC/Bb,KAAKc,WAAaL,EAASM,OAAO,cAE7Bf,KAAKgB,QAAQC,uBAAyBjB,KAAKD,OAAOmB,IAAI,cAAcC,MAAM,oBAC7EC,SAAS,uOAIX,IAAIC,EAAoBrB,KAAKD,OAAOuB,KAAK,eACzCtB,KAAKuB,iBAAmBhC,EAAE8B,GAI1BrB,KAAKwB,uBAnBHJ,SAAS,sPAsBbK,MAAQ,WAEN,IAAIC,EAAO1B,KACXA,KAAKD,OAAO4B,GAAG,SAAU,SAASC,GAEhC,IAAI3B,EAAUyB,EAAK3B,OAAOG,KAAK,WAC/BwB,EAAKtB,MAAMC,IAAI,UAAUJ,MAI7B4B,SAAW,SAASC,GAmChB9B,KAAK+B,UAAUC,SACf,IAf2B7B,EACrBJ,EACAkC,EAaFP,EAAQ1B,KAER8B,EAAiB,SApCrB,SAA0B7B,GACxB,IAAIF,EAAS2B,EAAK3B,OACdkC,EAAOP,EAAKd,OACZsB,EAAmBR,EAAKH,iBAExBtB,GAEFD,KAAKmC,aAELpC,EAAOG,KAAK,WAAW,GACvB+B,EAAKG,SAAS,WACdF,EAAiBG,YAAY,iBAE7BtC,EAAOG,KAAK,WAAW,GACvB+B,EAAKI,YAAY,WACjBH,EAAiBE,SAAS,WAsB5BE,CAAgBR,EAAiB,QAAES,OAEjCT,EAAkB,WApBK3B,EAqBR2B,EAAkB,SAAES,MApBjCxC,EAAS2B,EAAK3B,OACdkC,EAAOP,EAAKd,OAEZT,GACFJ,EAAOG,KAAK,YAAY,GACxB+B,EAAKG,SAAS,cAEdrC,EAAOG,KAAK,YAAY,GACxB+B,EAAKI,YAAY,eAgBzBF,WAAY,WACI5C,EAAE,eAAiBS,KAAKwC,UAAY,MAC1CC,KAAK,SAAqBC,EAAOC,GACvC,IAAI5C,EAASR,EAAEoD,GACXV,EAAOlC,EAAOgB,SACdM,EAAoBtB,EAAOuB,KAAK,eAChCY,EAAmB3C,EAAE8B,GAGzBY,EAAKI,YAAY,WACjBH,EAAiBE,SAAS","file":"../Radio.js","sourcesContent":["define([\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-browser\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-geom\",\r\n  \"skylark-domx-query\",\r\n  \"./swt\",\r\n  \"./_Toggler\"\r\n],function(langx,browser,eventer,noder,geom,$,swt,_Toggler){\r\n\r\n  var Radio = swt.Radio = _Toggler.inherit({\r\n    klassName: \"Radio\",\r\n\r\n    pluginName : \"lark.radio\",\r\n\r\n    _parse : function() {\r\n      var $radio = this.$radio;\r\n\r\n      // get current state of input\r\n      var checked = $radio.prop('checked');\r\n      var disabled = $radio.prop('disabled');\r\n\r\n      this.state.set(\"checked\",checked);\r\n      this.state.set((\"disabled\",disabled));\r\n\r\n    },\r\n\r\n    _init : function() {\r\n      //this.options = langx.mixin({}, $.fn.checkbox.defaults, options);\r\n      var element = this.domNode;\r\n      var $element = $(element);\r\n\r\n      if (element.tagName.toLowerCase() !== 'label') {\r\n        logError('Radio must be initialized on the `label` that wraps the `input` element. See https://github.com/ExactTarget/fuelux/blob/master/reference/markup/checkbox.html for example of proper markup. Call `.checkbox()` on the `<label>` not the `<input>`');\r\n        return;\r\n      }\r\n\r\n      // cache elements\r\n      this.$label = $element;\r\n      this.$radio = this.$label.find('input[type=\"checkbox\"]');\r\n      this.$container = $element.parent('.checkbox'); // the container div\r\n\r\n      if (!this.options.ignoreVisibilityCheck && this.$radio.css('visibility').match(/hidden|collapse/)) {\r\n        logError('For accessibility reasons, in order for tab and space to function on checkbox, checkbox `<input />`\\'s `visibility` must not be set to `hidden` or `collapse`. See https://github.com/ExactTarget/fuelux/pull/1996 for more details.');\r\n      }\r\n\r\n      // determine if a toggle container is specified\r\n      var containerSelector = this.$radio.attr('data-toggle');\r\n      this.$toggleContainer = $(containerSelector);\r\n\r\n\r\n      // set default state\r\n      this.setInitialState();\r\n    },\r\n\r\n    _sync : function() {\r\n      // handle internal events\r\n      var self = this;\r\n      this.$radio.on('change', function(evt) {\r\n        //var $radio = $(evt.target);\r\n        var checked = self.$radio.prop('checked');\r\n        self.state.set(\"checked\",checked);\r\n      });\r\n    },\r\n\r\n    _refresh : function(updates) {\r\n\r\n        function setCheckedState (checked) {\r\n          var $radio = self.$radio;\r\n          var $lbl = self.$label;\r\n          var $containerToggle = self.$toggleContainer;\r\n\r\n          if (checked) {\r\n            // reset all items in group\r\n            this.resetGroup();\r\n\r\n            $radio.prop('checked', true);\r\n            $lbl.addClass('checked');\r\n            $containerToggle.removeClass('hide hidden');\r\n          } else {\r\n            $radio.prop('checked', false);\r\n            $lbl.removeClass('checked');\r\n            $containerToggle.addClass('hidden');\r\n          }\r\n        }\r\n\r\n        function setDisabledState (disabled) {\r\n          var $radio = self.$radio;\r\n          var $lbl = self.$label;\r\n\r\n          if (disabled) {\r\n            $radio.prop('disabled', true);\r\n            $lbl.addClass('disabled');\r\n          } else {\r\n            $radio.prop('disabled', false);\r\n            $lbl.removeClass('disabled');\r\n          }\r\n        }\r\n\r\n        // update visual with attribute values from control\r\n        this.overrided(changed);\r\n        var self  = this;\r\n\r\n        if (updates[\"checked\"]) {\r\n          setCheckedState(updates[\"checked\"].value);\r\n        }\r\n        if (updates[\"disabled\"]) {\r\n          setDisabledState(updates[\"disabled\"].value);\r\n        }\r\n    },\r\n\r\n    resetGroup: function resetGroup () {\r\n      var $radios = $('input[name=\"' + this.groupName + '\"]');\r\n      $radios.each(function resetRadio (index, item) {\r\n        var $radio = $(item);\r\n        var $lbl = $radio.parent();\r\n        var containerSelector = $radio.attr('data-toggle');\r\n        var $containerToggle = $(containerSelector);\r\n\r\n\r\n        $lbl.removeClass('checked');\r\n        $containerToggle.addClass('hidden');\r\n      });\r\n    }\r\n  });\r\n\r\n  return Radio;\r\n});\r\n\r\n"]}