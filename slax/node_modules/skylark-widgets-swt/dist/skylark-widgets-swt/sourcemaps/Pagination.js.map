{"version":3,"sources":["Pagination.js"],"names":["define","langx","browser","eventer","noder","geom","$","swt","Widget","Pagination","inherit","klassName","pluginName","options","tagName","css","selectors","firstNavi","prevNavi","nextNavi","lastNavi","numericNavi","numericTxt","totalPages","maxButtonsVisible","currentPage","state","Number","_parse","elm","_create","self","_init","this","$first","_velm","$prev","$last","$next","$numeric","checkCanAction","$elm","is","click","ret","numeric","find","text","pageNo","parseInt","set","overrided","_refresh","updates","totalPageNoBtns","Math","min","begin","end","count","size","visibles","i","filter","removeClass","$btn","eq","show","addClass","hide","changePageNoBtns","changeLabeldBtns"],"mappings":";;;;;;;AAAAA,QACE,sBACA,uBACA,uBACA,qBACA,oBACA,qBACA,QACA,YACA,SAASC,EAAMC,EAAQC,EAAQC,EAAMC,EAAKC,EAAEC,EAAIC,GAE9C,aA6NA,OA3NiBD,EAAIE,WAAaD,EAAOE,SACrCC,UAAY,aAEZC,WAAa,kBAEbC,SACIC,QAAU,KACVC,IAAM,GACNC,WACIC,UAAY,yBACZC,SAAW,wBACXC,SAAW,wBACXC,SAAW,wBACXC,YAAc,uBACdC,WAAc,KAElBC,WAAY,EACZC,kBAAmB,EACnBC,YAAa,GAGjBC,OACIH,WAAaI,OACbF,YAAcE,QAGlBC,OAAS,SAASC,EAAIhB,KAItBiB,QAAU,SAASC,KAGnBC,MAAQ,WACNC,KAAKC,OAASD,KAAKE,MAAM7B,EAAE2B,KAAKpB,QAAQG,UAAUC,WAClDgB,KAAKG,MAAQH,KAAKE,MAAM7B,EAAE2B,KAAKpB,QAAQG,UAAUE,UACjDe,KAAKI,MAAQJ,KAAKE,MAAM7B,EAAE2B,KAAKpB,QAAQG,UAAUI,UACjDa,KAAKK,MAAQL,KAAKE,MAAM7B,EAAE2B,KAAKpB,QAAQG,UAAUG,UACjDc,KAAKM,SAAWN,KAAKE,MAAM7B,EAAE2B,KAAKpB,QAAQG,UAAUK,aAEpD,IAAIU,EAAOE,KAEX,SAASO,EAAeX,GACtB,IAAIY,EAAOnC,EAAEuB,GACb,OAAIY,EAAKC,GAAG,sBAGHD,EAIXR,KAAKC,OAAOS,MAAM,WACXH,EAAeP,OAGpBF,EAAKN,YAAY,KAGnBQ,KAAKG,MAAMO,MAAM,WACVH,EAAeP,OAGpBF,EAAKN,YAAYM,EAAKN,cAAc,KAGtCQ,KAAKI,MAAMM,MAAM,WACVH,EAAeP,OAGpBF,EAAKN,YAAYM,EAAKR,gBAGxBU,KAAKK,MAAMK,MAAM,WACVH,EAAeP,OAGpBF,EAAKN,YAAYM,EAAKN,cAAc,KAGtCQ,KAAKM,SAASI,MAAM,WAClB,IAAIC,EAAMJ,EAAeP,MACzB,GAAKW,EAAL,CAGA,IAAIC,EAAUD,EAAIE,KAAKf,EAAKlB,QAAQG,UAAUM,YAAYyB,OACtDC,EAASC,SAASJ,GACtBd,EAAKN,YAAYuB,MAInBf,KAAKP,MAAMwB,IAAI,cAAcjB,KAAKpB,QAAQY,aAC1CQ,KAAKP,MAAMwB,IAAI,aAAajB,KAAKpB,QAAQU,YAEzCU,KAAKkB,aAGPC,SAAU,SAAUC,GAClBpB,KAAKkB,UAAUE,GACf,IAAItB,EAAOE,KA6GX,GAAIoB,EAAQ5B,aAAe4B,EAAQ9B,WAAY,CAC7C,IAAIE,EAAcM,EAAKN,cACnBF,EAAaQ,EAAKR,cA7GxB,SAA0BE,EAAYF,GAapC,IATA,IAAI+B,EAAkBC,KAAKC,IAAIjC,EAAYQ,EAAKlB,QAAQW,mBACpDiC,EAAQ,EACRC,EAAMD,EAAQH,EAAkB,EAO5B7B,EAAcgC,GAAWhC,EAAciC,GACzCjC,EAAciC,GACfD,GAASH,GACTI,GAAOJ,GAEG/B,IACRkC,GAAiBC,EAAMnC,EACvBmC,EAAMnC,KAIRmC,GAAOJ,GADPG,GAASH,GAGG,IACVI,GAAaD,EAAQH,EACrBG,EAAQ,IAQVhC,IAAgBiC,GAAuB,GAAdnC,IAE5BmC,GADAD,EAAQhC,EAAc,GACR6B,EAAkB,IAErB/B,IACTkC,GAAiBC,EAAM,EACvBA,EAAMnC,GAQJkC,IAAUhC,GAA+B,GAAdF,GACX,GAAfE,IAEFgC,GADAC,EAAMjC,EAAc,IACL6B,EAAkB,IAIrC,IAAIK,EAAQ5B,EAAKQ,SAASqB,OACtBC,EAAWH,EAAID,EAAQ,EACvBK,EAAI,EAGR,IADA/B,EAAKQ,SAASwB,OAAO,WAAWC,YAAY,UACrCF,EAAED,GAAU,CACjB,IAAIb,EAASc,EAAIL,EACbQ,EAAOlC,EAAKQ,SAAS2B,GAAGJ,GAC5BG,EAAKnB,KAAKf,EAAKlB,QAAQG,UAAUM,YAAYyB,KAAKe,EAAEL,GAAOU,OACvDnB,GAAUvB,GACbwC,EAAKG,SAAS,UAEfN,IAEF,KAAOA,EAAEH,GACP5B,EAAKQ,SAAS2B,GAAGJ,GAAGhB,KAAKf,EAAKlB,QAAQG,UAAUM,YAAYyB,KAAKe,EAAEL,GAAOY,OAC1EP,IAsCHQ,CAAiB7C,EAAYF,GAhC/B,SAA0BE,EAAYF,GACpC,GAAIE,EAAc,EAChB,KAAK,4BACA,GAAIA,EAAcF,EACvB,KAAK,kCAGP,GAAIA,EAAa,EACf,KAAK,mCAGY,GAAfE,GACFM,EAAKG,OAAOkC,SAAS,YACrBrC,EAAKK,MAAMgC,SAAS,cAEpBrC,EAAKG,OAAO8B,YAAY,YACxBjC,EAAKK,MAAM4B,YAAY,aAGrBvC,GAAeF,GACjBQ,EAAKM,MAAM+B,SAAS,YACpBrC,EAAKO,MAAM8B,SAAS,cAEpBrC,EAAKM,MAAM2B,YAAY,YACvBjC,EAAKO,MAAM0B,YAAY,aASzBO,CAAiB9C,EAAYF","file":"../Pagination.js","sourcesContent":["define([\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-browser\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-geom\",\r\n  \"skylark-domx-query\",\r\n  \"./swt\",\r\n  \"./Widget\"\r\n],function(langx,browser,eventer,noder,geom,$,swt,Widget){\r\n\r\n    'use strict';\r\n\r\n    var Pagination = swt.Pagination = Widget.inherit({\r\n        klassName : \"Pagination\",\r\n\r\n        pluginName : \"lark.pagination\",\r\n\r\n        options : {\r\n            tagName : \"ul\",\r\n            css : \"\",\r\n            selectors : {\r\n                firstNavi : \"li[aria-label='first']\",\r\n                prevNavi : \"li[aria-label='prev']\",\r\n                nextNavi : \"li[aria-label='next']\",\r\n                lastNavi : \"li[aria-label='last']\",\r\n                numericNavi : \"li:not([aria-label])\",\r\n                numericTxt  : \"a\"\r\n            },\r\n            totalPages: 7,\r\n            maxButtonsVisible: 5,\r\n            currentPage: 1     \r\n        },\r\n\r\n        state : {\r\n            totalPages : Number,\r\n            currentPage : Number\r\n        },\r\n\r\n        _parse : function(elm,options) {\r\n\r\n        },\r\n        \r\n        _create : function(self) {\r\n        },\r\n\r\n        _init : function() {\r\n          this.$first = this._velm.$(this.options.selectors.firstNavi);\r\n          this.$prev = this._velm.$(this.options.selectors.prevNavi);\r\n          this.$last = this._velm.$(this.options.selectors.lastNavi);\r\n          this.$next = this._velm.$(this.options.selectors.nextNavi);\r\n          this.$numeric = this._velm.$(this.options.selectors.numericNavi);\r\n\r\n          var self = this;\r\n\r\n          function checkCanAction(elm) {\r\n            var $elm = $(elm);\r\n            if ($elm.is(\".disabled,.active\")) {\r\n              return false;\r\n            } else {\r\n              return $elm;\r\n            }\r\n          }\r\n\r\n          this.$first.click(function(){\r\n            if (!checkCanAction(this)) {\r\n              return;\r\n            }\r\n            self.currentPage(1);\r\n          });\r\n\r\n          this.$prev.click(function(){\r\n            if (!checkCanAction(this)) {\r\n              return;\r\n            }\r\n            self.currentPage(self.currentPage()-1);\r\n          });\r\n\r\n          this.$last.click(function(){\r\n            if (!checkCanAction(this)) {\r\n              return;\r\n            }\r\n            self.currentPage(self.totalPages());\r\n          });\r\n\r\n          this.$next.click(function(){\r\n            if (!checkCanAction(this)) {\r\n              return;\r\n            }\r\n            self.currentPage(self.currentPage()+1);\r\n          });\r\n\r\n          this.$numeric.click(function(){\r\n            var ret = checkCanAction(this)\r\n            if (!ret) {\r\n              return;\r\n            }\r\n            var numeric = ret.find(self.options.selectors.numericTxt).text(),\r\n                pageNo = parseInt(numeric);\r\n            self.currentPage(pageNo);\r\n\r\n          });\r\n\r\n          this.state.set(\"currentPage\",this.options.currentPage);\r\n          this.state.set(\"totalPages\",this.options.totalPages);\r\n\r\n          this.overrided();\r\n        },\r\n\r\n        _refresh: function (updates) {\r\n          this.overrided(updates);\r\n          var self = this;\r\n\r\n          function changePageNoBtns(currentPage,totalPages) {\r\n\r\n            // Create the numeric buttons.\r\n            // Variable of number control in the buttons.\r\n            var totalPageNoBtns = Math.min(totalPages, self.options.maxButtonsVisible);\r\n            var begin = 1;\r\n            var end = begin + totalPageNoBtns - 1;\r\n\r\n            /*\r\n             * Align the values in the begin and end variables if the user has the\r\n             * possibility that select a page that doens't appear in the paginador.\r\n             * e.g currentPage = 1, and user go to the 20 page.\r\n             */\r\n            while ((currentPage < begin) || (currentPage > end)) {\r\n              if (currentPage > end) {\r\n                 begin += totalPageNoBtns;\r\n                 end += totalPageNoBtns;\r\n\r\n                 if (end > totalPages) {\r\n                   begin = begin - (end - totalPages);\r\n                   end = totalPages;\r\n                 }\r\n               } else {\r\n                 begin -= totalPageNoBtns;\r\n                 end -= totalPageNoBtns;\r\n\r\n                 if (begin < 0) {\r\n                   end = end + (begin + totalPageNoBtns);\r\n                   begin = 1;\r\n                 }\r\n               }\r\n            }\r\n           /*\r\n            * Verify if the user clicks in the last page show by paginator.\r\n            * If yes, the paginator advances.\r\n            */\r\n            if ((currentPage === end) && (totalPages != 1)) {\r\n              begin = currentPage - 1;\r\n              end = begin + totalPageNoBtns - 1;\r\n\r\n              if (end >= totalPages) {\r\n                begin = begin - (end - (totalPages));\r\n                end = totalPages;\r\n              }\r\n            }\r\n\r\n            /*\r\n             * Verify it the user clicks in the first page show by paginator.\r\n             * If yes, the paginator retrogress\r\n             */\r\n             if ((begin === currentPage) && (totalPages != 1)) {\r\n               if (currentPage != 1) {\r\n                 end = currentPage + 1;\r\n                 begin = end - (totalPageNoBtns - 1);\r\n               }\r\n             }\r\n\r\n             var count = self.$numeric.size(),\r\n                 visibles = end-begin + 1,\r\n                 i = 0;\r\n\r\n             self.$numeric.filter(\".active\").removeClass(\"active\");\r\n             while (i<visibles) {\r\n               var pageNo = i + begin,\r\n                   $btn = self.$numeric.eq(i);\r\n               $btn.find(self.options.selectors.numericTxt).text(i+begin).show();\r\n               if (pageNo == currentPage) {\r\n                $btn.addClass(\"active\");\r\n               }\r\n               i++;\r\n             }\r\n             while (i<count) {\r\n               self.$numeric.eq(i).find(self.options.selectors.numericTxt).text(i+begin).hide();\r\n               i++;\r\n             }\r\n\r\n\r\n          }\r\n\r\n          function changeLabeldBtns(currentPage,totalPages) {\r\n            if (currentPage < 1) {\r\n              throw('Page can\\'t be less than 1');\r\n            } else if (currentPage > totalPages) {\r\n              throw('Page is bigger than total pages');\r\n            }\r\n\r\n            if (totalPages < 1) {\r\n              throw('Total Pages can\\'t be less than 1');\r\n            }\r\n\r\n            if (currentPage == 1 ) {\r\n              self.$first.addClass(\"disabled\");\r\n              self.$prev.addClass(\"disabled\");\r\n            } else {\r\n              self.$first.removeClass(\"disabled\");\r\n              self.$prev.removeClass(\"disabled\");\r\n            }\r\n\r\n            if (currentPage == totalPages ) {\r\n              self.$last.addClass(\"disabled\");\r\n              self.$next.addClass(\"disabled\");\r\n            } else {\r\n              self.$last.removeClass(\"disabled\");\r\n              self.$next.removeClass(\"disabled\");\r\n            }\r\n          }\r\n\r\n          if (updates.currentPage || updates.totalPages) {\r\n            var currentPage = self.currentPage(),\r\n                totalPages = self.totalPages();\r\n\r\n            changePageNoBtns(currentPage,totalPages);\r\n            changeLabeldBtns(currentPage,totalPages);\r\n          }\r\n\r\n        }\r\n\r\n    });\r\n\r\n    return Pagination;\r\n});"]}