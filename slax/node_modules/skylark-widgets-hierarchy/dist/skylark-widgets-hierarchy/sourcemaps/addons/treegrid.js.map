{"version":3,"sources":["addons/treegrid.js"],"names":["define","langx","browser","eventer","noder","geom","$","menu","jstree","BLANKRE","IDREGEX","styled","generateCellId","tree","id","replace","escapeId","getIds","nodes","makeArray","map","this","findDataCell","uniq","ids","col","scope","undefined","length","cellId","ret","columns","concat","join","forEach","elm","i","find","isClickedSep","toResize","oldMouseX","newMouseX","htmlstripre","copyData","fromtree","from","totree","to","recurse","j","data","extend","children_d","get_node","findLastClosedNode","node","children","state","opened","getCellData","value","defaults","grid","width","plugins","options","parent","_guid","s4","Math","floor","random","toString","substring","_initialize","_initialized","s","settings","container","element","gs","_gridSettings","treeClass","context","contextmenu","columnWidth","defaultConf","*display","*+display","isThemeroller","_data","themeroller","treeWidthDiff","resizable","draggable","stateful","indent","sortOrder","sortAsc","caseInsensitive","fixedHeader","height","gridcontextmenu","treecol","gridcols","cols","columnSearch","val","t","target","edit","label","action","obj","_edit","len","push","ceil","rootid","attr","test","navigator","userAgent","toLowerCase","parseFloat","appVersion","split","display","zoom","appendTo","gridWrapper","addClass","insertAfter","midWrapper","append","scroll","css","scrollTop","defaultSort","proxy","sort","a","b","bigger","colrefs","caseInsensitiveSort","get_text","localeCompare","nodeA","nodeB","valueA","valueB","ui","sortable","axis","handle","cancel","start","event","item","index","stop","splice","console","warn","searchColumn","searchObj","validatedSearchObj","columnIndex","hasOwnProperty","Object","keys","search","column","search_callback","str","columnValue","vakata","caseSensitive","searchSettings","case_sensitive","fuzzy","isMatch","omniSearchCallback","f","matched","text","searchValue","trigger","init","el","call","bind","on","e","_detachColumns","_prepare_grid","_reattachColumns","removeNodes","remove","_hideOrShowTree","_hide_grid","_prepare_headers","q","anchorHeight","outerHeight","cls","match","new_instance","each","selected","_hover_node","removeClass","nodesToShow","endTime","that","startTime","Date","getTime","filter","holdingCells","cells","som","smc","add","parentsUntil","hide","_domManipulation","show","time","newtree","oldtree","old_instance","original","rslt","nextAll","localStorage","teardown","gw","gridparent","detach","_clean_grid","cl","ccl","name","last","coluuid","_this","defaultWidth","tr","classAdd","hasHeaders","conf","headerClass","columnClass","header","String","minWidth","maxWidth","html","core","themes","ellipsis","prependTo","outerWidth","next","bound","document","mouseup","ref","currentTree","colNum","prevAll","closest","reference","isNaN","mousemove","oldPrevHeaderInner","oldPrevColWidth","newPrevColWidth","diff","pageX","innerWidth","max","newWidth","stopPropagation","symbol","rootNode","redraw_node","mw","parentNode","removeChild","appendChild","open_node","callback","animation","isArray","deep","is_callback","force_render","refresh","apply","arguments","set_id","old","result","oldNodes","_hideOrShowNode","child","lenj","getHoldingCells","hc","hidden","prop","rtl","w","h1","position","top","left","visibility","h2","class","padding","border","box-sizing","lineHeight","blur","v","keydown","key","which","stopImmediatePropagation","preventDefault","click","mousedown","keyup","min","keypress","fn","fontFamily","fontSize","fontWeight","fontStyle","fontStretch","fontVariant","letterSpacing","wordSpacing","select","grid_hide_column","grid_show_column","img","wcl","valClass","wideValClass","span","paddingleft","title","gridCellName","gridCellParentId","gridCellParent","gridCellPrev","gridCellPrevId","gridCellNext","gridCellNextId","gridCellChild","gridCellChildId","content","highlightSearch","isClicked","c","objData","cellClickHandler","create","sourceName","isDefaultPrevented","cellRightClickHandler","popup","x","y","pageY","hoverInHandler","jsTreeInstance","hover_node","hoverOutHandler","dehover_node","lid","peers","pos","inArray","rendered","hasClass","renderATitle","cellClass","wideCellClass","format","images","substr","valueClass","valueClassPrefix","wideValueClass","wideValueClassPrefix","insertBefore","toRen","after","hover","overflow-y"],"mappings":";;;;;;;AAAAA,QACE,sBACA,uBACA,uBACA,qBACA,oBACA,qBACA,SACA,gBACA,SAASC,EAAMC,EAAQC,EAAQC,EAAMC,EAAKC,EAAEC,EAAKC,GAC/C,IAAIC,EAAU,SACVC,EAAU,sCASVC,GAAS,EAETC,EAAiB,SAASC,EAAMC,GAC5B,MAAQ,UAAYD,EAAO,SAXpB,SAASC,GAChB,OAAQA,GAAM,IAAIC,QAAQL,EAAS,QAUGM,CAASF,GAAM,QAEzDG,EAAS,SAASC,GACd,OAAOZ,EAAEa,UAAUD,EAAME,IAAI,WACzB,OAAOC,KAAKP,OAGpBQ,EAAe,SAASC,EAAMC,EAAKC,EAAKC,GAIpC,QAHaC,GAATD,IACAA,EAAQpB,KAEA,OAARkB,QAAwBG,IAARH,GAAoC,IAAfA,EAAII,OACzC,OAAOF,EAEX,IAEIG,EAFAC,EAAMxB,IACNyB,KAAaC,OAAOP,GAiBxB,MAfoB,iBAAV,GACNI,EAASjB,EAAeW,EAAMC,GAC9BM,EAAMC,EAAQX,IAAI,SAASK,GACvB,MAAO,IAAMI,EAASJ,IACvBQ,KAAK,QAERH,KACAN,EAAIU,QAAQ,SAASC,EAAKC,GACtB,IAAIP,EAASjB,EAAeW,EAAMY,GAClCL,EAAMA,EAAIE,OAAOD,EAAQX,IAAI,SAASK,GAClC,MAAO,IAAMI,EAASJ,OAG9BK,EAAMA,EAAIG,KAAK,OAEM,GAAlBF,EAAQH,OAAcF,EAAMW,KAAKP,GAAOxB,EAAEwB,IAErDQ,GAAe,EACfC,EAAW,KACXC,EAAY,EACZC,EAAY,EAGZC,EAAc,eAwCdC,EAAW,SAASC,EAAUC,EAAMC,EAAQC,EAAIC,GAC5C,IAAIZ,EAAGa,EAEP,GADAF,EAAGG,KAAO5C,EAAE6C,QAAO,KAAUN,EAAKK,MAC9BL,GAAQA,EAAKO,YAAcJ,EAC3B,IAAKZ,EAAI,EAAGa,EAAIJ,EAAKO,WAAWxB,OAAQQ,EAAIa,EAAGb,IAC3CO,EAASC,EAAUA,EAASS,SAASR,EAAKO,WAAWhB,IAAKU,EAAQA,EAAOO,SAASN,EAAGK,WAAWhB,IAAKY,IAKjHM,EAAqB,SAASzC,EAAMC,GAEhC,IAASyC,EAAO1C,EAAKwC,SAASvC,GAC1B0C,EAAWD,EAAKC,SAOpB,OALKA,GAAYA,EAAS5B,QAAU,IAAM2B,EAAKE,MAAMC,OAC3C5C,EAEAwC,EAAmBzC,EAAM2C,EAASA,EAAS5B,OAAS,KAiClE+B,EAAc,SAASC,EAAOV,GAc1B,YAXcvB,IAAViC,GAAiC,OAAVA,EACD,mBAAZ,EACAA,EAAMV,GACS,OAAdA,EAAKA,WAA+BvB,IAAduB,EAAKA,WAA2CvB,IAArBuB,EAAKA,KAAKU,GAC5DV,EAAKA,KAAKU,GAEV,GAGJ,IAgyClB,OA3xCAtD,EAAEE,OAAOqD,SAASC,MACdC,MAAO,QAGXzD,EAAEE,OAAOwD,QAAQF,KAAO,SAASG,EAASC,GA2sBtC,SAASC,IACL,SAASC,IACL,OAAOC,KAAKC,MAA4B,OAArB,EAAID,KAAKE,WACvBC,SAAS,IACTC,UAAU,GAEnB,OAAOL,IAAOA,IAAO,IAAMA,IAAO,IAAMA,IAAO,IAC3CA,IAAO,IAAMA,IAAOA,IAAOA,IAjtBnC/C,KAAKqD,YAAc,WACf,IAAKrD,KAAKsD,aAAc,CACpB,IAAIC,EAAIvD,KAAKwD,SAASf,SACVgB,EAAYzD,KAAK0D,QAEzBC,EAAK3D,KAAK4D,eACNlD,QAAS6C,EAAE7C,YACXmD,UAAW,oBACXC,QAASP,EAAEQ,cAAe,EAC1BC,YAAaT,EAAES,YACfC,aACIC,WAAY,SACZC,YAAa,UAEjBC,gBAAiBpE,KAAKqE,MAAMC,YAC5BC,cAAe,EACfC,UAAWjB,EAAEiB,UACbC,UAAWlB,EAAEkB,UACbC,SAAUnB,EAAEmB,SACZC,OAAQ,EACRC,UAAW,OACXC,SAAS,EACTC,gBAAiBvB,EAAEuB,gBACnBC,aAA+B,IAAlBxB,EAAEwB,YACfrC,MAAOa,EAAEb,MACTsC,OAAQzB,EAAEyB,OACVC,gBAAiB1B,EAAE0B,gBACnBC,QAAS,EACTC,aAEJC,EAAOzB,EAAGjD,QACVwE,EAAU,EACVG,GAAe,GACQ,IAAvB1B,EAAGsB,gBACHtB,EAAGsB,gBAAkB,SAASxC,EAAMjD,EAAM0C,EAAMoD,EAAKlF,EAAKmF,EAAGC,GACzD,OACIC,MACIC,MAAO,OACPC,OAAU,SAAS9D,GACf,IAAI+D,EAAML,EAAEvD,SAASE,GACrBO,EAAKoD,MAAMD,EAAKxF,EAAKoF,QAKP,IAAvB7B,EAAGsB,kBACVtB,EAAGsB,iBAAkB,GAGzB,IAAK,IAAIlE,EAAI,EAAG+E,EAAMvC,EAAE7C,QAAQH,OAAQQ,EAAI+E,EAAK/E,IACzCwC,EAAE7C,QAAQK,GAAGvB,MAEb0F,EAAUnE,EACV4C,EAAGuB,QAAUA,GAEbvB,EAAGwB,SAASY,KAAKhF,GAQzB,GAJAf,KAAKE,KAAO8C,KAAKgD,KAAqB,IAAhBhD,KAAKE,UAC3BlD,KAAKiG,OAASxC,EAAUyC,KAAK,MAElB,OAAOC,KAAKC,UAAUC,UAAUC,eAEzBC,WAAWH,UAAUI,WAAWC,MAAM,QAAQ,IAC9C,IACV9C,EAAGM,YAAYyC,QAAU,SACzB/C,EAAGM,YAAY0C,KAAO,KAKzBrH,IACDA,GAAS,EAmBTL,EAAE,2BAjBE,6IACA,mHACA,sLACA,8GACA,iEACA,0FACA,uCACA,qEACA,+EACA,+FACA,+FACA,gDACA,sDACA,+DACA,mDACA,qCAEiC2B,KAAK,MAAQ,YAAYgG,SAAS,SAE3E5G,KAAK6G,YAAc5H,EAAE,eAAe6H,SAAS,uBAAuBC,YAAYtD,GAChFzD,KAAKgH,WAAa/H,EAAE,eAAe6H,SAAS,0BAA0BF,SAAS5G,KAAK6G,aAEhFtD,EAAEb,OACF1C,KAAK6G,YAAYnE,MAAMa,EAAEb,OAEzBa,EAAEyB,QACFhF,KAAK6G,YAAY7B,OAAOzB,EAAEyB,QAG9B,IAASjE,EAAI,EAAG+E,EAAMV,EAAK7E,OAAQQ,EAAI+E,EAAK/E,IAExC9B,EAAE,eAAe6H,SAAS,wDAA0D/F,EAAI,4BAA8Bf,KAAKiG,QAAQW,SAAS5G,KAAKgH,YAErJhH,KAAKgH,WAAW7E,SAAS,UAAY+C,EAAU,KAAK+B,OAAOxD,GAC3DA,EAAUqD,SAAS,oBAGfnD,EAAGoB,aACH/E,KAAK6G,YAAYK,OAAO,WACpBjI,EAAEe,MAAMgB,KAAK,uBAAuBmG,IAAI,MAAOlI,EAAEe,MAAMoH,eAK/D,IAiCY5F,EAAME,EAjCd2F,EAAcpI,EAAEqI,MAAMtH,KAAKwD,SAAS+D,KAAMvH,MA6B9C,GA1BAA,KAAKwD,SAAS+D,KAAO,SAASC,EAAGC,GAC7B,IAAIC,EAAQC,EAAU3H,KAAK2H,QAE3B,GAAqB,SAAjBhE,EAAGiB,UAAsB,CACzB,IAAIgD,EAAsB5H,KAAK6H,SAASL,GAAGlB,cAAcwB,cAAc9H,KAAK6H,SAASJ,GAAGnB,eACxFoB,EAAS/D,EAAGmB,gBAA2C,IAAxB8C,EAAoD,IAAtBP,EAAYG,EAAGC,OACzE,CAGH,IAAIM,EAAQ/H,KAAKgC,SAASwF,GACtBQ,EAAQhI,KAAKgC,SAASyF,GACtBlF,EAAQoF,EAAQhE,EAAGiB,WAAWrC,MAC9B0F,EAA2B,mBAAZ,EAAyB1F,EAAMwF,GAASA,EAAMlG,KAAKU,GAClE2F,EAA2B,mBAAZ,EAAyB3F,EAAMyF,GAASA,EAAMnG,KAAKU,QAC7B,IAAb,IACxBmF,EAAS/D,EAAGmB,gBAAkBmD,EAAO3B,cAAgB4B,EAAO5B,cAAgB2B,EAASC,GAO7F,OAHKvE,EAAGkB,UACJ6C,GAAUA,GAEPA,EAAS,GAAK,GAIrB/D,EAAGc,UACH,GAAKxF,EAAEkJ,IAAOlJ,EAAEkJ,GAAGC,SAKfnJ,EAAEe,KAAKgH,YAAYoB,UACfC,KAAM,IACNC,OAAQ,sBACRC,OAAQ,yBACRC,MAAO,SAASC,EAAON,GACnB3G,EAAO2G,EAAGO,KAAKC,SAEnBC,KAAM,SAASH,EAAON,GAClBzG,EAAKyG,EAAGO,KAAKC,QACbhF,EAAGjD,QAAQmI,OAAOnH,EAAI,EAAGiC,EAAGjD,QAAQmI,OAAOrH,EAAM,GAAG,YAb5DsH,QAAQC,KAAK,qDAoBrB/I,KAAKgJ,aAAe,SAASC,GACzB,IAAIC,KAEJ,GAAwB,iBAAbD,EACP,IAAK,IAAIE,KAAeF,EAChBA,EAAUG,eAAeD,IAIrBA,EAAc,GAAM,GAAKA,EAAc/D,EAAK7E,QAAU4I,GAAe,IACrED,EAAmBC,GAAeF,EAAUE,IAK5D9D,EAAe6D,EAEgC,IAA3CG,OAAOC,KAAKJ,GAAoB3I,OAEhCP,KAAKuJ,OAAO,aAEZvJ,KAAKuJ,OAAO,IAEhBlE,GAAe,GAKnB,IAAStE,EAAI,EAAG+E,EAAMV,EAAK7E,OAAQQ,EAAI+E,EAAK/E,IAAK,CAC7C,IAAIyI,EAASpE,EAAKrE,GACqB,mBAA5ByI,EAAsB,kBAE7BA,EAAOC,gBAAkB,SAASC,EAAKC,EAAazH,EAAMsH,GAMtD,OALQ,IAAIvK,EAAE2K,OAAOL,OAAOG,GAAK,GAC7BG,cAAeC,EAAeC,eAC9BC,MAAOF,EAAeE,QAGjBT,OAAOI,GAAaM,UAQzC,IAAIH,EAAiB9J,KAAKwD,SAAS+F,OAC/BW,EAAqBJ,EAAeL,gBAEnCS,IACDA,EAAqB,SAASR,EAAKxH,GAC/B,IAKI9B,EALG+J,EAAI,IAAIlL,EAAE2K,OAAOL,OAAOG,GAAK,GAC5BG,cAAeC,EAAeC,eAC9BC,MAAOF,EAAeE,QAE1BI,EAAUD,EAAEZ,OAAOrH,EAAKmI,MAAMJ,QAIlC,IAAKG,EACD,IAAK,IAAIrJ,EAAI,EAAG+E,EAAMV,EAAK7E,OAAQQ,EAAI+E,KAC/BZ,IAAYnE,IAGhBX,EAAMgF,EAAKrE,GACXqJ,EAAUD,EAAEZ,OAAOjH,EAAYlC,EAAImC,MAAOL,IAAO+H,UALTlJ,KAWhD,OAAOqJ,IAIfN,EAAeL,gBAAkB,SAASC,EAAKxH,GAC3C,IAAIkI,GAAU,EACd,GAAI/E,EAAc,CAEd,IAAK,IAAI8D,KAAe9D,EACpB,GAAIA,EAAa+D,eAAeD,GAAc,CAC1C,IAAImB,EAAcjF,EAAa8D,GAC/B,GAAmB,IAAfmB,EACA,SAEJ,IAAIlK,EAAMgF,EAAK+D,GAOf,KALIiB,EADAlF,GAAWiE,EACD/I,EAAIqJ,gBAAgBa,EAAapI,EAAKmI,KAAMnI,EAAM9B,GAElDA,EAAIqJ,gBAAgBa,EAAahI,EAAYlC,EAAImC,MAAOL,GAAOA,EAAM9B,IAI/E,MAKZqD,EAAU8G,QAAQ,iCAElBH,EAAUF,EAAmBR,EAAKxH,GAClCuB,EAAU8G,QAAQ,0BAEtB,OAAOH,GAEXpK,KAAKsD,cAAe,IAG5BtD,KAAKwK,KAAO,SAASC,EAAI7H,GACrBC,EAAO2H,KAAKE,KAAK1K,KAAMyK,EAAI7H,GAC3B5C,KAAKqD,eAETrD,KAAK2K,KAAO,WACR9H,EAAO8H,KAAKD,KAAK1K,MACjBA,KAAKqD,cACLrD,KAAK0D,QACAkH,GAAG,2EAA4E3L,EAAEqI,MAAM,SAASuD,EAAGhJ,GAChG,IAAI2D,EAASxF,KAAKgC,SAASH,GAAQ,KAAK,GACpCpC,EAAKqD,IACT9C,KAAK8K,eAAerL,GACpBO,KAAK+K,cAAcvF,GACnBxF,KAAKgL,iBAAiBvL,IACvBO,OACF4K,GAAG,qBAAsB3L,EAAEqI,MAAM,SAASuD,EAAGhJ,GAC1C,QAAqBvB,IAAjBuB,EAAKK,KAAKzC,GAAkB,CACjBO,KAAK6G,YAAhB,IACIoE,GAAepJ,EAAKK,KAAKzC,IAGzBoC,EAAKK,MAAQL,EAAKK,KAAKH,aACvBkJ,EAAcA,EAAYtK,OAAOkB,EAAKK,KAAKH,aAE/C9B,EAAaD,KAAKE,KAAM+K,EAAajL,KAAK4D,cAAcuB,UAAU+F,WAEvElL,OACF4K,GAAG,mBAAoB3L,EAAEqI,MAAM,SAASuD,EAAGhJ,GACxC7B,KAAKmL,gBAAgBtJ,EAAKK,MAAM,IACjClC,OACF4K,GAAG,mBAAoB3L,EAAEqI,MAAM,SAASuD,EAAGhJ,GACxC7B,KAAKmL,gBAAgBtJ,EAAKK,MAAM,IACjClC,OACF4K,GAAG,oBAAqB3L,EAAEqI,MAAM,SAASuD,EAAGhJ,GACzC7B,KAAKoL,WAAWvJ,EAAKK,OACtBlC,OACF4K,GAAG,mBAAoB3L,EAAEqI,MAAM,SAASuD,EAAGhJ,KAAU7B,OACrD4K,GAAG,mBAAoB3L,EAAEqI,MAAM,SAASuD,EAAGhJ,KAAU7B,OACrD4K,GAAG,gBAAiB3L,EAAEqI,MAAM,SAASuD,GAClC7K,KAAKqL,mBACLrL,KAAK0D,QAAQ6G,QAAQ,uBACtBvK,OACF4K,GAAG,eAAgB3L,EAAEqI,MAAM,SAASuD,EAAGhJ,GAEpC,IACIyJ,EADAC,EAAevL,KAAK0D,QAAQ1C,KAAK,kCAAkCwK,cAEnEC,EAAMzL,KAAK0D,QAAQwC,KAAK,UAAY,GACxCjH,EAAE,oDAAsDe,KAAKiG,OAAS,kBAAoBsF,EAAe,eAAiBA,EAAe,gBAAgB3E,SAAS,QAGlK0E,EAAIG,EAAIhF,MAAM,OAAO1G,IAAI,SAASgB,GAE9B,OADYA,EAAE2K,MAAM,gBACJ,GAAK3K,IAEzBf,KAAK6G,YAAYC,SAASwE,EAAE1K,KAAK,OAElCZ,OACF4K,GAAG,mBAAoB3L,EAAEqI,MAAM,SAASuD,EAAGhJ,GAC7BA,EAAK8J,aAAajI,QAGxB1C,KAAK,UAAU4K,KAAK3M,EAAEqI,MAAM,SAASvG,EAAGD,KAE1Cd,QAEJA,OACF4K,GAAG,oBAAqB3L,EAAEqI,MAAM,SAASpF,EAAM2J,EAAUpD,GACtD,IAAIhJ,EAAKoM,EAAS3J,KAAKzC,GACE,OAArBO,KAAK8L,kBAA6CxL,IAArBN,KAAK8L,aAClC7L,EAAaD,KAAKE,KAAMF,KAAK8L,YAAa9L,KAAK4D,cAAcuB,UAAU4G,YAAY,kBAEvF/L,KAAK8L,YAAcrM,EACnBQ,EAAaD,KAAKE,KAAMT,EAAIO,KAAK4D,cAAcuB,UAAU2B,SAAS,mBACnE9G,OACF4K,GAAG,sBAAuB3L,EAAEqI,MAAM,SAASpF,EAAM2J,EAAUpD,GACxD,IAAIhJ,EAAKoM,EAAS3J,KAAKzC,GACvBO,KAAK8L,YAAc,KACnB7L,EAAaD,KAAKE,KAAMT,EAAIO,KAAK4D,cAAcuB,UAAU4G,YAAY,mBACtE/L,OACF4K,GAAG,qBAAsB3L,EAAEqI,MAAM,SAASpF,EAAM2J,EAAUpD,GACvD,IAAIhJ,EAAKoM,EAAS3J,KAAKzC,GACvBQ,EAAaD,KAAKE,KAAMT,EAAIO,KAAK4D,cAAcuB,UAAU2B,SAAS,kBAClE9G,KAAKgC,SAAS6J,EAAS3J,KAAKzC,IAAI,GAAM0C,SAAS,wBAAwB2E,SAAS,mBACjF9G,OACF4K,GAAG,uBAAwB3L,EAAEqI,MAAM,SAASpF,EAAM2J,EAAUpD,GACzD,IAAIhJ,EAAKoM,EAAS3J,KAAKzC,GACvBQ,EAAaD,KAAKE,KAAMT,EAAIO,KAAK4D,cAAcuB,UAAU4G,YAAY,mBACtE/L,OACF4K,GAAG,sBAAuB3L,EAAEqI,MAAM,SAASpF,EAAM2J,EAAUpD,GAExD,IAAItI,EAAM0L,EAAS3J,SAEnBjC,EAAaD,KAAKE,KAAMC,EAAKH,KAAK4D,cAAcuB,UAAU4G,YAAY,mBACvE/L,OACF4K,GAAG,gBAAiB3L,EAAEqI,MAAM,SAASuD,EAAGhJ,GAErC,IAEImK,EAEAC,EAJAxJ,EAAOzC,KAAK6G,YACZqF,EAAOlM,KACMmM,GAAY,IAAIC,MAAOC,UACpClM,EAAMP,EAAOiC,EAAKhC,MAAMyM,OAAO,iBAGnC,GADAtM,KAAKuM,gBACD1K,EAAKhC,MAAMU,OAAQ,CACnB,IAAId,EAAKqD,IAEL0J,EAAQ/J,EAAKzB,KAAK,gCACtBhB,KAAK8K,eAAerL,GAChBO,KAAKqE,MAAMkF,OAAOkD,MAEdzM,KAAKqE,MAAMkF,OAAOmD,MAClBV,EAAcnK,EAAKhC,MAAM8M,IAAI9K,EAAKhC,MAAMmB,KAAK,kBAEjDgL,GAAeA,GAAenK,EAAKhC,OAAO8M,IAAI9K,EAAKhC,MAAM+M,aAAa,YAGtEJ,EAAMK,OAENb,EAAYM,OAAO,gBAAgBV,KAAK,SAAS7K,EAAGmB,GAChD,IAAIzC,EAAKyC,EAAKzC,GACd,GAAIA,EAAI,CACJyM,EAAKnB,cAAc7I,GACVnB,EAAI,EAAb,IAAK,IAAW+E,EAAMoG,EAAKtI,cAAcuB,SAAS5E,OAAQQ,EAAI+E,EAAK/E,IAC3DA,IAAMmL,EAAKtI,cAAcsB,SAG7BjF,EAAaiM,EAAKhM,KAAMT,EAAIyM,EAAKtI,cAAcuB,SAASpE,GAAI9B,EAAEiN,EAAKY,iBAAiBpM,QAAQK,KAAKgM,WAMjH,IAAK,IAAIhM,EAAI,EAAG+E,EAAM9F,KAAK4D,cAAcuB,SAAS5E,OAAQQ,EAAI+E,EAAK/E,IAC3DA,IAAMf,KAAK4D,cAAcsB,SAG7BjF,EAAaiM,EAAKhM,KAAMC,EAAKH,KAAK4D,cAAcuB,SAASpE,GAAI9B,EAAEe,KAAK8M,iBAAiBpM,QAAQK,KAAK+F,SA5jBxG,iBA8jBE9G,KAAKgL,iBAAiBvL,GACtBwM,GAAU,IAAIG,MAAOC,UACrBrM,KAAK0D,QAAQ6G,QAAQ,gCACjByC,KAAMf,EAAUE,KAGxB,OAAO,GACRnM,OACF4K,GAAG,sBAAuB3L,EAAEqI,MAAM,SAASuD,EAAGhJ,GAE3C,IAAIY,EAAOzC,KAAK6G,YACZ1G,EAAMP,EAAOiC,EAAKhC,MAAMyM,OAAO,iBAGnC,OAFA7J,EAAKzB,KAAK,wBAAwB+L,OAClC9M,EAAaD,KAAKE,KAAMC,EAAKH,KAAK4D,cAAcuB,UAAU4G,YA3kBxD,kBA4kBK,GACR/L,OACF4K,GAAG,mBAAoB,SAASC,EAAGhJ,GAChC,IAAIoL,EAAUpL,EAAK8J,aACfuB,EAAUrL,EAAKsL,aACfvH,EAAMqH,EAAQjL,SAASH,EAAKK,MAAM,GAKtC,OAJAZ,EAAS4L,EAASrL,EAAKuL,SAAUH,EAASpL,EAAKK,MAAM,GACrD+K,EAAQnC,eAAelF,EAAInG,IAC3BwN,EAAQlC,cAAcnF,GACtBqH,EAAQjC,iBAAiBpF,EAAInG,KACtB,IAEVmL,GAAG,uBAAwB3L,EAAEqI,MAAM,SAASuD,EAAGhJ,GAE5C,OADA7B,KAAK6G,YAAY7F,KAAK,qBAAqB2L,IAAI,sBAAuB3M,KAAK6G,aAAaC,SAAS,yBAC1F,GACR9G,OACF4K,GAAG,uBAAwB3L,EAAEqI,MAAM,SAASuD,EAAGhJ,GAE5C,OADA7B,KAAK6G,YAAY7F,KAAK,qBAAqB2L,IAAI,sBAAuB3M,KAAK6G,aAAakF,YAAY,yBAC7F,GACR/L,OACHA,KAAK4D,cAAcQ,eACnBpE,KAAK0D,QACAkH,GAAG,qBAAsB3L,EAAEqI,MAAM,SAASuD,EAAGhJ,GAC1CA,EAAKwL,KAAKzH,IAAIzD,SAAS,4BAA4BmL,QAAQ,OAAOxG,SAAS,oBAC5E9G,OACF4K,GAAG,2CAA4C3L,EAAEqI,MAAM,SAASuD,EAAGhJ,GAChEA,EAAKwL,KAAKzH,IAAIzD,SAAS,4BAA4BmL,QAAQ,OAAOvB,YAAY,oBAC/E/L,OACF4K,GAAG,oBAAqB3L,EAAEqI,MAAM,SAASuD,EAAGhJ,GACzCA,EAAKwL,KAAKzH,IAAIzD,SAAS,4BAA4BmL,QAAQ,OAAOxG,SAAS,mBAC5E9G,OACF4K,GAAG,sBAAuB3L,EAAEqI,MAAM,SAASuD,EAAGhJ,GAC3CA,EAAKwL,KAAKzH,IAAIzD,SAAS,4BAA4BmL,QAAQ,OAAOvB,YAAY,mBAC/E/L,OAGPA,KAAK4D,cAAcc,UACnB1E,KAAK0D,QACAkH,GAAG,4BAA6B3L,EAAEqI,MAAM,SAASuD,EAAGzK,EAAKsC,GACtD6K,aAAa,eAAiBvN,KAAKiG,OAAS,WAAa7F,GAAOsC,GACjE1C,QAKfA,KAAKwN,SAAW,WACZ,IAAIC,EAAKzN,KAAK6G,YACVpD,EAAYzD,KAAK0D,QACjBgK,EAAaD,EAAG5K,SACpBY,EAAUkK,SACVF,EAAGvC,SACHwC,EAAWzG,OAAOxD,GAClBZ,EAAO2K,SAAS9C,KAAK1K,OAGzBA,KAAK4N,YAAc,SAASpI,EAAQ/F,GAChC,IAAIgD,EAAOzC,KAAK6G,YACZrB,EACAvF,EAAaD,KAAKE,KAAMT,EAAIO,KAAK4D,cAAcuB,UAAU+F,SAGzDzI,EAAKzB,KAAK,gCAAgCkK,UAIlDlL,KAAKqL,iBAAmB,WACpB,IAAejL,EAGXsC,EAEAmL,EAAIC,EAAKxI,EAAKyI,EAAMC,EAOpBC,EAZgBC,EAAQlO,KACxB2D,EAAK3D,KAAK4D,cACVwB,EAAOzB,EAAGjD,YACHyN,EAAexK,EAAGK,YACzBQ,EAAYb,EAAGa,YAAa,EACF4J,EAAKzK,EAAGS,cAClCiK,EAAYD,EAAK,cAAgB,UAEjCE,GAAa,EACbZ,EAAa1N,KAAK0N,WAClBzH,EAASjG,KAAKiG,OACdsI,EAAO5K,EAAGM,YAMdjE,KAAK6C,OAAS6K,EAGd1N,KAAK2H,WAIL,IAAK,IAAI5G,EAAI,EAAG+E,EAAMV,EAAK7E,OAAQQ,EAAI+E,EAAK/E,IAAK,CAG7C8M,EAAKzI,EAAKrE,GAAGyN,aAAe,GAC5BV,EAAM1I,EAAKrE,GAAG0N,aAAe,GAC7BnJ,EAAMF,EAAKrE,GAAG2N,QAAU,GACxB,GACIT,EAAUU,OAAO3L,KAAKC,MAAsB,IAAhBD,KAAKE,sBACF5C,IAA1BN,KAAK2H,QAAQsG,IAEtBF,EAAO3I,EAAKrE,GAAGwB,MAAQ0L,EAAU,OACjCjO,KAAK2H,QAAQoG,GAAQ3I,EAAKrE,GAEtBuE,IACAgJ,GAAa,GAGb5L,EADAiB,EAAGe,UAAY6I,aAAa,eAAiBtH,EAAS,WAAalF,GAC3DwM,aAAa,eAAiBtH,EAAS,WAAalF,GAEpDqE,EAAKrE,GAAG2B,OAASyL,EAE7B,IAAIS,EAAWxJ,EAAKrE,GAAG6N,UAAYlM,EAC/BmM,EAAWzJ,EAAKrE,GAAG8N,UAAYnM,EAIrB,SAAVA,GAAsC,iBAAZ,IAC1BA,GAFU0L,EAAK,EAAQ,IAI3BhO,EAAMJ,KAAKgH,WAAW7E,SAAS,0BAA4BpB,IAC3DiN,EAAO/O,EAAE,eAAekI,IAAIoH,GAAMzH,SAAS,mBAAqB9G,KAAKE,KAAO,IAAMa,EAAI,KAAOqN,EAAK,oBAAsB,IAAM,kEAAoEC,EAAW,IAAMR,EAAK,IAAMC,GAAKgB,KAAKxJ,IACnOwB,UAAUsH,EAAK,oBAAsB,IAAM,yCAA2CC,IAChD,IAAvCrO,KAAKwD,SAASuL,KAAKC,OAAOC,UAC1BjB,EAAKlH,SAAS,wBAElBkH,EAAKkB,UAAU9O,GACf4N,EAAK9H,KA3sBG,yBA2sBiB6H,GACXC,EAAKmB,aACVlQ,EAAE,2DAA6DoP,GAAYD,EAAK,oBAAsB,KAAO5J,EAAY,mCAAqC,IAAM,kBAAkBoC,SAASoH,GACxM5N,EAAIsC,MAAMA,GACVtC,EAAI+G,IAAI,YAAayH,GACrBxO,EAAI+G,IAAI,YAAa0H,GAGzBb,EAAKlH,UAAUsH,EAAK,oBAAsB,IAAM,iEAAmEC,QAE/E/N,IAAhC8E,EAAKA,EAAK7E,OAAS,GAAGmC,QACRA,EACdtC,EAAI+G,KACAzE,MAAO,SAEXsL,EAAKlH,SAAS,0BAA0BsI,KAAK,0BAA0BlE,UAEvEoD,EAGA3K,EAAG+K,YAhFHA,EAkFAzP,EAAE,0BAA0B4N,QAG3B7M,KAAKqP,OAAS7K,IACfxE,KAAKqP,OAAQ,EACbpQ,EAAEqQ,UAAUC,QAAQ,WAChB,IAAIC,EAAW9M,EAAgB+M,EAAaC,EACxCzO,IACAyO,EAASxO,EAASyO,QAAQ,uBAAuBpP,OACjDkP,EAAcvO,EAAS0O,QAAQ,wBAAwB5O,KAAK,YAC5DwO,EAAMvQ,EAAEE,OAAO0Q,UAAUJ,IACdjM,SAASf,KAAK/B,QACfQ,EAAS2B,SAASV,SAAS,2BACjC2N,MAAMJ,IAAWA,EAAS,KAC1BF,EAAI5L,cAAcW,cAAgBkL,EAAYzO,KAAK,aAAa0B,QAAU+M,EAAYzO,KAAK,kCAAkC0B,QAAU8M,EAAI5L,cAAclD,QAAQ,GAAGgC,OAExKA,EAAQ8M,EAAI5L,cAAclD,QAAQgP,GAAQhN,MAAQ6D,WAAWrF,EAASiG,IAAI,UAC1ElG,GAAe,EACfC,EAAW,KAEXuO,EAAYlF,QAAQ,6BAA8BmF,EAAQhN,OAE/DqN,UAAU,SAASlF,GAClB,GAAI5J,EAAc,CAEd,IACI+O,EACAC,EAAiBC,EAFjBC,GADJ/O,EAAYyJ,EAAEuF,OACSjP,EAIV,IAATgP,IACAH,EAAqB9O,EAASwB,SAC9BuN,EAAkB1J,WAAWrF,EAASiG,IAAI,aAKtC8I,EAAkB/O,EAASmP,cAK/BH,EAAkBD,GADlBE,EAAOA,EAAO,EAAInN,KAAKsN,IAAIH,GAAOH,GAAsBG,IAInDA,EAAO,GAAKH,EAAqB,IAAME,EAxwBlD,KAywBUhP,EAASwB,MAAMwN,EAAkB,MACjChP,EAASiG,IAAI,YAAa+I,EAAkB,MAC5ChP,EAASiG,IAAI,YAAa+I,EAAkB,MAC5C/O,EAAYC,OAK5BpB,KAAK6G,YAAY+D,GAAG,cAAe,mCAAoC,WAC/D,OAAO,IACRA,GAAG,YAAa,mCAAoC,SAASC,GAK5D,OAJA5J,GAAe,EACfE,EAAY0J,EAAEuF,MACdlP,EAAWjC,EAAEe,MAAM4P,QAAQ,2BAEpB,IAEVhF,GAAG,WAAY,mCAAoC,SAASC,GACzD,IAIIsF,EAGAD,EANA9P,EADanB,EAAEe,MACE4P,QAAQ,0BACzBK,EAAkB1J,WAAWnG,EAAI+G,IAAI,UACrCoJ,EAAW,EAEXb,EAAStP,EAAIuP,QAAQ,uBAAuBpP,OAC5CyP,EAAqB5P,EAAIsC,QAK7BtC,EAAIY,KAAK,qBAAqB4K,KAAK,WAC/B,IACIlJ,EADAgG,EAAOzJ,EAAEe,MAEb0I,EAAKvB,IAAI,WAAY,YACrBuB,EAAKvB,IAAI,QAAS,QAClBzE,EAAQgG,EAAKyG,aACbzG,EAAKvB,IAAI,WAAY,YAEjBzE,EAAQ6N,IACRA,EAAW7N,KAQnBwN,EAAmBD,GADnBE,GAHAA,EAAOI,EAAWN,GAGJ,EAAIjN,KAAKsN,IAAIH,GAAOH,GAAsBG,GACX,KAE7C/P,EAAIsC,MAAMwN,GACV9P,EAAI+G,IAAI,YAAa+I,GACrB9P,EAAI+G,IAAI,YAAa+I,GAErBjR,EAAEe,MAAM4P,QAAQ,wBAAwB5O,KAAK,WAAWuJ,QAAQ,6BAA8BmF,EAAQQ,MAEzGtF,GAAG,QAAS,yBAA0B,SAASC,GAE5CA,EAAE2F,qBAGdxQ,KAAK6G,YAAY+D,GAAG,QAAS,2BAA4B,SAASC,GAC9D,GAAKqD,EAAM3G,KAAX,CAKA,IAGIkJ,EAHA1C,EAAO9O,EAAEe,MAAMkG,KA/0BX,0BAm1BJvC,EAAGiB,YAAcmJ,IAAuB,IAAfpK,EAAGkB,SAC5BlB,EAAGkB,SAAU,EACb4L,EAAS,WAET9M,EAAGiB,UAAYmJ,EACfpK,EAAGkB,SAAU,EACb4L,EAAS,UAIbxR,EAAEe,KAAK4P,QAAQ,yBAAyB5O,KAAK,0BAA0BkK,SACvEjM,EAAE,iBAAiB6H,SAAS,yBAAyBF,SAAS3H,EAAEe,OAAO8O,KAAK2B,GAG5E,IAAIC,EAAWxC,EAAMlM,SAAS,KAC9BkM,EAAM3G,KAAKmJ,GAAU,GACrBxC,EAAMyC,YAAYD,GAAU,OAKpC1Q,KAAK8M,iBAAmB,KAcxB9M,KAAK8K,eAAiB,SAASrL,GAE3B,GAA6B,MAAzBO,KAAK8M,iBAA0B,CAC/B,IAAI1H,EAAOpF,KAAK4D,cAAclD,YAE1BkQ,GADU5Q,KAAK4D,cAAcsB,QACxBlF,KAAKgH,YACdhH,KAAK8M,kBACDrN,GAAIA,EACJiB,YAEJ,IAAK,IAAIK,EAAI,EAAG+E,EAAMV,EAAK7E,OAAQQ,EAAI+E,EAAK/E,IAIxCf,KAAK8M,iBAAiBpM,QAAQK,GAAK6P,EAAGzO,SAAS,uBAAyBpB,GAAG,GAC3Ef,KAAK8M,iBAAiBpM,QAAQK,GAAG8P,WAAWC,YAAY9Q,KAAK8M,iBAAiBpM,QAAQK,IAG9F,OAAOf,KAAK8M,kBAGhB9M,KAAKgL,iBAAmB,SAASvL,GAC7B,GAA6B,MAAzBO,KAAK8M,iBACL,OAAO,EAEX,GAAI9M,KAAK8M,iBAAiBrN,KAAOA,EAAI,CAIjC,IAHA,IAAI2F,EAAOpF,KAAK4D,cAAclD,YAE1BkQ,GADU5Q,KAAK4D,cAAcsB,QACxBlF,KAAKgH,YACLjG,EAAI,EAAG+E,EAAMV,EAAK7E,OAAQQ,EAAI+E,EAAK/E,IAIxC6P,EAAG,GAAGG,YAAY/Q,KAAK8M,iBAAiBpM,QAAQK,IAEpDf,KAAK8M,iBAAmB,KAE5B,OAAO,GAMX9M,KAAKgR,UAAY,SAASpL,EAAKqL,EAAUC,GACrC,IAAIC,EAAUlS,EAAEkS,QAAQvL,GACpB1D,EAAO,KACX,GAAKiP,GAEe,OADhBjP,EAAOlC,KAAKgC,SAAS4D,IACZnG,GAFb,CAMA,IAAIA,EAAK0R,EAAUrO,IAAUZ,EAAKzC,GAClCO,KAAK8K,eAAerL,GACpB,IAAIgB,EAAMoC,EAAOmO,UAAUtG,KAAK1K,KAAM4F,EAAKqL,EAAUC,GAErD,OADAlR,KAAKgL,iBAAiBvL,GACfgB,IAMXT,KAAK2Q,YAAc,SAAS/K,EAAKwL,EAAMC,EAAaC,GAChD,IAAI7R,EAAKR,EAAEkS,QAAQvL,GAAO9C,IAAU9C,KAAKgC,SAAS4D,GAAKnG,GAWvD,OATAO,KAAK8K,eAAerL,IAEpBmG,EAAM/C,EAAO8N,YAAYjG,KAAK1K,KAAM4F,EAAKwL,EAAMC,EAAaC,KAGxDtR,KAAK+K,cAAcnF,GAGvB5F,KAAKgL,iBAAiBvL,GACfmG,GAEX5F,KAAKuR,QAAU,WAEX,OADAvR,KAAK4N,cACE/K,EAAO0O,QAAQC,MAAMxR,KAAMyR,YAKtCzR,KAAK0R,OAAS,SAAS9L,EAAKnG,GACxB,IAAIkS,EAAKzR,EAAOF,KAAKE,KACjB0F,IACA+L,EAAM/L,EAAInG,IAEd,IAAImS,EAAS/O,EAAO6O,OAAOF,MAAMxR,KAAMyR,WACvC,GAAIG,QACYtR,IAARqR,EAAmB,CACR3R,KAAK6G,YAAhB,IACIgL,GAAYF,GAGZ/L,GAAOA,EAAI7D,aACX8P,EAAWA,EAASlR,OAAOiF,EAAI7D,aAGnC9B,EAAaC,EAAM2R,EAAU7R,KAAK4D,cAAcuB,UAC3Ce,KA39BA,kBA29BqBN,EAAInG,IACzBsM,YAAYxM,EAAeW,EAAMyR,IACjC7K,SAASvH,EAAeW,EAAM0F,EAAInG,KAClCmM,KAAK,SAAS7K,EAAGmB,GACdjD,EAAEiD,GAAMgE,KAAK,KAAM3G,EAAeW,EAAM0F,EAAInG,KAAOsB,EAAI,MAIvE,OAAO6Q,GAGX5R,KAAKmL,gBAAkB,SAASjJ,EAAM2K,GAElC7M,KAAK8K,eAAe5I,EAAKzC,IAEzBO,KAAK8R,gBAAgB5P,EAAM2K,EAAM7M,KAAK4D,cAAclD,YAAeV,KAAK4D,cAAcsB,SACtFlF,KAAKgL,iBAAiB9I,EAAKzC,KAE/BO,KAAK8R,gBAAkB,SAAS5P,EAAM2K,EAAMzH,EAAMF,GAE9C,IAAK,IAAInE,EAAI,EAAG+E,EAAMV,EAAK7E,OAAQQ,EAAI+E,EAAK/E,IACxC,GAAIA,IAAMmE,EAAV,CAGA,IAAIsH,EAAQvM,EAAaD,KAAKE,KAAMgC,EAAKzC,GAAIsB,EAAG9B,EAAEe,KAAK8M,iBAAiBpM,QAAQK,KAC5E8L,EACAL,EAAM1F,SAAS,sBAEf0F,EAAMT,YAAY,sBAG1B,GAAI7J,EAAKE,MAAMC,QAAUH,EAAKC,SAC1B,IAASpB,EAAI,EAAG+E,EAAM5D,EAAKC,SAAS5B,OAAQQ,EAAI+E,EAAK/E,IACjDf,KAAK8R,gBAAgB9R,KAAKgC,SAASE,EAAKC,SAASpB,IAAK8L,EAAMzH,EAAMF,IAI9ElF,KAAKoL,WAAa,SAASlJ,GACvB,IAAKA,EACD,OAAO,EAEXlC,KAAK8K,eAAe5I,EAAKzC,IAKzB,IAJA,IAAI0C,EAAWD,EAAKC,SAAWD,EAAKC,YAChCiD,EAAOpF,KAAK4D,cAAclD,YAC1BwE,EAAUlF,KAAK4D,cAAcsB,QAExBnE,EAAI,EAAG+E,EAAM3D,EAAS5B,OAAQQ,EAAI+E,EAAK/E,IAAK,CAGjD,IAFA,IAAIgR,EAAQ/R,KAAKgC,SAASG,EAASpB,IAE1Ba,EAAI,EAAGoQ,EAAO5M,EAAK7E,OAAQqB,EAAIoQ,EAAMpQ,IACtCA,IAAMsD,GAGVjF,EAAaD,KAAKE,KAAM6R,EAAMtS,GAAImC,EAAG3C,EAAEe,KAAK8M,iBAAiBpM,QAAQkB,KAAKsJ,SAE1E6G,EAAM3P,MAAMC,QACZrC,KAAKoL,WAAW2G,GAKxB/R,KAAKgL,iBAAiB9I,EAAKzC,KAE/BO,KAAKuM,gBACLvM,KAAKiS,gBAAkB,SAASrM,EAAKxF,EAAK8R,GACtC,GAAItM,EAAIxD,MAAM+P,SAAWvM,EAAIxD,MAAMC,OAC/B,OAAOpD,IAEX,IAEI8S,EAAOhR,EAFPN,EAAMxB,IACNkD,EAAWyD,EAAIzD,aACLjC,EAAOF,KAAKE,KAE1B,IAAKa,EAAI,EAAGA,EAAIoB,EAAS5B,OAAQQ,IAEzBmR,EADJH,EAAQxS,EAAeW,EAAMiC,EAASpB,IAAMX,KAExCK,EAAMA,EAAIkM,IAAIuF,EAAGH,IAAQpF,IAAI3M,KAAKiS,gBAAgBjS,KAAKgC,SAASG,EAASpB,IAAKX,EAAK8R,KAI3F,OAAO,GAUXlS,KAAK6F,MAAQ,SAASD,EAAKxF,EAAKsD,GAC5B,IAAKkC,EACD,OAAO,EAKX,GAHKA,EAAI/D,OACL+D,EAAI/D,UAEJ6B,EAOA,OAAO,EALuC,SAD9CA,EAAUzE,EAAEyE,IACA0O,KAAK,WAAW9L,gBACxB5C,EAAUA,EAAQvB,SAAS,eAMnC,IAAIkQ,EAAMrS,KAAKqE,MAAM0K,KAAKsD,IACtBC,EAAItS,KAAK0D,QAAQhB,QACjB6C,EAAIK,EAAI/D,KAAKzB,EAAImC,OACjBgQ,EAAKtT,EAAE,WACHkI,KACIqL,SAAY,WACZC,IAAO,SACPC,KAASL,EAAM,MAAQ,UACvBM,WAAc,YAEnB/L,SAAS,QACZgM,EAAK3T,EAAE,aACHsD,MAASgD,EACTsN,MAAS,sBACT1L,KACI2L,QAAW,IACXC,OAAU,mBACVC,aAAc,aACdtM,QAAW,eACX1B,OAAWhF,KAAKqE,MAAM0K,KAAc,UAAI,KACxCkE,WAAejT,KAAKqE,MAAM0K,KAAc,UAAI,KAC5CrM,MAAS,SAEbwQ,KAAQjU,EAAEqI,MAAM,WACZ,IAAI6L,EAAIP,EAAGtN,MAEX,GAAU,KAAN6N,GAAYA,IAAM5N,EAClB4N,EAAI5N,MACD,CACHK,EAAI/D,KAAKzB,EAAImC,OAAS4Q,EACtBnT,KAAK0D,QAAQ6G,QAAQ,2BACjBrI,KAAM0D,EACNxF,IAAKA,EAAImC,MACTA,MAAO4Q,EACPxB,IAAKpM,IAET,IAAI9F,EAAKqD,IACT9C,KAAK8K,eAAerL,GACpBO,KAAK+K,cAAc/K,KAAKgC,SAAS4D,GAAK,IACtC5F,KAAKgL,iBAAiBvL,GAE1BmT,EAAG1H,SACHxH,EAAQqJ,QACT/M,MACHoT,QAAW,SAAS3K,GAChB,IAAI4K,EAAM5K,EAAM6K,MACJ,KAARD,IACArT,KAAKuC,MAAQgD,GAEL,KAAR8N,GAAsB,KAARA,GAAsB,KAARA,GAAsB,KAARA,GAAsB,KAARA,GAAsB,KAARA,GAAsB,KAARA,GACpF5K,EAAM8K,2BAEE,KAARF,GAAsB,KAARA,IACd5K,EAAM+K,iBACNxT,KAAKkT,SAGbO,MAAS,SAAS5I,GACdA,EAAE0I,4BAENG,UAAa,SAAS7I,GAClBA,EAAE0I,4BAENI,MAAS,SAASlL,GACdmK,EAAGlQ,MAAMM,KAAK4Q,IAAIrB,EAAGlI,KAAK,KAAOrK,KAAKuC,OAAOG,QAAS4P,KAE1DuB,SAAY,SAASpL,GACjB,GAAoB,KAAhBA,EAAM6K,MACN,OAAO,KAInBQ,GACIC,WAAYrQ,EAAQyD,IAAI,eAAiB,GACzC6M,SAAUtQ,EAAQyD,IAAI,aAAe,GACrC8M,WAAYvQ,EAAQyD,IAAI,eAAiB,GACzC+M,UAAWxQ,EAAQyD,IAAI,cAAgB,GACvCgN,YAAazQ,EAAQyD,IAAI,gBAAkB,GAC3CiN,YAAa1Q,EAAQyD,IAAI,gBAAkB,GAC3CkN,cAAe3Q,EAAQyD,IAAI,kBAAoB,GAC/CmN,YAAa5Q,EAAQyD,IAAI,gBAAkB,IAEnDzD,EAAQmJ,OACRnJ,EAAQb,SAASoE,OAAO2L,GACxBA,EAAGzL,IAAI2M,GAAIpR,MAAMM,KAAK4Q,IAAIrB,EAAGlI,KAAK,KAAOuI,EAAG,GAAGrQ,OAAOG,QAAS4P,IAAI,GAAGiC,UAG1EvU,KAAKwU,iBAAmB,SAASpU,GAC7BJ,KAAKgH,WAAWhG,KAAK,uBAAyBZ,GAAKyM,QAEvD7M,KAAKyU,iBAAmB,SAASrU,GAC7BJ,KAAKgH,WAAWhG,KAAK,uBAAyBZ,GAAK2M,QAGvD/M,KAAK+K,cAAgB,SAASnF,GAC1B,IAGIL,EAQAmP,EAwCGpP,EAAKuI,EAAI8G,EAAK7G,EAAKtG,EAAGwG,EAAM4G,EAAUC,EAAcC,EAAMC,EAAaC,EAAOC,EAAcC,EAAkBC,EACjHC,EAAcC,EAAgBC,EAAcC,EAAgBC,EAAeC,EAC3ErV,EAAKsV,EACLlM,EACAmM,EAAiBC,EAvDjBjS,EAAK3D,KAAK4D,cACViS,EAAIlS,EAAGE,UACPqK,EAAQlO,KAERoF,EAAOzB,EAAGjD,YACH0N,EAAKzK,EAAGS,cACflE,EAAOF,KAAKE,KACZgF,EAAUvB,EAAGuB,QACb1F,EAAOQ,KAAK0D,QACZuC,EAASjG,KAAKiG,OACdoI,EAAYD,EAAK,cAAgB,UAC5B0H,EAAU9V,KAAKgC,SAAS4D,GAC7BuI,EAAexK,EAAGK,YAClBuK,EAAO5K,EAAGM,YACV8R,EAAmB,SAASvW,EAAM0C,EAAMoD,EAAKlF,EAAKmF,GAC9C,OAAO,SAASsF,GAEZ,IAAIpC,EAAQ3J,EAAQkX,OAAO,2BAC3BxW,EAAK+K,QAAQ9B,IACTlG,MAAO+C,EACPkE,OAAQpJ,EAAIsO,OACZxM,KAAMA,EACNO,KAAMxD,EAAEe,MACRiW,WAAY7V,EAAImC,SAEfkG,EAAMyN,sBACPhU,EAAKC,SAAS,kBAAkBoI,QAAQ,eAAgBM,KAIpEsL,EAAwB,SAAS3W,EAAM0C,EAAMoD,EAAKlF,EAAKmF,GACnD,OAAO,SAASsF,GACRlH,EAAGsB,kBACH4F,EAAE2I,iBACFtU,EAAKkX,MAAMpW,MACPqW,EAAKxL,EAAEuF,MACPkG,EAAKzL,EAAE0L,OACR5S,EAAGsB,gBAAgBiJ,EAAO1O,EAAM0C,EAAMoD,EAAKlF,EAAKmF,EAAGsF,EAAErF,YAIpEgR,EAAiB,SAAStU,EAAMuU,GAC5B,OAAO,WACHA,EAAeC,WAAWxU,KAGlCyU,EAAkB,SAASzU,EAAMuU,GAC7B,OAAO,WACHA,EAAeG,aAAa1U,KAKZ0O,GAAK5Q,KAAKgH,WAC1B6P,GAAMf,EAAQrW,GAEtBqX,GAAQ9W,KAAKgC,SAAS8T,EAAQjT,QAAQV,SAEtC4U,GAAM9X,EAAE+X,QAAQH,GAAKC,IACrB5E,GAAKlS,KAAKuM,aACV0K,IAAW,EAUf,GAHAtB,GADAnO,GAHAjC,EAAItG,EAAE2G,IAGAzD,SAAS,6BACK+U,SApuCV,iBAquCVtB,EAAYpO,EAAE0P,SAAS,kBAEN,IAAb1P,EAAEjH,OAAc,EACNuV,EAAQ1T,MAAMC,OACxB4S,EAAe1V,EAAeW,EAAM2W,IACpC3B,EAAsC,MAAnBY,EAAQjT,OAAiB,KAAOiT,EAAQjT,OAC3D2E,EAAEV,SAAS+O,GApnCJ,SAAS3T,EAAMqD,EAAG/F,GAC7B,IACIwV,EADAxN,EAAItF,EAAKgV,SAAS,iBAAmBhV,EAAOA,EAAKC,SAAS,4BACnD/B,EAAMZ,EAAKgE,SAASf,KAAK/B,QAAQ,GAE5CsU,EAAQ,GACJ5U,EAAI4U,QA3HI,WA4HJ5U,EAAI4U,MACJA,EAAQxV,EAAKqI,SAAStC,GACfA,EAAEW,KAAK9F,EAAI4U,SAClBA,EAAQzP,EAAEW,KAAK9F,EAAI4U,UAI3BA,EAAQA,EAAMtV,QAAQ2B,EAAa,MAE/BmG,EAAEtB,KAAK,QAAS8O,GAumChBmC,CAAa3P,EAAGjC,EAAG2I,GACnBF,EAAOxG,EAGP6N,EAAiB0B,IAAO,EAAIjB,EAAQjT,OAASZ,EAAmBjC,KAAM8W,GAAMC,GAAM,IAClFxB,EAAiBwB,IAAOD,GAAMvW,OAAS,EAAI,OAASuW,GAAMC,GAAM,GAChEtB,EAAkBK,EAAQ3T,UAAY2T,EAAQ3T,SAAS5B,OAAS,EAAIuV,EAAQ3T,SAAS,GAAK,OAGlFnC,KAAKwD,SAASf,KACtB,IADA,IACS1B,GAAI,EAAG+E,GAAMV,EAAK7E,OAAQQ,GAAI+E,GAAK/E,KACxC,GAAImE,IAAYnE,GAAhB,CAmJA,GAhJAX,EAAMgF,EAAKrE,IACXyI,EAAkC,MAAzBxJ,KAAK8M,iBAA2B8D,GAAGzO,SAAS,UAAYpB,GAAI,KAAO9B,EAAEe,KAAK8M,iBAAiBpM,QAAQK,KAE5G8M,EAAKzN,EAAIgX,WAAa,GACtBzC,EAAMvU,EAAIiX,eAAiB,GAC3BvJ,EAAM1N,EAAIqO,aAAe,GAGzBjF,EAAO1C,SAASgH,GAIhBxI,EAAMhD,EAAYlC,EAAImC,MAAOuT,GAEF,mBAAhB1V,EAAU,SACjBkF,EAAMlF,EAAIkX,OAAOhS,IAIjBlF,EAAImX,QACJ7C,EAAMtU,EAAImX,OAAOjS,IAAQlF,EAAImX,OAAgB,WAEzC7B,EAAqB,MAAXhB,EAAI,GAAa,gBAAkBA,EAAI8C,OAAO,GAAK,YAAc,aAAe9C,EAAM,MAGpGgB,EAAUpQ,QAIEhF,IAAZoV,GAAqC,OAAZA,GAAoBtW,EAAQ+G,KAAKuP,MAC1DA,EAAU,WAIdd,EAAWxU,EAAIqX,YAA+B,OAAjB3B,EAAQjU,WAAkCvB,IAAjBwV,EAAQjU,MAAqBiU,EAAQjU,KAAKzB,EAAIqX,aAAoB,KACxGrX,EAAIsX,kBAA6C,KAAzBtX,EAAIsX,mBACxC9C,EAAWxU,EAAIsX,iBAAmB9C,IAGtCC,EAAezU,EAAIuX,gBAAmC,OAAjB7B,EAAQjU,WAAkCvB,IAAjBwV,EAAQjU,MAAqBiU,EAAQjU,KAAKzB,EAAIuX,iBAAwB,KAChHvX,EAAIwX,sBAAqD,KAA7BxX,EAAIwX,uBAChD/C,EAAezU,EAAIwX,qBAAuB/C,GAK9CG,GAFAA,EAAQ5U,EAAI4U,OAA0B,OAAjBc,EAAQjU,WAAkCvB,IAAjBwV,EAAQjU,MAAqBiU,EAAQjU,KAAKzB,EAAI4U,QAAe,IAE7FtV,QAAQ2B,EAAa,IAGnC0T,EAAc,EAEA,UADN3U,EAAIsC,OAASyL,IAEY4G,KAGjC/G,EAAO/N,EAAaC,EAAM2W,GAAK9V,GAAGyI,KACrBwE,EAAKzN,OAAS,KACvByN,EAAO/O,EAAE,eACTA,EAAE,iBAAiB2H,SAASoH,GAC5BA,EAAK9H,KAAK,KAAM+O,EAAelU,IAC/BiN,EAAKlH,SAASmO,GACdjH,EAAK9H,KA1zCJ,kBA0zCyB2Q,IACtBlB,EACA3H,EAAKlH,SA1zCX,iBA4zCMkH,EAAKjC,YA5zCX,iBA8zCM6J,EACA5H,EAAKlH,SAAS,kBAEdkH,EAAKjC,YAAY,mBAEsB,IAAvC/L,KAAKwD,SAASuL,KAAKC,OAAOC,UAAqBlO,KAAMmE,GACrD8I,EAAKlH,SAAS,yBAMlBgP,EAAQ1T,MAAM+P,OACdnE,EAAKlH,SAAS,sBAEdkH,EAAKjC,YAAY,sBAyBrBqJ,EAAenV,EAAaC,EAAMmV,EAAgBtU,GAAGyI,GACrD8L,EAAerV,EAAaC,EAAMqV,EAAgBxU,GAAGyI,GACrDgM,EAAgBvV,EAAaC,EAAMuV,EAAiB1U,GAAGyI,GACvD2L,EAAiBlV,EAAaC,EAAMgV,EAAkBnU,GAAGyI,GAIrD0L,GACIC,GAAkBA,EAAe5U,OAAS,GACtC6U,GAAgBA,EAAa7U,OAAS,EACtCyN,EAAKjH,YAAYqO,GACVI,GAAiBA,EAAcjV,OAAS,EAC/CyN,EAAK6J,aAAarC,GACXF,GAAgBA,EAAa/U,OAAS,EAC7CyN,EAAK6J,aAAavC,GAElBtH,EAAKjH,YAAYoO,GAErB8B,IAAW,GAEXA,IAAW,EAGf/E,GAAG+C,EAAelU,IAAKiN,IAEnBoH,GAAgBA,EAAa7U,OAAS,EACtCyN,EAAKjH,YAAYqO,GACVI,GAAiBA,EAAcjV,OAAS,EAC/CyN,EAAK6J,aAAarC,GACXF,GAAgBA,EAAa/U,OAAS,EAC7CyN,EAAK6J,aAAavC,GAElBtH,EAAKpH,SAAS4C,GAElByN,IAAW,GAGXA,GAAU,CACV,IAAIa,GAAQ9X,KAAKiS,gBAAgB6D,EAAS/U,GAAGmR,IAC7ClE,EAAK+J,MAAMD,KAGfhD,EAAO9G,EAAK7L,SAAS,SAGhB2E,SAAS+G,EAAK,IAAM+G,GAAU9F,KAAK4G,IACxC1H,EAAOA,EAAK7G,IAAIoH,GAAMzH,SAAS,mEAAqEb,EAAS,qBAAuBoI,EAAW,IAAMsG,EAAM,IAAME,GAAgBzG,EAAK,oBAAsB,KAAKtH,SAAS,mBAAqB/F,IAAG+F,SAAS,oBAEtP2M,MAAMsC,EAAiBvW,EAAM+F,EAAGD,EAAKlF,IAC1C4N,EAAKpD,GAAG,cAAeuL,EAAsB3W,EAAM+F,EAAGD,EAAKlF,EAAKJ,OAChEgO,EAAKgK,MAAMxB,EAAejR,EAAGvF,MAAO2W,EAAgBpR,EAAGvF,OAEnDgV,GACAF,EAAK5O,KAAK,QAAS8O,GAGvBxV,EAAK+K,QAAQ,4BACThI,MAAO+C,EACPkE,OAAQpJ,EAAIsO,OACZxM,KAAMqD,EACN0Q,WAAY7V,EAAImC,SAGxByL,EAAKlH,SAAS,yBAA2BsH,EAAK,oBAAsB,UAEhC9N,IAAhC8E,EAAKA,EAAK7E,OAAS,GAAGmC,OACtBsL,EAAKlH,SAAS,0BAA0BsI,KAAK,0BAA0BlE,SAG/ElL,KAAK0D,QAAQyD,KACT8Q,aAAc,qBAItBjY,KAAKuM,iBAKFtN","file":"../../addons/treegrid.js","sourcesContent":["define([\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-browser\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-geom\",\r\n  \"skylark-domx-query\",\r\n  \"./menu\",\r\n  \"../Hierarchy\"\r\n],function(langx,browser,eventer,noder,geom,$,menu,jstree){\r\n    var BLANKRE = /^\\s*$/g,\r\n        IDREGEX = /[\\\\:&!^|()\\[\\]<>@*'+~#\";,= \\/${}%]/g,\r\n        escapeId = function(id) {\r\n            return (id || \"\").replace(IDREGEX, '\\\\$&');\r\n        },\r\n        NODE_DATA_ATTR = \"data-jstreegrid\",\r\n        COL_DATA_ATTR = \"data-jstreegrid-column\",\r\n        SEARCHCLASS = \"jstree-search\",\r\n        SPECIAL_TITLE = \"_DATA_\",\r\n        LEVELINDENT = 24,\r\n        styled = false,\r\n        MINCOLWIDTH = 10,\r\n        generateCellId = function(tree, id) {\r\n            return (\"jstree_\" + tree + \"_grid_\" + escapeId(id) + \"_col\");\r\n        },\r\n        getIds = function(nodes) {\r\n            return $.makeArray(nodes.map(function() {\r\n                return this.id;\r\n            }));\r\n        },\r\n        findDataCell = function(uniq, ids, col, scope) {\r\n            if (scope == undefined) {\r\n                scope = $();\r\n            };\r\n            if (ids === null || ids === undefined || ids.length === 0) {\r\n                return scope;\r\n            }\r\n            var ret = $(),\r\n                columns = [].concat(col),\r\n                cellId;\r\n            if (typeof(ids) === \"string\") {\r\n                cellId = generateCellId(uniq, ids);\r\n                ret = columns.map(function(col) {\r\n                    return \"#\" + cellId + col;\r\n                }).join(\", \");\r\n            } else {\r\n                ret = []\r\n                ids.forEach(function(elm, i) {\r\n                    var cellId = generateCellId(uniq, elm);\r\n                    ret = ret.concat(columns.map(function(col) {\r\n                        return \"#\" + cellId + col;\r\n                    }));\r\n                });\r\n                ret = ret.join(\", \");\r\n            }\r\n            return columns.length == 1 ? scope.find(ret) : $(ret);\r\n        },\r\n        isClickedSep = false,\r\n        toResize = null,\r\n        oldMouseX = 0,\r\n        newMouseX = 0,\r\n\r\n        /*jslint regexp:true */\r\n        htmlstripre = /<\\/?[^>]+>/gi,\r\n        /*jslint regexp:false */\r\n\r\n        getIndent = function(node, tree) {\r\n            var div, i, li, width;\r\n\r\n            // did we already save it for this tree?\r\n            tree._gridSettings = tree._gridSettings || {};\r\n            if (tree._gridSettings.indent > 0) {\r\n                width = tree._gridSettings.indent;\r\n            } else {\r\n                // create a new div on the DOM but not visible on the page\r\n                div = $(\"<div></div>\");\r\n                i = node.prev(\"i\");\r\n                li = i.parent();\r\n                // add to that div all of the classes on the tree root\r\n                div.addClass(tree.get_node(\"#\", true).attr(\"class\"));\r\n\r\n                // move the li to the temporary div root\r\n                li.appendTo(div);\r\n\r\n                // attach to the body quickly\r\n                div.appendTo($(\"body\"));\r\n\r\n                // get the width\r\n                width = i.width() || LEVELINDENT;\r\n\r\n                // detach the li from the new div and destroy the new div\r\n                li.detach();\r\n                div.remove();\r\n\r\n                // save it for the future\r\n                tree._gridSettings.indent = width;\r\n            }\r\n\r\n\r\n            return (width);\r\n\r\n        },\r\n\r\n        copyData = function(fromtree, from, totree, to, recurse) {\r\n            var i, j;\r\n            to.data = $.extend(true, {}, from.data);\r\n            if (from && from.children_d && recurse) {\r\n                for (i = 0, j = from.children_d.length; i < j; i++) {\r\n                    copyData(fromtree, fromtree.get_node(from.children_d[i]), totree, totree.get_node(to.children_d[i]), recurse);\r\n                }\r\n            }\r\n        },\r\n\r\n        findLastClosedNode = function(tree, id) {\r\n            // first get our node\r\n            var ret, node = tree.get_node(id),\r\n                children = node.children;\r\n            // is it closed?\r\n            if (!children || children.length <= 0 || !node.state.opened) {\r\n                ret = id;\r\n            } else {\r\n                ret = findLastClosedNode(tree, children[children.length - 1]);\r\n            }\r\n            return (ret);\r\n        },\r\n\r\n        renderAWidth = function(node, tree) {\r\n            var depth, width,\r\n                fullWidth = parseInt(tree.settings.grid.columns[0].width, 10) + parseInt(tree._gridSettings.treeWidthDiff, 10);\r\n            // need to use a selector in jquery 1.4.4+\r\n            depth = tree.get_node(node).parents.length;\r\n            width = fullWidth - depth * getIndent(node, tree);\r\n            // the following line is no longer needed, since we are doing this inside a <td>\r\n            //a.css({\"vertical-align\": \"top\", \"overflow\":\"hidden\"});\r\n            return (fullWidth);\r\n        },\r\n        renderATitle = function(node, t, tree) {\r\n            var a = node.hasClass(\"jstree-anchor\") ? node : node.children(\"[class~='jstree-anchor']\"),\r\n                title, col = tree.settings.grid.columns[0];\r\n            // get the title\r\n            title = \"\";\r\n            if (col.title) {\r\n                if (col.title === SPECIAL_TITLE) {\r\n                    title = tree.get_text(t);\r\n                } else if (t.attr(col.title)) {\r\n                    title = t.attr(col.title);\r\n                }\r\n            }\r\n            // strip out HTML\r\n            title = title.replace(htmlstripre, '');\r\n            if (title) {\r\n                a.attr(\"title\", title);\r\n            }\r\n        },\r\n        getCellData = function(value, data) {\r\n            var val;\r\n            // get the contents of the cell - value could be a string or a function\r\n            if (value !== undefined && value !== null) {\r\n                if (typeof(value) === \"function\") {\r\n                    val = value(data);\r\n                } else if (data.data !== null && data.data !== undefined && data.data[value] !== undefined) {\r\n                    val = data.data[value];\r\n                } else {\r\n                    val = \"\";\r\n                }\r\n            } else {\r\n                val = \"\";\r\n            }\r\n            return val;\r\n        };\r\n\r\n    $.jstree.defaults.grid = {\r\n        width: 'auto'\r\n    };\r\n\r\n    $.jstree.plugins.grid = function(options, parent) {\r\n        this._initialize = function() {\r\n            if (!this._initialized) {\r\n                var s = this.settings.grid || {},\r\n                    styles, container = this.element,\r\n                    i,\r\n                    gs = this._gridSettings = {\r\n                        columns: s.columns || [],\r\n                        treeClass: \"jstree-grid-col-0\",\r\n                        context: s.contextmenu || false,\r\n                        columnWidth: s.columnWidth,\r\n                        defaultConf: {\r\n                            \"*display\": \"inline\",\r\n                            \"*+display\": \"inline\"\r\n                        },\r\n                        isThemeroller: !!this._data.themeroller,\r\n                        treeWidthDiff: 0,\r\n                        resizable: s.resizable,\r\n                        draggable: s.draggable,\r\n                        stateful: s.stateful,\r\n                        indent: 0,\r\n                        sortOrder: 'text',\r\n                        sortAsc: true,\r\n                        caseInsensitive: s.caseInsensitive,\r\n                        fixedHeader: s.fixedHeader !== false,\r\n                        width: s.width,\r\n                        height: s.height,\r\n                        gridcontextmenu: s.gridcontextmenu,\r\n                        treecol: 0,\r\n                        gridcols: []\r\n                    },\r\n                    cols = gs.columns,\r\n                    treecol = 0,\r\n                    columnSearch = false;\r\n                if (gs.gridcontextmenu === true) {\r\n                    gs.gridcontextmenu = function(grid, tree, node, val, col, t, target) {\r\n                        return {\r\n                            \"edit\": {\r\n                                label: \"Edit\",\r\n                                \"action\": function(data) {\r\n                                    var obj = t.get_node(node);\r\n                                    grid._edit(obj, col, target);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                } else if (gs.gridcontextmenu === false) {\r\n                    gs.gridcontextmenu = false;\r\n                }\r\n                // find which column our tree shuld go in\r\n                for (var i = 0, len = s.columns.length; i < len; i++) {\r\n                    if (s.columns[i].tree) {\r\n                        // save which column it was\r\n                        treecol = i;\r\n                        gs.treecol = treecol;\r\n                    } else {\r\n                        gs.gridcols.push(i);\r\n                    }\r\n                }\r\n                // set a unique ID for this table\r\n                this.uniq = Math.ceil(Math.random() * 1000);\r\n                this.rootid = container.attr(\"id\");\r\n\r\n                var msie = /msie/.test(navigator.userAgent.toLowerCase());\r\n                if (msie) {\r\n                    var version = parseFloat(navigator.appVersion.split(\"MSIE\")[1]);\r\n                    if (version < 8) {\r\n                        gs.defaultConf.display = \"inline\";\r\n                        gs.defaultConf.zoom = \"1\";\r\n                    }\r\n                }\r\n\r\n                // set up the classes we need\r\n                if (!styled) {\r\n                    styled = true;\r\n                    styles = [\r\n                        '.jstree-grid-cell {vertical-align: top; overflow:hidden;margin-left:0;position:relative;width: 100%;padding-left:7px;white-space: nowrap;}',\r\n                        '.jstree-grid-cell span {margin-right:0px;margin-right:0px;*display:inline;*+display:inline;white-space: nowrap;}',\r\n                        '.jstree-grid-separator {position:absolute; top:0; right:0; height:24px; margin-left: -2px; border-width: 0 2px 0 0; *display:inline; *+display:inline; margin-right:0px;width:0px;}',\r\n                        '.jstree-grid-header-cell {overflow: hidden; white-space: nowrap;padding: 1px 3px 2px 5px; cursor: default;}',\r\n                        '.jstree-grid-header-themeroller {border: 0; padding: 1px 3px;}',\r\n                        '.jstree-grid-header-regular {position:relative; background-color: #EBF3FD; z-index: 1;}',\r\n                        '.jstree-grid-hidden {display: none;}',\r\n                        '.jstree-grid-resizable-separator {cursor: col-resize; width: 2px;}',\r\n                        '.jstree-grid-separator-regular {border-color: #d0d0d0; border-style: solid;}',\r\n                        '.jstree-grid-cell-themeroller {border: none !important; background: transparent !important;}',\r\n                        '.jstree-grid-wrapper {table-layout: fixed; width: 100%; overflow: auto; position: relative;}',\r\n                        '.jstree-grid-midwrapper {display: table-row;}',\r\n                        '.jstree-grid-width-auto {width:auto;display:block;}',\r\n                        '.jstree-grid-column {display: table-cell; overflow: hidden;}',\r\n                        '.jstree-grid-ellipsis {text-overflow: ellipsis;}',\r\n                        '.jstree-grid-col-0 {width: 100%;}'\r\n                    ];\r\n                    $('<style type=\"text/css\">' + styles.join(\"\\n\") + '</style>').appendTo(\"head\");\r\n                }\r\n                this.gridWrapper = $(\"<div></div>\").addClass(\"jstree-grid-wrapper\").insertAfter(container);\r\n                this.midWrapper = $(\"<div></div>\").addClass(\"jstree-grid-midwrapper\").appendTo(this.gridWrapper);\r\n                // set the wrapper width\r\n                if (s.width) {\r\n                    this.gridWrapper.width(s.width);\r\n                }\r\n                if (s.height) {\r\n                    this.gridWrapper.height(s.height);\r\n                }\r\n                // create the data columns\r\n                for (var i = 0, len = cols.length; i < len; i++) {\r\n                    // create the column\r\n                    $(\"<div></div>\").addClass(\"jstree-default jstree-grid-column jstree-grid-column-\" + i + \" jstree-grid-column-root-\" + this.rootid).appendTo(this.midWrapper);\r\n                }\r\n                this.midWrapper.children(\"div:eq(\" + treecol + \")\").append(container);\r\n                container.addClass(\"jstree-grid-cell\");\r\n\r\n                //move header with scroll\r\n                if (gs.fixedHeader) {\r\n                    this.gridWrapper.scroll(function() {\r\n                        $(this).find('.jstree-grid-header').css('top', $(this).scrollTop());\r\n                    });\r\n                }\r\n\r\n                // copy original sort function\r\n                var defaultSort = $.proxy(this.settings.sort, this);\r\n\r\n                // override sort function\r\n                this.settings.sort = function(a, b) {\r\n                    var bigger, colrefs = this.colrefs;\r\n\r\n                    if (gs.sortOrder === 'text') {\r\n                        var caseInsensitiveSort = this.get_text(a).toLowerCase().localeCompare(this.get_text(b).toLowerCase());\r\n                        bigger = gs.caseInsensitive ? (caseInsensitiveSort === 1) : (defaultSort(a, b) === 1);\r\n                    } else {\r\n                        // gs.sortOrder just refers to the unique random name for this column\r\n                        // we need to get the correct value\r\n                        var nodeA = this.get_node(a),\r\n                            nodeB = this.get_node(b),\r\n                            value = colrefs[gs.sortOrder].value,\r\n                            valueA = typeof(value) === 'function' ? value(nodeA) : nodeA.data[value],\r\n                            valueB = typeof(value) === 'function' ? value(nodeB) : nodeB.data[value];\r\n                        if (typeof(valueA) && typeof(valueB) !== 'undefined') {\r\n                            bigger = gs.caseInsensitive ? valueA.toLowerCase() > valueB.toLowerCase() : valueA > valueB;\r\n                        }\r\n                    }\r\n\r\n                    if (!gs.sortAsc)\r\n                        bigger = !bigger;\r\n\r\n                    return bigger ? 1 : -1;\r\n                };\r\n\r\n                // sortable columns when jQuery UI is available\r\n                if (gs.draggable) {\r\n                    if (!$.ui || !$.ui.sortable) {\r\n                        console.warn('[jstree-grid] draggable option requires jQuery UI');\r\n                    } else {\r\n                        var from, to;\r\n\r\n                        $(this.midWrapper).sortable({\r\n                            axis: \"x\",\r\n                            handle: \".jstree-grid-header\",\r\n                            cancel: \".jstree-grid-separator\",\r\n                            start: function(event, ui) {\r\n                                from = ui.item.index();\r\n                            },\r\n                            stop: function(event, ui) {\r\n                                to = ui.item.index();\r\n                                gs.columns.splice(to, 0, gs.columns.splice(from, 1)[0]);\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n\r\n                //public function. validate searchObject keys, set columnSearch flag, calls jstree search and reset columnSearch flag\r\n                this.searchColumn = function(searchObj) {\r\n                    var validatedSearchObj = {};\r\n\r\n                    if (typeof searchObj == 'object') {\r\n                        for (var columnIndex in searchObj) {\r\n                            if (searchObj.hasOwnProperty(columnIndex)) {\r\n                                // keys should be the index of a column. This means the following:\r\n                                // only integers and smaller than the number of columns and bigger or equal to 0\r\n                                // (possilbe idea for in the future: ability to set key as a more human readable term like the column header and then map it here to an index)\r\n                                if (columnIndex % 1 === 0 && columnIndex < cols.length && columnIndex >= 0) {\r\n                                    validatedSearchObj[columnIndex] = searchObj[columnIndex];\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    columnSearch = validatedSearchObj;\r\n\r\n                    if (Object.keys(validatedSearchObj).length !== 0) {\r\n                        //the search string doesn't matter. we'll use the search string in the columnSearch object!\r\n                        this.search('someValue');\r\n                    } else { // nothing to search so reset jstree's search by passing an empty string\r\n                        this.search('');\r\n                    }\r\n                    columnSearch = false;\r\n                }\r\n\r\n\r\n                // set default search for each column with no user defined search function (used when doing a columnSearch)\r\n                for (var i = 0, len = cols.length; i < len; i++) {\r\n                    var column = cols[i];\r\n                    if (typeof(column.search_callback) !== \"function\") {\r\n                        // no search callback so set default function\r\n                        column.search_callback = function(str, columnValue, node, column) {\r\n                            var f = new $.vakata.search(str, true, {\r\n                                caseSensitive: searchSettings.case_sensitive,\r\n                                fuzzy: searchSettings.fuzzy\r\n                            });\r\n\r\n                            return f.search(columnValue).isMatch;\r\n\r\n                        };\r\n                    }\r\n                }\r\n\r\n                // if there was no overridden search_callback, we will provide it\r\n                // it will use the default per-node search algorithm, augmented by searching our data nodes\r\n                var searchSettings = this.settings.search;\r\n                var omniSearchCallback = searchSettings.search_callback;\r\n\r\n                if (!omniSearchCallback) {\r\n                    omniSearchCallback = function(str, node) {\r\n                        var i, f = new $.vakata.search(str, true, {\r\n                                caseSensitive: searchSettings.case_sensitive,\r\n                                fuzzy: searchSettings.fuzzy\r\n                            }),\r\n                            matched = f.search(node.text).isMatch,\r\n                            col;\r\n\r\n                        // only bother looking in each cell if it was not yet matched\r\n                        if (!matched) {\r\n                            for (var i = 0, len = cols.length; i < len; i++) {\r\n                                if (treecol === i) {\r\n                                    continue;\r\n                                }\r\n                                col = cols[i];\r\n                                matched = f.search(getCellData(col.value, node)).isMatch;\r\n                                if (matched) {\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                        return matched;\r\n                    }\r\n                }\r\n\r\n                searchSettings.search_callback = function(str, node) {\r\n                    var matched = false;\r\n                    if (columnSearch) {\r\n                        //using logical AND for column searches (more options in the future)\r\n                        for (var columnIndex in columnSearch) {\r\n                            if (columnSearch.hasOwnProperty(columnIndex)) {\r\n                                var searchValue = columnSearch[columnIndex];\r\n                                if (searchValue == '') {\r\n                                    continue;\r\n                                }\r\n                                var col = cols[columnIndex];\r\n                                if (treecol == columnIndex) {\r\n                                    matched = col.search_callback(searchValue, node.text, node, col)\r\n                                } else {\r\n                                    matched = col.search_callback(searchValue, getCellData(col.value, node), node, col)\r\n                                }\r\n\r\n                                if (!matched) {\r\n                                    break; //found one that didn't match\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        container.trigger(\"columnSearch_grid.jstree\");\r\n                    } else {\r\n                        matched = omniSearchCallback(str, node);\r\n                        container.trigger(\"omniSearch_grid.jstree\");\r\n                    }\r\n                    return matched;\r\n                };\r\n                this._initialized = true;\r\n            }\r\n        };\r\n        this.init = function(el, options) {\r\n            parent.init.call(this, el, options);\r\n            this._initialize();\r\n        };\r\n        this.bind = function() {\r\n            parent.bind.call(this);\r\n            this._initialize();\r\n            this.element\r\n                .on(\"move_node.jstree create_node.jstree clean_node.jstree change_node.jstree\", $.proxy(function(e, data) {\r\n                    var target = this.get_node(data || \"#\", true);\r\n                    var id = _guid();\r\n                    this._detachColumns(id);\r\n                    this._prepare_grid(target);\r\n                    this._reattachColumns(id);\r\n                }, this))\r\n                .on(\"delete_node.jstree\", $.proxy(function(e, data) {\r\n                    if (data.node.id !== undefined) {\r\n                        var grid = this.gridWrapper,\r\n                            removeNodes = [data.node.id],\r\n                            i;\r\n                        // add children to remove list\r\n                        if (data.node && data.node.children_d) {\r\n                            removeNodes = removeNodes.concat(data.node.children_d);\r\n                        }\r\n                        findDataCell(this.uniq, removeNodes, this._gridSettings.gridcols).remove();\r\n                    }\r\n                }, this))\r\n                .on(\"show_node.jstree\", $.proxy(function(e, data) {\r\n                    this._hideOrShowTree(data.node, false);\r\n                }, this))\r\n                .on(\"hide_node.jstree\", $.proxy(function(e, data) {\r\n                    this._hideOrShowTree(data.node, true);\r\n                }, this))\r\n                .on(\"close_node.jstree\", $.proxy(function(e, data) {\r\n                    this._hide_grid(data.node);\r\n                }, this))\r\n                .on(\"open_node.jstree\", $.proxy(function(e, data) {}, this))\r\n                .on(\"load_node.jstree\", $.proxy(function(e, data) {}, this))\r\n                .on(\"loaded.jstree\", $.proxy(function(e) {\r\n                    this._prepare_headers();\r\n                    this.element.trigger(\"loaded_grid.jstree\");\r\n                }, this))\r\n                .on(\"ready.jstree\", $.proxy(function(e, data) {\r\n                    // find the line-height of the first known node\r\n                    var anchorHeight = this.element.find(\"[class~='jstree-anchor']:first\").outerHeight(),\r\n                        q,\r\n                        cls = this.element.attr(\"class\") || \"\";\r\n                    $('<style type=\"text/css\">div.jstree-grid-cell-root-' + this.rootid + ' {line-height: ' + anchorHeight + 'px; height: ' + anchorHeight + 'px;}</style>').appendTo(\"head\");\r\n\r\n                    // add container classes to the wrapper - EXCEPT those that are added by jstree, i.e. \"jstree\" and \"jstree-*\"\r\n                    q = cls.split(/\\s+/).map(function(i) {\r\n                        var match = i.match(/^jstree(-|$)/);\r\n                        return (match ? \"\" : i);\r\n                    });\r\n                    this.gridWrapper.addClass(q.join(\" \"));\r\n\r\n                }, this))\r\n                .on(\"move_node.jstree\", $.proxy(function(e, data) {\r\n                    var node = data.new_instance.element;\r\n                    //renderAWidth(node,this);\r\n                    // check all the children, because we could drag a tree over\r\n                    node.find(\"li > a\").each($.proxy(function(i, elm) {\r\n                        //renderAWidth($(elm),this);\r\n                    }, this));\r\n\r\n                }, this))\r\n                .on(\"hover_node.jstree\", $.proxy(function(node, selected, event) {\r\n                    var id = selected.node.id;\r\n                    if (this._hover_node !== null && this._hover_node !== undefined) {\r\n                        findDataCell(this.uniq, this._hover_node, this._gridSettings.gridcols).removeClass(\"jstree-hovered\");\r\n                    }\r\n                    this._hover_node = id;\r\n                    findDataCell(this.uniq, id, this._gridSettings.gridcols).addClass(\"jstree-hovered\");\r\n                }, this))\r\n                .on(\"dehover_node.jstree\", $.proxy(function(node, selected, event) {\r\n                    var id = selected.node.id;\r\n                    this._hover_node = null;\r\n                    findDataCell(this.uniq, id, this._gridSettings.gridcols).removeClass(\"jstree-hovered\");\r\n                }, this))\r\n                .on(\"select_node.jstree\", $.proxy(function(node, selected, event) {\r\n                    var id = selected.node.id;\r\n                    findDataCell(this.uniq, id, this._gridSettings.gridcols).addClass(\"jstree-clicked\");\r\n                    this.get_node(selected.node.id, true).children(\"div.jstree-grid-cell\").addClass(\"jstree-clicked\");\r\n                }, this))\r\n                .on(\"deselect_node.jstree\", $.proxy(function(node, selected, event) {\r\n                    var id = selected.node.id;\r\n                    findDataCell(this.uniq, id, this._gridSettings.gridcols).removeClass(\"jstree-clicked\");\r\n                }, this))\r\n                .on(\"deselect_all.jstree\", $.proxy(function(node, selected, event) {\r\n                    // get all of the ids that were unselected\r\n                    var ids = selected.node || [],\r\n                        i;\r\n                    findDataCell(this.uniq, ids, this._gridSettings.gridcols).removeClass(\"jstree-clicked\");\r\n                }, this))\r\n                .on(\"search.jstree\", $.proxy(function(e, data) {\r\n                    // search sometimes filters, so we need to hide all of the appropriate grid cells as well, and show only the matches\r\n                    var grid = this.gridWrapper,\r\n                        that = this,\r\n                        nodesToShow, startTime = new Date().getTime(),\r\n                        ids = getIds(data.nodes.filter(\".jstree-node\")),\r\n                        endTime;\r\n                    this.holdingCells = {};\r\n                    if (data.nodes.length) {\r\n                        var id = _guid();\r\n                        // save the cells we will hide\r\n                        var cells = grid.find('div.jstree-grid-cell-regular');\r\n                        this._detachColumns(id);\r\n                        if (this._data.search.som) {\r\n                            // create the list of nodes we want to look at\r\n                            if (this._data.search.smc) {\r\n                                nodesToShow = data.nodes.add(data.nodes.find('.jstree-node'));\r\n                            }\r\n                            nodesToShow = (nodesToShow || data.nodes).add(data.nodes.parentsUntil(\".jstree\"));\r\n\r\n                            // hide all of the grid cells\r\n                            cells.hide();\r\n                            // show only those that match\r\n                            nodesToShow.filter(\".jstree-node\").each(function(i, node) {\r\n                                var id = node.id;\r\n                                if (id) {\r\n                                    that._prepare_grid(node);\r\n                                    for (var i = 0, len = that._gridSettings.gridcols.length; i < len; i++) {\r\n                                        if (i === that._gridSettings.treecol) {\r\n                                            continue;\r\n                                        }\r\n                                        findDataCell(that.uniq, id, that._gridSettings.gridcols[i], $(that._domManipulation.columns[i])).show();\r\n                                    }\r\n                                }\r\n                            });\r\n                        }\r\n\r\n                        for (var i = 0, len = this._gridSettings.gridcols.length; i < len; i++) {\r\n                            if (i === this._gridSettings.treecol) {\r\n                                continue;\r\n                            }\r\n                            findDataCell(that.uniq, ids, this._gridSettings.gridcols[i], $(this._domManipulation.columns[i])).addClass(SEARCHCLASS);\r\n                        }\r\n                        this._reattachColumns(id);\r\n                        endTime = new Date().getTime();\r\n                        this.element.trigger(\"search-complete.jstree-grid\", [{\r\n                            time: endTime - startTime\r\n                        }]);\r\n                    }\r\n                    return true;\r\n                }, this))\r\n                .on(\"clear_search.jstree\", $.proxy(function(e, data) {\r\n                    // search has been cleared, so we need to show all rows\r\n                    var grid = this.gridWrapper,\r\n                        ids = getIds(data.nodes.filter(\".jstree-node\"));\r\n                    grid.find('div.jstree-grid-cell').show();\r\n                    findDataCell(this.uniq, ids, this._gridSettings.gridcols).removeClass(SEARCHCLASS);\r\n                    return true;\r\n                }, this))\r\n                .on(\"copy_node.jstree\", function(e, data) {\r\n                    var newtree = data.new_instance,\r\n                        oldtree = data.old_instance,\r\n                        obj = newtree.get_node(data.node, true);\r\n                    copyData(oldtree, data.original, newtree, data.node, true);\r\n                    newtree._detachColumns(obj.id);\r\n                    newtree._prepare_grid(obj);\r\n                    newtree._reattachColumns(obj.id);\r\n                    return true;\r\n                })\r\n                .on(\"show_ellipsis.jstree\", $.proxy(function(e, data) {\r\n                    this.gridWrapper.find(\".jstree-grid-cell\").add(\".jstree-grid-header\", this.gridWrapper).addClass(\"jstree-grid-ellipsis\");\r\n                    return true;\r\n                }, this))\r\n                .on(\"hide_ellipsis.jstree\", $.proxy(function(e, data) {\r\n                    this.gridWrapper.find(\".jstree-grid-cell\").add(\".jstree-grid-header\", this.gridWrapper).removeClass(\"jstree-grid-ellipsis\");\r\n                    return true;\r\n                }, this));\r\n            if (this._gridSettings.isThemeroller) {\r\n                this.element\r\n                    .on(\"select_node.jstree\", $.proxy(function(e, data) {\r\n                        data.rslt.obj.children(\"[class~='jstree-anchor']\").nextAll(\"div\").addClass(\"ui-state-active\");\r\n                    }, this))\r\n                    .on(\"deselect_node.jstree deselect_all.jstree\", $.proxy(function(e, data) {\r\n                        data.rslt.obj.children(\"[class~='jstree-anchor']\").nextAll(\"div\").removeClass(\"ui-state-active\");\r\n                    }, this))\r\n                    .on(\"hover_node.jstree\", $.proxy(function(e, data) {\r\n                        data.rslt.obj.children(\"[class~='jstree-anchor']\").nextAll(\"div\").addClass(\"ui-state-hover\");\r\n                    }, this))\r\n                    .on(\"dehover_node.jstree\", $.proxy(function(e, data) {\r\n                        data.rslt.obj.children(\"[class~='jstree-anchor']\").nextAll(\"div\").removeClass(\"ui-state-hover\");\r\n                    }, this));\r\n            }\r\n\r\n            if (this._gridSettings.stateful) {\r\n                this.element\r\n                    .on(\"resize_column.jstree-grid\", $.proxy(function(e, col, width) {\r\n                        localStorage['jstree-root-' + this.rootid + '-column-' + col] = width;\r\n                    }, this));\r\n            }\r\n        };\r\n\r\n        // tear down the tree entirely\r\n        this.teardown = function() {\r\n            var gw = this.gridWrapper,\r\n                container = this.element,\r\n                gridparent = gw.parent();\r\n            container.detach();\r\n            gw.remove();\r\n            gridparent.append(container);\r\n            parent.teardown.call(this);\r\n        };\r\n        // clean the grid in case of redraw or refresh entire tree\r\n        this._clean_grid = function(target, id) {\r\n            var grid = this.gridWrapper;\r\n            if (target) {\r\n                findDataCell(this.uniq, id, this._gridSettings.gridcols).remove();\r\n            } else {\r\n                // get all of the `div` children in all of the `td` in dataRow except for :first (that is the tree itself) and remove\r\n                grid.find(\"div.jstree-grid-cell-regular\").remove();\r\n            }\r\n        };\r\n        // prepare the headers\r\n        this._prepare_headers = function() {\r\n            var header, i, col, _this = this,\r\n                gs = this._gridSettings,\r\n                cols = gs.columns || [],\r\n                width, defaultWidth = gs.columnWidth,\r\n                resizable = gs.resizable || false,\r\n                cl, ccl, val, name, last, tr = gs.isThemeroller,\r\n                classAdd = (tr ? \"themeroller\" : \"regular\"),\r\n                puller,\r\n                hasHeaders = false,\r\n                gridparent = this.gridparent,\r\n                rootid = this.rootid,\r\n                conf = gs.defaultConf,\r\n                coluuid,\r\n                borPadWidth = 0,\r\n                totalWidth = 0;\r\n\r\n            // save the original parent so we can reparent on destroy\r\n            this.parent = gridparent;\r\n\r\n            // save the references to columns by unique ID\r\n            this.colrefs = {};\r\n\r\n\r\n            // create the headers\r\n            for (var i = 0, len = cols.length; i < len; i++) {\r\n                //col = $(\"<col/>\");\r\n                //col.appendTo(colgroup);\r\n                cl = cols[i].headerClass || \"\";\r\n                ccl = cols[i].columnClass || \"\";\r\n                val = cols[i].header || \"\";\r\n                do {\r\n                    coluuid = String(Math.floor(Math.random() * 10000));\r\n                } while (this.colrefs[coluuid] !== undefined);\r\n                // create a unique name for this column\r\n                name = cols[i].value ? coluuid : \"text\";\r\n                this.colrefs[name] = cols[i];\r\n\r\n                if (val) {\r\n                    hasHeaders = true;\r\n                }\r\n                if (gs.stateful && localStorage['jstree-root-' + rootid + '-column-' + i])\r\n                    width = localStorage['jstree-root-' + rootid + '-column-' + i];\r\n                else\r\n                    width = cols[i].width || defaultWidth;\r\n\r\n                var minWidth = cols[i].minWidth || width;\r\n                var maxWidth = cols[i].maxWidth || width;\r\n\r\n                // we only deal with borders if width is not auto and not percentages\r\n                borPadWidth = tr ? 1 + 6 : 2 + 8; // account for the borders and padding\r\n                if (width !== 'auto' && typeof(width) !== \"string\") {\r\n                    width -= borPadWidth;\r\n                }\r\n                col = this.midWrapper.children(\"div.jstree-grid-column-\" + i);\r\n                last = $(\"<div></div>\").css(conf).addClass(\"jstree-grid-div-\" + this.uniq + \"-\" + i + \" \" + (tr ? \"ui-widget-header \" : \"\") + \" jstree-grid-header jstree-grid-header-cell jstree-grid-header-\" + classAdd + \" \" + cl + \" \" + ccl).html(val);\r\n                last.addClass((tr ? \"ui-widget-header \" : \"\") + \"jstree-grid-header jstree-grid-header-\" + classAdd);\r\n                if (this.settings.core.themes.ellipsis === true) {\r\n                    last.addClass('jstree-grid-ellipsis');\r\n                }\r\n                last.prependTo(col);\r\n                last.attr(COL_DATA_ATTR, name);\r\n                totalWidth += last.outerWidth();\r\n                puller = $(\"<div class='jstree-grid-separator jstree-grid-separator-\" + classAdd + (tr ? \" ui-widget-header\" : \"\") + (resizable ? \" jstree-grid-resizable-separator\" : \"\") + \"'>&nbsp;</div>\").appendTo(last);\r\n                col.width(width);\r\n                col.css(\"min-width\", minWidth);\r\n                col.css(\"max-width\", maxWidth);\r\n            }\r\n\r\n            last.addClass((tr ? \"ui-widget-header \" : \"\") + \"jstree-grid-header jstree-grid-header-last jstree-grid-header-\" + classAdd);\r\n            // if there is no width given for the last column, do it via automatic\r\n            if (cols[cols.length - 1].width === undefined) {\r\n                totalWidth -= width;\r\n                col.css({\r\n                    width: \"auto\"\r\n                });\r\n                last.addClass(\"jstree-grid-width-auto\").next(\".jstree-grid-separator\").remove();\r\n            }\r\n            if (hasHeaders) {\r\n                // save the offset of the div from the body\r\n                //gs.divOffset = header.parent().offset().left;\r\n                gs.header = header;\r\n            } else {\r\n                $(\"div.jstree-grid-header\").hide();\r\n            }\r\n\r\n            if (!this.bound && resizable) {\r\n                this.bound = true;\r\n                $(document).mouseup(function() {\r\n                    var ref, cols, width, headers, currentTree, colNum;\r\n                    if (isClickedSep) {\r\n                        colNum = toResize.prevAll(\".jstree-grid-column\").length;\r\n                        currentTree = toResize.closest(\".jstree-grid-wrapper\").find(\".jstree\");\r\n                        ref = $.jstree.reference(currentTree);\r\n                        cols = ref.settings.grid.columns;\r\n                        headers = toResize.parent().children(\"div.jstree-grid-column\");\r\n                        if (isNaN(colNum) || colNum < 0) {\r\n                            ref._gridSettings.treeWidthDiff = currentTree.find(\"ins:eq(0)\").width() + currentTree.find(\"[class~='jstree-anchor']:eq(0)\").width() - ref._gridSettings.columns[0].width;\r\n                        }\r\n                        width = ref._gridSettings.columns[colNum].width = parseFloat(toResize.css(\"width\"));\r\n                        isClickedSep = false;\r\n                        toResize = null;\r\n\r\n                        currentTree.trigger(\"resize_column.jstree-grid\", [colNum, width]);\r\n                    }\r\n                }).mousemove(function(e) {\r\n                    if (isClickedSep) {\r\n                        newMouseX = e.pageX;\r\n                        var diff = newMouseX - oldMouseX,\r\n                            oldPrevHeaderInner,\r\n                            oldPrevColWidth, newPrevColWidth;\r\n\r\n                        if (diff !== 0) {\r\n                            oldPrevHeaderInner = toResize.width();\r\n                            oldPrevColWidth = parseFloat(toResize.css(\"width\"));\r\n\r\n                            // handle a Chrome issue with columns set to auto\r\n                            // thanks to Brabus https://github.com/side-by-side\r\n                            if (!oldPrevColWidth) {\r\n                                oldPrevColWidth = toResize.innerWidth();\r\n                            }\r\n\r\n                            // make sure that diff cannot be beyond the left/right limits\r\n                            diff = diff < 0 ? Math.max(diff, -oldPrevHeaderInner) : diff;\r\n                            newPrevColWidth = oldPrevColWidth + diff;\r\n\r\n                            // only do this if we are not shrinking past 0 on left - and limit it to that amount\r\n                            if ((diff > 0 || oldPrevHeaderInner > 0) && newPrevColWidth > MINCOLWIDTH) {\r\n                                toResize.width(newPrevColWidth + \"px\");\r\n                                toResize.css(\"min-width\", newPrevColWidth + \"px\");\r\n                                toResize.css(\"max-width\", newPrevColWidth + \"px\");\r\n                                oldMouseX = newMouseX;\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n                this.gridWrapper.on(\"selectstart\", \".jstree-grid-resizable-separator\", function() {\r\n                        return false;\r\n                    }).on(\"mousedown\", \".jstree-grid-resizable-separator\", function(e) {\r\n                        isClickedSep = true;\r\n                        oldMouseX = e.pageX;\r\n                        toResize = $(this).closest(\"div.jstree-grid-column\");\r\n                        // the max rightmost position we will allow is the right-most of the wrapper minus a buffer (10)\r\n                        return false;\r\n                    })\r\n                    .on(\"dblclick\", \".jstree-grid-resizable-separator\", function(e) {\r\n                        var clickedSep = $(this),\r\n                            col = clickedSep.closest(\"div.jstree-grid-column\"),\r\n                            oldPrevColWidth = parseFloat(col.css(\"width\")),\r\n                            newWidth = 0,\r\n                            diff,\r\n                            colNum = col.prevAll(\".jstree-grid-column\").length,\r\n                            oldPrevHeaderInner = col.width(),\r\n                            newPrevColWidth;\r\n\r\n\r\n                        //find largest width\r\n                        col.find(\".jstree-grid-cell\").each(function() {\r\n                            var item = $(this),\r\n                                width;\r\n                            item.css(\"position\", \"absolute\");\r\n                            item.css(\"width\", \"auto\");\r\n                            width = item.outerWidth();\r\n                            item.css(\"position\", \"relative\");\r\n\r\n                            if (width > newWidth) {\r\n                                newWidth = width;\r\n                            }\r\n                        });\r\n\r\n                        diff = newWidth - oldPrevColWidth;\r\n\r\n                        // make sure that diff cannot be beyond the left limits\r\n                        diff = diff < 0 ? Math.max(diff, -oldPrevHeaderInner) : diff;\r\n                        newPrevColWidth = (oldPrevColWidth + diff) + \"px\";\r\n\r\n                        col.width(newPrevColWidth);\r\n                        col.css(\"min-width\", newPrevColWidth);\r\n                        col.css(\"max-width\", newPrevColWidth);\r\n\r\n                        $(this).closest(\".jstree-grid-wrapper\").find(\".jstree\").trigger(\"resize_column.jstree-grid\", [colNum, newPrevColWidth]);\r\n                    })\r\n                    .on(\"click\", \".jstree-grid-separator\", function(e) {\r\n                        // don't sort after resize\r\n                        e.stopPropagation();\r\n                    });\r\n            }\r\n            this.gridWrapper.on(\"click\", \".jstree-grid-header-cell\", function(e) {\r\n                if (!_this.sort) {\r\n                    return;\r\n                }\r\n\r\n                // get column\r\n                var name = $(this).attr(COL_DATA_ATTR);\r\n\r\n                // sort order\r\n                var symbol;\r\n                if (gs.sortOrder === name && gs.sortAsc === true) {\r\n                    gs.sortAsc = false;\r\n                    symbol = \"&darr;\";\r\n                } else {\r\n                    gs.sortOrder = name;\r\n                    gs.sortAsc = true;\r\n                    symbol = \"&uarr;\";\r\n                }\r\n\r\n                // add sort arrow\r\n                $(this.closest('.jstree-grid-wrapper')).find(\".jstree-grid-sort-icon\").remove();\r\n                $(\"<span></span>\").addClass(\"jstree-grid-sort-icon\").appendTo($(this)).html(symbol);\r\n\r\n                // sort by column\r\n                var rootNode = _this.get_node('#');\r\n                _this.sort(rootNode, true);\r\n                _this.redraw_node(rootNode, true);\r\n            });\r\n\r\n        };\r\n\r\n        this._domManipulation = null; // We'll store the column nodes in this object and an id for the grid-node that started the manipulation { id: \"id of the node that started the manipulation\", columns: { Key-Value-Pair col-No: Column }}\r\n\r\n        function _guid() {\r\n            function s4() {\r\n                return Math.floor((1 + Math.random()) * 0x10000)\r\n                    .toString(16)\r\n                    .substring(1);\r\n            }\r\n            return s4() + s4() + '-' + s4() + '-' + s4() + '-' +\r\n                s4() + '-' + s4() + s4() + s4();\r\n        }\r\n        /*\r\n         * Trys to detach the tree columns on massive dom manipulations\r\n         */\r\n        this._detachColumns = function(id) {\r\n            // if the columns are not detached, then detach them\r\n            if (this._domManipulation == null) {\r\n                var cols = this._gridSettings.columns || [],\r\n                    treecol = this._gridSettings.treecol,\r\n                    mw = this.midWrapper;\r\n                this._domManipulation = {\r\n                    id: id,\r\n                    columns: {}\r\n                };\r\n                for (var i = 0, len = cols.length; i < len; i++) {\r\n                    //if (treecol === i) {\r\n                    //  continue;\r\n                    //}\r\n                    this._domManipulation.columns[i] = mw.children(\".jstree-grid-column-\" + i)[0];\r\n                    this._domManipulation.columns[i].parentNode.removeChild(this._domManipulation.columns[i]);\r\n                }\r\n            }\r\n            return this._domManipulation;\r\n        }\r\n\r\n        this._reattachColumns = function(id) {\r\n            if (this._domManipulation == null) {\r\n                return false;\r\n            }\r\n            if (this._domManipulation.id === id) {\r\n                var cols = this._gridSettings.columns || [],\r\n                    treecol = this._gridSettings.treecol,\r\n                    mw = this.midWrapper;\r\n                for (var i = 0, len = cols.length; i < len; i++) {\r\n                    //if (treecol === i) {\r\n                    //  continue;\r\n                    //}\r\n                    mw[0].appendChild(this._domManipulation.columns[i]);\r\n                }\r\n                this._domManipulation = null;\r\n            }\r\n            return true;\r\n        }\r\n\r\n        /*\r\n         * Override open_node to detach the columns before redrawing child-nodes, and do reattach them afterwarts\r\n         */\r\n        this.open_node = function(obj, callback, animation) {\r\n            var isArray = $.isArray(obj);\r\n            var node = null;\r\n            if (!isArray) {\r\n                node = this.get_node(obj);\r\n                if (node.id === \"#\") {\r\n                    return;\r\n                } // wtf??? we ar in the root and do not need a open!\r\n            }\r\n            var id = isArray ? _guid() : node.id;\r\n            this._detachColumns(id);\r\n            var ret = parent.open_node.call(this, obj, callback, animation);\r\n            this._reattachColumns(id);\r\n            return ret;\r\n        }\r\n\r\n        /*\r\n         * Override redraw_node to correctly insert the grid\r\n         */\r\n        this.redraw_node = function(obj, deep, is_callback, force_render) {\r\n            var id = $.isArray(obj) ? _guid() : this.get_node(obj).id;\r\n            // we detach the columns once\r\n            this._detachColumns(id);\r\n            // first allow the parent to redraw the node\r\n            obj = parent.redraw_node.call(this, obj, deep, is_callback, force_render);\r\n            // next prepare the grid for a redrawn node - but only if ths node is not hidden (search does that)\r\n            if (obj) {\r\n                this._prepare_grid(obj);\r\n            }\r\n            // don't forget to reattach\r\n            this._reattachColumns(id);\r\n            return obj;\r\n        };\r\n        this.refresh = function() {\r\n            this._clean_grid();\r\n            return parent.refresh.apply(this, arguments);\r\n        };\r\n        /*\r\n         * Override set_id to update cell attributes\r\n         */\r\n        this.set_id = function(obj, id) {\r\n            var old, uniq = this.uniq;\r\n            if (obj) {\r\n                old = obj.id;\r\n            }\r\n            var result = parent.set_id.apply(this, arguments);\r\n            if (result) {\r\n                if (old !== undefined) {\r\n                    var grid = this.gridWrapper,\r\n                        oldNodes = [old],\r\n                        i;\r\n                    // get children\r\n                    if (obj && obj.children_d) {\r\n                        oldNodes = oldNodes.concat(obj.children_d);\r\n                    }\r\n                    // update id in children\r\n                    findDataCell(uniq, oldNodes, this._gridSettings.gridcols)\r\n                        .attr(NODE_DATA_ATTR, obj.id)\r\n                        .removeClass(generateCellId(uniq, old))\r\n                        .addClass(generateCellId(uniq, obj.id))\r\n                        .each(function(i, node) {\r\n                            $(node).attr('id', generateCellId(uniq, obj.id) + (i + 1));\r\n                        });\r\n                }\r\n            }\r\n            return result;\r\n        };\r\n\r\n        this._hideOrShowTree = function(node, hide) {\r\n            //Hides or shows a tree\r\n            this._detachColumns(node.id);\r\n            // show cells in each detachted column\r\n            this._hideOrShowNode(node, hide, this._gridSettings.columns || [], this._gridSettings.treecol);\r\n            this._reattachColumns(node.id);\r\n        }\r\n        this._hideOrShowNode = function(node, hide, cols, treecol) {\r\n            //Hides or shows a node with recursive calls to all open child-nodes\r\n            for (var i = 0, len = cols.length; i < len; i++) {\r\n                if (i === treecol) {\r\n                    continue;\r\n                }\r\n                var cells = findDataCell(this.uniq, node.id, i, $(this._domManipulation.columns[i]));\r\n                if (hide) {\r\n                    cells.addClass(\"jstree-grid-hidden\");\r\n                } else {\r\n                    cells.removeClass(\"jstree-grid-hidden\");\r\n                }\r\n            }\r\n            if (node.state.opened && node.children) {\r\n                for (var i = 0, len = node.children.length; i < len; i++) {\r\n                    this._hideOrShowNode(this.get_node(node.children[i]), hide, cols, treecol);\r\n                }\r\n            }\r\n        }\r\n        this._hide_grid = function(node) {\r\n            if (!node) {\r\n                return true;\r\n            }\r\n            this._detachColumns(node.id);\r\n            var children = node.children ? node.children : [],\r\n                cols = this._gridSettings.columns || [],\r\n                treecol = this._gridSettings.treecol;\r\n            // try to remove all children\r\n            for (var i = 0, len = children.length; i < len; i++) {\r\n                var child = this.get_node(children[i]);\r\n                // go through each column, remove all children with the correct ID name\r\n                for (var j = 0, lenj = cols.length; j < lenj; j++) {\r\n                    if (j === treecol) {\r\n                        continue;\r\n                    }\r\n                    findDataCell(this.uniq, child.id, j, $(this._domManipulation.columns[j])).remove();\r\n                }\r\n                if (child.state.opened) {\r\n                    this._hide_grid(child);\r\n                }\r\n            }\r\n\r\n\r\n            this._reattachColumns(node.id);\r\n        };\r\n        this.holdingCells = {};\r\n        this.getHoldingCells = function(obj, col, hc) {\r\n            if (obj.state.hidden || !obj.state.opened) {\r\n                return $();\r\n            }\r\n            var ret = $(),\r\n                children = obj.children || [],\r\n                child, i, uniq = this.uniq;\r\n            // run through each child, render it, and then render its children recursively\r\n            for (i = 0; i < children.length; i++) {\r\n                child = generateCellId(uniq, children[i]) + col;\r\n                if (hc[child]) {\r\n                    ret = ret.add(hc[child]).add(this.getHoldingCells(this.get_node(children[i]), col, hc));\r\n                    //delete hc[child];\r\n                }\r\n            }\r\n            return (ret);\r\n        };\r\n\r\n        /**\r\n         * put a grid cell in edit mode (input field to edit the data)\r\n         * @name edit(obj, col)\r\n         * @param  {mixed} obj\r\n         * @param  {obj} col definition\r\n         * @param  {element} cell element, either span or wrapping div\r\n         */\r\n        this._edit = function(obj, col, element) {\r\n            if (!obj) {\r\n                return false;\r\n            }\r\n            if (!obj.data) {\r\n                obj.data = {};\r\n            }\r\n            if (element) {\r\n                element = $(element);\r\n                if (element.prop(\"tagName\").toLowerCase() === \"div\") {\r\n                    element = element.children(\"span:first\");\r\n                }\r\n            } else {\r\n                // need to find the element - later\r\n                return false;\r\n            }\r\n            var rtl = this._data.core.rtl,\r\n                w = this.element.width(),\r\n                t = obj.data[col.value],\r\n                h1 = $(\"<\" + \"div />\", {\r\n                    css: {\r\n                        \"position\": \"absolute\",\r\n                        \"top\": \"-200px\",\r\n                        \"left\": (rtl ? \"0px\" : \"-1000px\"),\r\n                        \"visibility\": \"hidden\"\r\n                    }\r\n                }).appendTo(\"body\"),\r\n                h2 = $(\"<\" + \"input />\", {\r\n                    \"value\": t,\r\n                    \"class\": \"jstree-rename-input\",\r\n                    \"css\": {\r\n                        \"padding\": \"0\",\r\n                        \"border\": \"1px solid silver\",\r\n                        \"box-sizing\": \"border-box\",\r\n                        \"display\": \"inline-block\",\r\n                        \"height\": (this._data.core.li_height) + \"px\",\r\n                        \"lineHeight\": (this._data.core.li_height) + \"px\",\r\n                        \"width\": \"150px\" // will be set a bit further down\r\n                    },\r\n                    \"blur\": $.proxy(function() {\r\n                        var v = h2.val();\r\n                        // save the value if changed\r\n                        if (v === \"\" || v === t) {\r\n                            v = t;\r\n                        } else {\r\n                            obj.data[col.value] = v;\r\n                            this.element.trigger('update_cell.jstree-grid', {\r\n                                node: obj,\r\n                                col: col.value,\r\n                                value: v,\r\n                                old: t\r\n                            });\r\n                            var id = _guid();\r\n                            this._detachColumns(id);\r\n                            this._prepare_grid(this.get_node(obj, true));\r\n                            this._reattachColumns(id);\r\n                        }\r\n                        h2.remove();\r\n                        element.show();\r\n                    }, this),\r\n                    \"keydown\": function(event) {\r\n                        var key = event.which;\r\n                        if (key === 27) {\r\n                            this.value = t;\r\n                        }\r\n                        if (key === 27 || key === 13 || key === 37 || key === 38 || key === 39 || key === 40 || key === 32) {\r\n                            event.stopImmediatePropagation();\r\n                        }\r\n                        if (key === 27 || key === 13) {\r\n                            event.preventDefault();\r\n                            this.blur();\r\n                        }\r\n                    },\r\n                    \"click\": function(e) {\r\n                        e.stopImmediatePropagation();\r\n                    },\r\n                    \"mousedown\": function(e) {\r\n                        e.stopImmediatePropagation();\r\n                    },\r\n                    \"keyup\": function(event) {\r\n                        h2.width(Math.min(h1.text(\"pW\" + this.value).width(), w));\r\n                    },\r\n                    \"keypress\": function(event) {\r\n                        if (event.which === 13) {\r\n                            return false;\r\n                        }\r\n                    }\r\n                }),\r\n                fn = {\r\n                    fontFamily: element.css('fontFamily') || '',\r\n                    fontSize: element.css('fontSize') || '',\r\n                    fontWeight: element.css('fontWeight') || '',\r\n                    fontStyle: element.css('fontStyle') || '',\r\n                    fontStretch: element.css('fontStretch') || '',\r\n                    fontVariant: element.css('fontVariant') || '',\r\n                    letterSpacing: element.css('letterSpacing') || '',\r\n                    wordSpacing: element.css('wordSpacing') || ''\r\n                };\r\n            element.hide();\r\n            element.parent().append(h2);\r\n            h2.css(fn).width(Math.min(h1.text(\"pW\" + h2[0].value).width(), w))[0].select();\r\n        };\r\n\r\n        this.grid_hide_column = function(col) {\r\n            this.midWrapper.find(\".jstree-grid-column-\" + col).hide();\r\n        };\r\n        this.grid_show_column = function(col) {\r\n            this.midWrapper.find(\".jstree-grid-column-\" + col).show();\r\n        };\r\n\r\n        this._prepare_grid = function(obj) {\r\n            var gs = this._gridSettings,\r\n                c = gs.treeClass,\r\n                _this = this,\r\n                t,\r\n                cols = gs.columns || [],\r\n                width, tr = gs.isThemeroller,\r\n                uniq = this.uniq,\r\n                treecol = gs.treecol,\r\n                tree = this.element,\r\n                rootid = this.rootid,\r\n                classAdd = (tr ? \"themeroller\" : \"regular\"),\r\n                img, objData = this.get_node(obj),\r\n                defaultWidth = gs.columnWidth,\r\n                conf = gs.defaultConf,\r\n                cellClickHandler = function(tree, node, val, col, t) {\r\n                    return function(e) {\r\n                        //node = tree.find(\"#\"+node.attr(\"id\"));\r\n                        var event = eventer.create(\"select_cell.jstree-grid\");\r\n                        tree.trigger(event, [{\r\n                            value: val,\r\n                            column: col.header,\r\n                            node: node,\r\n                            grid: $(this),\r\n                            sourceName: col.value\r\n                        }]);\r\n                        if (!event.isDefaultPrevented()) {\r\n                            node.children(\".jstree-anchor\").trigger(\"click.jstree\", e);\r\n                        }\r\n                    };\r\n                },\r\n                cellRightClickHandler = function(tree, node, val, col, t) {\r\n                    return function(e) {\r\n                        if (gs.gridcontextmenu) {\r\n                            e.preventDefault();\r\n                            menu.popup(this, {\r\n                                'x': e.pageX,\r\n                                'y': e.pageY\r\n                            }, gs.gridcontextmenu(_this, tree, node, val, col, t, e.target));\r\n                        }\r\n                    };\r\n                },\r\n                hoverInHandler = function(node, jsTreeInstance) {\r\n                    return function() {\r\n                        jsTreeInstance.hover_node(node);\r\n                    };\r\n                },\r\n                hoverOutHandler = function(node, jsTreeInstance) {\r\n                    return function() {\r\n                        jsTreeInstance.dehover_node(node);\r\n                    };\r\n                },\r\n                i, val, cl, wcl, ccl, a, last, valClass, wideValClass, span, paddingleft, title, gridCellName, gridCellParentId, gridCellParent,\r\n                gridCellPrev, gridCellPrevId, gridCellNext, gridCellNextId, gridCellChild, gridCellChildId,\r\n                col, content, tmpWidth, mw = this.midWrapper,\r\n                column, lid = objData.id,\r\n                highlightSearch, isClicked,\r\n                peers = this.get_node(objData.parent).children,\r\n                // find my position in the list of peers. \"peers\" is the list of everyone at my level under my parent, in order\r\n                pos = $.inArray(lid, peers),\r\n                hc = this.holdingCells,\r\n                rendered = false,\r\n                closed;\r\n            // get our column definition\r\n            t = $(obj);\r\n\r\n            // find the a children\r\n            a = t.children(\"[class~='jstree-anchor']\");\r\n            highlightSearch = a.hasClass(SEARCHCLASS);\r\n            isClicked = a.hasClass(\"jstree-clicked\");\r\n\r\n            if (a.length === 1) {\r\n                closed = !objData.state.opened;\r\n                gridCellName = generateCellId(uniq, lid);\r\n                gridCellParentId = objData.parent === \"#\" ? null : objData.parent;\r\n                a.addClass(c);\r\n                //renderAWidth(a,_this);\r\n                renderATitle(a, t, _this);\r\n                last = a;\r\n\r\n                // calculate position ids once\r\n                gridCellPrevId = pos <= 0 ? objData.parent : findLastClosedNode(this, peers[pos - 1]);\r\n                gridCellNextId = pos >= peers.length - 1 ? \"NULL\" : peers[pos + 1];\r\n                gridCellChildId = objData.children && objData.children.length > 0 ? objData.children[0] : \"NULL\";\r\n\r\n                // find which column our tree shuld go in\r\n                var s = this.settings.grid;\r\n                for (var i = 0, len = cols.length; i < len; i++) {\r\n                    if (treecol === i) {\r\n                        continue;\r\n                    }\r\n                    col = cols[i];\r\n                    column = this._domManipulation == null ? mw.children(\"div:eq(\" + i + \")\") : $(this._domManipulation.columns[i]); //Geht the detached column not mw.children(\"div:eq(\"+i+\")\");\r\n                    // get the cellClass, the wideCellClass, and the columnClass\r\n                    cl = col.cellClass || \"\";\r\n                    wcl = col.wideCellClass || \"\";\r\n                    ccl = col.columnClass || \"\";\r\n\r\n                    // add a column class to the Column\r\n                    column.addClass(ccl);\r\n\r\n\r\n                    // get the contents of the cell - value could be a string or a function\r\n                    val = getCellData(col.value, objData);\r\n\r\n                    if (typeof(col.format) === \"function\") {\r\n                        val = col.format(val);\r\n                    }\r\n\r\n                    // put images instead of text if needed\r\n                    if (col.images) {\r\n                        img = col.images[val] || col.images[\"default\"];\r\n                        if (img) {\r\n                            content = img[0] === \"*\" ? '<span class=\"' + img.substr(1) + '\"></span>' : '<img src=\"' + img + '\">';\r\n                        }\r\n                    } else {\r\n                        content = val;\r\n                    }\r\n\r\n                    // content cannot be blank, or it messes up heights\r\n                    if (content === undefined || content === null || BLANKRE.test(content)) {\r\n                        content = \"&nbsp;\";\r\n                    }\r\n\r\n                    // get the valueClass\r\n                    valClass = col.valueClass && objData.data !== null && objData.data !== undefined ? objData.data[col.valueClass] || \"\" : \"\";\r\n                    if (valClass && col.valueClassPrefix && col.valueClassPrefix !== \"\") {\r\n                        valClass = col.valueClassPrefix + valClass;\r\n                    }\r\n                    // get the wideValueClass\r\n                    wideValClass = col.wideValueClass && objData.data !== null && objData.data !== undefined ? objData.data[col.wideValueClass] || \"\" : \"\";\r\n                    if (wideValClass && col.wideValueClassPrefix && col.wideValueClassPrefix !== \"\") {\r\n                        wideValClass = col.wideValueClassPrefix + wideValClass;\r\n                    }\r\n                    // get the title\r\n                    title = col.title && objData.data !== null && objData.data !== undefined ? objData.data[col.title] || \"\" : \"\";\r\n                    // strip out HTML\r\n                    title = title.replace(htmlstripre, '');\r\n\r\n                    // get the width\r\n                    paddingleft = 7;\r\n                    width = col.width || defaultWidth;\r\n                    if (width !== 'auto') {\r\n                        width = tmpWidth || (width - paddingleft);\r\n                    }\r\n\r\n                    last = findDataCell(uniq, lid, i, column);\r\n                    if (!last || last.length < 1) {\r\n                        last = $(\"<div></div>\");\r\n                        $(\"<span></span>\").appendTo(last);\r\n                        last.attr(\"id\", gridCellName + i);\r\n                        last.addClass(gridCellName);\r\n                        last.attr(NODE_DATA_ATTR, lid);\r\n                        if (highlightSearch) {\r\n                            last.addClass(SEARCHCLASS);\r\n                        } else {\r\n                            last.removeClass(SEARCHCLASS);\r\n                        }\r\n                        if (isClicked) {\r\n                            last.addClass(\"jstree-clicked\");\r\n                        } else {\r\n                            last.removeClass(\"jstree-clicked\");\r\n                        }\r\n                        if (this.settings.core.themes.ellipsis === true && i !== treecol) {\r\n                            last.addClass('jstree-grid-ellipsis');\r\n                        }\r\n\r\n                    }\r\n\r\n                    // we need to check the hidden-state and see if we need to hide the node\r\n                    if (objData.state.hidden) {\r\n                        last.addClass(\"jstree-grid-hidden\");\r\n                    } else {\r\n                        last.removeClass(\"jstree-grid-hidden\");\r\n                    }\r\n\r\n                    // we need to put it in the dataCell - after the parent, but the position matters\r\n                    // if we have no parent, then we are one of the root nodes, but still need to look at peers\r\n\r\n\r\n                    // if we are first, i.e. pos === 0, we go right after the parent;\r\n                    // if we are not first, and our previous peer (one before us) is closed, we go right after the previous peer cell\r\n                    // if we are not first, and our previous peer is opened, then we have to find its youngest & lowest closed child (incl. leaf)\r\n                    //\r\n                    // probably be much easier to go *before* our next one\r\n                    // but that one might not be drawn yet\r\n                    // here is the logic for jstree drawing:\r\n                    //   it draws peers from first to last or from last to first\r\n                    //   it draws children before a parent\r\n                    //\r\n                    // so I can rely on my *parent* not being drawn, but I cannot rely on my previous peer or my next peer being drawn\r\n\r\n                    // so we do the following:\r\n                    //   1- We are the first child: install after the parent\r\n                    //   2- Our previous peer is already drawn: install after the previous peer\r\n                    //   3- Our previous peer is not drawn, we have a child that is drawn: install right before our first child\r\n                    //   4- Our previous peer is not drawn, we have no child that is drawn, our next peer is drawn: install right before our next peer\r\n                    //   5- Our previous peer is not drawn, we have no child that is drawn, our next peer is not drawn: install right after parent\r\n                    gridCellPrev = findDataCell(uniq, gridCellPrevId, i, column);\r\n                    gridCellNext = findDataCell(uniq, gridCellNextId, i, column);\r\n                    gridCellChild = findDataCell(uniq, gridCellChildId, i, column);\r\n                    gridCellParent = findDataCell(uniq, gridCellParentId, i, column);\r\n\r\n\r\n                    // if our parent is already drawn, then we put this in the right order under our parent\r\n                    if (gridCellParentId) {\r\n                        if (gridCellParent && gridCellParent.length > 0) {\r\n                            if (gridCellPrev && gridCellPrev.length > 0) {\r\n                                last.insertAfter(gridCellPrev);\r\n                            } else if (gridCellChild && gridCellChild.length > 0) {\r\n                                last.insertBefore(gridCellChild);\r\n                            } else if (gridCellNext && gridCellNext.length > 0) {\r\n                                last.insertBefore(gridCellNext);\r\n                            } else {\r\n                                last.insertAfter(gridCellParent);\r\n                            }\r\n                            rendered = true;\r\n                        } else {\r\n                            rendered = false;\r\n                        }\r\n                        // always put it in the holding cells, and then sort when the parent comes in, in case parent is (re)drawn later\r\n                        hc[gridCellName + i] = last;\r\n                    } else {\r\n                        if (gridCellPrev && gridCellPrev.length > 0) {\r\n                            last.insertAfter(gridCellPrev);\r\n                        } else if (gridCellChild && gridCellChild.length > 0) {\r\n                            last.insertBefore(gridCellChild);\r\n                        } else if (gridCellNext && gridCellNext.length > 0) {\r\n                            last.insertBefore(gridCellNext);\r\n                        } else {\r\n                            last.appendTo(column);\r\n                        }\r\n                        rendered = true;\r\n                    }\r\n                    // do we have any children waiting for this cell? walk down through the children/grandchildren/etc tree\r\n                    if (rendered) {\r\n                        var toRen = this.getHoldingCells(objData, i, hc);\r\n                        last.after(toRen);\r\n                    }\r\n                    // need to make the height of this match the line height of the tree. How?\r\n                    span = last.children(\"span\");\r\n\r\n                    // create a span inside the div, so we can control what happens in the whole div versus inside just the text/background\r\n                    span.addClass(cl + \" \" + valClass).html(content);\r\n                    last = last.css(conf).addClass(\"jstree-grid-cell jstree-grid-cell-regular jstree-grid-cell-root-\" + rootid + \" jstree-grid-cell-\" + classAdd + \" \" + wcl + \" \" + wideValClass + (tr ? \" ui-state-default\" : \"\")).addClass(\"jstree-grid-col-\" + i).addClass(\"jstree-animated\");\r\n                    // add click handler for clicking inside a grid cell\r\n                    last.click(cellClickHandler(tree, t, val, col, this));\r\n                    last.on(\"contextmenu\", cellRightClickHandler(tree, t, val, col, this));\r\n                    last.hover(hoverInHandler(t, this), hoverOutHandler(t, this));\r\n\r\n                    if (title) {\r\n                        span.attr(\"title\", title);\r\n                    }\r\n\r\n                    tree.trigger(\"render_cell.jstree-grid\", [{\r\n                        value: val,\r\n                        column: col.header,\r\n                        node: t,\r\n                        sourceName: col.value\r\n                    }]);\r\n                }\r\n                last.addClass(\"jstree-grid-cell-last\" + (tr ? \" ui-state-default\" : \"\"));\r\n                // if there is no width given for the last column, do it via automatic\r\n                if (cols[cols.length - 1].width === undefined) {\r\n                    last.addClass(\"jstree-grid-width-auto\").next(\".jstree-grid-separator\").remove();\r\n                }\r\n            }\r\n            this.element.css({\r\n                'overflow-y': 'auto !important'\r\n            });\r\n        };\r\n        // clean up holding cells\r\n        this.holdingCells = {};\r\n\r\n        // need to do alternating background colors or borders\r\n    };\r\n\r\n    return $;\r\n});"]}