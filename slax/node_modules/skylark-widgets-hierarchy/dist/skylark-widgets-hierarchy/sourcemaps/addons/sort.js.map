{"version":3,"sources":["addons/sort.js"],"names":["define","langx","browser","eventer","noder","geom","$","jstree","plugins","sort","defaults","a","b","this","get_text","options","parent","bind","call","element","on","proxy","e","data","node","redraw_node","obj","deep","i","j","get_node","children","length","settings","children_d"],"mappings":";;;;;;;AAAAA,QACE,sBACA,uBACA,uBACA,qBACA,oBACA,qBACA,gBACA,SAASC,EAAMC,EAAQC,EAAQC,EAAMC,EAAKC,EAAEC,GAE7C,aAEA,IAAGD,EAAEC,OAAOC,QAAQC,KAsDpB,OA9CAH,EAAEC,OAAOG,SAASD,KAAO,SAAUE,EAAGC,GAErC,OAAOC,KAAKC,SAASH,GAAKE,KAAKC,SAASF,GAAK,GAAK,GAEnDN,EAAEC,OAAOC,QAAQC,KAAO,SAAUM,EAASC,GAC1CH,KAAKI,KAAO,WACXD,EAAOC,KAAKC,KAAKL,MACjBA,KAAKM,QACHC,GAAG,eAAgBnB,EAAMoB,MAAM,SAAUC,EAAGC,GAC3CV,KAAKJ,KAAKc,EAAKP,QAAQ,IACrBH,OACHO,GAAG,wCAAyCnB,EAAMoB,MAAM,SAAUC,EAAGC,GACpEV,KAAKJ,KAAKc,EAAKP,QAAUO,EAAKC,KAAKR,QAAQ,GAC3CH,KAAKY,YAAYF,EAAKP,QAAUO,EAAKC,KAAKR,QAAQ,IAChDH,OACHO,GAAG,oCAAqCnB,EAAMoB,MAAM,SAAUC,EAAGC,GAChEV,KAAKJ,KAAKc,EAAKP,QAAQ,GACvBH,KAAKY,YAAYF,EAAKP,QAAQ,IAC5BH,QAWNA,KAAKJ,KAAO,SAAUiB,EAAKC,GAC1B,IAAIC,EAAGC,EAEP,IADAH,EAAMb,KAAKiB,SAASJ,KACVA,EAAIK,UAAYL,EAAIK,SAASC,SACtCN,EAAIK,SAAStB,KAAKR,EAAMoB,MAAMR,KAAKoB,SAASxB,KAAMI,OAC/Cc,GACF,IAAIC,EAAI,EAAGC,EAAIH,EAAIQ,WAAWF,OAAQJ,EAAIC,EAAGD,IAC5Cf,KAAKJ,KAAKiB,EAAIQ,WAAWN,IAAI,KAU3BtB","file":"../../addons/sort.js","sourcesContent":["define([\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-browser\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-geom\",\r\n  \"skylark-domx-query\",\r\n  \"../Hierarchy\"\r\n],function(langx,browser,eventer,noder,geom,$,jstree){\r\n\r\n\t\"use strict\";\r\n\r\n\tif($.jstree.plugins.sort) { return; }\r\n\r\n\t/**\r\n\t * the settings function used to sort the nodes.\r\n\t * It is executed in the tree's context, accepts two nodes as arguments and should return `1` or `-1`.\r\n\t * @name $.jstree.defaults.sort\r\n\t * @plugin sort\r\n\t */\r\n\t$.jstree.defaults.sort = function (a, b) {\r\n\t\t//return this.get_type(a) === this.get_type(b) ? (this.get_text(a) > this.get_text(b) ? 1 : -1) : this.get_type(a) >= this.get_type(b);\r\n\t\treturn this.get_text(a) > this.get_text(b) ? 1 : -1;\r\n\t};\r\n\t$.jstree.plugins.sort = function (options, parent) {\r\n\t\tthis.bind = function () {\r\n\t\t\tparent.bind.call(this);\r\n\t\t\tthis.element\r\n\t\t\t\t.on(\"model.jstree\", langx.proxy(function (e, data) {\r\n\t\t\t\t\t\tthis.sort(data.parent, true);\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on(\"rename_node.jstree create_node.jstree\", langx.proxy(function (e, data) {\r\n\t\t\t\t\t\tthis.sort(data.parent || data.node.parent, false);\r\n\t\t\t\t\t\tthis.redraw_node(data.parent || data.node.parent, true);\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on(\"move_node.jstree copy_node.jstree\", langx.proxy(function (e, data) {\r\n\t\t\t\t\t\tthis.sort(data.parent, false);\r\n\t\t\t\t\t\tthis.redraw_node(data.parent, true);\r\n\t\t\t\t\t}, this));\r\n\t\t};\r\n\t\t/**\r\n\t\t * used to sort a node's children\r\n\t\t * @private\r\n\t\t * @name sort(obj [, deep])\r\n\t\t * @param  {mixed} obj the node\r\n\t\t * @param {Boolean} deep if set to `true` nodes are sorted recursively.\r\n\t\t * @plugin sort\r\n\t\t * @trigger search.jstree\r\n\t\t */\r\n\t\tthis.sort = function (obj, deep) {\r\n\t\t\tvar i, j;\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(obj && obj.children && obj.children.length) {\r\n\t\t\t\tobj.children.sort(langx.proxy(this.settings.sort, this));\r\n\t\t\t\tif(deep) {\r\n\t\t\t\t\tfor(i = 0, j = obj.children_d.length; i < j; i++) {\r\n\t\t\t\t\t\tthis.sort(obj.children_d[i], false);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n\t// include the sort plugin by default\r\n\t// $.jstree.defaults.plugins.push(\"sort\");\r\n\r\n\treturn $;\r\n\t\r\n});"]}