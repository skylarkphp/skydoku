{"version":3,"sources":["skylark-widgets-hierarchy.js"],"names":["define","skylark","langx","browser","eventer","noder","geom","$","jstree","instance_counter","ccp_node","ccp_mode","ccp_inst","themes_loaded","src","attr","document","window","version","defaults","plugins","path","indexOf","replace","idregex","root","create","el","options","Tree","destroy","off","reference","needle","tmp","obj","id","tagName","nodeType","length","ignore","closest","data","each","inst","this","_model","fn","arg","is_method","args","Array","prototype","slice","call","arguments","result","instance","method","apply","undefined","isPlainObject","core","strings","check_callback","error","noop","animation","multiple","themes","name","url","dir","dots","icons","ellipsis","stripes","variant","responsive","expand_selected_onload","worker","force_text","dblclick_toggle","loaded_state","restore_focus","keyboard","ctrl-space","e","type","currentTarget","trigger","enter","left","preventDefault","is_open","close_node","o","get_parent","get_node","children","focus","up","get_prev_dom","right","is_closed","open_node","_firstChild","down","get_next_dom","*","open_all","home","get_container_ul","filter","end","element","find","last","f2","edit","Evented","inherit","klassName","plugin","deco","opts","Child","_data","init","_id","_cnt","_wrk","selected","last_error","working","worker_queue","focused","opt","extend","i","k","changed","force_full_redraw","redraw_timeout","default_state","loaded","opened","disabled","parent","parents","children_d","state","addClass","settings","ready","rtl","css","bind","original_container_html","clone","addBack","contents","nodeValue","test","remove","html","get_string","li_height","first","outerHeight","node","_create_prototype_node","load_node","keep_html","URL","revokeObjectURL","empty","teardown","_temp1","_temp2","_node","createElement","setAttribute","className","appendChild","_kbevent_to_func","parts","ctrlKey","push","altKey","shiftKey","8","9","13","19","27","32","33","34","35","36","37","38","39","40","44","45","46","96","97","98","99","100","101","102","103","104","105","-13","112","113","114","115","116","117","118","119","120","121","122","123","144","145","16","17","18","48","49","50","51","52","53","54","55","56","57","59","61","65","66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","107","109","110","186","187","188","189","190","191","192","219","220","221","222","111","106","173","which","sort","join","toLowerCase","kb","hasOwnProperty","split","unbind","removeClass","removeData","word","tout","was_click","on","target","selection","getSelection","sel","removeAllRanges","collapse","proxy","Date","toggle_node","activeElement","activate_node","f","r","status","setTimeout","j","concat","vakata","array_unique","action","clearTimeout","chr","String","fromCharCode","col","ind","index","v","text","RegExp","charAt","s","set_theme","set_theme_variant","mouseleave","not","mouseenter","act","hover_node","dehover_node","ev","get_container","key","a","isFunction","dom","firstChild","nextSibling","_nextSibling","_previousSibling","previousSibling","as_dom","hasClass","ex","get_path","glue","ids","p","get_text","reverse","strict","offsetHeight","parentsUntil","nextAll","lastChild","parentNode","get_children_dom","is_parent","is_loaded","is_loading","loading","is_leaf","callback","l","c","isArray","_load_nodes","array_filter","inArray","failed","_load_node","m","has_children","hidden","nodes","is_callback","force_reload","done","load_all","to_load","t","notTextOrCommentNode","d","parseHTML","Xhr","request","x","getResponseHeader","_append_json_data","_append_html_data","reason","JSON","stringify","xhr","fail","_node_changed","cb","dat","is","par","chd","dpc","_parse_model_from_html","redraw","force_processing","parse","w","df","t_id","t_cnt","func","rslt","add","parse_flat","ps","unshift","tid","toString","icon","li_attr","a_attr","href","original","parse_nest","cnt","mod","postMessage","Blob","Worker","createObjectURL","onmessage","terminate","shift","attributes","trim","_parse_model_from_flat_json","_parse_model_from_json","_redraw","fe","redraw_node","append","full","draw_children","deep","force_render","old","last_sibling","querySelector","substr","getElementById","cloneNode","childNodes","style","backgroundImage","backgroundPosition","backgroundSize","createTextNode","innerHTML","insertBefore","scrollTop","scrollLeft","t1","t2","stop","slideDown","display","ok","_open_to","slideUp","original_obj","_this","close_all","get","is_disabled","enable_node","disable_node","is_hidden","hide_node","skip_redraw","show_node","hide_all","show_all","last_clicked","metaKey","deselect_node","select_node","event","is_selected","deselect_all","supress_event","prevent_open","array_remove_item","select_all","old_selection","get_selected","map","get_top_selected","get_bottom_selected","get_state","open","scroll","top","set_state","initial_selection","isEmptyObject","refresh","skip_loading","forget_state","refresh_node","set_id","new","set_text","val","get_json","flat","get_icon","no_data","no_state","no_li_attr","no_a_attr","no_id","no_children","create_node","pos","match","check","position","rename_node","delete_node","lft","array_remove","chk","more","chc","is_multi","functions","move_node","origin","old_par","old_pos","new_par","old_ins","copy_node","is_foreign","old_parent","old_position","old_instance","new_instance","cut","copy","get_buffer","mode","can_paste","paste","clear_buffer","default_text","h1","h2","cancel","width","visibility","appendTo","body","value","class","padding","border","box-sizing","height","lineHeight","blur","stopImmediatePropagation","nv","replaceWith","keydown","click","mousedown","keyup","Math","min","keypress","fontFamily","fontSize","fontWeight","fontStyle","fontStretch","fontVariant","letterSpacing","wordSpacing","select","one","theme_name","theme_url","theme","get_theme","variant_name","get_theme_variant","show_stripes","hide_stripes","toggle_stripes","show_dots","hide_dots","toggle_dots","show_icons","hide_icons","toggle_icons","show_ellipsis","hide_ellipsis","toggle_ellipsis","set_icon","removeAttr","hide_icon","show_icon","search","pattern","txt","fuzzy","caseSensitive","MATCH_LOCATION","location","MATCH_DISTANCE","distance","MATCH_THRESHOLD","threshold","patternLen","matchmask","pattern_alphabet","mask","match_bitapScore","accuracy","proximity","abs","isMatch","score","binMin","binMid","lastRd","start","finish","rd","charMatch","textLen","scoreThreshold","bestLoc","binMax","locations","lastIndexOf","floor","max","with_values","array","from","splice","item","b","deselected","checkbox","_i","visible","three_state","whole_node","keep_selected_style","cascade","tie_selection","cascade_to_disabled","cascade_to_hidden","uto","_undetermined","checked","cur","selectedIds","_cascade_new_checked_state","temp","undetermined","allIds","get_undetermined","tt","tmp2","checkbox_disabled","show_checkboxes","checkboxes","hide_checkboxes","toggle_checkboxes","is_undetermined","disable_checkbox","enable_checkbox","is_checked","uncheck_node","check_node","checkedState","selectedChildIds","selectedNodeIds","selectedChildrenIds","get_checked_descendants","childId","self","check_all","uncheck_all","get_checked","get_top_checked","get_bottom_checked","res","conditionalselect","right_to_left","popup","Menu","elm","$el","_options","mixin","hide_onmouseleave","to","contains","relatedTarget","siblings","hide","_show_submenu","_execute","prevAll","show","render","items","_parse","_trigger","event_name","position_x","y","position_y","_disabled","str","sep","separator_before","_class","shortcut","title","label","shortcut_label","submenu","separator_after","xl","offset","outerWidth","h","dw","dh","is_visible","detach","menu","contextmenu","show_at_node","new_node","rename","ccp","ey","last_ts","cto","show_contextmenu","pageX","pageY","originalEvent","changedTouches","clientX","clientY","_show_contextmenu","cls","drg","dnd","open_timeout","is_draggable","check_while_dragging","always_copy","inside_pos","drag_selection","touch","large_drop_target","large_drag_target","use_html5","mlt","escape","helper","lastmv","laster","lastev","opento","marker","isDifferentNode","op","pr","ip","tm","is_copy","pn","ins","ref","rel","z","dataTransfer","dropEffect","_get","_clean","div","strip","vakata_dnd","is_down","is_drag","helper_w","init_x","init_y","scroll_l","scroll_t","scroll_e","scroll_i","is_touch","scroll_speed","scroll_proximity","helper_left","helper_top","threshold_touch","clearInterval","drag","_scroll","init_only","setInterval","elementFromPoint","pageXOffset","pageYOffset","unselectable","onselectstart","touchAction","msTouchAction","MozUserSelect","margin","zIndex","wh","ww","dt","dl","ht","hl","scrollHeight","scrollWidth","offsetWidth","parseInt","massload","toLoad","ajax","case_sensitive","show_only_matches","show_only_matches_children","close_opened_onclear","search_leaves_only","search_callback","opn","som","smc","hdn","skip_async","inside","clear_search","lastRequest","abort","ii","querySelectorAll","events","ttl","preserve_loaded","save_state","restore_state","st","sec","storage","set","clear_state","del","localStorage","setItem","getItem","removeItem","BLANKRE","IDREGEX","styled","generateCellId","tree","escapeId","getIds","makeArray","findDataCell","uniq","scope","cellId","ret","columns","forEach","isClickedSep","toResize","oldMouseX","newMouseX","htmlstripre","copyData","fromtree","totree","recurse","findLastClosedNode","getCellData","grid","_guid","s4","random","substring","_initialize","_initialized","container","gs","_gridSettings","treeClass","context","columnWidth","defaultConf","*display","*+display","isThemeroller","themeroller","treeWidthDiff","resizable","draggable","stateful","indent","sortOrder","sortAsc","caseInsensitive","fixedHeader","gridcontextmenu","treecol","gridcols","cols","columnSearch","_edit","len","ceil","rootid","msie","navigator","userAgent","parseFloat","appVersion","zoom","gridWrapper","insertAfter","midWrapper","defaultSort","bigger","colrefs","caseInsensitiveSort","localeCompare","nodeA","nodeB","valueA","valueB","ui","sortable","axis","handle","console","warn","searchColumn","searchObj","validatedSearchObj","columnIndex","Object","keys","column","columnValue","searchSettings","omniSearchCallback","matched","searchValue","_detachColumns","_prepare_grid","_reattachColumns","removeNodes","_hideOrShowTree","_hide_grid","_prepare_headers","q","anchorHeight","_hover_node","nodesToShow","endTime","that","startTime","getTime","holdingCells","cells","_domManipulation","time","newtree","oldtree","gw","gridparent","_clean_grid","cl","ccl","coluuid","defaultWidth","tr","classAdd","hasHeaders","conf","headerClass","columnClass","header","minWidth","maxWidth","prependTo","next","bound","mouseup","currentTree","colNum","isNaN","mousemove","oldPrevHeaderInner","oldPrevColWidth","newPrevColWidth","diff","innerWidth","clickedSep","newWidth","stopPropagation","symbol","rootNode","mw","removeChild","oldNodes","_hideOrShowNode","child","lenj","getHoldingCells","hc","prop","grid_hide_column","grid_show_column","img","wcl","valClass","wideValClass","span","paddingleft","gridCellName","gridCellParentId","gridCellParent","gridCellPrev","gridCellPrevId","gridCellNext","gridCellNextId","gridCellChild","gridCellChildId","content","highlightSearch","isClicked","objData","cellClickHandler","sourceName","isDefaultPrevented","cellRightClickHandler","hoverInHandler","jsTreeInstance","hoverOutHandler","lid","peers","rendered","renderATitle","cellClass","wideCellClass","format","images","valueClass","valueClassPrefix","wideValueClass","wideValueClassPrefix","toRen","after","hover","overflow-y","types","default","_delete_ids","get_rules","max_children","valid_children","max_depth","get_type","rules","set_type","old_type","old_icon","unique","trim_whitespace","duplicate","counter","n","wholerow","Event","main"],"mappings":"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","file":"../skylark-widgets-hierarchy.js","sourcesContent":["define('skylark-widgets-hierarchy/Hierarchy',[\r\n  \"skylark-langx/skylark\",\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-browser\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-geom\",\r\n  \"skylark-domx-query\"\r\n],function(skylark,langx,browser,eventer,noder,geom,$){\r\n\t\"use strict\";\r\n\r\n\tvar jstree = skylark.jstree =  skylark.jstree || {};\r\n\r\n\tvar ajax = function(options) {\r\n        return langx.Xhr.request(options.url,options);\r\n    };\r\n\t/*\r\n\t$.ajax = $.ajax || function(options) {\r\n        return langx.Xhr.request(options.url,options);\r\n    };\r\n\r\n    $.camelCase = langx.camelCase;\r\n\r\n    $.each = langx.each;\r\n\r\n    $.extend = function(target) {\r\n        var deep, args = Array.prototype.slice.call(arguments, 1);\r\n        if (typeof target == 'boolean') {\r\n            deep = target\r\n            target = args.shift()\r\n        }\r\n        if (args.length == 0) {\r\n            args = [target];\r\n            target = this;\r\n        }\r\n        args.forEach(function(arg) {\r\n        \tlangx.mixin(target, arg, deep);\r\n        });\r\n        return target;\r\n    };\r\n\r\n    $.grep = function(elements, callback) {\r\n        return filter.call(elements, callback)\r\n    };\r\n\r\n    $.isArray = langx.isArray;\r\n    $.isEmptyObject = langx.isEmptyObject;\r\n    $.isFunction = langx.isFunction;\r\n    $.isWindow = langx.isWindow;\r\n    $.isPlainObject = langx.isPlainObject;\r\n\r\n    $.inArray = langx.inArray;\r\n\r\n    $.makeArray = langx.makeArray;\r\n    $.map = langx.map;\r\n\r\n    $.noop = function() {\r\n    };\r\n\r\n    $.parseJSON = window.JSON.parse;\r\n\r\n    $.proxy = langx.proxy;\r\n\r\n    $.trim = langx.trim;\r\n    $.type = langx.type;\r\n\r\n    $.fn.stop = function() {\r\n    \treturn this;\r\n    }\r\n\t*/\r\n\r\n\t/*!\r\n\t * jsTree {{VERSION}}\r\n\t * http://jstree.com/\r\n\t *\r\n\t * Copyright (c) 2014 Ivan Bozhanov (http://vakata.com)\r\n\t *\r\n\t * Licensed same as jquery - under the terms of the MIT License\r\n\t *   http://www.opensource.org/licenses/mit-license.php\r\n\t */\r\n\r\n\t// prevent another load? maybe there is a better way?\r\n\tif($.jstree) {\r\n\t\treturn;\r\n\t}\r\n\r\n\t/**\r\n\t * ### jsTree core functionality\r\n\t */\r\n\r\n\t// internal variables\r\n\tvar instance_counter = 0,\r\n\t\tccp_node = false,\r\n\t\tccp_mode = false,\r\n\t\tccp_inst = false,\r\n\t\tthemes_loaded = [],\r\n\t\tsrc = $('script:last').attr('src'),\r\n\t\tdocument = window.document; // local variable is always faster to access then a global\r\n\r\n\t/**\r\n\t * holds all jstree related functions and variables, including the actual class and methods to create, access and manipulate instances.\r\n\t * @name $.jstree\r\n\t */\r\n\t$.jstree = {\r\n\t\t/**\r\n\t\t * specifies the jstree version in use\r\n\t\t * @name $.jstree.version\r\n\t\t */\r\n\t\tversion : '{{VERSION}}',\r\n\t\t/**\r\n\t\t * holds all the default options used when creating new instances\r\n\t\t * @name $.jstree.defaults\r\n\t\t */\r\n\t\tdefaults : {\r\n\t\t\t/**\r\n\t\t\t * configure which plugins will be active on an instance. Should be an array of strings, where each element is a plugin name. The default is `[]`\r\n\t\t\t * @name $.jstree.defaults.plugins\r\n\t\t\t */\r\n\t\t\tplugins : []\r\n\t\t},\r\n\t\t/**\r\n\t\t * stores all loaded jstree plugins (used internally)\r\n\t\t * @name $.jstree.plugins\r\n\t\t */\r\n\t\tplugins : {},\r\n\t\tpath : src && src.indexOf('/') !== -1 ? src.replace(/\\/[^\\/]+$/,'') : '',\r\n\t\tidregex : /[\\\\:&!^|()\\[\\]<>@*'+~#\";.,=\\- \\/${}%?`]/g,\r\n\t\troot : '#'\r\n\t};\r\n\t\r\n\t/**\r\n\t * creates a jstree instance\r\n\t * @name $.jstree.create(el [, options])\r\n\t * @param {DOMElement|jQuery|String} el the element to create the instance on, can be jQuery extended or a selector\r\n\t * @param {Object} options options for this instance (extends `$.jstree.defaults`)\r\n\t * @return {jsTree} the new instance\r\n\t */\r\n\t$.jstree.create = function (el, options) {\r\n\t\treturn new Tree(el,options);\r\n\t};\r\n\r\n\t/**\r\n\t * remove all traces of jstree from the DOM and destroy all instances\r\n\t * @name $.jstree.destroy()\r\n\t */\r\n\t$.jstree.destroy = function () {\r\n\t\t$('.jstree:jstree').jstree('destroy');\r\n\t\t$(document).off('.jstree');\r\n\t};\r\n\r\n\r\n\t/**\r\n\t * get a reference to an existing instance\r\n\t *\r\n\t * __Examples__\r\n\t *\r\n\t *\t// provided a container with an ID of \"tree\", and a nested node with an ID of \"branch\"\r\n\t *\t// all of there will return the same instance\r\n\t *\t$.jstree.reference('tree');\r\n\t *\t$.jstree.reference('#tree');\r\n\t *\t$.jstree.reference($('#tree'));\r\n\t *\t$.jstree.reference(document.getElementByID('tree'));\r\n\t *\t$.jstree.reference('branch');\r\n\t *\t$.jstree.reference('#branch');\r\n\t *\t$.jstree.reference($('#branch'));\r\n\t *\t$.jstree.reference(document.getElementByID('branch'));\r\n\t *\r\n\t * @name $.jstree.reference(needle)\r\n\t * @param {DOMElement|jQuery|String} needle\r\n\t * @return {jsTree|null} the instance or `null` if not found\r\n\t */\r\n\t$.jstree.reference = function (needle) {\r\n\t\tvar tmp = null,\r\n\t\t\tobj = null;\r\n\t\tif(needle && needle.id && (!needle.tagName || !needle.nodeType)) { needle = needle.id; }\r\n\r\n\t\tif(!obj || !obj.length) {\r\n\t\t\ttry { obj = $(needle); } catch (ignore) { }\r\n\t\t}\r\n\t\tif(!obj || !obj.length) {\r\n\t\t\ttry { obj = $('#' + needle.replace($.jstree.idregex,'\\\\$&')); } catch (ignore) { }\r\n\t\t}\r\n\t\tif(obj && obj.length && (obj = obj.closest('.jstree')).length && (obj = obj.data('jstree'))) {\r\n\t\t\ttmp = obj;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t$('.jstree').each(function () {\r\n\t\t\t\tvar inst = $(this).data('jstree');\r\n\t\t\t\tif(inst && inst._model.data[needle]) {\r\n\t\t\t\t\ttmp = inst;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn tmp;\r\n\t};\r\n\r\n\t/**\r\n\t * Create an instance, get an instance or invoke a command on a instance.\r\n\t *\r\n\t * If there is no instance associated with the current node a new one is created and `arg` is used to extend `$.jstree.defaults` for this new instance. There would be no return value (chaining is not broken).\r\n\t *\r\n\t * If there is an existing instance and `arg` is a string the command specified by `arg` is executed on the instance, with any additional arguments passed to the function. If the function returns a value it will be returned (chaining could break depending on function).\r\n\t *\r\n\t * If there is an existing instance and `arg` is not a string the instance itself is returned (similar to `$.jstree.reference`).\r\n\t *\r\n\t * In any other case - nothing is returned and chaining is not broken.\r\n\t *\r\n\t * __Examples__\r\n\t *\r\n\t *\t$('#tree1').jstree(); // creates an instance\r\n\t *\t$('#tree2').jstree({ plugins : [] }); // create an instance with some options\r\n\t *\t$('#tree1').jstree('open_node', '#branch_1'); // call a method on an existing instance, passing additional arguments\r\n\t *\t$('#tree2').jstree(); // get an existing instance (or create an instance)\r\n\t *\t$('#tree2').jstree(true); // get an existing instance (will not create new instance)\r\n\t *\t$('#branch_1').jstree().select_node('#branch_1'); // get an instance (using a nested element and call a method)\r\n\t *\r\n\t * @name $().jstree([arg])\r\n\t * @param {String|Object} arg\r\n\t * @return {Mixed}\r\n\t */\r\n\t$.fn.jstree = function (arg) {\r\n\t\t// check for string argument\r\n\t\tvar is_method\t= (typeof arg === 'string'),\r\n\t\t\targs\t\t= Array.prototype.slice.call(arguments, 1),\r\n\t\t\tresult\t\t= null;\r\n\t\tif(arg === true && !this.length) { return false; }\r\n\t\tthis.each(function () {\r\n\t\t\t// get the instance (if there is one) and method (if it exists)\r\n\t\t\tvar instance = $.jstree.reference(this),\r\n\t\t\t\tmethod = is_method && instance ? instance[arg] : null;\r\n\t\t\t// if calling a method, and method is available - execute on the instance\r\n\t\t\tresult = is_method && method ?\r\n\t\t\t\tmethod.apply(instance, args) :\r\n\t\t\t\tnull;\r\n\t\t\t// if there is no instance and no method is being called - create one\r\n\t\t\tif(!instance && !is_method && (arg === undefined || $.isPlainObject(arg))) {\r\n\t\t\t\t$.jstree.create(this, arg);\r\n\t\t\t}\r\n\t\t\t// if there is an instance and no method is called - return the instance\r\n\t\t\tif( (instance && !is_method) || arg === true ) {\r\n\t\t\t\tresult = instance || false;\r\n\t\t\t}\r\n\t\t\t// if there was a method call which returned a result - break and return the value\r\n\t\t\tif(result !== null && result !== undefined) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t});\r\n\t\t// if there was a method call with a valid return value - return that, otherwise continue the chain\r\n\t\treturn result !== null && result !== undefined ?\r\n\t\t\tresult : this;\r\n\t};\r\n\r\n\t/**\r\n\t * stores all defaults for the core\r\n\t * @name $.jstree.defaults.core\r\n\t */\r\n\t$.jstree.defaults.core = {\r\n\t\t/**\r\n\t\t * data configuration\r\n\t\t *\r\n\t\t * If left as `false` the HTML inside the jstree container element is used to populate the tree (that should be an unordered list with list items).\r\n\t\t *\r\n\t\t * You can also pass in a HTML string or a JSON array here.\r\n\t\t *\r\n\t\t * It is possible to pass in a standard jQuery-like AJAX config and jstree will automatically determine if the response is JSON or HTML and use that to populate the tree.\r\n\t\t * In addition to the standard jQuery ajax options here you can suppy functions for `data` and `url`, the functions will be run in the current instance's scope and a param will be passed indicating which node is being loaded, the return value of those functions will be used.\r\n\t\t *\r\n\t\t * The last option is to specify a function, that function will receive the node being loaded as argument and a second param which is a function which should be called with the result.\r\n\t\t *\r\n\t\t * __Examples__\r\n\t\t *\r\n\t\t *\t// AJAX\r\n\t\t *\t$('#tree').jstree({\r\n\t\t *\t\t'core' : {\r\n\t\t *\t\t\t'data' : {\r\n\t\t *\t\t\t\t'url' : '/get/children/',\r\n\t\t *\t\t\t\t'data' : function (node) {\r\n\t\t *\t\t\t\t\treturn { 'id' : node.id };\r\n\t\t *\t\t\t\t}\r\n\t\t *\t\t\t}\r\n\t\t *\t\t});\r\n\t\t *\r\n\t\t *\t// direct data\r\n\t\t *\t$('#tree').jstree({\r\n\t\t *\t\t'core' : {\r\n\t\t *\t\t\t'data' : [\r\n\t\t *\t\t\t\t'Simple root node',\r\n\t\t *\t\t\t\t{\r\n\t\t *\t\t\t\t\t'id' : 'node_2',\r\n\t\t *\t\t\t\t\t'text' : 'Root node with options',\r\n\t\t *\t\t\t\t\t'state' : { 'opened' : true, 'selected' : true },\r\n\t\t *\t\t\t\t\t'children' : [ { 'text' : 'Child 1' }, 'Child 2']\r\n\t\t *\t\t\t\t}\r\n\t\t *\t\t\t]\r\n\t\t *\t\t}\r\n\t\t *\t});\r\n\t\t *\r\n\t\t *\t// function\r\n\t\t *\t$('#tree').jstree({\r\n\t\t *\t\t'core' : {\r\n\t\t *\t\t\t'data' : function (obj, callback) {\r\n\t\t *\t\t\t\tcallback.call(this, ['Root 1', 'Root 2']);\r\n\t\t *\t\t\t}\r\n\t\t *\t\t});\r\n\t\t *\r\n\t\t * @name $.jstree.defaults.core.data\r\n\t\t */\r\n\t\tdata\t\t\t: false,\r\n\t\t/**\r\n\t\t * configure the various strings used throughout the tree\r\n\t\t *\r\n\t\t * You can use an object where the key is the string you need to replace and the value is your replacement.\r\n\t\t * Another option is to specify a function which will be called with an argument of the needed string and should return the replacement.\r\n\t\t * If left as `false` no replacement is made.\r\n\t\t *\r\n\t\t * __Examples__\r\n\t\t *\r\n\t\t *\t$('#tree').jstree({\r\n\t\t *\t\t'core' : {\r\n\t\t *\t\t\t'strings' : {\r\n\t\t *\t\t\t\t'Loading ...' : 'Please wait ...'\r\n\t\t *\t\t\t}\r\n\t\t *\t\t}\r\n\t\t *\t});\r\n\t\t *\r\n\t\t * @name $.jstree.defaults.core.strings\r\n\t\t */\r\n\t\tstrings\t\t\t: false,\r\n\t\t/**\r\n\t\t * determines what happens when a user tries to modify the structure of the tree\r\n\t\t * If left as `false` all operations like create, rename, delete, move or copy are prevented.\r\n\t\t * You can set this to `true` to allow all interactions or use a function to have better control.\r\n\t\t *\r\n\t\t * __Examples__\r\n\t\t *\r\n\t\t *\t$('#tree').jstree({\r\n\t\t *\t\t'core' : {\r\n\t\t *\t\t\t'check_callback' : function (operation, node, node_parent, node_position, more) {\r\n\t\t *\t\t\t\t// operation can be 'create_node', 'rename_node', 'delete_node', 'move_node', 'copy_node' or 'edit'\r\n\t\t *\t\t\t\t// in case of 'rename_node' node_position is filled with the new node name\r\n\t\t *\t\t\t\treturn operation === 'rename_node' ? true : false;\r\n\t\t *\t\t\t}\r\n\t\t *\t\t}\r\n\t\t *\t});\r\n\t\t *\r\n\t\t * @name $.jstree.defaults.core.check_callback\r\n\t\t */\r\n\t\tcheck_callback\t: false,\r\n\t\t/**\r\n\t\t * a callback called with a single object parameter in the instance's scope when something goes wrong (operation prevented, ajax failed, etc)\r\n\t\t * @name $.jstree.defaults.core.error\r\n\t\t */\r\n\t\terror\t\t\t: langx.noop,\r\n\t\t/**\r\n\t\t * the open / close animation duration in milliseconds - set this to `false` to disable the animation (default is `200`)\r\n\t\t * @name $.jstree.defaults.core.animation\r\n\t\t */\r\n\t\tanimation\t\t: 200,\r\n\t\t/**\r\n\t\t * a boolean indicating if multiple nodes can be selected\r\n\t\t * @name $.jstree.defaults.core.multiple\r\n\t\t */\r\n\t\tmultiple\t\t: true,\r\n\t\t/**\r\n\t\t * theme configuration object\r\n\t\t * @name $.jstree.defaults.core.themes\r\n\t\t */\r\n\t\tthemes\t\t\t: {\r\n\t\t\t/**\r\n\t\t\t * the name of the theme to use (if left as `false` the default theme is used)\r\n\t\t\t * @name $.jstree.defaults.core.themes.name\r\n\t\t\t */\r\n\t\t\tname\t\t\t: false,\r\n\t\t\t/**\r\n\t\t\t * the URL of the theme's CSS file, leave this as `false` if you have manually included the theme CSS (recommended). You can set this to `true` too which will try to autoload the theme.\r\n\t\t\t * @name $.jstree.defaults.core.themes.url\r\n\t\t\t */\r\n\t\t\turl\t\t\t\t: false,\r\n\t\t\t/**\r\n\t\t\t * the location of all jstree themes - only used if `url` is set to `true`\r\n\t\t\t * @name $.jstree.defaults.core.themes.dir\r\n\t\t\t */\r\n\t\t\tdir\t\t\t\t: false,\r\n\t\t\t/**\r\n\t\t\t * a boolean indicating if connecting dots are shown\r\n\t\t\t * @name $.jstree.defaults.core.themes.dots\r\n\t\t\t */\r\n\t\t\tdots\t\t\t: true,\r\n\t\t\t/**\r\n\t\t\t * a boolean indicating if node icons are shown\r\n\t\t\t * @name $.jstree.defaults.core.themes.icons\r\n\t\t\t */\r\n\t\t\ticons\t\t\t: true,\r\n\t\t\t/**\r\n\t\t\t * a boolean indicating if node ellipsis should be shown - this only works with a fixed with on the container\r\n\t\t\t * @name $.jstree.defaults.core.themes.ellipsis\r\n\t\t\t */\r\n\t\t\tellipsis\t\t: false,\r\n\t\t\t/**\r\n\t\t\t * a boolean indicating if the tree background is striped\r\n\t\t\t * @name $.jstree.defaults.core.themes.stripes\r\n\t\t\t */\r\n\t\t\tstripes\t\t\t: false,\r\n\t\t\t/**\r\n\t\t\t * a string (or boolean `false`) specifying the theme variant to use (if the theme supports variants)\r\n\t\t\t * @name $.jstree.defaults.core.themes.variant\r\n\t\t\t */\r\n\t\t\tvariant\t\t\t: false,\r\n\t\t\t/**\r\n\t\t\t * a boolean specifying if a reponsive version of the theme should kick in on smaller screens (if the theme supports it). Defaults to `false`.\r\n\t\t\t * @name $.jstree.defaults.core.themes.responsive\r\n\t\t\t */\r\n\t\t\tresponsive\t\t: false\r\n\t\t},\r\n\t\t/**\r\n\t\t * if left as `true` all parents of all selected nodes will be opened once the tree loads (so that all selected nodes are visible to the user)\r\n\t\t * @name $.jstree.defaults.core.expand_selected_onload\r\n\t\t */\r\n\t\texpand_selected_onload : true,\r\n\t\t/**\r\n\t\t * if left as `true` web workers will be used to parse incoming JSON data where possible, so that the UI will not be blocked by large requests. Workers are however about 30% slower. Defaults to `true`\r\n\t\t * @name $.jstree.defaults.core.worker\r\n\t\t */\r\n\t\tworker : true,\r\n\t\t/**\r\n\t\t * Force node text to plain text (and escape HTML). Defaults to `false`\r\n\t\t * @name $.jstree.defaults.core.force_text\r\n\t\t */\r\n\t\tforce_text : false,\r\n\t\t/**\r\n\t\t * Should the node should be toggled if the text is double clicked . Defaults to `true`\r\n\t\t * @name $.jstree.defaults.core.dblclick_toggle\r\n\t\t */\r\n\t\tdblclick_toggle : true,\r\n\t\t/**\r\n\t\t * Should the loaded nodes be part of the state. Defaults to `false`\r\n\t\t * @name $.jstree.defaults.core.loaded_state\r\n\t\t */\r\n\t\tloaded_state : false,\r\n\t\t/**\r\n\t\t * Should the last active node be focused when the tree container is blurred and the focused again. This helps working with screen readers. Defaults to `true`\r\n\t\t * @name $.jstree.defaults.core.restore_focus\r\n\t\t */\r\n\t\trestore_focus : true,\r\n\t\t/**\r\n\t\t * Default keyboard shortcuts (an object where each key is the button name or combo - like 'enter', 'ctrl-space', 'p', etc and the value is the function to execute in the instance's scope)\r\n\t\t * @name $.jstree.defaults.core.keyboard\r\n\t\t */\r\n\t\tkeyboard : {\r\n\t\t\t'ctrl-space': function (e) {\r\n\t\t\t\t// aria defines space only with Ctrl\r\n\t\t\t\te.type = \"click\";\r\n\t\t\t\t$(e.currentTarget).trigger(e);\r\n\t\t\t},\r\n\t\t\t'enter': function (e) {\r\n\t\t\t\t// enter\r\n\t\t\t\te.type = \"click\";\r\n\t\t\t\t$(e.currentTarget).trigger(e);\r\n\t\t\t},\r\n\t\t\t'left': function (e) {\r\n\t\t\t\t// left\r\n\t\t\t\te.preventDefault();\r\n\t\t\t\tif(this.is_open(e.currentTarget)) {\r\n\t\t\t\t\tthis.close_node(e.currentTarget);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tvar o = this.get_parent(e.currentTarget);\r\n\t\t\t\t\tif(o && o.id !== $.jstree.root) { this.get_node(o, true).children('.jstree-anchor').focus(); }\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t'up': function (e) {\r\n\t\t\t\t// up\r\n\t\t\t\te.preventDefault();\r\n\t\t\t\tvar o = this.get_prev_dom(e.currentTarget);\r\n\t\t\t\tif(o && o.length) { o.children('.jstree-anchor').focus(); }\r\n\t\t\t},\r\n\t\t\t'right': function (e) {\r\n\t\t\t\t// right\r\n\t\t\t\te.preventDefault();\r\n\t\t\t\tif(this.is_closed(e.currentTarget)) {\r\n\t\t\t\t\tthis.open_node(e.currentTarget, function (o) { this.get_node(o, true).children('.jstree-anchor').focus(); });\r\n\t\t\t\t}\r\n\t\t\t\telse if (this.is_open(e.currentTarget)) {\r\n\t\t\t\t\tvar o = this.get_node(e.currentTarget, true).children('.jstree-children')[0];\r\n\t\t\t\t\tif(o) { $(this._firstChild(o)).children('.jstree-anchor').focus(); }\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t'down': function (e) {\r\n\t\t\t\t// down\r\n\t\t\t\te.preventDefault();\r\n\t\t\t\tvar o = this.get_next_dom(e.currentTarget);\r\n\t\t\t\tif(o && o.length) { o.children('.jstree-anchor').focus(); }\r\n\t\t\t},\r\n\t\t\t'*': function (e) {\r\n\t\t\t\t// aria defines * on numpad as open_all - not very common\r\n\t\t\t\tthis.open_all();\r\n\t\t\t},\r\n\t\t\t'home': function (e) {\r\n\t\t\t\t// home\r\n\t\t\t\te.preventDefault();\r\n\t\t\t\tvar o = this._firstChild(this.get_container_ul()[0]);\r\n\t\t\t\tif(o) { $(o).children('.jstree-anchor').filter(':visible').focus(); }\r\n\t\t\t},\r\n\t\t\t'end': function (e) {\r\n\t\t\t\t// end\r\n\t\t\t\te.preventDefault();\r\n\t\t\t\tthis.element.find('.jstree-anchor').filter(':visible').last().focus();\r\n\t\t\t},\r\n\t\t\t'f2': function (e) {\r\n\t\t\t\t// f2 - safe to include - if check_callback is false it will fail\r\n\t\t\t\te.preventDefault();\r\n\t\t\t\tthis.edit(e.currentTarget);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n    var Tree = jstree.Tree = langx.Evented.inherit({\r\n        klassName: \"Tree\",\r\n\r\n\t\t/**\r\n\t\t * used to decorate an instance with a plugin. Used internally.\r\n\t\t * @private\r\n\t\t * @name plugin(deco [, opts])\r\n\t\t * @param  {String} deco the plugin to decorate with\r\n\t\t * @param  {Object} opts options for the plugin\r\n\t\t * @return {jsTree}\r\n\t\t */\r\n\t\tplugin : function (deco, opts) {\r\n\t\t\tvar Child = $.jstree.plugins[deco];\r\n\t\t\tif(Child) {\r\n\t\t\t\tthis._data[deco] = {};\r\n\t\t\t\tChild.prototype = this;\r\n\t\t\t\treturn new Child(opts, this);\r\n\t\t\t}\r\n\t\t\treturn this;\r\n\t\t},\r\n\t\t/**\r\n\t\t * initialize the instance. Used internally.\r\n\t\t * @private\r\n\t\t * @name init(el, optons)\r\n\t\t * @param {DOMElement|jQuery|String} el the element we are transforming\r\n\t\t * @param {Object} options options for this instance\r\n\t\t * @trigger init.jstree, loading.jstree, loaded.jstree, ready.jstree, changed.jstree\r\n\t\t */\r\n\t\tinit : function (el, options) {\r\n\t\t\tthis._id = ++instance_counter;\r\n\t\t\tthis._cnt = 0;\r\n\t\t\tthis._wrk = null;\r\n\t\t\tthis._data = {\r\n\t\t\t\tcore : {\r\n\t\t\t\t\tthemes : {\r\n\t\t\t\t\t\tname : false,\r\n\t\t\t\t\t\tdots : false,\r\n\t\t\t\t\t\ticons : false,\r\n\t\t\t\t\t\tellipsis : false\r\n\t\t\t\t\t},\r\n\t\t\t\t\tselected : [],\r\n\t\t\t\t\tlast_error : {},\r\n\t\t\t\t\tworking : false,\r\n\t\t\t\t\tworker_queue : [],\r\n\t\t\t\t\tfocused : null\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tvar  opt = options,\r\n\t\t\t\ttmp = this;\r\n\t\t\toptions = langx.extend(true, {}, $.jstree.defaults, options);\r\n\t\t\tif(opt && opt.plugins) {\r\n\t\t\t\toptions.plugins = opt.plugins;\r\n\t\t\t}\r\n\t\t\tlangx.each(options.plugins, function (i, k) {\r\n\t\t\t\tif(i !== 'core') {\r\n\t\t\t\t\ttmp = tmp.plugin(k, options[k]);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\t$(el).data('jstree', tmp);\r\n\r\n\t\t\ttmp._model = {\r\n\t\t\t\tdata : {},\r\n\t\t\t\tchanged : [],\r\n\t\t\t\tforce_full_redraw : false,\r\n\t\t\t\tredraw_timeout : false,\r\n\t\t\t\tdefault_state : {\r\n\t\t\t\t\tloaded : true,\r\n\t\t\t\t\topened : false,\r\n\t\t\t\t\tselected : false,\r\n\t\t\t\t\tdisabled : false\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\ttmp._model.data[$.jstree.root] = {\r\n\t\t\t\tid : $.jstree.root,\r\n\t\t\t\tparent : null,\r\n\t\t\t\tparents : [],\r\n\t\t\t\tchildren : [],\r\n\t\t\t\tchildren_d : [],\r\n\t\t\t\tstate : { loaded : false }\r\n\t\t\t};\r\n\r\n\t\t\ttmp.element = $(el).addClass('jstree jstree-' + tmp._id);\r\n\t\t\ttmp.settings = options;\r\n\r\n\t\t\ttmp._data.core.ready = false;\r\n\t\t\ttmp._data.core.loaded = false;\r\n\t\t\ttmp._data.core.rtl = (tmp.element.css(\"direction\") === \"rtl\");\r\n\t\t\ttmp.element[tmp._data.core.rtl ? 'addClass' : 'removeClass'](\"jstree-rtl\");\r\n\t\t\ttmp.element.attr('role','tree');\r\n\t\t\tif(tmp.settings.core.multiple) {\r\n\t\t\t\ttmp.element.attr('aria-multiselectable', true);\r\n\t\t\t}\r\n\t\t\tif(!tmp.element.attr('tabindex')) {\r\n\t\t\t\ttmp.element.attr('tabindex','0');\r\n\t\t\t}\r\n\r\n\t\t\ttmp.bind();\r\n\t\t\t/**\r\n\t\t\t * triggered after all events are bound\r\n\t\t\t * @event\r\n\t\t\t * @name init.jstree\r\n\t\t\t */\r\n\t\t\ttmp.trigger(\"init\");\r\n\r\n\t\t\ttmp._data.core.original_container_html = tmp.element.find(\" > ul > li\").clone(true);\r\n\t\t\ttmp._data.core.original_container_html\r\n\t\t\t\t.find(\"li\").addBack()\r\n\t\t\t\t.contents().filter(function() {\r\n\t\t\t\t\treturn this.nodeType === 3 && (!this.nodeValue || /^\\s+$/.test(this.nodeValue));\r\n\t\t\t\t})\r\n\t\t\t\t.remove();\r\n\t\t\ttmp.element.html(\"<\"+\"ul class='jstree-container-ul jstree-children' role='group'><\"+\"li id='j\"+tmp._id+\"_loading' class='jstree-initial-node jstree-loading jstree-leaf jstree-last' role='tree-item'><i class='jstree-icon jstree-ocl'></i><\"+\"a class='jstree-anchor' href='#'><i class='jstree-icon jstree-themeicon-hidden'></i>\" + tmp.get_string(\"Loading ...\") + \"</a></li></ul>\");\r\n\t\t\ttmp.element.attr('aria-activedescendant','j' + tmp._id + '_loading');\r\n\t\t\ttmp._data.core.li_height = tmp.get_container_ul().children(\"li\").first().outerHeight() || 24;\r\n\t\t\ttmp._data.core.node = tmp._create_prototype_node();\r\n\t\t\t/**\r\n\t\t\t * triggered after the loading text is shown and before loading starts\r\n\t\t\t * @event\r\n\t\t\t * @name loading.jstree\r\n\t\t\t */\r\n\t\t\ttmp.trigger(\"loading\");\r\n\t\t\ttmp.load_node($.jstree.root);\r\n\t\t\treturn tmp;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * destroy an instance\r\n\t\t * @name destroy()\r\n\t\t * @param  {Boolean} keep_html if not set to `true` the container will be emptied, otherwise the current DOM elements will be kept intact\r\n\t\t */\r\n\t\tdestroy : function (keep_html) {\r\n\t\t\t/**\r\n\t\t\t * triggered before the tree is destroyed\r\n\t\t\t * @event\r\n\t\t\t * @name destroy.jstree\r\n\t\t\t */\r\n\t\t\ttmp.trigger(\"destroy\");\r\n\t\t\tif(this._wrk) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\twindow.URL.revokeObjectURL(this._wrk);\r\n\t\t\t\t\tthis._wrk = null;\r\n\t\t\t\t}\r\n\t\t\t\tcatch (ignore) { }\r\n\t\t\t}\r\n\t\t\tif(!keep_html) { this.element.empty(); }\r\n\t\t\tthis.teardown();\r\n\t\t},\r\n\t\t/**\r\n\t\t * Create a prototype node\r\n\t\t * @name _create_prototype_node()\r\n\t\t * @return {DOMElement}\r\n\t\t */\r\n\t\t_create_prototype_node : function () {\r\n\t\t\tvar _node = document.createElement('LI'), _temp1, _temp2;\r\n\t\t\t_node.setAttribute('role', 'treeitem');\r\n\t\t\t_temp1 = document.createElement('I');\r\n\t\t\t_temp1.className = 'jstree-icon jstree-ocl';\r\n\t\t\t_temp1.setAttribute('role', 'presentation');\r\n\t\t\t_node.appendChild(_temp1);\r\n\t\t\t_temp1 = document.createElement('A');\r\n\t\t\t_temp1.className = 'jstree-anchor';\r\n\t\t\t_temp1.setAttribute('href','#');\r\n\t\t\t_temp1.setAttribute('tabindex','-1');\r\n\t\t\t_temp2 = document.createElement('I');\r\n\t\t\t_temp2.className = 'jstree-icon jstree-themeicon';\r\n\t\t\t_temp2.setAttribute('role', 'presentation');\r\n\t\t\t_temp1.appendChild(_temp2);\r\n\t\t\t_node.appendChild(_temp1);\r\n\t\t\t_temp1 = _temp2 = null;\r\n\r\n\t\t\treturn _node;\r\n\t\t},\r\n\t\t_kbevent_to_func : function (e) {\r\n\t\t\tvar keys = {\r\n\t\t\t\t8: \"Backspace\", 9: \"Tab\", 13: \"Return\", 19: \"Pause\", 27: \"Esc\",\r\n\t\t\t\t32: \"Space\", 33: \"PageUp\", 34: \"PageDown\", 35: \"End\", 36: \"Home\",\r\n\t\t\t\t37: \"Left\", 38: \"Up\", 39: \"Right\", 40: \"Down\", 44: \"Print\", 45: \"Insert\",\r\n\t\t\t\t46: \"Delete\", 96: \"Numpad0\", 97: \"Numpad1\", 98: \"Numpad2\", 99 : \"Numpad3\",\r\n\t\t\t\t100: \"Numpad4\", 101: \"Numpad5\", 102: \"Numpad6\", 103: \"Numpad7\",\r\n\t\t\t\t104: \"Numpad8\", 105: \"Numpad9\", '-13': \"NumpadEnter\", 112: \"F1\",\r\n\t\t\t\t113: \"F2\", 114: \"F3\", 115: \"F4\", 116: \"F5\", 117: \"F6\", 118: \"F7\",\r\n\t\t\t\t119: \"F8\", 120: \"F9\", 121: \"F10\", 122: \"F11\", 123: \"F12\", 144: \"Numlock\",\r\n\t\t\t\t145: \"Scrolllock\", 16: 'Shift', 17: 'Ctrl', 18: 'Alt',\r\n\t\t\t\t48: '0',  49: '1',  50: '2',  51: '3',  52: '4', 53:  '5',\r\n\t\t\t\t54: '6',  55: '7',  56: '8',  57: '9',  59: ';',  61: '=', 65:  'a',\r\n\t\t\t\t66: 'b',  67: 'c',  68: 'd',  69: 'e',  70: 'f',  71: 'g', 72:  'h',\r\n\t\t\t\t73: 'i',  74: 'j',  75: 'k',  76: 'l',  77: 'm',  78: 'n', 79:  'o',\r\n\t\t\t\t80: 'p',  81: 'q',  82: 'r',  83: 's',  84: 't',  85: 'u', 86:  'v',\r\n\t\t\t\t87: 'w',  88: 'x',  89: 'y',  90: 'z', 107: '+', 109: '-', 110: '.',\r\n\t\t\t\t186: ';', 187: '=', 188: ',', 189: '-', 190: '.', 191: '/', 192: '`',\r\n\t\t\t\t219: '[', 220: '\\\\',221: ']', 222: \"'\", 111: '/', 106: '*', 173: '-'\r\n\t\t\t};\r\n\t\t\tvar parts = [];\r\n\t\t\tif (e.ctrlKey) { parts.push('ctrl'); }\r\n\t\t\tif (e.altKey) { parts.push('alt'); }\r\n\t\t\tif (e.shiftKey) { parts.push('shift'); }\r\n\t\t\tparts.push(keys[e.which] || e.which);\r\n\t\t\tparts = parts.sort().join('-').toLowerCase();\r\n\r\n\t\t\tvar kb = this.settings.core.keyboard, i, tmp;\r\n\t\t\tfor (i in kb) {\r\n\t\t\t\tif (kb.hasOwnProperty(i)) {\r\n\t\t\t\t\ttmp = i;\r\n\t\t\t\t\tif (tmp !== '-' && tmp !== '+') {\r\n\t\t\t\t\t\ttmp = tmp.replace('--', '-MINUS').replace('+-', '-MINUS').replace('++', '-PLUS').replace('-+', '-PLUS');\r\n\t\t\t\t\t\ttmp = tmp.split(/-|\\+/).sort().join('-').replace('MINUS', '-').replace('PLUS', '+').toLowerCase();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (tmp === parts) {\r\n\t\t\t\t\t\treturn kb[i];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t},\r\n\t\t/**\r\n\t\t * part of the destroying of an instance. Used internally.\r\n\t\t * @private\r\n\t\t * @name teardown()\r\n\t\t */\r\n\t\tteardown : function () {\r\n\t\t\tthis.unbind();\r\n\t\t\tthis.element\r\n\t\t\t\t.removeClass('jstree')\r\n\t\t\t\t.removeData('jstree')\r\n\t\t\t\t.find(\"[class^='jstree']\")\r\n\t\t\t\t\t.addBack()\r\n\t\t\t\t\t.attr(\"class\", function () { return this.className.replace(/jstree[^ ]*|$/ig,''); });\r\n\t\t\tthis.element = null;\r\n\t\t},\r\n\t\t/**\r\n\t\t * bind all events. Used internally.\r\n\t\t * @private\r\n\t\t * @name bind()\r\n\t\t */\r\n\t\tbind : function () {\r\n\t\t\tvar word = '',\r\n\t\t\t\ttout = null,\r\n\t\t\t\twas_click = 0;\r\n\t\t\tthis.element\r\n\t\t\t\t.on(\"dblclick.jstree\", function (e) {\r\n\t\t\t\t\t\tif(e.target.tagName && e.target.tagName.toLowerCase() === \"input\") { return true; }\r\n\t\t\t\t\t\tif(document.selection && document.selection.empty) {\r\n\t\t\t\t\t\t\tdocument.selection.empty();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tif(window.getSelection) {\r\n\t\t\t\t\t\t\t\tvar sel = window.getSelection();\r\n\t\t\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\t\t\tsel.removeAllRanges();\r\n\t\t\t\t\t\t\t\t\tsel.collapse();\r\n\t\t\t\t\t\t\t\t} catch (ignore) { }\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t\t.on(\"mousedown.jstree\", langx.proxy(function (e) {\r\n\t\t\t\t\t\tif(e.target === this.element[0]) {\r\n\t\t\t\t\t\t\te.preventDefault(); // prevent losing focus when clicking scroll arrows (FF, Chrome)\r\n\t\t\t\t\t\t\twas_click = +(new Date()); // ie does not allow to prevent losing focus\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on(\"mousedown.jstree\", \".jstree-ocl\", function (e) {\r\n\t\t\t\t\t\te.preventDefault(); // prevent any node inside from losing focus when clicking the open/close icon\r\n\t\t\t\t\t})\r\n\t\t\t\t.on(\"click.jstree\", \".jstree-ocl\", langx.proxy(function (e) {\r\n\t\t\t\t\t\tthis.toggle_node(e.target);\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on(\"dblclick.jstree\", \".jstree-anchor\", langx.proxy(function (e) {\r\n\t\t\t\t\t\tif(e.target.tagName && e.target.tagName.toLowerCase() === \"input\") { return true; }\r\n\t\t\t\t\t\tif(this.settings.core.dblclick_toggle) {\r\n\t\t\t\t\t\t\tthis.toggle_node(e.target);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on(\"click.jstree\", \".jstree-anchor\", langx.proxy(function (e) {\r\n\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\tif(e.currentTarget !== document.activeElement) { $(e.currentTarget).focus(); }\r\n\t\t\t\t\t\tthis.activate_node(e.currentTarget, e);\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on('keydown.jstree', '.jstree-anchor', langx.proxy(function (e) {\r\n\t\t\t\t\t\tif(e.target.tagName && e.target.tagName.toLowerCase() === \"input\") { return true; }\r\n\t\t\t\t\t\tif(this._data.core.rtl) {\r\n\t\t\t\t\t\t\tif(e.which === 37) { e.which = 39; }\r\n\t\t\t\t\t\t\telse if(e.which === 39) { e.which = 37; }\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tvar f = this._kbevent_to_func(e);\r\n\t\t\t\t\t\tif (f) {\r\n\t\t\t\t\t\t\tvar r = f.call(this, e);\r\n\t\t\t\t\t\t\tif (r === false || r === true) {\r\n\t\t\t\t\t\t\t\treturn r;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on(\"load_node.jstree\", langx.proxy(function (e, data) {\r\n\t\t\t\t\t\tif(data.status) {\r\n\t\t\t\t\t\t\tif(data.node.id === $.jstree.root && !this._data.core.loaded) {\r\n\t\t\t\t\t\t\t\tthis._data.core.loaded = true;\r\n\t\t\t\t\t\t\t\tif(this._firstChild(this.get_container_ul()[0])) {\r\n\t\t\t\t\t\t\t\t\tthis.element.attr('aria-activedescendant',this._firstChild(this.get_container_ul()[0]).id);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t/**\r\n\t\t\t\t\t\t\t\t * triggered after the root node is loaded for the first time\r\n\t\t\t\t\t\t\t\t * @event\r\n\t\t\t\t\t\t\t\t * @name loaded.jstree\r\n\t\t\t\t\t\t\t\t */\r\n\t\t\t\t\t\t\t\tthis.trigger(\"loaded\");\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(!this._data.core.ready) {\r\n\t\t\t\t\t\t\t\tsetTimeout(langx.proxy(function() {\r\n\t\t\t\t\t\t\t\t\tif(this.element && !this.get_container_ul().find('.jstree-loading').length) {\r\n\t\t\t\t\t\t\t\t\t\tthis._data.core.ready = true;\r\n\t\t\t\t\t\t\t\t\t\tif(this._data.core.selected.length) {\r\n\t\t\t\t\t\t\t\t\t\t\tif(this.settings.core.expand_selected_onload) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tvar tmp = [], i, j;\r\n\t\t\t\t\t\t\t\t\t\t\t\tfor(i = 0, j = this._data.core.selected.length; i < j; i++) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\ttmp = tmp.concat(this._model.data[this._data.core.selected[i]].parents);\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\ttmp = $.vakata.array_unique(tmp);\r\n\t\t\t\t\t\t\t\t\t\t\t\tfor(i = 0, j = tmp.length; i < j; i++) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tthis.open_node(tmp[i], false, 0);\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\tthis.trigger('changed', { 'action' : 'ready', 'selected' : this._data.core.selected });\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t/**\r\n\t\t\t\t\t\t\t\t\t\t * triggered after all nodes are finished loading\r\n\t\t\t\t\t\t\t\t\t\t * @event\r\n\t\t\t\t\t\t\t\t\t\t * @name ready.jstree\r\n\t\t\t\t\t\t\t\t\t\t */\r\n\t\t\t\t\t\t\t\t\t\tthis.trigger(\"ready\");\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}, this), 0);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t// quick searching when the tree is focused\r\n\t\t\t\t.on('keypress.jstree', langx.proxy(function (e) {\r\n\t\t\t\t\t\tif(e.target.tagName && e.target.tagName.toLowerCase() === \"input\") { return true; }\r\n\t\t\t\t\t\tif(tout) { clearTimeout(tout); }\r\n\t\t\t\t\t\ttout = setTimeout(function () {\r\n\t\t\t\t\t\t\tword = '';\r\n\t\t\t\t\t\t}, 500);\r\n\r\n\t\t\t\t\t\tvar chr = String.fromCharCode(e.which).toLowerCase(),\r\n\t\t\t\t\t\t\tcol = this.element.find('.jstree-anchor').filter(':visible'),\r\n\t\t\t\t\t\t\tind = col.index(document.activeElement) || 0,\r\n\t\t\t\t\t\t\tend = false;\r\n\t\t\t\t\t\tword += chr;\r\n\r\n\t\t\t\t\t\t// match for whole word from current node down (including the current node)\r\n\t\t\t\t\t\tif(word.length > 1) {\r\n\t\t\t\t\t\t\tcol.slice(ind).each(langx.proxy(function (i, v) {\r\n\t\t\t\t\t\t\t\tif($(v).text().toLowerCase().indexOf(word) === 0) {\r\n\t\t\t\t\t\t\t\t\t$(v).focus();\r\n\t\t\t\t\t\t\t\t\tend = true;\r\n\t\t\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}, this));\r\n\t\t\t\t\t\t\tif(end) { return; }\r\n\r\n\t\t\t\t\t\t\t// match for whole word from the beginning of the tree\r\n\t\t\t\t\t\t\tcol.slice(0, ind).each(langx.proxy(function (i, v) {\r\n\t\t\t\t\t\t\t\tif($(v).text().toLowerCase().indexOf(word) === 0) {\r\n\t\t\t\t\t\t\t\t\t$(v).focus();\r\n\t\t\t\t\t\t\t\t\tend = true;\r\n\t\t\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}, this));\r\n\t\t\t\t\t\t\tif(end) { return; }\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// list nodes that start with that letter (only if word consists of a single char)\r\n\t\t\t\t\t\tif(new RegExp('^' + chr.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&') + '+$').test(word)) {\r\n\t\t\t\t\t\t\t// search for the next node starting with that letter\r\n\t\t\t\t\t\t\tcol.slice(ind + 1).each(langx.proxy(function (i, v) {\r\n\t\t\t\t\t\t\t\tif($(v).text().toLowerCase().charAt(0) === chr) {\r\n\t\t\t\t\t\t\t\t\t$(v).focus();\r\n\t\t\t\t\t\t\t\t\tend = true;\r\n\t\t\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}, this));\r\n\t\t\t\t\t\t\tif(end) { return; }\r\n\r\n\t\t\t\t\t\t\t// search from the beginning\r\n\t\t\t\t\t\t\tcol.slice(0, ind + 1).each(langx.proxy(function (i, v) {\r\n\t\t\t\t\t\t\t\tif($(v).text().toLowerCase().charAt(0) === chr) {\r\n\t\t\t\t\t\t\t\t\t$(v).focus();\r\n\t\t\t\t\t\t\t\t\tend = true;\r\n\t\t\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}, this));\r\n\t\t\t\t\t\t\tif(end) { return; }\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t// THEME RELATED\r\n\t\t\t\t.on(\"init.jstree\", langx.proxy(function () {\r\n\t\t\t\t\t\tvar s = this.settings.core.themes;\r\n\t\t\t\t\t\tthis._data.core.themes.dots\t\t\t= s.dots;\r\n\t\t\t\t\t\tthis._data.core.themes.stripes\t\t= s.stripes;\r\n\t\t\t\t\t\tthis._data.core.themes.icons\t\t= s.icons;\r\n\t\t\t\t\t\tthis._data.core.themes.ellipsis\t\t= s.ellipsis;\r\n\t\t\t\t\t\tthis.set_theme(s.name || \"default\", s.url);\r\n\t\t\t\t\t\tthis.set_theme_variant(s.variant);\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on(\"loading.jstree\", langx.proxy(function () {\r\n\t\t\t\t\t\tthis[ this._data.core.themes.dots ? \"show_dots\" : \"hide_dots\" ]();\r\n\t\t\t\t\t\tthis[ this._data.core.themes.icons ? \"show_icons\" : \"hide_icons\" ]();\r\n\t\t\t\t\t\tthis[ this._data.core.themes.stripes ? \"show_stripes\" : \"hide_stripes\" ]();\r\n\t\t\t\t\t\tthis[ this._data.core.themes.ellipsis ? \"show_ellipsis\" : \"hide_ellipsis\" ]();\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on('blur.jstree', '.jstree-anchor', langx.proxy(function (e) {\r\n\t\t\t\t\t\tthis._data.core.focused = null;\r\n\t\t\t\t\t\t$(e.currentTarget).filter('.jstree-hovered').mouseleave();\r\n\t\t\t\t\t\tthis.element.attr('tabindex', '0');\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on('focus.jstree', '.jstree-anchor', langx.proxy(function (e) {\r\n\t\t\t\t\t\tvar tmp = this.get_node(e.currentTarget);\r\n\t\t\t\t\t\tif(tmp && tmp.id) {\r\n\t\t\t\t\t\t\tthis._data.core.focused = tmp.id;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tthis.element.find('.jstree-hovered').not(e.currentTarget).mouseleave();\r\n\t\t\t\t\t\t$(e.currentTarget).mouseenter();\r\n\t\t\t\t\t\tthis.element.attr('tabindex', '-1');\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on('focus.jstree', langx.proxy(function () {\r\n\t\t\t\t\t\tif(+(new Date()) - was_click > 500 && !this._data.core.focused && this.settings.core.restore_focus) {\r\n\t\t\t\t\t\t\twas_click = 0;\r\n\t\t\t\t\t\t\tvar act = this.get_node(this.element.attr('aria-activedescendant'), true);\r\n\t\t\t\t\t\t\tif(act) {\r\n\t\t\t\t\t\t\t\tact.find('> .jstree-anchor').focus();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on('mouseenter.jstree', '.jstree-anchor', langx.proxy(function (e) {\r\n\t\t\t\t\t\tthis.hover_node(e.currentTarget);\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on('mouseleave.jstree', '.jstree-anchor', langx.proxy(function (e) {\r\n\t\t\t\t\t\tthis.dehover_node(e.currentTarget);\r\n\t\t\t\t\t}, this));\r\n\t\t},\r\n\t\t/**\r\n\t\t * part of the destroying of an instance. Used internally.\r\n\t\t * @private\r\n\t\t * @name unbind()\r\n\t\t */\r\n\t\tunbind : function () {\r\n\t\t\tthis.element.off('.jstree');\r\n\t\t\t$(document).off('.jstree-' + this._id);\r\n\t\t},\r\n\t\t/**\r\n\t\t * trigger an event. Used internally.\r\n\t\t * @private\r\n\t\t * @name trigger(ev [, data])\r\n\t\t * @param  {String} ev the name of the event to trigger\r\n\t\t * @param  {Object} data additional data to pass with the event\r\n\t\t */\r\n\t\ttrigger : function (ev, data) {\r\n\t\t\tif(!data) {\r\n\t\t\t\tdata = {};\r\n\t\t\t}\r\n\t\t\tdata.instance = this;\r\n\t\t\tthis.element.trigger(ev.replace('.jstree','') + '.jstree', data);\r\n\t\t},\r\n\t\t/**\r\n\t\t * returns the jQuery extended instance container\r\n\t\t * @name get_container()\r\n\t\t * @return {jQuery}\r\n\t\t */\r\n\t\tget_container : function () {\r\n\t\t\treturn this.element;\r\n\t\t},\r\n\t\t/**\r\n\t\t * returns the jQuery extended main UL node inside the instance container. Used internally.\r\n\t\t * @private\r\n\t\t * @name get_container_ul()\r\n\t\t * @return {jQuery}\r\n\t\t */\r\n\t\tget_container_ul : function () {\r\n\t\t\treturn this.element.children(\".jstree-children\").first();\r\n\t\t},\r\n\t\t/**\r\n\t\t * gets string replacements (localization). Used internally.\r\n\t\t * @private\r\n\t\t * @name get_string(key)\r\n\t\t * @param  {String} key\r\n\t\t * @return {String}\r\n\t\t */\r\n\t\tget_string : function (key) {\r\n\t\t\tvar a = this.settings.core.strings;\r\n\t\t\tif(langx.isFunction(a)) { return a.call(this, key); }\r\n\t\t\tif(a && a[key]) { return a[key]; }\r\n\t\t\treturn key;\r\n\t\t},\r\n\t\t/**\r\n\t\t * gets the first child of a DOM node. Used internally.\r\n\t\t * @private\r\n\t\t * @name _firstChild(dom)\r\n\t\t * @param  {DOMElement} dom\r\n\t\t * @return {DOMElement}\r\n\t\t */\r\n\t\t_firstChild : function (dom) {\r\n\t\t\tdom = dom ? dom.firstChild : null;\r\n\t\t\twhile(dom !== null && dom.nodeType !== 1) {\r\n\t\t\t\tdom = dom.nextSibling;\r\n\t\t\t}\r\n\t\t\treturn dom;\r\n\t\t},\r\n\t\t/**\r\n\t\t * gets the next sibling of a DOM node. Used internally.\r\n\t\t * @private\r\n\t\t * @name _nextSibling(dom)\r\n\t\t * @param  {DOMElement} dom\r\n\t\t * @return {DOMElement}\r\n\t\t */\r\n\t\t_nextSibling : function (dom) {\r\n\t\t\tdom = dom ? dom.nextSibling : null;\r\n\t\t\twhile(dom !== null && dom.nodeType !== 1) {\r\n\t\t\t\tdom = dom.nextSibling;\r\n\t\t\t}\r\n\t\t\treturn dom;\r\n\t\t},\r\n\t\t/**\r\n\t\t * gets the previous sibling of a DOM node. Used internally.\r\n\t\t * @private\r\n\t\t * @name _previousSibling(dom)\r\n\t\t * @param  {DOMElement} dom\r\n\t\t * @return {DOMElement}\r\n\t\t */\r\n\t\t_previousSibling : function (dom) {\r\n\t\t\tdom = dom ? dom.previousSibling : null;\r\n\t\t\twhile(dom !== null && dom.nodeType !== 1) {\r\n\t\t\t\tdom = dom.previousSibling;\r\n\t\t\t}\r\n\t\t\treturn dom;\r\n\t\t},\r\n\t\t/**\r\n\t\t * get the JSON representation of a node (or the actual jQuery extended DOM node) by using any input (child DOM element, ID string, selector, etc)\r\n\t\t * @name get_node(obj [, as_dom])\r\n\t\t * @param  {mixed} obj\r\n\t\t * @param  {Boolean} as_dom\r\n\t\t * @return {Object|jQuery}\r\n\t\t */\r\n\t\tget_node : function (obj, as_dom) {\r\n\t\t\tif(obj && obj.id) {\r\n\t\t\t\tobj = obj.id;\r\n\t\t\t}\r\n\t\t\tvar dom;\r\n\t\t\ttry {\r\n\t\t\t\tif(this._model.data[obj]) {\r\n\t\t\t\t\tobj = this._model.data[obj];\r\n\t\t\t\t}\r\n\t\t\t\telse if(typeof obj === \"string\" && this._model.data[obj.replace(/^#/, '')]) {\r\n\t\t\t\t\tobj = this._model.data[obj.replace(/^#/, '')];\r\n\t\t\t\t}\r\n\t\t\t\telse if(typeof obj === \"string\" && (dom = $('#' + obj.replace($.jstree.idregex,'\\\\$&'), this.element)).length && this._model.data[dom.closest('.jstree-node').attr('id')]) {\r\n\t\t\t\t\tobj = this._model.data[dom.closest('.jstree-node').attr('id')];\r\n\t\t\t\t}\r\n\t\t\t\telse if((dom = $(obj, this.element)).length && this._model.data[dom.closest('.jstree-node').attr('id')]) {\r\n\t\t\t\t\tobj = this._model.data[dom.closest('.jstree-node').attr('id')];\r\n\t\t\t\t}\r\n\t\t\t\telse if((dom = $(obj, this.element)).length && dom.hasClass('jstree')) {\r\n\t\t\t\t\tobj = this._model.data[$.jstree.root];\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(as_dom) {\r\n\t\t\t\t\tobj = obj.id === $.jstree.root ? this.element : $('#' + obj.id.replace($.jstree.idregex,'\\\\$&'), this.element);\r\n\t\t\t\t}\r\n\t\t\t\treturn obj;\r\n\t\t\t} catch (ex) { return false; }\r\n\t\t},\r\n\t\t/**\r\n\t\t * get the path to a node, either consisting of node texts, or of node IDs, optionally glued together (otherwise an array)\r\n\t\t * @name get_path(obj [, glue, ids])\r\n\t\t * @param  {mixed} obj the node\r\n\t\t * @param  {String} glue if you want the path as a string - pass the glue here (for example '/'), if a falsy value is supplied here, an array is returned\r\n\t\t * @param  {Boolean} ids if set to true build the path using ID, otherwise node text is used\r\n\t\t * @return {mixed}\r\n\t\t */\r\n\t\tget_path : function (obj, glue, ids) {\r\n\t\t\tobj = obj.parents ? obj : this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root || !obj.parents) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tvar i, j, p = [];\r\n\t\t\tp.push(ids ? obj.id : obj.text);\r\n\t\t\tfor(i = 0, j = obj.parents.length; i < j; i++) {\r\n\t\t\t\tp.push(ids ? obj.parents[i] : this.get_text(obj.parents[i]));\r\n\t\t\t}\r\n\t\t\tp = p.reverse().slice(1);\r\n\t\t\treturn glue ? p.join(glue) : p;\r\n\t\t},\r\n\t\t/**\r\n\t\t * get the next visible node that is below the `obj` node. If `strict` is set to `true` only sibling nodes are returned.\r\n\t\t * @name get_next_dom(obj [, strict])\r\n\t\t * @param  {mixed} obj\r\n\t\t * @param  {Boolean} strict\r\n\t\t * @return {jQuery}\r\n\t\t */\r\n\t\tget_next_dom : function (obj, strict) {\r\n\t\t\tvar tmp;\r\n\t\t\tobj = this.get_node(obj, true);\r\n\t\t\tif(obj[0] === this.element[0]) {\r\n\t\t\t\ttmp = this._firstChild(this.get_container_ul()[0]);\r\n\t\t\t\twhile (tmp && tmp.offsetHeight === 0) {\r\n\t\t\t\t\ttmp = this._nextSibling(tmp);\r\n\t\t\t\t}\r\n\t\t\t\treturn tmp ? $(tmp) : false;\r\n\t\t\t}\r\n\t\t\tif(!obj || !obj.length) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif(strict) {\r\n\t\t\t\ttmp = obj[0];\r\n\t\t\t\tdo {\r\n\t\t\t\t\ttmp = this._nextSibling(tmp);\r\n\t\t\t\t} while (tmp && tmp.offsetHeight === 0);\r\n\t\t\t\treturn tmp ? $(tmp) : false;\r\n\t\t\t}\r\n\t\t\tif(obj.hasClass(\"jstree-open\")) {\r\n\t\t\t\ttmp = this._firstChild(obj.children('.jstree-children')[0]);\r\n\t\t\t\twhile (tmp && tmp.offsetHeight === 0) {\r\n\t\t\t\t\ttmp = this._nextSibling(tmp);\r\n\t\t\t\t}\r\n\t\t\t\tif(tmp !== null) {\r\n\t\t\t\t\treturn $(tmp);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\ttmp = obj[0];\r\n\t\t\tdo {\r\n\t\t\t\ttmp = this._nextSibling(tmp);\r\n\t\t\t} while (tmp && tmp.offsetHeight === 0);\r\n\t\t\tif(tmp !== null) {\r\n\t\t\t\treturn $(tmp);\r\n\t\t\t}\r\n\t\t\treturn obj.parentsUntil(\".jstree\",\".jstree-node\").nextAll(\".jstree-node:visible\").first();\r\n\t\t},\r\n\t\t/**\r\n\t\t * get the previous visible node that is above the `obj` node. If `strict` is set to `true` only sibling nodes are returned.\r\n\t\t * @name get_prev_dom(obj [, strict])\r\n\t\t * @param  {mixed} obj\r\n\t\t * @param  {Boolean} strict\r\n\t\t * @return {jQuery}\r\n\t\t */\r\n\t\tget_prev_dom : function (obj, strict) {\r\n\t\t\tvar tmp;\r\n\t\t\tobj = this.get_node(obj, true);\r\n\t\t\tif(obj[0] === this.element[0]) {\r\n\t\t\t\ttmp = this.get_container_ul()[0].lastChild;\r\n\t\t\t\twhile (tmp && tmp.offsetHeight === 0) {\r\n\t\t\t\t\ttmp = this._previousSibling(tmp);\r\n\t\t\t\t}\r\n\t\t\t\treturn tmp ? $(tmp) : false;\r\n\t\t\t}\r\n\t\t\tif(!obj || !obj.length) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif(strict) {\r\n\t\t\t\ttmp = obj[0];\r\n\t\t\t\tdo {\r\n\t\t\t\t\ttmp = this._previousSibling(tmp);\r\n\t\t\t\t} while (tmp && tmp.offsetHeight === 0);\r\n\t\t\t\treturn tmp ? $(tmp) : false;\r\n\t\t\t}\r\n\t\t\ttmp = obj[0];\r\n\t\t\tdo {\r\n\t\t\t\ttmp = this._previousSibling(tmp);\r\n\t\t\t} while (tmp && tmp.offsetHeight === 0);\r\n\t\t\tif(tmp !== null) {\r\n\t\t\t\tobj = $(tmp);\r\n\t\t\t\twhile(obj.hasClass(\"jstree-open\")) {\r\n\t\t\t\t\tobj = obj.children(\".jstree-children\").first().children(\".jstree-node:visible:last\");\r\n\t\t\t\t}\r\n\t\t\t\treturn obj;\r\n\t\t\t}\r\n\t\t\ttmp = obj[0].parentNode.parentNode;\r\n\t\t\treturn tmp && tmp.className && tmp.className.indexOf('jstree-node') !== -1 ? $(tmp) : false;\r\n\t\t},\r\n\t\t/**\r\n\t\t * get the parent ID of a node\r\n\t\t * @name get_parent(obj)\r\n\t\t * @param  {mixed} obj\r\n\t\t * @return {String}\r\n\t\t */\r\n\t\tget_parent : function (obj) {\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\treturn obj.parent;\r\n\t\t},\r\n\t\t/**\r\n\t\t * get a jQuery collection of all the children of a node (node must be rendered), returns false on error\r\n\t\t * @name get_children_dom(obj)\r\n\t\t * @param  {mixed} obj\r\n\t\t * @return {jQuery}\r\n\t\t */\r\n\t\tget_children_dom : function (obj) {\r\n\t\t\tobj = this.get_node(obj, true);\r\n\t\t\tif(obj[0] === this.element[0]) {\r\n\t\t\t\treturn this.get_container_ul().children(\".jstree-node\");\r\n\t\t\t}\r\n\t\t\tif(!obj || !obj.length) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\treturn obj.children(\".jstree-children\").children(\".jstree-node\");\r\n\t\t},\r\n\t\t/**\r\n\t\t * checks if a node has children\r\n\t\t * @name is_parent(obj)\r\n\t\t * @param  {mixed} obj\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tis_parent : function (obj) {\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\treturn obj && (obj.state.loaded === false || obj.children.length > 0);\r\n\t\t},\r\n\t\t/**\r\n\t\t * checks if a node is loaded (its children are available)\r\n\t\t * @name is_loaded(obj)\r\n\t\t * @param  {mixed} obj\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tis_loaded : function (obj) {\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\treturn obj && obj.state.loaded;\r\n\t\t},\r\n\t\t/**\r\n\t\t * check if a node is currently loading (fetching children)\r\n\t\t * @name is_loading(obj)\r\n\t\t * @param  {mixed} obj\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tis_loading : function (obj) {\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\treturn obj && obj.state && obj.state.loading;\r\n\t\t},\r\n\t\t/**\r\n\t\t * check if a node is opened\r\n\t\t * @name is_open(obj)\r\n\t\t * @param  {mixed} obj\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tis_open : function (obj) {\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\treturn obj && obj.state.opened;\r\n\t\t},\r\n\t\t/**\r\n\t\t * check if a node is in a closed state\r\n\t\t * @name is_closed(obj)\r\n\t\t * @param  {mixed} obj\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tis_closed : function (obj) {\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\treturn obj && this.is_parent(obj) && !obj.state.opened;\r\n\t\t},\r\n\t\t/**\r\n\t\t * check if a node has no children\r\n\t\t * @name is_leaf(obj)\r\n\t\t * @param  {mixed} obj\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tis_leaf : function (obj) {\r\n\t\t\treturn !this.is_parent(obj);\r\n\t\t},\r\n\t\t/**\r\n\t\t * loads a node (fetches its children using the `core.data` setting). Multiple nodes can be passed to by using an array.\r\n\t\t * @name load_node(obj [, callback])\r\n\t\t * @param  {mixed} obj\r\n\t\t * @param  {function} callback a function to be executed once loading is complete, the function is executed in the instance's scope and receives two arguments - the node and a boolean status\r\n\t\t * @return {Boolean}\r\n\t\t * @trigger load_node.jstree\r\n\t\t */\r\n\t\tload_node : function (obj, callback) {\r\n\t\t\tvar k, l, i, j, c;\r\n\t\t\tif(langx.isArray(obj)) {\r\n\t\t\t\tthis._load_nodes(obj.slice(), callback);\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj) {\r\n\t\t\t\tif(callback) { callback.call(this, obj, false); }\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t// if(obj.state.loading) { } // the node is already loading - just wait for it to load and invoke callback? but if called implicitly it should be loaded again?\r\n\t\t\tif(obj.state.loaded) {\r\n\t\t\t\tobj.state.loaded = false;\r\n\t\t\t\tfor(i = 0, j = obj.parents.length; i < j; i++) {\r\n\t\t\t\t\tthis._model.data[obj.parents[i]].children_d = $.vakata.array_filter(this._model.data[obj.parents[i]].children_d, function (v) {\r\n\t\t\t\t\t\treturn langx.inArray(v, obj.children_d) === -1;\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tfor(k = 0, l = obj.children_d.length; k < l; k++) {\r\n\t\t\t\t\tif(this._model.data[obj.children_d[k]].state.selected) {\r\n\t\t\t\t\t\tc = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdelete this._model.data[obj.children_d[k]];\r\n\t\t\t\t}\r\n\t\t\t\tif (c) {\r\n\t\t\t\t\tthis._data.core.selected = $.vakata.array_filter(this._data.core.selected, function (v) {\r\n\t\t\t\t\t\treturn langx.inArray(v, obj.children_d) === -1;\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tobj.children = [];\r\n\t\t\t\tobj.children_d = [];\r\n\t\t\t\tif(c) {\r\n\t\t\t\t\tthis.trigger('changed', { 'action' : 'load_node', 'node' : obj, 'selected' : this._data.core.selected });\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tobj.state.failed = false;\r\n\t\t\tobj.state.loading = true;\r\n\t\t\tthis.get_node(obj, true).addClass(\"jstree-loading\").attr('aria-busy',true);\r\n\t\t\tthis._load_node(obj, langx.proxy(function (status) {\r\n\t\t\t\tobj = this._model.data[obj.id];\r\n\t\t\t\tobj.state.loading = false;\r\n\t\t\t\tobj.state.loaded = status;\r\n\t\t\t\tobj.state.failed = !obj.state.loaded;\r\n\t\t\t\tvar dom = this.get_node(obj, true), i = 0, j = 0, m = this._model.data, has_children = false;\r\n\t\t\t\tfor(i = 0, j = obj.children.length; i < j; i++) {\r\n\t\t\t\t\tif(m[obj.children[i]] && !m[obj.children[i]].state.hidden) {\r\n\t\t\t\t\t\thas_children = true;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif(obj.state.loaded && dom && dom.length) {\r\n\t\t\t\t\tdom.removeClass('jstree-closed jstree-open jstree-leaf');\r\n\t\t\t\t\tif (!has_children) {\r\n\t\t\t\t\t\tdom.addClass('jstree-leaf');\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tif (obj.id !== '#') {\r\n\t\t\t\t\t\t\tdom.addClass(obj.state.opened ? 'jstree-open' : 'jstree-closed');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.removeClass(\"jstree-loading\").attr('aria-busy',false);\r\n\t\t\t\t/**\r\n\t\t\t\t * triggered after a node is loaded\r\n\t\t\t\t * @event\r\n\t\t\t\t * @name load_node.jstree\r\n\t\t\t\t * @param {Object} node the node that was loading\r\n\t\t\t\t * @param {Boolean} status was the node loaded successfully\r\n\t\t\t\t */\r\n\t\t\t\tthis.trigger('load_node', { \"node\" : obj, \"status\" : status });\r\n\t\t\t\tif(callback) {\r\n\t\t\t\t\tcallback.call(this, obj, status);\r\n\t\t\t\t}\r\n\t\t\t}, this));\r\n\t\t\treturn true;\r\n\t\t},\r\n\t\t/**\r\n\t\t * load an array of nodes (will also load unavailable nodes as soon as the appear in the structure). Used internally.\r\n\t\t * @private\r\n\t\t * @name _load_nodes(nodes [, callback])\r\n\t\t * @param  {array} nodes\r\n\t\t * @param  {function} callback a function to be executed once loading is complete, the function is executed in the instance's scope and receives one argument - the array passed to _load_nodes\r\n\t\t */\r\n\t\t_load_nodes : function (nodes, callback, is_callback, force_reload) {\r\n\t\t\tvar r = true,\r\n\t\t\t\tc = function () { this._load_nodes(nodes, callback, true); },\r\n\t\t\t\tm = this._model.data, i, j, tmp = [];\r\n\t\t\tfor(i = 0, j = nodes.length; i < j; i++) {\r\n\t\t\t\tif(m[nodes[i]] && ( (!m[nodes[i]].state.loaded && !m[nodes[i]].state.failed) || (!is_callback && force_reload) )) {\r\n\t\t\t\t\tif(!this.is_loading(nodes[i])) {\r\n\t\t\t\t\t\tthis.load_node(nodes[i], c);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tr = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(r) {\r\n\t\t\t\tfor(i = 0, j = nodes.length; i < j; i++) {\r\n\t\t\t\t\tif(m[nodes[i]] && m[nodes[i]].state.loaded) {\r\n\t\t\t\t\t\ttmp.push(nodes[i]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif(callback && !callback.done) {\r\n\t\t\t\t\tcallback.call(this, tmp);\r\n\t\t\t\t\tcallback.done = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\t/**\r\n\t\t * loads all unloaded nodes\r\n\t\t * @name load_all([obj, callback])\r\n\t\t * @param {mixed} obj the node to load recursively, omit to load all nodes in the tree\r\n\t\t * @param {function} callback a function to be executed once loading all the nodes is complete,\r\n\t\t * @trigger load_all.jstree\r\n\t\t */\r\n\t\tload_all : function (obj, callback) {\r\n\t\t\tif(!obj) { obj = $.jstree.root; }\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj) { return false; }\r\n\t\t\tvar to_load = [],\r\n\t\t\t\tm = this._model.data,\r\n\t\t\t\tc = m[obj.id].children_d,\r\n\t\t\t\ti, j;\r\n\t\t\tif(obj.state && !obj.state.loaded) {\r\n\t\t\t\tto_load.push(obj.id);\r\n\t\t\t}\r\n\t\t\tfor(i = 0, j = c.length; i < j; i++) {\r\n\t\t\t\tif(m[c[i]] && m[c[i]].state && !m[c[i]].state.loaded) {\r\n\t\t\t\t\tto_load.push(c[i]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(to_load.length) {\r\n\t\t\t\tthis._load_nodes(to_load, function () {\r\n\t\t\t\t\tthis.load_all(obj, callback);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t/**\r\n\t\t\t\t * triggered after a load_all call completes\r\n\t\t\t\t * @event\r\n\t\t\t\t * @name load_all.jstree\r\n\t\t\t\t * @param {Object} node the recursively loaded node\r\n\t\t\t\t */\r\n\t\t\t\tif(callback) { callback.call(this, obj); }\r\n\t\t\t\tthis.trigger('load_all', { \"node\" : obj });\r\n\t\t\t}\r\n\t\t},\r\n\t\t/**\r\n\t\t * handles the actual loading of a node. Used only internally.\r\n\t\t * @private\r\n\t\t * @name _load_node(obj [, callback])\r\n\t\t * @param  {mixed} obj\r\n\t\t * @param  {function} callback a function to be executed once loading is complete, the function is executed in the instance's scope and receives one argument - a boolean status\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\t_load_node : function (obj, callback) {\r\n\t\t\tvar s = this.settings.core.data, t;\r\n\t\t\tvar notTextOrCommentNode = function notTextOrCommentNode () {\r\n\t\t\t\treturn this.nodeType !== 3 && this.nodeType !== 8;\r\n\t\t\t};\r\n\t\t\t// use original HTML\r\n\t\t\tif(!s) {\r\n\t\t\t\tif(obj.id === $.jstree.root) {\r\n\t\t\t\t\treturn this._append_html_data(obj, this._data.core.original_container_html.clone(true), function (status) {\r\n\t\t\t\t\t\tcallback.call(this, status);\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\treturn callback.call(this, false);\r\n\t\t\t\t}\r\n\t\t\t\t// return callback.call(this, obj.id === $.jstree.root ? this._append_html_data(obj, this._data.core.original_container_html.clone(true)) : false);\r\n\t\t\t}\r\n\t\t\tif(langx.isFunction(s)) {\r\n\t\t\t\treturn s.call(this, obj, langx.proxy(function (d) {\r\n\t\t\t\t\tif(d === false) {\r\n\t\t\t\t\t\tcallback.call(this, false);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tthis[typeof d === 'string' ? '_append_html_data' : '_append_json_data'](obj, typeof d === 'string' ? $(langx.parseHTML(d)).filter(notTextOrCommentNode) : d, function (status) {\r\n\t\t\t\t\t\t\tcallback.call(this, status);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// return d === false ? callback.call(this, false) : callback.call(this, this[typeof d === 'string' ? '_append_html_data' : '_append_json_data'](obj, typeof d === 'string' ? $(d) : d));\r\n\t\t\t\t}, this));\r\n\t\t\t}\r\n\t\t\tif(typeof s === 'object') {\r\n\t\t\t\tif(s.url) {\r\n\t\t\t\t\ts = langx.extend(true, {}, s);\r\n\t\t\t\t\tif(langx.isFunction(s.url)) {\r\n\t\t\t\t\t\ts.url = s.url.call(this, obj);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(langx.isFunction(s.data)) {\r\n\t\t\t\t\t\ts.data = s.data.call(this, obj);\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn ajax(s)\r\n\t\t\t\t\t\t.done(langx.proxy(function (d,t,x) {\r\n\t\t\t\t\t\t\t\tvar type = x.getResponseHeader('Content-Type');\r\n\t\t\t\t\t\t\t\tif((type && type.indexOf('json') !== -1) || typeof d === \"object\") {\r\n\t\t\t\t\t\t\t\t\treturn this._append_json_data(obj, d, function (status) { callback.call(this, status); });\r\n\t\t\t\t\t\t\t\t\t//return callback.call(this, this._append_json_data(obj, d));\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif((type && type.indexOf('html') !== -1) || typeof d === \"string\") {\r\n\t\t\t\t\t\t\t\t\treturn this._append_html_data(obj, $(langx.parseHTML(d)).filter(notTextOrCommentNode), function (status) { callback.call(this, status); });\r\n\t\t\t\t\t\t\t\t\t// return callback.call(this, this._append_html_data(obj, $(d)));\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tthis._data.core.last_error = { 'error' : 'ajax', 'plugin' : 'core', 'id' : 'core_04', 'reason' : 'Could not load node', 'data' : JSON.stringify({ 'id' : obj.id, 'xhr' : x }) };\r\n\t\t\t\t\t\t\t\tthis.settings.core.error.call(this, this._data.core.last_error);\r\n\t\t\t\t\t\t\t\treturn callback.call(this, false);\r\n\t\t\t\t\t\t\t}, this))\r\n\t\t\t\t\t\t.fail(langx.proxy(function (f) {\r\n\t\t\t\t\t\t\t\tthis._data.core.last_error = { 'error' : 'ajax', 'plugin' : 'core', 'id' : 'core_04', 'reason' : 'Could not load node', 'data' : JSON.stringify({ 'id' : obj.id, 'xhr' : f }) };\r\n\t\t\t\t\t\t\t\tcallback.call(this, false);\r\n\t\t\t\t\t\t\t\tthis.settings.core.error.call(this, this._data.core.last_error);\r\n\t\t\t\t\t\t\t}, this));\r\n\t\t\t\t}\r\n\t\t\t\tif (langx.isArray(s)) {\r\n\t\t\t\t\tt = langx.extend(true, [], s);\r\n\t\t\t\t} else if (langx.isPlainObject(s)) {\r\n\t\t\t\t\tt = langx.extend(true, {}, s);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tt = s;\r\n\t\t\t\t}\r\n\t\t\t\tif(obj.id === $.jstree.root) {\r\n\t\t\t\t\treturn this._append_json_data(obj, t, function (status) {\r\n\t\t\t\t\t\tcallback.call(this, status);\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis._data.core.last_error = { 'error' : 'nodata', 'plugin' : 'core', 'id' : 'core_05', 'reason' : 'Could not load node', 'data' : JSON.stringify({ 'id' : obj.id }) };\r\n\t\t\t\t\tthis.settings.core.error.call(this, this._data.core.last_error);\r\n\t\t\t\t\treturn callback.call(this, false);\r\n\t\t\t\t}\r\n\t\t\t\t//return callback.call(this, (obj.id === $.jstree.root ? this._append_json_data(obj, t) : false) );\r\n\t\t\t}\r\n\t\t\tif(typeof s === 'string') {\r\n\t\t\t\tif(obj.id === $.jstree.root) {\r\n\t\t\t\t\treturn this._append_html_data(obj, $(langx.parseHTML(s)).filter(notTextOrCommentNode), function (status) {\r\n\t\t\t\t\t\tcallback.call(this, status);\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis._data.core.last_error = { 'error' : 'nodata', 'plugin' : 'core', 'id' : 'core_06', 'reason' : 'Could not load node', 'data' : JSON.stringify({ 'id' : obj.id }) };\r\n\t\t\t\t\tthis.settings.core.error.call(this, this._data.core.last_error);\r\n\t\t\t\t\treturn callback.call(this, false);\r\n\t\t\t\t}\r\n\t\t\t\t//return callback.call(this, (obj.id === $.jstree.root ? this._append_html_data(obj, $(s)) : false) );\r\n\t\t\t}\r\n\t\t\treturn callback.call(this, false);\r\n\t\t},\r\n\t\t/**\r\n\t\t * adds a node to the list of nodes to redraw. Used only internally.\r\n\t\t * @private\r\n\t\t * @name _node_changed(obj [, callback])\r\n\t\t * @param  {mixed} obj\r\n\t\t */\r\n\t\t_node_changed : function (obj) {\r\n\t\t\tobj = this.get_node(obj);\r\n      if (obj && langx.inArray(obj.id, this._model.changed) === -1) {\r\n\t\t\t\tthis._model.changed.push(obj.id);\r\n\t\t\t}\r\n\t\t},\r\n\t\t/**\r\n\t\t * appends HTML content to the tree. Used internally.\r\n\t\t * @private\r\n\t\t * @name _append_html_data(obj, data)\r\n\t\t * @param  {mixed} obj the node to append to\r\n\t\t * @param  {String} data the HTML string to parse and append\r\n\t\t * @trigger model.jstree, changed.jstree\r\n\t\t */\r\n\t\t_append_html_data : function (dom, data, cb) {\r\n\t\t\tdom = this.get_node(dom);\r\n\t\t\tdom.children = [];\r\n\t\t\tdom.children_d = [];\r\n\t\t\tvar dat = data.is('ul') ? data.children() : data,\r\n\t\t\t\tpar = dom.id,\r\n\t\t\t\tchd = [],\r\n\t\t\t\tdpc = [],\r\n\t\t\t\tm = this._model.data,\r\n\t\t\t\tp = m[par],\r\n\t\t\t\ts = this._data.core.selected.length,\r\n\t\t\t\ttmp, i, j;\r\n\t\t\tdat.each(langx.proxy(function (i, v) {\r\n\t\t\t\ttmp = this._parse_model_from_html($(v), par, p.parents.concat());\r\n\t\t\t\tif(tmp) {\r\n\t\t\t\t\tchd.push(tmp);\r\n\t\t\t\t\tdpc.push(tmp);\r\n\t\t\t\t\tif(m[tmp].children_d.length) {\r\n\t\t\t\t\t\tdpc = dpc.concat(m[tmp].children_d);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}, this));\r\n\t\t\tp.children = chd;\r\n\t\t\tp.children_d = dpc;\r\n\t\t\tfor(i = 0, j = p.parents.length; i < j; i++) {\r\n\t\t\t\tm[p.parents[i]].children_d = m[p.parents[i]].children_d.concat(dpc);\r\n\t\t\t}\r\n\t\t\t/**\r\n\t\t\t * triggered when new data is inserted to the tree model\r\n\t\t\t * @event\r\n\t\t\t * @name model.jstree\r\n\t\t\t * @param {Array} nodes an array of node IDs\r\n\t\t\t * @param {String} parent the parent ID of the nodes\r\n\t\t\t */\r\n\t\t\tthis.trigger('model', { \"nodes\" : dpc, 'parent' : par });\r\n\t\t\tif(par !== $.jstree.root) {\r\n\t\t\t\tthis._node_changed(par);\r\n\t\t\t\tthis.redraw();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.get_container_ul().children('.jstree-initial-node').remove();\r\n\t\t\t\tthis.redraw(true);\r\n\t\t\t}\r\n\t\t\tif(this._data.core.selected.length !== s) {\r\n\t\t\t\tthis.trigger('changed', { 'action' : 'model', 'selected' : this._data.core.selected });\r\n\t\t\t}\r\n\t\t\tcb.call(this, true);\r\n\t\t},\r\n\t\t/**\r\n\t\t * appends JSON content to the tree. Used internally.\r\n\t\t * @private\r\n\t\t * @name _append_json_data(obj, data)\r\n\t\t * @param  {mixed} obj the node to append to\r\n\t\t * @param  {String} data the JSON object to parse and append\r\n\t\t * @param  {Boolean} force_processing internal param - do not set\r\n\t\t * @trigger model.jstree, changed.jstree\r\n\t\t */\r\n\t\t_append_json_data : function (dom, data, cb, force_processing) {\r\n\t\t\tif(this.element === null) { return; }\r\n\t\t\tdom = this.get_node(dom);\r\n\t\t\tdom.children = [];\r\n\t\t\tdom.children_d = [];\r\n\t\t\t// *%$@!!!\r\n\t\t\tif(data.d) {\r\n\t\t\t\tdata = data.d;\r\n\t\t\t\tif(typeof data === \"string\") {\r\n\t\t\t\t\tdata = JSON.parse(data);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(!langx.isArray(data)) { data = [data]; }\r\n\t\t\tvar w = null,\r\n\t\t\t\targs = {\r\n\t\t\t\t\t'df'\t: this._model.default_state,\r\n\t\t\t\t\t'dat'\t: data,\r\n\t\t\t\t\t'par'\t: dom.id,\r\n\t\t\t\t\t'm'\t\t: this._model.data,\r\n\t\t\t\t\t't_id'\t: this._id,\r\n\t\t\t\t\t't_cnt'\t: this._cnt,\r\n\t\t\t\t\t'sel'\t: this._data.core.selected\r\n\t\t\t\t},\r\n\t\t\t\tfunc = function (data, undefined) {\r\n\t\t\t\t\tif(data.data) { data = data.data; }\r\n\t\t\t\t\tvar dat = data.dat,\r\n\t\t\t\t\t\tpar = data.par,\r\n\t\t\t\t\t\tchd = [],\r\n\t\t\t\t\t\tdpc = [],\r\n\t\t\t\t\t\tadd = [],\r\n\t\t\t\t\t\tdf = data.df,\r\n\t\t\t\t\t\tt_id = data.t_id,\r\n\t\t\t\t\t\tt_cnt = data.t_cnt,\r\n\t\t\t\t\t\tm = data.m,\r\n\t\t\t\t\t\tp = m[par],\r\n\t\t\t\t\t\tsel = data.sel,\r\n\t\t\t\t\t\ttmp, i, j, rslt,\r\n\t\t\t\t\t\tparse_flat = function (d, p, ps) {\r\n\t\t\t\t\t\t\tif(!ps) { ps = []; }\r\n\t\t\t\t\t\t\telse { ps = ps.concat(); }\r\n\t\t\t\t\t\t\tif(p) { ps.unshift(p); }\r\n\t\t\t\t\t\t\tvar tid = d.id.toString(),\r\n\t\t\t\t\t\t\t\ti, j, c, e,\r\n\t\t\t\t\t\t\t\ttmp = {\r\n\t\t\t\t\t\t\t\t\tid\t\t\t: tid,\r\n\t\t\t\t\t\t\t\t\ttext\t\t: d.text || '',\r\n\t\t\t\t\t\t\t\t\ticon\t\t: d.icon !== undefined ? d.icon : true,\r\n\t\t\t\t\t\t\t\t\tparent\t\t: p,\r\n\t\t\t\t\t\t\t\t\tparents\t\t: ps,\r\n\t\t\t\t\t\t\t\t\tchildren\t: d.children || [],\r\n\t\t\t\t\t\t\t\t\tchildren_d\t: d.children_d || [],\r\n\t\t\t\t\t\t\t\t\tdata\t\t: d.data,\r\n\t\t\t\t\t\t\t\t\tstate\t\t: { },\r\n\t\t\t\t\t\t\t\t\tli_attr\t\t: { id : false },\r\n\t\t\t\t\t\t\t\t\ta_attr\t\t: { href : '#' },\r\n\t\t\t\t\t\t\t\t\toriginal\t: false\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\tfor(i in df) {\r\n\t\t\t\t\t\t\t\tif(df.hasOwnProperty(i)) {\r\n\t\t\t\t\t\t\t\t\ttmp.state[i] = df[i];\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(d && d.data && d.data.jstree && d.data.jstree.icon) {\r\n\t\t\t\t\t\t\t\ttmp.icon = d.data.jstree.icon;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(tmp.icon === undefined || tmp.icon === null || tmp.icon === \"\") {\r\n\t\t\t\t\t\t\t\ttmp.icon = true;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(d && d.data) {\r\n\t\t\t\t\t\t\t\ttmp.data = d.data;\r\n\t\t\t\t\t\t\t\tif(d.data.jstree) {\r\n\t\t\t\t\t\t\t\t\tfor(i in d.data.jstree) {\r\n\t\t\t\t\t\t\t\t\t\tif(d.data.jstree.hasOwnProperty(i)) {\r\n\t\t\t\t\t\t\t\t\t\t\ttmp.state[i] = d.data.jstree[i];\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(d && typeof d.state === 'object') {\r\n\t\t\t\t\t\t\t\tfor (i in d.state) {\r\n\t\t\t\t\t\t\t\t\tif(d.state.hasOwnProperty(i)) {\r\n\t\t\t\t\t\t\t\t\t\ttmp.state[i] = d.state[i];\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(d && typeof d.li_attr === 'object') {\r\n\t\t\t\t\t\t\t\tfor (i in d.li_attr) {\r\n\t\t\t\t\t\t\t\t\tif(d.li_attr.hasOwnProperty(i)) {\r\n\t\t\t\t\t\t\t\t\t\ttmp.li_attr[i] = d.li_attr[i];\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(!tmp.li_attr.id) {\r\n\t\t\t\t\t\t\t\ttmp.li_attr.id = tid;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(d && typeof d.a_attr === 'object') {\r\n\t\t\t\t\t\t\t\tfor (i in d.a_attr) {\r\n\t\t\t\t\t\t\t\t\tif(d.a_attr.hasOwnProperty(i)) {\r\n\t\t\t\t\t\t\t\t\t\ttmp.a_attr[i] = d.a_attr[i];\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(d && d.children && d.children === true) {\r\n\t\t\t\t\t\t\t\ttmp.state.loaded = false;\r\n\t\t\t\t\t\t\t\ttmp.children = [];\r\n\t\t\t\t\t\t\t\ttmp.children_d = [];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tm[tmp.id] = tmp;\r\n\t\t\t\t\t\t\tfor(i = 0, j = tmp.children.length; i < j; i++) {\r\n\t\t\t\t\t\t\t\tc = parse_flat(m[tmp.children[i]], tmp.id, ps);\r\n\t\t\t\t\t\t\t\te = m[c];\r\n\t\t\t\t\t\t\t\ttmp.children_d.push(c);\r\n\t\t\t\t\t\t\t\tif(e.children_d.length) {\r\n\t\t\t\t\t\t\t\t\ttmp.children_d = tmp.children_d.concat(e.children_d);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tdelete d.data;\r\n\t\t\t\t\t\t\tdelete d.children;\r\n\t\t\t\t\t\t\tm[tmp.id].original = d;\r\n\t\t\t\t\t\t\tif(tmp.state.selected) {\r\n\t\t\t\t\t\t\t\tadd.push(tmp.id);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\treturn tmp.id;\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tparse_nest = function (d, p, ps) {\r\n\t\t\t\t\t\t\tif(!ps) { ps = []; }\r\n\t\t\t\t\t\t\telse { ps = ps.concat(); }\r\n\t\t\t\t\t\t\tif(p) { ps.unshift(p); }\r\n\t\t\t\t\t\t\tvar tid = false, i, j, c, e, tmp;\r\n\t\t\t\t\t\t\tdo {\r\n\t\t\t\t\t\t\t\ttid = 'j' + t_id + '_' + (++t_cnt);\r\n\t\t\t\t\t\t\t} while(m[tid]);\r\n\r\n\t\t\t\t\t\t\ttmp = {\r\n\t\t\t\t\t\t\t\tid\t\t\t: false,\r\n\t\t\t\t\t\t\t\ttext\t\t: typeof d === 'string' ? d : '',\r\n\t\t\t\t\t\t\t\ticon\t\t: typeof d === 'object' && d.icon !== undefined ? d.icon : true,\r\n\t\t\t\t\t\t\t\tparent\t\t: p,\r\n\t\t\t\t\t\t\t\tparents\t\t: ps,\r\n\t\t\t\t\t\t\t\tchildren\t: [],\r\n\t\t\t\t\t\t\t\tchildren_d\t: [],\r\n\t\t\t\t\t\t\t\tdata\t\t: null,\r\n\t\t\t\t\t\t\t\tstate\t\t: { },\r\n\t\t\t\t\t\t\t\tli_attr\t\t: { id : false },\r\n\t\t\t\t\t\t\t\ta_attr\t\t: { href : '#' },\r\n\t\t\t\t\t\t\t\toriginal\t: false\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\tfor(i in df) {\r\n\t\t\t\t\t\t\t\tif(df.hasOwnProperty(i)) {\r\n\t\t\t\t\t\t\t\t\ttmp.state[i] = df[i];\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(d && d.id) { tmp.id = d.id.toString(); }\r\n\t\t\t\t\t\t\tif(d && d.text) { tmp.text = d.text; }\r\n\t\t\t\t\t\t\tif(d && d.data && d.data.jstree && d.data.jstree.icon) {\r\n\t\t\t\t\t\t\t\ttmp.icon = d.data.jstree.icon;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(tmp.icon === undefined || tmp.icon === null || tmp.icon === \"\") {\r\n\t\t\t\t\t\t\t\ttmp.icon = true;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(d && d.data) {\r\n\t\t\t\t\t\t\t\ttmp.data = d.data;\r\n\t\t\t\t\t\t\t\tif(d.data.jstree) {\r\n\t\t\t\t\t\t\t\t\tfor(i in d.data.jstree) {\r\n\t\t\t\t\t\t\t\t\t\tif(d.data.jstree.hasOwnProperty(i)) {\r\n\t\t\t\t\t\t\t\t\t\t\ttmp.state[i] = d.data.jstree[i];\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(d && typeof d.state === 'object') {\r\n\t\t\t\t\t\t\t\tfor (i in d.state) {\r\n\t\t\t\t\t\t\t\t\tif(d.state.hasOwnProperty(i)) {\r\n\t\t\t\t\t\t\t\t\t\ttmp.state[i] = d.state[i];\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(d && typeof d.li_attr === 'object') {\r\n\t\t\t\t\t\t\t\tfor (i in d.li_attr) {\r\n\t\t\t\t\t\t\t\t\tif(d.li_attr.hasOwnProperty(i)) {\r\n\t\t\t\t\t\t\t\t\t\ttmp.li_attr[i] = d.li_attr[i];\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(tmp.li_attr.id && !tmp.id) {\r\n\t\t\t\t\t\t\t\ttmp.id = tmp.li_attr.id.toString();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(!tmp.id) {\r\n\t\t\t\t\t\t\t\ttmp.id = tid;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(!tmp.li_attr.id) {\r\n\t\t\t\t\t\t\t\ttmp.li_attr.id = tmp.id;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(d && typeof d.a_attr === 'object') {\r\n\t\t\t\t\t\t\t\tfor (i in d.a_attr) {\r\n\t\t\t\t\t\t\t\t\tif(d.a_attr.hasOwnProperty(i)) {\r\n\t\t\t\t\t\t\t\t\t\ttmp.a_attr[i] = d.a_attr[i];\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(d && d.children && d.children.length) {\r\n\t\t\t\t\t\t\t\tfor(i = 0, j = d.children.length; i < j; i++) {\r\n\t\t\t\t\t\t\t\t\tc = parse_nest(d.children[i], tmp.id, ps);\r\n\t\t\t\t\t\t\t\t\te = m[c];\r\n\t\t\t\t\t\t\t\t\ttmp.children.push(c);\r\n\t\t\t\t\t\t\t\t\tif(e.children_d.length) {\r\n\t\t\t\t\t\t\t\t\t\ttmp.children_d = tmp.children_d.concat(e.children_d);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\ttmp.children_d = tmp.children_d.concat(tmp.children);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(d && d.children && d.children === true) {\r\n\t\t\t\t\t\t\t\ttmp.state.loaded = false;\r\n\t\t\t\t\t\t\t\ttmp.children = [];\r\n\t\t\t\t\t\t\t\ttmp.children_d = [];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tdelete d.data;\r\n\t\t\t\t\t\t\tdelete d.children;\r\n\t\t\t\t\t\t\ttmp.original = d;\r\n\t\t\t\t\t\t\tm[tmp.id] = tmp;\r\n\t\t\t\t\t\t\tif(tmp.state.selected) {\r\n\t\t\t\t\t\t\t\tadd.push(tmp.id);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\treturn tmp.id;\r\n\t\t\t\t\t\t};\r\n\r\n\t\t\t\t\tif(dat.length && dat[0].id !== undefined && dat[0].parent !== undefined) {\r\n\t\t\t\t\t\t// Flat JSON support (for easy import from DB):\r\n\t\t\t\t\t\t// 1) convert to object (foreach)\r\n\t\t\t\t\t\tfor(i = 0, j = dat.length; i < j; i++) {\r\n\t\t\t\t\t\t\tif(!dat[i].children) {\r\n\t\t\t\t\t\t\t\tdat[i].children = [];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(!dat[i].state) {\r\n\t\t\t\t\t\t\t\tdat[i].state = {};\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tm[dat[i].id.toString()] = dat[i];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// 2) populate children (foreach)\r\n\t\t\t\t\t\tfor(i = 0, j = dat.length; i < j; i++) {\r\n\t\t\t\t\t\t\tif (!m[dat[i].parent.toString()]) {\r\n\t\t\t\t\t\t\t\tthis._data.core.last_error = { 'error' : 'parse', 'plugin' : 'core', 'id' : 'core_07', 'reason' : 'Node with invalid parent', 'data' : JSON.stringify({ 'id' : dat[i].id.toString(), 'parent' : dat[i].parent.toString() }) };\r\n\t\t\t\t\t\t\t\tthis.settings.core.error.call(this, this._data.core.last_error);\r\n\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tm[dat[i].parent.toString()].children.push(dat[i].id.toString());\r\n\t\t\t\t\t\t\t// populate parent.children_d\r\n\t\t\t\t\t\t\tp.children_d.push(dat[i].id.toString());\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// 3) normalize && populate parents and children_d with recursion\r\n\t\t\t\t\t\tfor(i = 0, j = p.children.length; i < j; i++) {\r\n\t\t\t\t\t\t\ttmp = parse_flat(m[p.children[i]], par, p.parents.concat());\r\n\t\t\t\t\t\t\tdpc.push(tmp);\r\n\t\t\t\t\t\t\tif(m[tmp].children_d.length) {\r\n\t\t\t\t\t\t\t\tdpc = dpc.concat(m[tmp].children_d);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tfor(i = 0, j = p.parents.length; i < j; i++) {\r\n\t\t\t\t\t\t\tm[p.parents[i]].children_d = m[p.parents[i]].children_d.concat(dpc);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// ?) three_state selection - p.state.selected && t - (if three_state foreach(dat => ch) -> foreach(parents) if(parent.selected) child.selected = true;\r\n\t\t\t\t\t\trslt = {\r\n\t\t\t\t\t\t\t'cnt' : t_cnt,\r\n\t\t\t\t\t\t\t'mod' : m,\r\n\t\t\t\t\t\t\t'sel' : sel,\r\n\t\t\t\t\t\t\t'par' : par,\r\n\t\t\t\t\t\t\t'dpc' : dpc,\r\n\t\t\t\t\t\t\t'add' : add\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tfor(i = 0, j = dat.length; i < j; i++) {\r\n\t\t\t\t\t\t\ttmp = parse_nest(dat[i], par, p.parents.concat());\r\n\t\t\t\t\t\t\tif(tmp) {\r\n\t\t\t\t\t\t\t\tchd.push(tmp);\r\n\t\t\t\t\t\t\t\tdpc.push(tmp);\r\n\t\t\t\t\t\t\t\tif(m[tmp].children_d.length) {\r\n\t\t\t\t\t\t\t\t\tdpc = dpc.concat(m[tmp].children_d);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tp.children = chd;\r\n\t\t\t\t\t\tp.children_d = dpc;\r\n\t\t\t\t\t\tfor(i = 0, j = p.parents.length; i < j; i++) {\r\n\t\t\t\t\t\t\tm[p.parents[i]].children_d = m[p.parents[i]].children_d.concat(dpc);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\trslt = {\r\n\t\t\t\t\t\t\t'cnt' : t_cnt,\r\n\t\t\t\t\t\t\t'mod' : m,\r\n\t\t\t\t\t\t\t'sel' : sel,\r\n\t\t\t\t\t\t\t'par' : par,\r\n\t\t\t\t\t\t\t'dpc' : dpc,\r\n\t\t\t\t\t\t\t'add' : add\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(typeof window === 'undefined' || typeof window.document === 'undefined') {\r\n\t\t\t\t\t\tpostMessage(rslt);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\treturn rslt;\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\trslt = function (rslt, worker) {\r\n\t\t\t\t\tif(this.element === null) { return; }\r\n\t\t\t\t\tthis._cnt = rslt.cnt;\r\n\t\t\t\t\tvar i, m = this._model.data;\r\n\t\t\t\t\tfor (i in m) {\r\n\t\t\t\t\t\tif (m.hasOwnProperty(i) && m[i].state && m[i].state.loading && rslt.mod[i]) {\r\n\t\t\t\t\t\t\trslt.mod[i].state.loading = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis._model.data = rslt.mod; // breaks the reference in load_node - careful\r\n\r\n\t\t\t\t\tif(worker) {\r\n\t\t\t\t\t\tvar j, a = rslt.add, r = rslt.sel, s = this._data.core.selected.slice();\r\n\t\t\t\t\t\tm = this._model.data;\r\n\t\t\t\t\t\t// if selection was changed while calculating in worker\r\n\t\t\t\t\t\tif(r.length !== s.length || $.vakata.array_unique(r.concat(s)).length !== r.length) {\r\n\t\t\t\t\t\t\t// deselect nodes that are no longer selected\r\n\t\t\t\t\t\t\tfor(i = 0, j = r.length; i < j; i++) {\r\n\t\t\t\t\t\t\t\tif(langx.inArray(r[i], a) === -1 && langx.inArray(r[i], s) === -1) {\r\n\t\t\t\t\t\t\t\t\tm[r[i]].state.selected = false;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t// select nodes that were selected in the mean time\r\n\t\t\t\t\t\t\tfor(i = 0, j = s.length; i < j; i++) {\r\n\t\t\t\t\t\t\t\tif(langx.inArray(s[i], r) === -1) {\r\n\t\t\t\t\t\t\t\t\tm[s[i]].state.selected = true;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(rslt.add.length) {\r\n\t\t\t\t\t\tthis._data.core.selected = this._data.core.selected.concat(rslt.add);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.trigger('model', { \"nodes\" : rslt.dpc, 'parent' : rslt.par });\r\n\r\n\t\t\t\t\tif(rslt.par !== $.jstree.root) {\r\n\t\t\t\t\t\tthis._node_changed(rslt.par);\r\n\t\t\t\t\t\tthis.redraw();\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\t// this.get_container_ul().children('.jstree-initial-node').remove();\r\n\t\t\t\t\t\tthis.redraw(true);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(rslt.add.length) {\r\n\t\t\t\t\t\tthis.trigger('changed', { 'action' : 'model', 'selected' : this._data.core.selected });\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcb.call(this, true);\r\n\t\t\t\t};\r\n\t\t\tif(this.settings.core.worker && window.Blob && window.URL && window.Worker) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tif(this._wrk === null) {\r\n\t\t\t\t\t\tthis._wrk = window.URL.createObjectURL(\r\n\t\t\t\t\t\t\tnew window.Blob(\r\n\t\t\t\t\t\t\t\t['self.onmessage = ' + func.toString()],\r\n\t\t\t\t\t\t\t\t{type:\"text/javascript\"}\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(!this._data.core.working || force_processing) {\r\n\t\t\t\t\t\tthis._data.core.working = true;\r\n\t\t\t\t\t\tw = new window.Worker(this._wrk);\r\n\t\t\t\t\t\tw.onmessage = langx.proxy(function (e) {\r\n\t\t\t\t\t\t\trslt.call(this, e.data, true);\r\n\t\t\t\t\t\t\ttry { w.terminate(); w = null; } catch(ignore) { }\r\n\t\t\t\t\t\t\tif(this._data.core.worker_queue.length) {\r\n\t\t\t\t\t\t\t\tthis._append_json_data.apply(this, this._data.core.worker_queue.shift());\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\tthis._data.core.working = false;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}, this);\r\n\t\t\t\t\t\tif(!args.par) {\r\n\t\t\t\t\t\t\tif(this._data.core.worker_queue.length) {\r\n\t\t\t\t\t\t\t\tthis._append_json_data.apply(this, this._data.core.worker_queue.shift());\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\tthis._data.core.working = false;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tw.postMessage(args);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tthis._data.core.worker_queue.push([dom, data, cb, true]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tcatch(e) {\r\n\t\t\t\t\trslt.call(this, func(args), false);\r\n\t\t\t\t\tif(this._data.core.worker_queue.length) {\r\n\t\t\t\t\t\tthis._append_json_data.apply(this, this._data.core.worker_queue.shift());\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tthis._data.core.working = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\trslt.call(this, func(args), false);\r\n\t\t\t}\r\n\t\t},\r\n\t\t/**\r\n\t\t * parses a node from a jQuery object and appends them to the in memory tree model. Used internally.\r\n\t\t * @private\r\n\t\t * @name _parse_model_from_html(d [, p, ps])\r\n\t\t * @param  {jQuery} d the jQuery object to parse\r\n\t\t * @param  {String} p the parent ID\r\n\t\t * @param  {Array} ps list of all parents\r\n\t\t * @return {String} the ID of the object added to the model\r\n\t\t */\r\n\t\t_parse_model_from_html : function (d, p, ps) {\r\n\t\t\tif(!ps) { ps = []; }\r\n\t\t\telse { ps = [].concat(ps); }\r\n\t\t\tif(p) { ps.unshift(p); }\r\n\t\t\tvar c, e, m = this._model.data,\r\n\t\t\t\tdata = {\r\n\t\t\t\t\tid\t\t\t: false,\r\n\t\t\t\t\ttext\t\t: false,\r\n\t\t\t\t\ticon\t\t: true,\r\n\t\t\t\t\tparent\t\t: p,\r\n\t\t\t\t\tparents\t\t: ps,\r\n\t\t\t\t\tchildren\t: [],\r\n\t\t\t\t\tchildren_d\t: [],\r\n\t\t\t\t\tdata\t\t: null,\r\n\t\t\t\t\tstate\t\t: { },\r\n\t\t\t\t\tli_attr\t\t: { id : false },\r\n\t\t\t\t\ta_attr\t\t: { href : '#' },\r\n\t\t\t\t\toriginal\t: false\r\n\t\t\t\t}, i, tmp, tid;\r\n\t\t\tfor(i in this._model.default_state) {\r\n\t\t\t\tif(this._model.default_state.hasOwnProperty(i)) {\r\n\t\t\t\t\tdata.state[i] = this._model.default_state[i];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\ttmp = $.vakata.attributes(d, true);\r\n\t\t\tlangx.each(tmp, function (i, v) {\r\n\t\t\t\tv = langx.trim(v);\r\n\t\t\t\tif(!v.length) { return true; }\r\n\t\t\t\tdata.li_attr[i] = v;\r\n\t\t\t\tif(i === 'id') {\r\n\t\t\t\t\tdata.id = v.toString();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\ttmp = d.children('a').first();\r\n\t\t\tif(tmp.length) {\r\n\t\t\t\ttmp = $.vakata.attributes(tmp, true);\r\n\t\t\t\tlangx.each(tmp, function (i, v) {\r\n\t\t\t\t\tv = langx.trim(v);\r\n\t\t\t\t\tif(v.length) {\r\n\t\t\t\t\t\tdata.a_attr[i] = v;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\ttmp = d.children(\"a\").first().length ? d.children(\"a\").first().clone() : d.clone();\r\n\t\t\ttmp.children(\"ins, i, ul\").remove();\r\n\t\t\ttmp = tmp.html();\r\n\t\t\ttmp = $('<div />').html(tmp);\r\n\t\t\tdata.text = this.settings.core.force_text ? tmp.text() : tmp.html();\r\n\t\t\ttmp = d.data();\r\n\t\t\tdata.data = tmp ? langx.extend(true, {}, tmp) : null;\r\n\t\t\tdata.state.opened = d.hasClass('jstree-open');\r\n\t\t\tdata.state.selected = d.children('a').hasClass('jstree-clicked');\r\n\t\t\tdata.state.disabled = d.children('a').hasClass('jstree-disabled');\r\n\t\t\tif(data.data && data.data.jstree) {\r\n\t\t\t\tfor(i in data.data.jstree) {\r\n\t\t\t\t\tif(data.data.jstree.hasOwnProperty(i)) {\r\n\t\t\t\t\t\tdata.state[i] = data.data.jstree[i];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\ttmp = d.children(\"a\").children(\".jstree-themeicon\");\r\n\t\t\tif(tmp.length) {\r\n\t\t\t\tdata.icon = tmp.hasClass('jstree-themeicon-hidden') ? false : tmp.attr('rel');\r\n\t\t\t}\r\n\t\t\tif(data.state.icon !== undefined) {\r\n\t\t\t\tdata.icon = data.state.icon;\r\n\t\t\t}\r\n\t\t\tif(data.icon === undefined || data.icon === null || data.icon === \"\") {\r\n\t\t\t\tdata.icon = true;\r\n\t\t\t}\r\n\t\t\ttmp = d.children(\"ul\").children(\"li\");\r\n\t\t\tdo {\r\n\t\t\t\ttid = 'j' + this._id + '_' + (++this._cnt);\r\n\t\t\t} while(m[tid]);\r\n\t\t\tdata.id = data.li_attr.id ? data.li_attr.id.toString() : tid;\r\n\t\t\tif(tmp.length) {\r\n\t\t\t\ttmp.each(langx.proxy(function (i, v) {\r\n\t\t\t\t\tc = this._parse_model_from_html($(v), data.id, ps);\r\n\t\t\t\t\te = this._model.data[c];\r\n\t\t\t\t\tdata.children.push(c);\r\n\t\t\t\t\tif(e.children_d.length) {\r\n\t\t\t\t\t\tdata.children_d = data.children_d.concat(e.children_d);\r\n\t\t\t\t\t}\r\n\t\t\t\t}, this));\r\n\t\t\t\tdata.children_d = data.children_d.concat(data.children);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif(d.hasClass('jstree-closed')) {\r\n\t\t\t\t\tdata.state.loaded = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(data.li_attr['class']) {\r\n\t\t\t\tdata.li_attr['class'] = data.li_attr['class'].replace('jstree-closed','').replace('jstree-open','');\r\n\t\t\t}\r\n\t\t\tif(data.a_attr['class']) {\r\n\t\t\t\tdata.a_attr['class'] = data.a_attr['class'].replace('jstree-clicked','').replace('jstree-disabled','');\r\n\t\t\t}\r\n\t\t\tm[data.id] = data;\r\n\t\t\tif(data.state.selected) {\r\n\t\t\t\tthis._data.core.selected.push(data.id);\r\n\t\t\t}\r\n\t\t\treturn data.id;\r\n\t\t},\r\n\t\t/**\r\n\t\t * parses a node from a JSON object (used when dealing with flat data, which has no nesting of children, but has id and parent properties) and appends it to the in memory tree model. Used internally.\r\n\t\t * @private\r\n\t\t * @name _parse_model_from_flat_json(d [, p, ps])\r\n\t\t * @param  {Object} d the JSON object to parse\r\n\t\t * @param  {String} p the parent ID\r\n\t\t * @param  {Array} ps list of all parents\r\n\t\t * @return {String} the ID of the object added to the model\r\n\t\t */\r\n\t\t_parse_model_from_flat_json : function (d, p, ps) {\r\n\t\t\tif(!ps) { ps = []; }\r\n\t\t\telse { ps = ps.concat(); }\r\n\t\t\tif(p) { ps.unshift(p); }\r\n\t\t\tvar tid = d.id.toString(),\r\n\t\t\t\tm = this._model.data,\r\n\t\t\t\tdf = this._model.default_state,\r\n\t\t\t\ti, j, c, e,\r\n\t\t\t\ttmp = {\r\n\t\t\t\t\tid\t\t\t: tid,\r\n\t\t\t\t\ttext\t\t: d.text || '',\r\n\t\t\t\t\ticon\t\t: d.icon !== undefined ? d.icon : true,\r\n\t\t\t\t\tparent\t\t: p,\r\n\t\t\t\t\tparents\t\t: ps,\r\n\t\t\t\t\tchildren\t: d.children || [],\r\n\t\t\t\t\tchildren_d\t: d.children_d || [],\r\n\t\t\t\t\tdata\t\t: d.data,\r\n\t\t\t\t\tstate\t\t: { },\r\n\t\t\t\t\tli_attr\t\t: { id : false },\r\n\t\t\t\t\ta_attr\t\t: { href : '#' },\r\n\t\t\t\t\toriginal\t: false\r\n\t\t\t\t};\r\n\t\t\tfor(i in df) {\r\n\t\t\t\tif(df.hasOwnProperty(i)) {\r\n\t\t\t\t\ttmp.state[i] = df[i];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(d && d.data && d.data.jstree && d.data.jstree.icon) {\r\n\t\t\t\ttmp.icon = d.data.jstree.icon;\r\n\t\t\t}\r\n\t\t\tif(tmp.icon === undefined || tmp.icon === null || tmp.icon === \"\") {\r\n\t\t\t\ttmp.icon = true;\r\n\t\t\t}\r\n\t\t\tif(d && d.data) {\r\n\t\t\t\ttmp.data = d.data;\r\n\t\t\t\tif(d.data.jstree) {\r\n\t\t\t\t\tfor(i in d.data.jstree) {\r\n\t\t\t\t\t\tif(d.data.jstree.hasOwnProperty(i)) {\r\n\t\t\t\t\t\t\ttmp.state[i] = d.data.jstree[i];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(d && typeof d.state === 'object') {\r\n\t\t\t\tfor (i in d.state) {\r\n\t\t\t\t\tif(d.state.hasOwnProperty(i)) {\r\n\t\t\t\t\t\ttmp.state[i] = d.state[i];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(d && typeof d.li_attr === 'object') {\r\n\t\t\t\tfor (i in d.li_attr) {\r\n\t\t\t\t\tif(d.li_attr.hasOwnProperty(i)) {\r\n\t\t\t\t\t\ttmp.li_attr[i] = d.li_attr[i];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(!tmp.li_attr.id) {\r\n\t\t\t\ttmp.li_attr.id = tid;\r\n\t\t\t}\r\n\t\t\tif(d && typeof d.a_attr === 'object') {\r\n\t\t\t\tfor (i in d.a_attr) {\r\n\t\t\t\t\tif(d.a_attr.hasOwnProperty(i)) {\r\n\t\t\t\t\t\ttmp.a_attr[i] = d.a_attr[i];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(d && d.children && d.children === true) {\r\n\t\t\t\ttmp.state.loaded = false;\r\n\t\t\t\ttmp.children = [];\r\n\t\t\t\ttmp.children_d = [];\r\n\t\t\t}\r\n\t\t\tm[tmp.id] = tmp;\r\n\t\t\tfor(i = 0, j = tmp.children.length; i < j; i++) {\r\n\t\t\t\tc = this._parse_model_from_flat_json(m[tmp.children[i]], tmp.id, ps);\r\n\t\t\t\te = m[c];\r\n\t\t\t\ttmp.children_d.push(c);\r\n\t\t\t\tif(e.children_d.length) {\r\n\t\t\t\t\ttmp.children_d = tmp.children_d.concat(e.children_d);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tdelete d.data;\r\n\t\t\tdelete d.children;\r\n\t\t\tm[tmp.id].original = d;\r\n\t\t\tif(tmp.state.selected) {\r\n\t\t\t\tthis._data.core.selected.push(tmp.id);\r\n\t\t\t}\r\n\t\t\treturn tmp.id;\r\n\t\t},\r\n\t\t/**\r\n\t\t * parses a node from a JSON object and appends it to the in memory tree model. Used internally.\r\n\t\t * @private\r\n\t\t * @name _parse_model_from_json(d [, p, ps])\r\n\t\t * @param  {Object} d the JSON object to parse\r\n\t\t * @param  {String} p the parent ID\r\n\t\t * @param  {Array} ps list of all parents\r\n\t\t * @return {String} the ID of the object added to the model\r\n\t\t */\r\n\t\t_parse_model_from_json : function (d, p, ps) {\r\n\t\t\tif(!ps) { ps = []; }\r\n\t\t\telse { ps = ps.concat(); }\r\n\t\t\tif(p) { ps.unshift(p); }\r\n\t\t\tvar tid = false, i, j, c, e, m = this._model.data, df = this._model.default_state, tmp;\r\n\t\t\tdo {\r\n\t\t\t\ttid = 'j' + this._id + '_' + (++this._cnt);\r\n\t\t\t} while(m[tid]);\r\n\r\n\t\t\ttmp = {\r\n\t\t\t\tid\t\t\t: false,\r\n\t\t\t\ttext\t\t: typeof d === 'string' ? d : '',\r\n\t\t\t\ticon\t\t: typeof d === 'object' && d.icon !== undefined ? d.icon : true,\r\n\t\t\t\tparent\t\t: p,\r\n\t\t\t\tparents\t\t: ps,\r\n\t\t\t\tchildren\t: [],\r\n\t\t\t\tchildren_d\t: [],\r\n\t\t\t\tdata\t\t: null,\r\n\t\t\t\tstate\t\t: { },\r\n\t\t\t\tli_attr\t\t: { id : false },\r\n\t\t\t\ta_attr\t\t: { href : '#' },\r\n\t\t\t\toriginal\t: false\r\n\t\t\t};\r\n\t\t\tfor(i in df) {\r\n\t\t\t\tif(df.hasOwnProperty(i)) {\r\n\t\t\t\t\ttmp.state[i] = df[i];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(d && d.id) { tmp.id = d.id.toString(); }\r\n\t\t\tif(d && d.text) { tmp.text = d.text; }\r\n\t\t\tif(d && d.data && d.data.jstree && d.data.jstree.icon) {\r\n\t\t\t\ttmp.icon = d.data.jstree.icon;\r\n\t\t\t}\r\n\t\t\tif(tmp.icon === undefined || tmp.icon === null || tmp.icon === \"\") {\r\n\t\t\t\ttmp.icon = true;\r\n\t\t\t}\r\n\t\t\tif(d && d.data) {\r\n\t\t\t\ttmp.data = d.data;\r\n\t\t\t\tif(d.data.jstree) {\r\n\t\t\t\t\tfor(i in d.data.jstree) {\r\n\t\t\t\t\t\tif(d.data.jstree.hasOwnProperty(i)) {\r\n\t\t\t\t\t\t\ttmp.state[i] = d.data.jstree[i];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(d && typeof d.state === 'object') {\r\n\t\t\t\tfor (i in d.state) {\r\n\t\t\t\t\tif(d.state.hasOwnProperty(i)) {\r\n\t\t\t\t\t\ttmp.state[i] = d.state[i];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(d && typeof d.li_attr === 'object') {\r\n\t\t\t\tfor (i in d.li_attr) {\r\n\t\t\t\t\tif(d.li_attr.hasOwnProperty(i)) {\r\n\t\t\t\t\t\ttmp.li_attr[i] = d.li_attr[i];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(tmp.li_attr.id && !tmp.id) {\r\n\t\t\t\ttmp.id = tmp.li_attr.id.toString();\r\n\t\t\t}\r\n\t\t\tif(!tmp.id) {\r\n\t\t\t\ttmp.id = tid;\r\n\t\t\t}\r\n\t\t\tif(!tmp.li_attr.id) {\r\n\t\t\t\ttmp.li_attr.id = tmp.id;\r\n\t\t\t}\r\n\t\t\tif(d && typeof d.a_attr === 'object') {\r\n\t\t\t\tfor (i in d.a_attr) {\r\n\t\t\t\t\tif(d.a_attr.hasOwnProperty(i)) {\r\n\t\t\t\t\t\ttmp.a_attr[i] = d.a_attr[i];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(d && d.children && d.children.length) {\r\n\t\t\t\tfor(i = 0, j = d.children.length; i < j; i++) {\r\n\t\t\t\t\tc = this._parse_model_from_json(d.children[i], tmp.id, ps);\r\n\t\t\t\t\te = m[c];\r\n\t\t\t\t\ttmp.children.push(c);\r\n\t\t\t\t\tif(e.children_d.length) {\r\n\t\t\t\t\t\ttmp.children_d = tmp.children_d.concat(e.children_d);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\ttmp.children_d = tmp.children_d.concat(tmp.children);\r\n\t\t\t}\r\n\t\t\tif(d && d.children && d.children === true) {\r\n\t\t\t\ttmp.state.loaded = false;\r\n\t\t\t\ttmp.children = [];\r\n\t\t\t\ttmp.children_d = [];\r\n\t\t\t}\r\n\t\t\tdelete d.data;\r\n\t\t\tdelete d.children;\r\n\t\t\ttmp.original = d;\r\n\t\t\tm[tmp.id] = tmp;\r\n\t\t\tif(tmp.state.selected) {\r\n\t\t\t\tthis._data.core.selected.push(tmp.id);\r\n\t\t\t}\r\n\t\t\treturn tmp.id;\r\n\t\t},\r\n\t\t/**\r\n\t\t * redraws all nodes that need to be redrawn. Used internally.\r\n\t\t * @private\r\n\t\t * @name _redraw()\r\n\t\t * @trigger redraw.jstree\r\n\t\t */\r\n\t\t_redraw : function () {\r\n\t\t\tvar nodes = this._model.force_full_redraw ? this._model.data[$.jstree.root].children.concat([]) : this._model.changed.concat([]),\r\n\t\t\t\tf = document.createElement('UL'), tmp, i, j, fe = this._data.core.focused;\r\n\t\t\tfor(i = 0, j = nodes.length; i < j; i++) {\r\n\t\t\t\ttmp = this.redraw_node(nodes[i], true, this._model.force_full_redraw);\r\n\t\t\t\tif(tmp && this._model.force_full_redraw) {\r\n\t\t\t\t\tf.appendChild(tmp);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(this._model.force_full_redraw) {\r\n\t\t\t\tf.className = this.get_container_ul()[0].className;\r\n\t\t\t\tf.setAttribute('role','group');\r\n\t\t\t\tthis.element.empty().append(f);\r\n\t\t\t\t//this.get_container_ul()[0].appendChild(f);\r\n\t\t\t}\r\n\t\t\tif(fe !== null) {\r\n\t\t\t\ttmp = this.get_node(fe, true);\r\n\t\t\t\tif(tmp && tmp.length && tmp.children('.jstree-anchor')[0] !== document.activeElement) {\r\n\t\t\t\t\ttmp.children('.jstree-anchor').focus();\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis._data.core.focused = null;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis._model.force_full_redraw = false;\r\n\t\t\tthis._model.changed = [];\r\n\t\t\t/**\r\n\t\t\t * triggered after nodes are redrawn\r\n\t\t\t * @event\r\n\t\t\t * @name redraw.jstree\r\n\t\t\t * @param {array} nodes the redrawn nodes\r\n\t\t\t */\r\n\t\t\tthis.trigger('redraw', { \"nodes\" : nodes });\r\n\t\t},\r\n\t\t/**\r\n\t\t * redraws all nodes that need to be redrawn or optionally - the whole tree\r\n\t\t * @name redraw([full])\r\n\t\t * @param {Boolean} full if set to `true` all nodes are redrawn.\r\n\t\t */\r\n\t\tredraw : function (full) {\r\n\t\t\tif(full) {\r\n\t\t\t\tthis._model.force_full_redraw = true;\r\n\t\t\t}\r\n\t\t\t//if(this._model.redraw_timeout) {\r\n\t\t\t//\tclearTimeout(this._model.redraw_timeout);\r\n\t\t\t//}\r\n\t\t\t//this._model.redraw_timeout = setTimeout($.proxy(this._redraw, this),0);\r\n\t\t\tthis._redraw();\r\n\t\t},\r\n\t\t/**\r\n\t\t * redraws a single node's children. Used internally.\r\n\t\t * @private\r\n\t\t * @name draw_children(node)\r\n\t\t * @param {mixed} node the node whose children will be redrawn\r\n\t\t */\r\n\t\tdraw_children : function (node) {\r\n\t\t\tvar obj = this.get_node(node),\r\n\t\t\t\ti = false,\r\n\t\t\t\tj = false,\r\n\t\t\t\tk = false,\r\n\t\t\t\td = document;\r\n\t\t\tif(!obj) { return false; }\r\n\t\t\tif(obj.id === $.jstree.root) { return this.redraw(true); }\r\n\t\t\tnode = this.get_node(node, true);\r\n\t\t\tif(!node || !node.length) { return false; } // TODO: quick toggle\r\n\r\n\t\t\tnode.children('.jstree-children').remove();\r\n\t\t\tnode = node[0];\r\n\t\t\tif(obj.children.length && obj.state.loaded) {\r\n\t\t\t\tk = d.createElement('UL');\r\n\t\t\t\tk.setAttribute('role', 'group');\r\n\t\t\t\tk.className = 'jstree-children';\r\n\t\t\t\tfor(i = 0, j = obj.children.length; i < j; i++) {\r\n\t\t\t\t\tk.appendChild(this.redraw_node(obj.children[i], true, true));\r\n\t\t\t\t}\r\n\t\t\t\tnode.appendChild(k);\r\n\t\t\t}\r\n\t\t},\r\n\t\t/**\r\n\t\t * redraws a single node. Used internally.\r\n\t\t * @private\r\n\t\t * @name redraw_node(node, deep, is_callback, force_render)\r\n\t\t * @param {mixed} node the node to redraw\r\n\t\t * @param {Boolean} deep should child nodes be redrawn too\r\n\t\t * @param {Boolean} is_callback is this a recursion call\r\n\t\t * @param {Boolean} force_render should children of closed parents be drawn anyway\r\n\t\t */\r\n\t\tredraw_node : function (node, deep, is_callback, force_render) {\r\n\t\t\tvar obj = this.get_node(node),\r\n\t\t\t\tpar = false,\r\n\t\t\t\tind = false,\r\n\t\t\t\told = false,\r\n\t\t\t\ti = false,\r\n\t\t\t\tj = false,\r\n\t\t\t\tk = false,\r\n\t\t\t\tc = '',\r\n\t\t\t\td = document,\r\n\t\t\t\tm = this._model.data,\r\n\t\t\t\tf = false,\r\n\t\t\t\ts = false,\r\n\t\t\t\ttmp = null,\r\n\t\t\t\tt = 0,\r\n\t\t\t\tl = 0,\r\n\t\t\t\thas_children = false,\r\n\t\t\t\tlast_sibling = false;\r\n\t\t\tif(!obj) { return false; }\r\n\t\t\tif(obj.id === $.jstree.root) {  return this.redraw(true); }\r\n\t\t\tdeep = deep || obj.children.length === 0;\r\n\t\t\tnode = !document.querySelector ? document.getElementById(obj.id) : this.element[0].querySelector('#' + (\"0123456789\".indexOf(obj.id[0]) !== -1 ? '\\\\3' + obj.id[0] + ' ' + obj.id.substr(1).replace($.jstree.idregex,'\\\\$&') : obj.id.replace($.jstree.idregex,'\\\\$&')) ); //, this.element);\r\n\t\t\tif(!node) {\r\n\t\t\t\tdeep = true;\r\n\t\t\t\t//node = d.createElement('LI');\r\n\t\t\t\tif(!is_callback) {\r\n\t\t\t\t\tpar = obj.parent !== $.jstree.root ? $('#' + obj.parent.replace($.jstree.idregex,'\\\\$&'), this.element)[0] : null;\r\n\t\t\t\t\tif(par !== null && (!par || !m[obj.parent].state.opened)) {\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tind = langx.inArray(obj.id, par === null ? m[$.jstree.root].children : m[obj.parent].children);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tnode = $(node);\r\n\t\t\t\tif(!is_callback) {\r\n\t\t\t\t\tpar = node.parent().parent()[0];\r\n\t\t\t\t\tif(par === this.element[0]) {\r\n\t\t\t\t\t\tpar = null;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tind = node.index();\r\n\t\t\t\t}\r\n\t\t\t\t// m[obj.id].data = node.data(); // use only node's data, no need to touch jquery storage\r\n\t\t\t\tif(!deep && obj.children.length && !node.children('.jstree-children').length) {\r\n\t\t\t\t\tdeep = true;\r\n\t\t\t\t}\r\n\t\t\t\tif(!deep) {\r\n\t\t\t\t\told = node.children('.jstree-children')[0];\r\n\t\t\t\t}\r\n\t\t\t\tf = node.children('.jstree-anchor')[0] === document.activeElement;\r\n\t\t\t\tnode.remove();\r\n\t\t\t\t//node = d.createElement('LI');\r\n\t\t\t\t//node = node[0];\r\n\t\t\t}\r\n\t\t\tnode = this._data.core.node.cloneNode(true);\r\n\t\t\t// node is DOM, deep is boolean\r\n\r\n\t\t\tc = 'jstree-node ';\r\n\t\t\tfor(i in obj.li_attr) {\r\n\t\t\t\tif(obj.li_attr.hasOwnProperty(i)) {\r\n\t\t\t\t\tif(i === 'id') { continue; }\r\n\t\t\t\t\tif(i !== 'class') {\r\n\t\t\t\t\t\tnode.setAttribute(i, obj.li_attr[i]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tc += obj.li_attr[i];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(!obj.a_attr.id) {\r\n\t\t\t\tobj.a_attr.id = obj.id + '_anchor';\r\n\t\t\t}\r\n\t\t\tnode.setAttribute('aria-selected', !!obj.state.selected);\r\n\t\t\tnode.setAttribute('aria-level', obj.parents.length);\r\n\t\t\tnode.setAttribute('aria-labelledby', obj.a_attr.id);\r\n\t\t\tif(obj.state.disabled) {\r\n\t\t\t\tnode.setAttribute('aria-disabled', true);\r\n\t\t\t}\r\n\r\n\t\t\tfor(i = 0, j = obj.children.length; i < j; i++) {\r\n\t\t\t\tif(!m[obj.children[i]].state.hidden) {\r\n\t\t\t\t\thas_children = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(obj.parent !== null && m[obj.parent] && !obj.state.hidden) {\r\n\t\t\t\ti = langx.inArray(obj.id, m[obj.parent].children);\r\n\t\t\t\tlast_sibling = obj.id;\r\n\t\t\t\tif(i !== -1) {\r\n\t\t\t\t\ti++;\r\n\t\t\t\t\tfor(j = m[obj.parent].children.length; i < j; i++) {\r\n\t\t\t\t\t\tif(!m[m[obj.parent].children[i]].state.hidden) {\r\n\t\t\t\t\t\t\tlast_sibling = m[obj.parent].children[i];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(last_sibling !== obj.id) {\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif(obj.state.hidden) {\r\n\t\t\t\tc += ' jstree-hidden';\r\n\t\t\t}\r\n\t\t\tif (obj.state.loading) {\r\n\t\t\t\tc += ' jstree-loading';\r\n\t\t\t}\r\n\t\t\tif(obj.state.loaded && !has_children) {\r\n\t\t\t\tc += ' jstree-leaf';\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tc += obj.state.opened && obj.state.loaded ? ' jstree-open' : ' jstree-closed';\r\n\t\t\t\tnode.setAttribute('aria-expanded', (obj.state.opened && obj.state.loaded) );\r\n\t\t\t}\r\n\t\t\tif(last_sibling === obj.id) {\r\n\t\t\t\tc += ' jstree-last';\r\n\t\t\t}\r\n\t\t\tnode.id = obj.id;\r\n\t\t\tnode.className = c;\r\n\t\t\tc = ( obj.state.selected ? ' jstree-clicked' : '') + ( obj.state.disabled ? ' jstree-disabled' : '');\r\n\t\t\tfor(j in obj.a_attr) {\r\n\t\t\t\tif(obj.a_attr.hasOwnProperty(j)) {\r\n\t\t\t\t\tif(j === 'href' && obj.a_attr[j] === '#') { continue; }\r\n\t\t\t\t\tif(j !== 'class') {\r\n\t\t\t\t\t\tnode.childNodes[1].setAttribute(j, obj.a_attr[j]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tc += ' ' + obj.a_attr[j];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(c.length) {\r\n\t\t\t\tnode.childNodes[1].className = 'jstree-anchor ' + c;\r\n\t\t\t}\r\n\t\t\tif((obj.icon && obj.icon !== true) || obj.icon === false) {\r\n\t\t\t\tif(obj.icon === false) {\r\n\t\t\t\t\tnode.childNodes[1].childNodes[0].className += ' jstree-themeicon-hidden';\r\n\t\t\t\t}\r\n\t\t\t\telse if(obj.icon.indexOf('/') === -1 && obj.icon.indexOf('.') === -1) {\r\n\t\t\t\t\tnode.childNodes[1].childNodes[0].className += ' ' + obj.icon + ' jstree-themeicon-custom';\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tnode.childNodes[1].childNodes[0].style.backgroundImage = 'url(\"'+obj.icon+'\")';\r\n\t\t\t\t\tnode.childNodes[1].childNodes[0].style.backgroundPosition = 'center center';\r\n\t\t\t\t\tnode.childNodes[1].childNodes[0].style.backgroundSize = 'auto';\r\n\t\t\t\t\tnode.childNodes[1].childNodes[0].className += ' jstree-themeicon-custom';\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif(this.settings.core.force_text) {\r\n\t\t\t\tnode.childNodes[1].appendChild(d.createTextNode(obj.text));\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tnode.childNodes[1].innerHTML += obj.text;\r\n\t\t\t}\r\n\r\n\r\n\t\t\tif(deep && obj.children.length && (obj.state.opened || force_render) && obj.state.loaded) {\r\n\t\t\t\tk = d.createElement('UL');\r\n\t\t\t\tk.setAttribute('role', 'group');\r\n\t\t\t\tk.className = 'jstree-children';\r\n\t\t\t\tfor(i = 0, j = obj.children.length; i < j; i++) {\r\n\t\t\t\t\tk.appendChild(this.redraw_node(obj.children[i], deep, true));\r\n\t\t\t\t}\r\n\t\t\t\tnode.appendChild(k);\r\n\t\t\t}\r\n\t\t\tif(old) {\r\n\t\t\t\tnode.appendChild(old);\r\n\t\t\t}\r\n\t\t\tif(!is_callback) {\r\n\t\t\t\t// append back using par / ind\r\n\t\t\t\tif(!par) {\r\n\t\t\t\t\tpar = this.element[0];\r\n\t\t\t\t}\r\n\t\t\t\tfor(i = 0, j = par.childNodes.length; i < j; i++) {\r\n\t\t\t\t\tif(par.childNodes[i] && par.childNodes[i].className && par.childNodes[i].className.indexOf('jstree-children') !== -1) {\r\n\t\t\t\t\t\ttmp = par.childNodes[i];\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif(!tmp) {\r\n\t\t\t\t\ttmp = d.createElement('UL');\r\n\t\t\t\t\ttmp.setAttribute('role', 'group');\r\n\t\t\t\t\ttmp.className = 'jstree-children';\r\n\t\t\t\t\tpar.appendChild(tmp);\r\n\t\t\t\t}\r\n\t\t\t\tpar = tmp;\r\n\r\n\t\t\t\tif(ind < par.childNodes.length) {\r\n\t\t\t\t\tpar.insertBefore(node, par.childNodes[ind]);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tpar.appendChild(node);\r\n\t\t\t\t}\r\n\t\t\t\tif(f) {\r\n\t\t\t\t\tt = this.element[0].scrollTop;\r\n\t\t\t\t\tl = this.element[0].scrollLeft;\r\n\t\t\t\t\tnode.childNodes[1].focus();\r\n\t\t\t\t\tthis.element[0].scrollTop = t;\r\n\t\t\t\t\tthis.element[0].scrollLeft = l;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(obj.state.opened && !obj.state.loaded) {\r\n\t\t\t\tobj.state.opened = false;\r\n\t\t\t\tsetTimeout(langx.proxy(function () {\r\n\t\t\t\t\tthis.open_node(obj.id, false, 0);\r\n\t\t\t\t}, this), 0);\r\n\t\t\t}\r\n\t\t\treturn node;\r\n\t\t},\r\n\t\t/**\r\n\t\t * opens a node, revaling its children. If the node is not loaded it will be loaded and opened once ready.\r\n\t\t * @name open_node(obj [, callback, animation])\r\n\t\t * @param {mixed} obj the node to open\r\n\t\t * @param {Function} callback a function to execute once the node is opened\r\n\t\t * @param {Number} animation the animation duration in milliseconds when opening the node (overrides the `core.animation` setting). Use `false` for no animation.\r\n\t\t * @trigger open_node.jstree, after_open.jstree, before_open.jstree\r\n\t\t */\r\n\t\topen_node : function (obj, callback, animation) {\r\n\t\t\tvar t1, t2, d, t;\r\n\t\t\tif(langx.isArray(obj)) {\r\n\t\t\t\tobj = obj.slice();\r\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\r\n\t\t\t\t\tthis.open_node(obj[t1], callback, animation);\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tanimation = animation === undefined ? this.settings.core.animation : animation;\r\n\t\t\tif(!this.is_closed(obj)) {\r\n\t\t\t\tif(callback) {\r\n\t\t\t\t\tcallback.call(this, obj, false);\r\n\t\t\t\t}\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif(!this.is_loaded(obj)) {\r\n\t\t\t\tif(this.is_loading(obj)) {\r\n\t\t\t\t\treturn setTimeout(langx.proxy(function () {\r\n\t\t\t\t\t\tthis.open_node(obj, callback, animation);\r\n\t\t\t\t\t}, this), 500);\r\n\t\t\t\t}\r\n\t\t\t\tthis.load_node(obj, function (o, ok) {\r\n\t\t\t\t\treturn ok ? this.open_node(o, callback, animation) : (callback ? callback.call(this, o, false) : false);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\td = this.get_node(obj, true);\r\n\t\t\t\tt = this;\r\n\t\t\t\tif(d.length) {\r\n\t\t\t\t\tif(animation && d.children(\".jstree-children\").length) {\r\n\t\t\t\t\t\td.children(\".jstree-children\").stop(true, true);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(obj.children.length && !this._firstChild(d.children('.jstree-children')[0])) {\r\n\t\t\t\t\t\tthis.draw_children(obj);\r\n\t\t\t\t\t\t//d = this.get_node(obj, true);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(!animation) {\r\n\t\t\t\t\t\tthis.trigger('before_open', { \"node\" : obj });\r\n\t\t\t\t\t\td[0].className = d[0].className.replace('jstree-closed', 'jstree-open');\r\n\t\t\t\t\t\td[0].setAttribute(\"aria-expanded\", true);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tthis.trigger('before_open', { \"node\" : obj });\r\n\t\t\t\t\t\td\r\n\t\t\t\t\t\t\t.children(\".jstree-children\").css(\"display\",\"none\").end()\r\n\t\t\t\t\t\t\t.removeClass(\"jstree-closed\").addClass(\"jstree-open\").attr(\"aria-expanded\", true)\r\n\t\t\t\t\t\t\t.children(\".jstree-children\").stop(true, true)\r\n\t\t\t\t\t\t\t\t.slideDown(animation, function () {\r\n\t\t\t\t\t\t\t\t\tthis.style.display = \"\";\r\n\t\t\t\t\t\t\t\t\tif (t.element) {\r\n\t\t\t\t\t\t\t\t\t\tt.trigger(\"after_open\", { \"node\" : obj });\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tobj.state.opened = true;\r\n\t\t\t\tif(callback) {\r\n\t\t\t\t\tcallback.call(this, obj, true);\r\n\t\t\t\t}\r\n\t\t\t\tif(!d.length) {\r\n\t\t\t\t\t/**\r\n\t\t\t\t\t * triggered when a node is about to be opened (if the node is supposed to be in the DOM, it will be, but it won't be visible yet)\r\n\t\t\t\t\t * @event\r\n\t\t\t\t\t * @name before_open.jstree\r\n\t\t\t\t\t * @param {Object} node the opened node\r\n\t\t\t\t\t */\r\n\t\t\t\t\tthis.trigger('before_open', { \"node\" : obj });\r\n\t\t\t\t}\r\n\t\t\t\t/**\r\n\t\t\t\t * triggered when a node is opened (if there is an animation it will not be completed yet)\r\n\t\t\t\t * @event\r\n\t\t\t\t * @name open_node.jstree\r\n\t\t\t\t * @param {Object} node the opened node\r\n\t\t\t\t */\r\n\t\t\t\tthis.trigger('open_node', { \"node\" : obj });\r\n\t\t\t\tif(!animation || !d.length) {\r\n\t\t\t\t\t/**\r\n\t\t\t\t\t * triggered when a node is opened and the animation is complete\r\n\t\t\t\t\t * @event\r\n\t\t\t\t\t * @name after_open.jstree\r\n\t\t\t\t\t * @param {Object} node the opened node\r\n\t\t\t\t\t */\r\n\t\t\t\t\tthis.trigger(\"after_open\", { \"node\" : obj });\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t},\r\n\t\t/**\r\n\t\t * opens every parent of a node (node should be loaded)\r\n\t\t * @name _open_to(obj)\r\n\t\t * @param {mixed} obj the node to reveal\r\n\t\t * @private\r\n\t\t */\r\n\t\t_open_to : function (obj) {\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tvar i, j, p = obj.parents;\r\n\t\t\tfor(i = 0, j = p.length; i < j; i+=1) {\r\n\t\t\t\tif(i !== $.jstree.root) {\r\n\t\t\t\t\tthis.open_node(p[i], false, 0);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn $('#' + obj.id.replace($.jstree.idregex,'\\\\$&'), this.element);\r\n\t\t},\r\n\t\t/**\r\n\t\t * closes a node, hiding its children\r\n\t\t * @name close_node(obj [, animation])\r\n\t\t * @param {mixed} obj the node to close\r\n\t\t * @param {Number} animation the animation duration in milliseconds when closing the node (overrides the `core.animation` setting). Use `false` for no animation.\r\n\t\t * @trigger close_node.jstree, after_close.jstree\r\n\t\t */\r\n\t\tclose_node : function (obj, animation) {\r\n\t\t\tvar t1, t2, t, d;\r\n\t\t\tif(langx.isArray(obj)) {\r\n\t\t\t\tobj = obj.slice();\r\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\r\n\t\t\t\t\tthis.close_node(obj[t1], animation);\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif(this.is_closed(obj)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tanimation = animation === undefined ? this.settings.core.animation : animation;\r\n\t\t\tt = this;\r\n\t\t\td = this.get_node(obj, true);\r\n\r\n\t\t\tobj.state.opened = false;\r\n\t\t\t/**\r\n\t\t\t * triggered when a node is closed (if there is an animation it will not be complete yet)\r\n\t\t\t * @event\r\n\t\t\t * @name close_node.jstree\r\n\t\t\t * @param {Object} node the closed node\r\n\t\t\t */\r\n\t\t\tthis.trigger('close_node',{ \"node\" : obj });\r\n\t\t\tif(!d.length) {\r\n\t\t\t\t/**\r\n\t\t\t\t * triggered when a node is closed and the animation is complete\r\n\t\t\t\t * @event\r\n\t\t\t\t * @name after_close.jstree\r\n\t\t\t\t * @param {Object} node the closed node\r\n\t\t\t\t */\r\n\t\t\t\tthis.trigger(\"after_close\", { \"node\" : obj });\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif(!animation) {\r\n\t\t\t\t\td[0].className = d[0].className.replace('jstree-open', 'jstree-closed');\r\n\t\t\t\t\td.attr(\"aria-expanded\", false).children('.jstree-children').remove();\r\n\t\t\t\t\tthis.trigger(\"after_close\", { \"node\" : obj });\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\td\r\n\t\t\t\t\t\t.children(\".jstree-children\").attr(\"style\",\"display:block !important\").end()\r\n\t\t\t\t\t\t.removeClass(\"jstree-open\").addClass(\"jstree-closed\").attr(\"aria-expanded\", false)\r\n\t\t\t\t\t\t.children(\".jstree-children\").stop(true, true).slideUp(animation, function () {\r\n\t\t\t\t\t\t\tthis.style.display = \"\";\r\n\t\t\t\t\t\t\td.children('.jstree-children').remove();\r\n\t\t\t\t\t\t\tif (t.element) {\r\n\t\t\t\t\t\t\t\tt.trigger(\"after_close\", { \"node\" : obj });\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\t/**\r\n\t\t * toggles a node - closing it if it is open, opening it if it is closed\r\n\t\t * @name toggle_node(obj)\r\n\t\t * @param {mixed} obj the node to toggle\r\n\t\t */\r\n\t\ttoggle_node : function (obj) {\r\n\t\t\tvar t1, t2;\r\n\t\t\tif(langx.isArray(obj)) {\r\n\t\t\t\tobj = obj.slice();\r\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\r\n\t\t\t\t\tthis.toggle_node(obj[t1]);\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tif(this.is_closed(obj)) {\r\n\t\t\t\treturn this.open_node(obj);\r\n\t\t\t}\r\n\t\t\tif(this.is_open(obj)) {\r\n\t\t\t\treturn this.close_node(obj);\r\n\t\t\t}\r\n\t\t},\r\n\t\t/**\r\n\t\t * opens all nodes within a node (or the tree), revaling their children. If the node is not loaded it will be loaded and opened once ready.\r\n\t\t * @name open_all([obj, animation, original_obj])\r\n\t\t * @param {mixed} obj the node to open recursively, omit to open all nodes in the tree\r\n\t\t * @param {Number} animation the animation duration in milliseconds when opening the nodes, the default is no animation\r\n\t\t * @param {jQuery} reference to the node that started the process (internal use)\r\n\t\t * @trigger open_all.jstree\r\n\t\t */\r\n\t\topen_all : function (obj, animation, original_obj) {\r\n\t\t\tif(!obj) { obj = $.jstree.root; }\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj) { return false; }\r\n\t\t\tvar dom = obj.id === $.jstree.root ? this.get_container_ul() : this.get_node(obj, true), i, j, _this;\r\n\t\t\tif(!dom.length) {\r\n\t\t\t\tfor(i = 0, j = obj.children_d.length; i < j; i++) {\r\n\t\t\t\t\tif(this.is_closed(this._model.data[obj.children_d[i]])) {\r\n\t\t\t\t\t\tthis._model.data[obj.children_d[i]].state.opened = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn this.trigger('open_all', { \"node\" : obj });\r\n\t\t\t}\r\n\t\t\toriginal_obj = original_obj || dom;\r\n\t\t\t_this = this;\r\n\t\t\tdom = this.is_closed(obj) ? dom.find('.jstree-closed').addBack() : dom.find('.jstree-closed');\r\n\t\t\tdom.each(function () {\r\n\t\t\t\t_this.open_node(\r\n\t\t\t\t\tthis,\r\n\t\t\t\t\tfunction(node, status) { if(status && this.is_parent(node)) { this.open_all(node, animation, original_obj); } },\r\n\t\t\t\t\tanimation || 0\r\n\t\t\t\t);\r\n\t\t\t});\r\n\t\t\tif(original_obj.find('.jstree-closed').length === 0) {\r\n\t\t\t\t/**\r\n\t\t\t\t * triggered when an `open_all` call completes\r\n\t\t\t\t * @event\r\n\t\t\t\t * @name open_all.jstree\r\n\t\t\t\t * @param {Object} node the opened node\r\n\t\t\t\t */\r\n\t\t\t\tthis.trigger('open_all', { \"node\" : this.get_node(original_obj) });\r\n\t\t\t}\r\n\t\t},\r\n\t\t/**\r\n\t\t * closes all nodes within a node (or the tree), revaling their children\r\n\t\t * @name close_all([obj, animation])\r\n\t\t * @param {mixed} obj the node to close recursively, omit to close all nodes in the tree\r\n\t\t * @param {Number} animation the animation duration in milliseconds when closing the nodes, the default is no animation\r\n\t\t * @trigger close_all.jstree\r\n\t\t */\r\n\t\tclose_all : function (obj, animation) {\r\n\t\t\tif(!obj) { obj = $.jstree.root; }\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj) { return false; }\r\n\t\t\tvar dom = obj.id === $.jstree.root ? this.get_container_ul() : this.get_node(obj, true),\r\n\t\t\t\t_this = this, i, j;\r\n\t\t\tif(dom.length) {\r\n\t\t\t\tdom = this.is_open(obj) ? dom.find('.jstree-open').addBack() : dom.find('.jstree-open');\r\n\t\t\t\t$(dom.get().reverse()).each(function () { _this.close_node(this, animation || 0); });\r\n\t\t\t}\r\n\t\t\tfor(i = 0, j = obj.children_d.length; i < j; i++) {\r\n\t\t\t\tthis._model.data[obj.children_d[i]].state.opened = false;\r\n\t\t\t}\r\n\t\t\t/**\r\n\t\t\t * triggered when an `close_all` call completes\r\n\t\t\t * @event\r\n\t\t\t * @name close_all.jstree\r\n\t\t\t * @param {Object} node the closed node\r\n\t\t\t */\r\n\t\t\tthis.trigger('close_all', { \"node\" : obj });\r\n\t\t},\r\n\t\t/**\r\n\t\t * checks if a node is disabled (not selectable)\r\n\t\t * @name is_disabled(obj)\r\n\t\t * @param  {mixed} obj\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tis_disabled : function (obj) {\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\treturn obj && obj.state && obj.state.disabled;\r\n\t\t},\r\n\t\t/**\r\n\t\t * enables a node - so that it can be selected\r\n\t\t * @name enable_node(obj)\r\n\t\t * @param {mixed} obj the node to enable\r\n\t\t * @trigger enable_node.jstree\r\n\t\t */\r\n\t\tenable_node : function (obj) {\r\n\t\t\tvar t1, t2;\r\n\t\t\tif(langx.isArray(obj)) {\r\n\t\t\t\tobj = obj.slice();\r\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\r\n\t\t\t\t\tthis.enable_node(obj[t1]);\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tobj.state.disabled = false;\r\n\t\t\tthis.get_node(obj,true).children('.jstree-anchor').removeClass('jstree-disabled').attr('aria-disabled', false);\r\n\t\t\t/**\r\n\t\t\t * triggered when an node is enabled\r\n\t\t\t * @event\r\n\t\t\t * @name enable_node.jstree\r\n\t\t\t * @param {Object} node the enabled node\r\n\t\t\t */\r\n\t\t\tthis.trigger('enable_node', { 'node' : obj });\r\n\t\t},\r\n\t\t/**\r\n\t\t * disables a node - so that it can not be selected\r\n\t\t * @name disable_node(obj)\r\n\t\t * @param {mixed} obj the node to disable\r\n\t\t * @trigger disable_node.jstree\r\n\t\t */\r\n\t\tdisable_node : function (obj) {\r\n\t\t\tvar t1, t2;\r\n\t\t\tif(langx.isArray(obj)) {\r\n\t\t\t\tobj = obj.slice();\r\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\r\n\t\t\t\t\tthis.disable_node(obj[t1]);\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tobj.state.disabled = true;\r\n\t\t\tthis.get_node(obj,true).children('.jstree-anchor').addClass('jstree-disabled').attr('aria-disabled', true);\r\n\t\t\t/**\r\n\t\t\t * triggered when an node is disabled\r\n\t\t\t * @event\r\n\t\t\t * @name disable_node.jstree\r\n\t\t\t * @param {Object} node the disabled node\r\n\t\t\t */\r\n\t\t\tthis.trigger('disable_node', { 'node' : obj });\r\n\t\t},\r\n\t\t/**\r\n\t\t * determines if a node is hidden\r\n\t\t * @name is_hidden(obj)\r\n\t\t * @param {mixed} obj the node\r\n\t\t */\r\n\t\tis_hidden : function (obj) {\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\treturn obj.state.hidden === true;\r\n\t\t},\r\n\t\t/**\r\n\t\t * hides a node - it is still in the structure but will not be visible\r\n\t\t * @name hide_node(obj)\r\n\t\t * @param {mixed} obj the node to hide\r\n\t\t * @param {Boolean} skip_redraw internal parameter controlling if redraw is called\r\n\t\t * @trigger hide_node.jstree\r\n\t\t */\r\n\t\thide_node : function (obj, skip_redraw) {\r\n\t\t\tvar t1, t2;\r\n\t\t\tif(langx.isArray(obj)) {\r\n\t\t\t\tobj = obj.slice();\r\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\r\n\t\t\t\t\tthis.hide_node(obj[t1], true);\r\n\t\t\t\t}\r\n\t\t\t\tif (!skip_redraw) {\r\n\t\t\t\t\tthis.redraw();\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif(!obj.state.hidden) {\r\n\t\t\t\tobj.state.hidden = true;\r\n\t\t\t\tthis._node_changed(obj.parent);\r\n\t\t\t\tif(!skip_redraw) {\r\n\t\t\t\t\tthis.redraw();\r\n\t\t\t\t}\r\n\t\t\t\t/**\r\n\t\t\t\t * triggered when an node is hidden\r\n\t\t\t\t * @event\r\n\t\t\t\t * @name hide_node.jstree\r\n\t\t\t\t * @param {Object} node the hidden node\r\n\t\t\t\t */\r\n\t\t\t\tthis.trigger('hide_node', { 'node' : obj });\r\n\t\t\t}\r\n\t\t},\r\n\t\t/**\r\n\t\t * shows a node\r\n\t\t * @name show_node(obj)\r\n\t\t * @param {mixed} obj the node to show\r\n\t\t * @param {Boolean} skip_redraw internal parameter controlling if redraw is called\r\n\t\t * @trigger show_node.jstree\r\n\t\t */\r\n\t\tshow_node : function (obj, skip_redraw) {\r\n\t\t\tvar t1, t2;\r\n\t\t\tif(langx.isArray(obj)) {\r\n\t\t\t\tobj = obj.slice();\r\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\r\n\t\t\t\t\tthis.show_node(obj[t1], true);\r\n\t\t\t\t}\r\n\t\t\t\tif (!skip_redraw) {\r\n\t\t\t\t\tthis.redraw();\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif(obj.state.hidden) {\r\n\t\t\t\tobj.state.hidden = false;\r\n\t\t\t\tthis._node_changed(obj.parent);\r\n\t\t\t\tif(!skip_redraw) {\r\n\t\t\t\t\tthis.redraw();\r\n\t\t\t\t}\r\n\t\t\t\t/**\r\n\t\t\t\t * triggered when an node is shown\r\n\t\t\t\t * @event\r\n\t\t\t\t * @name show_node.jstree\r\n\t\t\t\t * @param {Object} node the shown node\r\n\t\t\t\t */\r\n\t\t\t\tthis.trigger('show_node', { 'node' : obj });\r\n\t\t\t}\r\n\t\t},\r\n\t\t/**\r\n\t\t * hides all nodes\r\n\t\t * @name hide_all()\r\n\t\t * @trigger hide_all.jstree\r\n\t\t */\r\n\t\thide_all : function (skip_redraw) {\r\n\t\t\tvar i, m = this._model.data, ids = [];\r\n\t\t\tfor(i in m) {\r\n\t\t\t\tif(m.hasOwnProperty(i) && i !== $.jstree.root && !m[i].state.hidden) {\r\n\t\t\t\t\tm[i].state.hidden = true;\r\n\t\t\t\t\tids.push(i);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis._model.force_full_redraw = true;\r\n\t\t\tif(!skip_redraw) {\r\n\t\t\t\tthis.redraw();\r\n\t\t\t}\r\n\t\t\t/**\r\n\t\t\t * triggered when all nodes are hidden\r\n\t\t\t * @event\r\n\t\t\t * @name hide_all.jstree\r\n\t\t\t * @param {Array} nodes the IDs of all hidden nodes\r\n\t\t\t */\r\n\t\t\tthis.trigger('hide_all', { 'nodes' : ids });\r\n\t\t\treturn ids;\r\n\t\t},\r\n\t\t/**\r\n\t\t * shows all nodes\r\n\t\t * @name show_all()\r\n\t\t * @trigger show_all.jstree\r\n\t\t */\r\n\t\tshow_all : function (skip_redraw) {\r\n\t\t\tvar i, m = this._model.data, ids = [];\r\n\t\t\tfor(i in m) {\r\n\t\t\t\tif(m.hasOwnProperty(i) && i !== $.jstree.root && m[i].state.hidden) {\r\n\t\t\t\t\tm[i].state.hidden = false;\r\n\t\t\t\t\tids.push(i);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis._model.force_full_redraw = true;\r\n\t\t\tif(!skip_redraw) {\r\n\t\t\t\tthis.redraw();\r\n\t\t\t}\r\n\t\t\t/**\r\n\t\t\t * triggered when all nodes are shown\r\n\t\t\t * @event\r\n\t\t\t * @name show_all.jstree\r\n\t\t\t * @param {Array} nodes the IDs of all shown nodes\r\n\t\t\t */\r\n\t\t\tthis.trigger('show_all', { 'nodes' : ids });\r\n\t\t\treturn ids;\r\n\t\t},\r\n\t\t/**\r\n\t\t * called when a node is selected by the user. Used internally.\r\n\t\t * @private\r\n\t\t * @name activate_node(obj, e)\r\n\t\t * @param {mixed} obj the node\r\n\t\t * @param {Object} e the related event\r\n\t\t * @trigger activate_node.jstree, changed.jstree\r\n\t\t */\r\n\t\tactivate_node : function (obj, e) {\r\n\t\t\tif(this.is_disabled(obj)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif(!e || typeof e !== 'object') {\r\n\t\t\t\te = {};\r\n\t\t\t}\r\n\r\n\t\t\t// ensure last_clicked is still in the DOM, make it fresh (maybe it was moved?) and make sure it is still selected, if not - make last_clicked the last selected node\r\n\t\t\tthis._data.core.last_clicked = this._data.core.last_clicked && this._data.core.last_clicked.id !== undefined ? this.get_node(this._data.core.last_clicked.id) : null;\r\n\t\t\tif(this._data.core.last_clicked && !this._data.core.last_clicked.state.selected) { this._data.core.last_clicked = null; }\r\n\t\t\tif(!this._data.core.last_clicked && this._data.core.selected.length) { this._data.core.last_clicked = this.get_node(this._data.core.selected[this._data.core.selected.length - 1]); }\r\n\r\n\t\t\tif(!this.settings.core.multiple || (!e.metaKey && !e.ctrlKey && !e.shiftKey) || (e.shiftKey && (!this._data.core.last_clicked || !this.get_parent(obj) || this.get_parent(obj) !== this._data.core.last_clicked.parent ) )) {\r\n\t\t\t\tif(!this.settings.core.multiple && (e.metaKey || e.ctrlKey || e.shiftKey) && this.is_selected(obj)) {\r\n\t\t\t\t\tthis.deselect_node(obj, false, e);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.deselect_all(true);\r\n\t\t\t\t\tthis.select_node(obj, false, false, e);\r\n\t\t\t\t\tthis._data.core.last_clicked = this.get_node(obj);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif(e.shiftKey) {\r\n\t\t\t\t\tvar o = this.get_node(obj).id,\r\n\t\t\t\t\t\tl = this._data.core.last_clicked.id,\r\n\t\t\t\t\t\tp = this.get_node(this._data.core.last_clicked.parent).children,\r\n\t\t\t\t\t\tc = false,\r\n\t\t\t\t\t\ti, j;\r\n\t\t\t\t\tfor(i = 0, j = p.length; i < j; i += 1) {\r\n\t\t\t\t\t\t// separate IFs work whem o and l are the same\r\n\t\t\t\t\t\tif(p[i] === o) {\r\n\t\t\t\t\t\t\tc = !c;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(p[i] === l) {\r\n\t\t\t\t\t\t\tc = !c;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(!this.is_disabled(p[i]) && (c || p[i] === o || p[i] === l)) {\r\n\t\t\t\t\t\t\tif (!this.is_hidden(p[i])) {\r\n\t\t\t\t\t\t\t\tthis.select_node(p[i], true, false, e);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tthis.deselect_node(p[i], true, e);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.trigger('changed', { 'action' : 'select_node', 'node' : this.get_node(obj), 'selected' : this._data.core.selected, 'event' : e });\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tif(!this.is_selected(obj)) {\r\n\t\t\t\t\t\tthis.select_node(obj, false, false, e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tthis.deselect_node(obj, false, e);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t/**\r\n\t\t\t * triggered when an node is clicked or intercated with by the user\r\n\t\t\t * @event\r\n\t\t\t * @name activate_node.jstree\r\n\t\t\t * @param {Object} node\r\n\t\t\t * @param {Object} event the ooriginal event (if any) which triggered the call (may be an empty object)\r\n\t\t\t */\r\n\t\t\tthis.trigger('activate_node', { 'node' : this.get_node(obj), 'event' : e });\r\n\t\t},\r\n\t\t/**\r\n\t\t * applies the hover state on a node, called when a node is hovered by the user. Used internally.\r\n\t\t * @private\r\n\t\t * @name hover_node(obj)\r\n\t\t * @param {mixed} obj\r\n\t\t * @trigger hover_node.jstree\r\n\t\t */\r\n\t\thover_node : function (obj) {\r\n\t\t\tobj = this.get_node(obj, true);\r\n\t\t\tif(!obj || !obj.length || obj.children('.jstree-hovered').length) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tvar o = this.element.find('.jstree-hovered'), t = this.element;\r\n\t\t\tif(o && o.length) { this.dehover_node(o); }\r\n\r\n\t\t\tobj.children('.jstree-anchor').addClass('jstree-hovered');\r\n\t\t\t/**\r\n\t\t\t * triggered when an node is hovered\r\n\t\t\t * @event\r\n\t\t\t * @name hover_node.jstree\r\n\t\t\t * @param {Object} node\r\n\t\t\t */\r\n\t\t\tthis.trigger('hover_node', { 'node' : this.get_node(obj) });\r\n\t\t\tsetTimeout(function () { t.attr('aria-activedescendant', obj[0].id); }, 0);\r\n\t\t},\r\n\t\t/**\r\n\t\t * removes the hover state from a nodecalled when a node is no longer hovered by the user. Used internally.\r\n\t\t * @private\r\n\t\t * @name dehover_node(obj)\r\n\t\t * @param {mixed} obj\r\n\t\t * @trigger dehover_node.jstree\r\n\t\t */\r\n\t\tdehover_node : function (obj) {\r\n\t\t\tobj = this.get_node(obj, true);\r\n\t\t\tif(!obj || !obj.length || !obj.children('.jstree-hovered').length) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tobj.children('.jstree-anchor').removeClass('jstree-hovered');\r\n\t\t\t/**\r\n\t\t\t * triggered when an node is no longer hovered\r\n\t\t\t * @event\r\n\t\t\t * @name dehover_node.jstree\r\n\t\t\t * @param {Object} node\r\n\t\t\t */\r\n\t\t\tthis.trigger('dehover_node', { 'node' : this.get_node(obj) });\r\n\t\t},\r\n\t\t/**\r\n\t\t * select a node\r\n\t\t * @name select_node(obj [, supress_event, prevent_open])\r\n\t\t * @param {mixed} obj an array can be used to select multiple nodes\r\n\t\t * @param {Boolean} supress_event if set to `true` the `changed.jstree` event won't be triggered\r\n\t\t * @param {Boolean} prevent_open if set to `true` parents of the selected node won't be opened\r\n\t\t * @trigger select_node.jstree, changed.jstree\r\n\t\t */\r\n\t\tselect_node : function (obj, supress_event, prevent_open, e) {\r\n\t\t\tvar dom, t1, t2, th;\r\n\t\t\tif(langx.isArray(obj)) {\r\n\t\t\t\tobj = obj.slice();\r\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\r\n\t\t\t\t\tthis.select_node(obj[t1], supress_event, prevent_open, e);\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tdom = this.get_node(obj, true);\r\n\t\t\tif(!obj.state.selected) {\r\n\t\t\t\tobj.state.selected = true;\r\n\t\t\t\tthis._data.core.selected.push(obj.id);\r\n\t\t\t\tif(!prevent_open) {\r\n\t\t\t\t\tdom = this._open_to(obj);\r\n\t\t\t\t}\r\n\t\t\t\tif(dom && dom.length) {\r\n\t\t\t\t\tdom.attr('aria-selected', true).children('.jstree-anchor').addClass('jstree-clicked');\r\n\t\t\t\t}\r\n\t\t\t\t/**\r\n\t\t\t\t * triggered when an node is selected\r\n\t\t\t\t * @event\r\n\t\t\t\t * @name select_node.jstree\r\n\t\t\t\t * @param {Object} node\r\n\t\t\t\t * @param {Array} selected the current selection\r\n\t\t\t\t * @param {Object} event the event (if any) that triggered this select_node\r\n\t\t\t\t */\r\n\t\t\t\tthis.trigger('select_node', { 'node' : obj, 'selected' : this._data.core.selected, 'event' : e });\r\n\t\t\t\tif(!supress_event) {\r\n\t\t\t\t\t/**\r\n\t\t\t\t\t * triggered when selection changes\r\n\t\t\t\t\t * @event\r\n\t\t\t\t\t * @name changed.jstree\r\n\t\t\t\t\t * @param {Object} node\r\n\t\t\t\t\t * @param {Object} action the action that caused the selection to change\r\n\t\t\t\t\t * @param {Array} selected the current selection\r\n\t\t\t\t\t * @param {Object} event the event (if any) that triggered this changed event\r\n\t\t\t\t\t */\r\n\t\t\t\t\tthis.trigger('changed', { 'action' : 'select_node', 'node' : obj, 'selected' : this._data.core.selected, 'event' : e });\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\t/**\r\n\t\t * deselect a node\r\n\t\t * @name deselect_node(obj [, supress_event])\r\n\t\t * @param {mixed} obj an array can be used to deselect multiple nodes\r\n\t\t * @param {Boolean} supress_event if set to `true` the `changed.jstree` event won't be triggered\r\n\t\t * @trigger deselect_node.jstree, changed.jstree\r\n\t\t */\r\n\t\tdeselect_node : function (obj, supress_event, e) {\r\n\t\t\tvar t1, t2, dom;\r\n\t\t\tif(langx.isArray(obj)) {\r\n\t\t\t\tobj = obj.slice();\r\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\r\n\t\t\t\t\tthis.deselect_node(obj[t1], supress_event, e);\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tdom = this.get_node(obj, true);\r\n\t\t\tif(obj.state.selected) {\r\n\t\t\t\tobj.state.selected = false;\r\n\t\t\t\tthis._data.core.selected = $.vakata.array_remove_item(this._data.core.selected, obj.id);\r\n\t\t\t\tif(dom.length) {\r\n\t\t\t\t\tdom.attr('aria-selected', false).children('.jstree-anchor').removeClass('jstree-clicked');\r\n\t\t\t\t}\r\n\t\t\t\t/**\r\n\t\t\t\t * triggered when an node is deselected\r\n\t\t\t\t * @event\r\n\t\t\t\t * @name deselect_node.jstree\r\n\t\t\t\t * @param {Object} node\r\n\t\t\t\t * @param {Array} selected the current selection\r\n\t\t\t\t * @param {Object} event the event (if any) that triggered this deselect_node\r\n\t\t\t\t */\r\n\t\t\t\tthis.trigger('deselect_node', { 'node' : obj, 'selected' : this._data.core.selected, 'event' : e });\r\n\t\t\t\tif(!supress_event) {\r\n\t\t\t\t\tthis.trigger('changed', { 'action' : 'deselect_node', 'node' : obj, 'selected' : this._data.core.selected, 'event' : e });\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\t/**\r\n\t\t * select all nodes in the tree\r\n\t\t * @name select_all([supress_event])\r\n\t\t * @param {Boolean} supress_event if set to `true` the `changed.jstree` event won't be triggered\r\n\t\t * @trigger select_all.jstree, changed.jstree\r\n\t\t */\r\n\t\tselect_all : function (supress_event) {\r\n\t\t\tvar tmp = this._data.core.selected.concat([]), i, j;\r\n\t\t\tthis._data.core.selected = this._model.data[$.jstree.root].children_d.concat();\r\n\t\t\tfor(i = 0, j = this._data.core.selected.length; i < j; i++) {\r\n\t\t\t\tif(this._model.data[this._data.core.selected[i]]) {\r\n\t\t\t\t\tthis._model.data[this._data.core.selected[i]].state.selected = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.redraw(true);\r\n\t\t\t/**\r\n\t\t\t * triggered when all nodes are selected\r\n\t\t\t * @event\r\n\t\t\t * @name select_all.jstree\r\n\t\t\t * @param {Array} selected the current selection\r\n\t\t\t */\r\n\t\t\tthis.trigger('select_all', { 'selected' : this._data.core.selected });\r\n\t\t\tif(!supress_event) {\r\n\t\t\t\tthis.trigger('changed', { 'action' : 'select_all', 'selected' : this._data.core.selected, 'old_selection' : tmp });\r\n\t\t\t}\r\n\t\t},\r\n\t\t/**\r\n\t\t * deselect all selected nodes\r\n\t\t * @name deselect_all([supress_event])\r\n\t\t * @param {Boolean} supress_event if set to `true` the `changed.jstree` event won't be triggered\r\n\t\t * @trigger deselect_all.jstree, changed.jstree\r\n\t\t */\r\n\t\tdeselect_all : function (supress_event) {\r\n\t\t\tvar tmp = this._data.core.selected.concat([]), i, j;\r\n\t\t\tfor(i = 0, j = this._data.core.selected.length; i < j; i++) {\r\n\t\t\t\tif(this._model.data[this._data.core.selected[i]]) {\r\n\t\t\t\t\tthis._model.data[this._data.core.selected[i]].state.selected = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis._data.core.selected = [];\r\n\t\t\tthis.element.find('.jstree-clicked').removeClass('jstree-clicked').parent().attr('aria-selected', false);\r\n\t\t\t/**\r\n\t\t\t * triggered when all nodes are deselected\r\n\t\t\t * @event\r\n\t\t\t * @name deselect_all.jstree\r\n\t\t\t * @param {Object} node the previous selection\r\n\t\t\t * @param {Array} selected the current selection\r\n\t\t\t */\r\n\t\t\tthis.trigger('deselect_all', { 'selected' : this._data.core.selected, 'node' : tmp });\r\n\t\t\tif(!supress_event) {\r\n\t\t\t\tthis.trigger('changed', { 'action' : 'deselect_all', 'selected' : this._data.core.selected, 'old_selection' : tmp });\r\n\t\t\t}\r\n\t\t},\r\n\t\t/**\r\n\t\t * checks if a node is selected\r\n\t\t * @name is_selected(obj)\r\n\t\t * @param  {mixed}  obj\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tis_selected : function (obj) {\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\treturn obj.state.selected;\r\n\t\t},\r\n\t\t/**\r\n\t\t * get an array of all selected nodes\r\n\t\t * @name get_selected([full])\r\n\t\t * @param  {mixed}  full if set to `true` the returned array will consist of the full node objects, otherwise - only IDs will be returned\r\n\t\t * @return {Array}\r\n\t\t */\r\n\t\tget_selected : function (full) {\r\n\t\t\treturn full ? langx.map(this._data.core.selected, langx.proxy(function (i) { return this.get_node(i); }, this)) : this._data.core.selected.slice();\r\n\t\t},\r\n\t\t/**\r\n\t\t * get an array of all top level selected nodes (ignoring children of selected nodes)\r\n\t\t * @name get_top_selected([full])\r\n\t\t * @param  {mixed}  full if set to `true` the returned array will consist of the full node objects, otherwise - only IDs will be returned\r\n\t\t * @return {Array}\r\n\t\t */\r\n\t\tget_top_selected : function (full) {\r\n\t\t\tvar tmp = this.get_selected(true),\r\n\t\t\t\tobj = {}, i, j, k, l;\r\n\t\t\tfor(i = 0, j = tmp.length; i < j; i++) {\r\n\t\t\t\tobj[tmp[i].id] = tmp[i];\r\n\t\t\t}\r\n\t\t\tfor(i = 0, j = tmp.length; i < j; i++) {\r\n\t\t\t\tfor(k = 0, l = tmp[i].children_d.length; k < l; k++) {\r\n\t\t\t\t\tif(obj[tmp[i].children_d[k]]) {\r\n\t\t\t\t\t\tdelete obj[tmp[i].children_d[k]];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\ttmp = [];\r\n\t\t\tfor(i in obj) {\r\n\t\t\t\tif(obj.hasOwnProperty(i)) {\r\n\t\t\t\t\ttmp.push(i);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn full ? langx.map(tmp, langx.proxy(function (i) { return this.get_node(i); }, this)) : tmp;\r\n\t\t},\r\n\t\t/**\r\n\t\t * get an array of all bottom level selected nodes (ignoring selected parents)\r\n\t\t * @name get_bottom_selected([full])\r\n\t\t * @param  {mixed}  full if set to `true` the returned array will consist of the full node objects, otherwise - only IDs will be returned\r\n\t\t * @return {Array}\r\n\t\t */\r\n\t\tget_bottom_selected : function (full) {\r\n\t\t\tvar tmp = this.get_selected(true),\r\n\t\t\t\tobj = [], i, j;\r\n\t\t\tfor(i = 0, j = tmp.length; i < j; i++) {\r\n\t\t\t\tif(!tmp[i].children.length) {\r\n\t\t\t\t\tobj.push(tmp[i].id);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn full ? langx.map(obj, langx.proxy(function (i) { return this.get_node(i); }, this)) : obj;\r\n\t\t},\r\n\t\t/**\r\n\t\t * gets the current state of the tree so that it can be restored later with `set_state(state)`. Used internally.\r\n\t\t * @name get_state()\r\n\t\t * @private\r\n\t\t * @return {Object}\r\n\t\t */\r\n\t\tget_state : function () {\r\n\t\t\tvar state\t= {\r\n\t\t\t\t'core' : {\r\n\t\t\t\t\t'open' : [],\r\n\t\t\t\t\t'loaded' : [],\r\n\t\t\t\t\t'scroll' : {\r\n\t\t\t\t\t\t'left' : this.element.scrollLeft(),\r\n\t\t\t\t\t\t'top' : this.element.scrollTop()\r\n\t\t\t\t\t},\r\n\t\t\t\t\t/*!\r\n\t\t\t\t\t'themes' : {\r\n\t\t\t\t\t\t'name' : this.get_theme(),\r\n\t\t\t\t\t\t'icons' : this._data.core.themes.icons,\r\n\t\t\t\t\t\t'dots' : this._data.core.themes.dots\r\n\t\t\t\t\t},\r\n\t\t\t\t\t*/\r\n\t\t\t\t\t'selected' : []\r\n\t\t\t\t}\r\n\t\t\t}, i;\r\n\t\t\tfor(i in this._model.data) {\r\n\t\t\t\tif(this._model.data.hasOwnProperty(i)) {\r\n\t\t\t\t\tif(i !== $.jstree.root) {\r\n\t\t\t\t\t\tif(this._model.data[i].state.loaded && this.settings.core.loaded_state) {\r\n\t\t\t\t\t\t\tstate.core.loaded.push(i);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(this._model.data[i].state.opened) {\r\n\t\t\t\t\t\t\tstate.core.open.push(i);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(this._model.data[i].state.selected) {\r\n\t\t\t\t\t\t\tstate.core.selected.push(i);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn state;\r\n\t\t},\r\n\t\t/**\r\n\t\t * sets the state of the tree. Used internally.\r\n\t\t * @name set_state(state [, callback])\r\n\t\t * @private\r\n\t\t * @param {Object} state the state to restore. Keep in mind this object is passed by reference and jstree will modify it.\r\n\t\t * @param {Function} callback an optional function to execute once the state is restored.\r\n\t\t * @trigger set_state.jstree\r\n\t\t */\r\n\t\tset_state : function (state, callback) {\r\n\t\t\tif(state) {\r\n\t\t\t\tif(state.core && state.core.selected && state.core.initial_selection === undefined) {\r\n\t\t\t\t\tstate.core.initial_selection = this._data.core.selected.concat([]).sort().join(',');\r\n\t\t\t\t}\r\n\t\t\t\tif(state.core) {\r\n\t\t\t\t\tvar res, n, t, _this, i;\r\n\t\t\t\t\tif(state.core.loaded) {\r\n\t\t\t\t\t\tif(!this.settings.core.loaded_state || !langx.isArray(state.core.loaded) || !state.core.loaded.length) {\r\n\t\t\t\t\t\t\tdelete state.core.loaded;\r\n\t\t\t\t\t\t\tthis.set_state(state, callback);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tthis._load_nodes(state.core.loaded, function (nodes) {\r\n\t\t\t\t\t\t\t\tdelete state.core.loaded;\r\n\t\t\t\t\t\t\t\tthis.set_state(state, callback);\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(state.core.open) {\r\n\t\t\t\t\t\tif(!langx.isArray(state.core.open) || !state.core.open.length) {\r\n\t\t\t\t\t\t\tdelete state.core.open;\r\n\t\t\t\t\t\t\tthis.set_state(state, callback);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tthis._load_nodes(state.core.open, function (nodes) {\r\n\t\t\t\t\t\t\t\tthis.open_node(nodes, false, 0);\r\n\t\t\t\t\t\t\t\tdelete state.core.open;\r\n\t\t\t\t\t\t\t\tthis.set_state(state, callback);\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(state.core.scroll) {\r\n\t\t\t\t\t\tif(state.core.scroll && state.core.scroll.left !== undefined) {\r\n\t\t\t\t\t\t\tthis.element.scrollLeft(state.core.scroll.left);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(state.core.scroll && state.core.scroll.top !== undefined) {\r\n\t\t\t\t\t\t\tthis.element.scrollTop(state.core.scroll.top);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tdelete state.core.scroll;\r\n\t\t\t\t\t\tthis.set_state(state, callback);\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(state.core.selected) {\r\n\t\t\t\t\t\t_this = this;\r\n\t\t\t\t\t\tif (state.core.initial_selection === undefined ||\r\n\t\t\t\t\t\t\tstate.core.initial_selection === this._data.core.selected.concat([]).sort().join(',')\r\n\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\tthis.deselect_all();\r\n\t\t\t\t\t\t\tlangx.each(state.core.selected, function (i, v) {\r\n\t\t\t\t\t\t\t\t_this.select_node(v, false, true);\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tdelete state.core.initial_selection;\r\n\t\t\t\t\t\tdelete state.core.selected;\r\n\t\t\t\t\t\tthis.set_state(state, callback);\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tfor(i in state) {\r\n\t\t\t\t\t\tif(state.hasOwnProperty(i) && i !== \"core\" && langx.inArray(i, this.settings.plugins) === -1) {\r\n\t\t\t\t\t\t\tdelete state[i];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(langx.isEmptyObject(state.core)) {\r\n\t\t\t\t\t\tdelete state.core;\r\n\t\t\t\t\t\tthis.set_state(state, callback);\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif(langx.isEmptyObject(state)) {\r\n\t\t\t\t\tstate = null;\r\n\t\t\t\t\tif(callback) { callback.call(this); }\r\n\t\t\t\t\t/**\r\n\t\t\t\t\t * triggered when a `set_state` call completes\r\n\t\t\t\t\t * @event\r\n\t\t\t\t\t * @name set_state.jstree\r\n\t\t\t\t\t */\r\n\t\t\t\t\tthis.trigger('set_state');\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t},\r\n\t\t/**\r\n\t\t * refreshes the tree - all nodes are reloaded with calls to `load_node`.\r\n\t\t * @name refresh()\r\n\t\t * @param {Boolean} skip_loading an option to skip showing the loading indicator\r\n\t\t * @param {Mixed} forget_state if set to `true` state will not be reapplied, if set to a function (receiving the current state as argument) the result of that function will be used as state\r\n\t\t * @trigger refresh.jstree\r\n\t\t */\r\n\t\trefresh : function (skip_loading, forget_state) {\r\n\t\t\tthis._data.core.state = forget_state === true ? {} : this.get_state();\r\n\t\t\tif(forget_state && langx.isFunction(forget_state)) { this._data.core.state = forget_state.call(this, this._data.core.state); }\r\n\t\t\tthis._cnt = 0;\r\n\t\t\tthis._model.data = {};\r\n\t\t\tthis._model.data[$.jstree.root] = {\r\n\t\t\t\tid : $.jstree.root,\r\n\t\t\t\tparent : null,\r\n\t\t\t\tparents : [],\r\n\t\t\t\tchildren : [],\r\n\t\t\t\tchildren_d : [],\r\n\t\t\t\tstate : { loaded : false }\r\n\t\t\t};\r\n\t\t\tthis._data.core.selected = [];\r\n\t\t\tthis._data.core.last_clicked = null;\r\n\t\t\tthis._data.core.focused = null;\r\n\r\n\t\t\tvar c = this.get_container_ul()[0].className;\r\n\t\t\tif(!skip_loading) {\r\n\t\t\t\tthis.element.html(\"<\"+\"ul class='\"+c+\"' role='group'><\"+\"li class='jstree-initial-node jstree-loading jstree-leaf jstree-last' role='treeitem' id='j\"+this._id+\"_loading'><i class='jstree-icon jstree-ocl'></i><\"+\"a class='jstree-anchor' href='#'><i class='jstree-icon jstree-themeicon-hidden'></i>\" + this.get_string(\"Loading ...\") + \"</a></li></ul>\");\r\n\t\t\t\tthis.element.attr('aria-activedescendant','j'+this._id+'_loading');\r\n\t\t\t}\r\n\t\t\tthis.load_node($.jstree.root, function (o, s) {\r\n\t\t\t\tif(s) {\r\n\t\t\t\t\tthis.get_container_ul()[0].className = c;\r\n\t\t\t\t\tif(this._firstChild(this.get_container_ul()[0])) {\r\n\t\t\t\t\t\tthis.element.attr('aria-activedescendant',this._firstChild(this.get_container_ul()[0]).id);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.set_state(langx.extend(true, {}, this._data.core.state), function () {\r\n\t\t\t\t\t\t/**\r\n\t\t\t\t\t\t * triggered when a `refresh` call completes\r\n\t\t\t\t\t\t * @event\r\n\t\t\t\t\t\t * @name refresh.jstree\r\n\t\t\t\t\t\t */\r\n\t\t\t\t\t\tthis.trigger('refresh');\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tthis._data.core.state = null;\r\n\t\t\t});\r\n\t\t},\r\n\t\t/**\r\n\t\t * refreshes a node in the tree (reload its children) all opened nodes inside that node are reloaded with calls to `load_node`.\r\n\t\t * @name refresh_node(obj)\r\n\t\t * @param  {mixed} obj the node\r\n\t\t * @trigger refresh_node.jstree\r\n\t\t */\r\n\t\trefresh_node : function (obj) {\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root) { return false; }\r\n\t\t\tvar opened = [], to_load = [], s = this._data.core.selected.concat([]);\r\n\t\t\tto_load.push(obj.id);\r\n\t\t\tif(obj.state.opened === true) { opened.push(obj.id); }\r\n\t\t\tthis.get_node(obj, true).find('.jstree-open').each(function() { to_load.push(this.id); opened.push(this.id); });\r\n\t\t\tthis._load_nodes(to_load, langx.proxy(function (nodes) {\r\n\t\t\t\tthis.open_node(opened, false, 0);\r\n\t\t\t\tthis.select_node(s);\r\n\t\t\t\t/**\r\n\t\t\t\t * triggered when a node is refreshed\r\n\t\t\t\t * @event\r\n\t\t\t\t * @name refresh_node.jstree\r\n\t\t\t\t * @param {Object} node - the refreshed node\r\n\t\t\t\t * @param {Array} nodes - an array of the IDs of the nodes that were reloaded\r\n\t\t\t\t */\r\n\t\t\t\tthis.trigger('refresh_node', { 'node' : obj, 'nodes' : nodes });\r\n\t\t\t}, this), false, true);\r\n\t\t},\r\n\t\t/**\r\n\t\t * set (change) the ID of a node\r\n\t\t * @name set_id(obj, id)\r\n\t\t * @param  {mixed} obj the node\r\n\t\t * @param  {String} id the new ID\r\n\t\t * @return {Boolean}\r\n\t\t * @trigger set_id.jstree\r\n\t\t */\r\n\t\tset_id : function (obj, id) {\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root) { return false; }\r\n\t\t\tvar i, j, m = this._model.data, old = obj.id;\r\n\t\t\tid = id.toString();\r\n\t\t\t// update parents (replace current ID with new one in children and children_d)\r\n\t\t\tm[obj.parent].children[langx.inArray(obj.id, m[obj.parent].children)] = id;\r\n\t\t\tfor(i = 0, j = obj.parents.length; i < j; i++) {\r\n\t\t\t\tm[obj.parents[i]].children_d[langx.inArray(obj.id, m[obj.parents[i]].children_d)] = id;\r\n\t\t\t}\r\n\t\t\t// update children (replace current ID with new one in parent and parents)\r\n\t\t\tfor(i = 0, j = obj.children.length; i < j; i++) {\r\n\t\t\t\tm[obj.children[i]].parent = id;\r\n\t\t\t}\r\n\t\t\tfor(i = 0, j = obj.children_d.length; i < j; i++) {\r\n\t\t\t\tm[obj.children_d[i]].parents[langx.inArray(obj.id, m[obj.children_d[i]].parents)] = id;\r\n\t\t\t}\r\n\t\t\ti = langx.inArray(obj.id, this._data.core.selected);\r\n\t\t\tif(i !== -1) { this._data.core.selected[i] = id; }\r\n\t\t\t// update model and obj itself (obj.id, this._model.data[KEY])\r\n\t\t\ti = this.get_node(obj.id, true);\r\n\t\t\tif(i) {\r\n\t\t\t\ti.attr('id', id); //.children('.jstree-anchor').attr('id', id + '_anchor').end().attr('aria-labelledby', id + '_anchor');\r\n\t\t\t\tif(this.element.attr('aria-activedescendant') === obj.id) {\r\n\t\t\t\t\tthis.element.attr('aria-activedescendant', id);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tdelete m[obj.id];\r\n\t\t\tobj.id = id;\r\n\t\t\tobj.li_attr.id = id;\r\n\t\t\tm[id] = obj;\r\n\t\t\t/**\r\n\t\t\t * triggered when a node id value is changed\r\n\t\t\t * @event\r\n\t\t\t * @name set_id.jstree\r\n\t\t\t * @param {Object} node\r\n\t\t\t * @param {String} old the old id\r\n\t\t\t */\r\n\t\t\tthis.trigger('set_id',{ \"node\" : obj, \"new\" : obj.id, \"old\" : old });\r\n\t\t\treturn true;\r\n\t\t},\r\n\t\t/**\r\n\t\t * get the text value of a node\r\n\t\t * @name get_text(obj)\r\n\t\t * @param  {mixed} obj the node\r\n\t\t * @return {String}\r\n\t\t */\r\n\t\tget_text : function (obj) {\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\treturn (!obj || obj.id === $.jstree.root) ? false : obj.text;\r\n\t\t},\r\n\t\t/**\r\n\t\t * set the text value of a node. Used internally, please use `rename_node(obj, val)`.\r\n\t\t * @private\r\n\t\t * @name set_text(obj, val)\r\n\t\t * @param  {mixed} obj the node, you can pass an array to set the text on multiple nodes\r\n\t\t * @param  {String} val the new text value\r\n\t\t * @return {Boolean}\r\n\t\t * @trigger set_text.jstree\r\n\t\t */\r\n\t\tset_text : function (obj, val) {\r\n\t\t\tvar t1, t2;\r\n\t\t\tif(langx.isArray(obj)) {\r\n\t\t\t\tobj = obj.slice();\r\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\r\n\t\t\t\t\tthis.set_text(obj[t1], val);\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root) { return false; }\r\n\t\t\tobj.text = val;\r\n\t\t\tif(this.get_node(obj, true).length) {\r\n\t\t\t\tthis.redraw_node(obj.id);\r\n\t\t\t}\r\n\t\t\t/**\r\n\t\t\t * triggered when a node text value is changed\r\n\t\t\t * @event\r\n\t\t\t * @name set_text.jstree\r\n\t\t\t * @param {Object} obj\r\n\t\t\t * @param {String} text the new value\r\n\t\t\t */\r\n\t\t\tthis.trigger('set_text',{ \"obj\" : obj, \"text\" : val });\r\n\t\t\treturn true;\r\n\t\t},\r\n\t\t/**\r\n\t\t * gets a JSON representation of a node (or the whole tree)\r\n\t\t * @name get_json([obj, options])\r\n\t\t * @param  {mixed} obj\r\n\t\t * @param  {Object} options\r\n\t\t * @param  {Boolean} options.no_state do not return state information\r\n\t\t * @param  {Boolean} options.no_id do not return ID\r\n\t\t * @param  {Boolean} options.no_children do not include children\r\n\t\t * @param  {Boolean} options.no_data do not include node data\r\n\t\t * @param  {Boolean} options.no_li_attr do not include LI attributes\r\n\t\t * @param  {Boolean} options.no_a_attr do not include A attributes\r\n\t\t * @param  {Boolean} options.flat return flat JSON instead of nested\r\n\t\t * @return {Object}\r\n\t\t */\r\n\t\tget_json : function (obj, options, flat) {\r\n\t\t\tobj = this.get_node(obj || $.jstree.root);\r\n\t\t\tif(!obj) { return false; }\r\n\t\t\tif(options && options.flat && !flat) { flat = []; }\r\n\t\t\tvar tmp = {\r\n\t\t\t\t'id' : obj.id,\r\n\t\t\t\t'text' : obj.text,\r\n\t\t\t\t'icon' : this.get_icon(obj),\r\n\t\t\t\t'li_attr' : langx.extend(true, {}, obj.li_attr),\r\n\t\t\t\t'a_attr' : langx.extend(true, {}, obj.a_attr),\r\n\t\t\t\t'state' : {},\r\n\t\t\t\t'data' : options && options.no_data ? false : langx.extend(true, langx.isArray(obj.data)?[]:{}, obj.data)\r\n\t\t\t\t//( this.get_node(obj, true).length ? this.get_node(obj, true).data() : obj.data ),\r\n\t\t\t}, i, j;\r\n\t\t\tif(options && options.flat) {\r\n\t\t\t\ttmp.parent = obj.parent;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ttmp.children = [];\r\n\t\t\t}\r\n\t\t\tif(!options || !options.no_state) {\r\n\t\t\t\tfor(i in obj.state) {\r\n\t\t\t\t\tif(obj.state.hasOwnProperty(i)) {\r\n\t\t\t\t\t\ttmp.state[i] = obj.state[i];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tdelete tmp.state;\r\n\t\t\t}\r\n\t\t\tif(options && options.no_li_attr) {\r\n\t\t\t\tdelete tmp.li_attr;\r\n\t\t\t}\r\n\t\t\tif(options && options.no_a_attr) {\r\n\t\t\t\tdelete tmp.a_attr;\r\n\t\t\t}\r\n\t\t\tif(options && options.no_id) {\r\n\t\t\t\tdelete tmp.id;\r\n\t\t\t\tif(tmp.li_attr && tmp.li_attr.id) {\r\n\t\t\t\t\tdelete tmp.li_attr.id;\r\n\t\t\t\t}\r\n\t\t\t\tif(tmp.a_attr && tmp.a_attr.id) {\r\n\t\t\t\t\tdelete tmp.a_attr.id;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(options && options.flat && obj.id !== $.jstree.root) {\r\n\t\t\t\tflat.push(tmp);\r\n\t\t\t}\r\n\t\t\tif(!options || !options.no_children) {\r\n\t\t\t\tfor(i = 0, j = obj.children.length; i < j; i++) {\r\n\t\t\t\t\tif(options && options.flat) {\r\n\t\t\t\t\t\tthis.get_json(obj.children[i], options, flat);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\ttmp.children.push(this.get_json(obj.children[i], options));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn options && options.flat ? flat : (obj.id === $.jstree.root ? tmp.children : tmp);\r\n\t\t},\r\n\t\t/**\r\n\t\t * create a new node (do not confuse with load_node)\r\n\t\t * @name create_node([par, node, pos, callback, is_loaded])\r\n\t\t * @param  {mixed}   par       the parent node (to create a root node use either \"#\" (string) or `null`)\r\n\t\t * @param  {mixed}   node      the data for the new node (a valid JSON object, or a simple string with the name)\r\n\t\t * @param  {mixed}   pos       the index at which to insert the node, \"first\" and \"last\" are also supported, default is \"last\"\r\n\t\t * @param  {Function} callback a function to be called once the node is created\r\n\t\t * @param  {Boolean} is_loaded internal argument indicating if the parent node was succesfully loaded\r\n\t\t * @return {String}            the ID of the newly create node\r\n\t\t * @trigger model.jstree, create_node.jstree\r\n\t\t */\r\n\t\tcreate_node : function (par, node, pos, callback, is_loaded) {\r\n\t\t\tif(par === null) { par = $.jstree.root; }\r\n\t\t\tpar = this.get_node(par);\r\n\t\t\tif(!par) { return false; }\r\n\t\t\tpos = pos === undefined ? \"last\" : pos;\r\n\t\t\tif(!pos.toString().match(/^(before|after)$/) && !is_loaded && !this.is_loaded(par)) {\r\n\t\t\t\treturn this.load_node(par, function () { this.create_node(par, node, pos, callback, true); });\r\n\t\t\t}\r\n\t\t\tif(!node) { node = { \"text\" : this.get_string('New node') }; }\r\n\t\t\tif(typeof node === \"string\") {\r\n\t\t\t\tnode = { \"text\" : node };\r\n\t\t\t} else {\r\n\t\t\t\tnode = langx.extend(true, {}, node);\r\n\t\t\t}\r\n\t\t\tif(node.text === undefined) { node.text = this.get_string('New node'); }\r\n\t\t\tvar tmp, dpc, i, j;\r\n\r\n\t\t\tif(par.id === $.jstree.root) {\r\n\t\t\t\tif(pos === \"before\") { pos = \"first\"; }\r\n\t\t\t\tif(pos === \"after\") { pos = \"last\"; }\r\n\t\t\t}\r\n\t\t\tswitch(pos) {\r\n\t\t\t\tcase \"before\":\r\n\t\t\t\t\ttmp = this.get_node(par.parent);\r\n\t\t\t\t\tpos = langx.inArray(par.id, tmp.children);\r\n\t\t\t\t\tpar = tmp;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"after\" :\r\n\t\t\t\t\ttmp = this.get_node(par.parent);\r\n\t\t\t\t\tpos = langx.inArray(par.id, tmp.children) + 1;\r\n\t\t\t\t\tpar = tmp;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"inside\":\r\n\t\t\t\tcase \"first\":\r\n\t\t\t\t\tpos = 0;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"last\":\r\n\t\t\t\t\tpos = par.children.length;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tif(!pos) { pos = 0; }\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tif(pos > par.children.length) { pos = par.children.length; }\r\n\t\t\tif(!node.id) { node.id = true; }\r\n\t\t\tif(!this.check(\"create_node\", node, par, pos)) {\r\n\t\t\t\tthis.settings.core.error.call(this, this._data.core.last_error);\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif(node.id === true) { delete node.id; }\r\n\t\t\tnode = this._parse_model_from_json(node, par.id, par.parents.concat());\r\n\t\t\tif(!node) { return false; }\r\n\t\t\ttmp = this.get_node(node);\r\n\t\t\tdpc = [];\r\n\t\t\tdpc.push(node);\r\n\t\t\tdpc = dpc.concat(tmp.children_d);\r\n\t\t\tthis.trigger('model', { \"nodes\" : dpc, \"parent\" : par.id });\r\n\r\n\t\t\tpar.children_d = par.children_d.concat(dpc);\r\n\t\t\tfor(i = 0, j = par.parents.length; i < j; i++) {\r\n\t\t\t\tthis._model.data[par.parents[i]].children_d = this._model.data[par.parents[i]].children_d.concat(dpc);\r\n\t\t\t}\r\n\t\t\tnode = tmp;\r\n\t\t\ttmp = [];\r\n\t\t\tfor(i = 0, j = par.children.length; i < j; i++) {\r\n\t\t\t\ttmp[i >= pos ? i+1 : i] = par.children[i];\r\n\t\t\t}\r\n\t\t\ttmp[pos] = node.id;\r\n\t\t\tpar.children = tmp;\r\n\r\n\t\t\tthis.redraw_node(par, true);\r\n\t\t\t/**\r\n\t\t\t * triggered when a node is created\r\n\t\t\t * @event\r\n\t\t\t * @name create_node.jstree\r\n\t\t\t * @param {Object} node\r\n\t\t\t * @param {String} parent the parent's ID\r\n\t\t\t * @param {Number} position the position of the new node among the parent's children\r\n\t\t\t */\r\n\t\t\tthis.trigger('create_node', { \"node\" : this.get_node(node), \"parent\" : par.id, \"position\" : pos });\r\n\t\t\tif(callback) { callback.call(this, this.get_node(node)); }\r\n\t\t\treturn node.id;\r\n\t\t},\r\n\t\t/**\r\n\t\t * set the text value of a node\r\n\t\t * @name rename_node(obj, val)\r\n\t\t * @param  {mixed} obj the node, you can pass an array to rename multiple nodes to the same name\r\n\t\t * @param  {String} val the new text value\r\n\t\t * @return {Boolean}\r\n\t\t * @trigger rename_node.jstree\r\n\t\t */\r\n\t\trename_node : function (obj, val) {\r\n\t\t\tvar t1, t2, old;\r\n\t\t\tif(langx.isArray(obj)) {\r\n\t\t\t\tobj = obj.slice();\r\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\r\n\t\t\t\t\tthis.rename_node(obj[t1], val);\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root) { return false; }\r\n\t\t\told = obj.text;\r\n\t\t\tif(!this.check(\"rename_node\", obj, this.get_parent(obj), val)) {\r\n\t\t\t\tthis.settings.core.error.call(this, this._data.core.last_error);\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tthis.set_text(obj, val); // .apply(this, Array.prototype.slice.call(arguments))\r\n\t\t\t/**\r\n\t\t\t * triggered when a node is renamed\r\n\t\t\t * @event\r\n\t\t\t * @name rename_node.jstree\r\n\t\t\t * @param {Object} node\r\n\t\t\t * @param {String} text the new value\r\n\t\t\t * @param {String} old the old value\r\n\t\t\t */\r\n\t\t\tthis.trigger('rename_node', { \"node\" : obj, \"text\" : val, \"old\" : old });\r\n\t\t\treturn true;\r\n\t\t},\r\n\t\t/**\r\n\t\t * remove a node\r\n\t\t * @name delete_node(obj)\r\n\t\t * @param  {mixed} obj the node, you can pass an array to delete multiple nodes\r\n\t\t * @return {Boolean}\r\n\t\t * @trigger delete_node.jstree, changed.jstree\r\n\t\t */\r\n\t\tdelete_node : function (obj) {\r\n\t\t\tvar t1, t2, par, pos, tmp, i, j, k, l, c, top, lft;\r\n\t\t\tif(langx.isArray(obj)) {\r\n\t\t\t\tobj = obj.slice();\r\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\r\n\t\t\t\t\tthis.delete_node(obj[t1]);\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root) { return false; }\r\n\t\t\tpar = this.get_node(obj.parent);\r\n\t\t\tpos = langx.inArray(obj.id, par.children);\r\n\t\t\tc = false;\r\n\t\t\tif(!this.check(\"delete_node\", obj, par, pos)) {\r\n\t\t\t\tthis.settings.core.error.call(this, this._data.core.last_error);\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif(pos !== -1) {\r\n\t\t\t\tpar.children = $.vakata.array_remove(par.children, pos);\r\n\t\t\t}\r\n\t\t\ttmp = obj.children_d.concat([]);\r\n\t\t\ttmp.push(obj.id);\r\n\t\t\tfor(i = 0, j = obj.parents.length; i < j; i++) {\r\n\t\t\t\tthis._model.data[obj.parents[i]].children_d = $.vakata.array_filter(this._model.data[obj.parents[i]].children_d, function (v) {\r\n\t\t\t\t\treturn langx.inArray(v, tmp) === -1;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tfor(k = 0, l = tmp.length; k < l; k++) {\r\n\t\t\t\tif(this._model.data[tmp[k]].state.selected) {\r\n\t\t\t\t\tc = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (c) {\r\n\t\t\t\tthis._data.core.selected = $.vakata.array_filter(this._data.core.selected, function (v) {\r\n\t\t\t\t\treturn langx.inArray(v, tmp) === -1;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\t/**\r\n\t\t\t * triggered when a node is deleted\r\n\t\t\t * @event\r\n\t\t\t * @name delete_node.jstree\r\n\t\t\t * @param {Object} node\r\n\t\t\t * @param {String} parent the parent's ID\r\n\t\t\t */\r\n\t\t\tthis.trigger('delete_node', { \"node\" : obj, \"parent\" : par.id });\r\n\t\t\tif(c) {\r\n\t\t\t\tthis.trigger('changed', { 'action' : 'delete_node', 'node' : obj, 'selected' : this._data.core.selected, 'parent' : par.id });\r\n\t\t\t}\r\n\t\t\tfor(k = 0, l = tmp.length; k < l; k++) {\r\n\t\t\t\tdelete this._model.data[tmp[k]];\r\n\t\t\t}\r\n\t\t\tif(langx.inArray(this._data.core.focused, tmp) !== -1) {\r\n\t\t\t\tthis._data.core.focused = null;\r\n\t\t\t\ttop = this.element[0].scrollTop;\r\n\t\t\t\tlft = this.element[0].scrollLeft;\r\n\t\t\t\tif(par.id === $.jstree.root) {\r\n\t\t\t\t\tif (this._model.data[$.jstree.root].children[0]) {\r\n\t\t\t\t\t\tthis.get_node(this._model.data[$.jstree.root].children[0], true).children('.jstree-anchor').focus();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.get_node(par, true).children('.jstree-anchor').focus();\r\n\t\t\t\t}\r\n\t\t\t\tthis.element[0].scrollTop  = top;\r\n\t\t\t\tthis.element[0].scrollLeft = lft;\r\n\t\t\t}\r\n\t\t\tthis.redraw_node(par, true);\r\n\t\t\treturn true;\r\n\t\t},\r\n\t\t/**\r\n\t\t * check if an operation is premitted on the tree. Used internally.\r\n\t\t * @private\r\n\t\t * @name check(chk, obj, par, pos)\r\n\t\t * @param  {String} chk the operation to check, can be \"create_node\", \"rename_node\", \"delete_node\", \"copy_node\" or \"move_node\"\r\n\t\t * @param  {mixed} obj the node\r\n\t\t * @param  {mixed} par the parent\r\n\t\t * @param  {mixed} pos the position to insert at, or if \"rename_node\" - the new name\r\n\t\t * @param  {mixed} more some various additional information, for example if a \"move_node\" operations is triggered by DND this will be the hovered node\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tcheck : function (chk, obj, par, pos, more) {\r\n\t\t\tobj = obj && obj.id ? obj : this.get_node(obj);\r\n\t\t\tpar = par && par.id ? par : this.get_node(par);\r\n\t\t\tvar tmp = chk.match(/^move_node|copy_node|create_node$/i) ? par : obj,\r\n\t\t\t\tchc = this.settings.core.check_callback;\r\n\t\t\tif(chk === \"move_node\" || chk === \"copy_node\") {\r\n\t\t\t\tif((!more || !more.is_multi) && (obj.id === par.id || (chk === \"move_node\" && langx.inArray(obj.id, par.children) === pos) || langx.inArray(par.id, obj.children_d) !== -1)) {\r\n\t\t\t\t\tthis._data.core.last_error = { 'error' : 'check', 'plugin' : 'core', 'id' : 'core_01', 'reason' : 'Moving parent inside child', 'data' : JSON.stringify({ 'chk' : chk, 'pos' : pos, 'obj' : obj && obj.id ? obj.id : false, 'par' : par && par.id ? par.id : false }) };\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(tmp && tmp.data) { tmp = tmp.data; }\r\n\t\t\tif(tmp && tmp.functions && (tmp.functions[chk] === false || tmp.functions[chk] === true)) {\r\n\t\t\t\tif(tmp.functions[chk] === false) {\r\n\t\t\t\t\tthis._data.core.last_error = { 'error' : 'check', 'plugin' : 'core', 'id' : 'core_02', 'reason' : 'Node data prevents function: ' + chk, 'data' : JSON.stringify({ 'chk' : chk, 'pos' : pos, 'obj' : obj && obj.id ? obj.id : false, 'par' : par && par.id ? par.id : false }) };\r\n\t\t\t\t}\r\n\t\t\t\treturn tmp.functions[chk];\r\n\t\t\t}\r\n\t\t\tif(chc === false || (langx.isFunction(chc) && chc.call(this, chk, obj, par, pos, more) === false) || (chc && chc[chk] === false)) {\r\n\t\t\t\tthis._data.core.last_error = { 'error' : 'check', 'plugin' : 'core', 'id' : 'core_03', 'reason' : 'User config for core.check_callback prevents function: ' + chk, 'data' : JSON.stringify({ 'chk' : chk, 'pos' : pos, 'obj' : obj && obj.id ? obj.id : false, 'par' : par && par.id ? par.id : false }) };\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t},\r\n\t\t/**\r\n\t\t * get the last error\r\n\t\t * @name last_error()\r\n\t\t * @return {Object}\r\n\t\t */\r\n\t\tlast_error : function () {\r\n\t\t\treturn this._data.core.last_error;\r\n\t\t},\r\n\t\t/**\r\n\t\t * move a node to a new parent\r\n\t\t * @name move_node(obj, par [, pos, callback, is_loaded])\r\n\t\t * @param  {mixed} obj the node to move, pass an array to move multiple nodes\r\n\t\t * @param  {mixed} par the new parent\r\n\t\t * @param  {mixed} pos the position to insert at (besides integer values, \"first\" and \"last\" are supported, as well as \"before\" and \"after\"), defaults to integer `0`\r\n\t\t * @param  {function} callback a function to call once the move is completed, receives 3 arguments - the node, the new parent and the position\r\n\t\t * @param  {Boolean} is_loaded internal parameter indicating if the parent node has been loaded\r\n\t\t * @param  {Boolean} skip_redraw internal parameter indicating if the tree should be redrawn\r\n\t\t * @param  {Boolean} instance internal parameter indicating if the node comes from another instance\r\n\t\t * @trigger move_node.jstree\r\n\t\t */\r\n\t\tmove_node : function (obj, par, pos, callback, is_loaded, skip_redraw, origin) {\r\n\t\t\tvar t1, t2, old_par, old_pos, new_par, old_ins, is_multi, dpc, tmp, i, j, k, l, p;\r\n\r\n\t\t\tpar = this.get_node(par);\r\n\t\t\tpos = pos === undefined ? 0 : pos;\r\n\t\t\tif(!par) { return false; }\r\n\t\t\tif(!pos.toString().match(/^(before|after)$/) && !is_loaded && !this.is_loaded(par)) {\r\n\t\t\t\treturn this.load_node(par, function () { this.move_node(obj, par, pos, callback, true, false, origin); });\r\n\t\t\t}\r\n\r\n\t\t\tif(langx.isArray(obj)) {\r\n\t\t\t\tif(obj.length === 1) {\r\n\t\t\t\t\tobj = obj[0];\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t//obj = obj.slice();\r\n\t\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\r\n\t\t\t\t\t\tif((tmp = this.move_node(obj[t1], par, pos, callback, is_loaded, false, origin))) {\r\n\t\t\t\t\t\t\tpar = tmp;\r\n\t\t\t\t\t\t\tpos = \"after\";\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.redraw();\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tobj = obj && obj.id ? obj : this.get_node(obj);\r\n\r\n\t\t\tif(!obj || obj.id === $.jstree.root) { return false; }\r\n\r\n\t\t\told_par = (obj.parent || $.jstree.root).toString();\r\n\t\t\tnew_par = (!pos.toString().match(/^(before|after)$/) || par.id === $.jstree.root) ? par : this.get_node(par.parent);\r\n\t\t\told_ins = origin ? origin : (this._model.data[obj.id] ? this : $.jstree.reference(obj.id));\r\n\t\t\tis_multi = !old_ins || !old_ins._id || (this._id !== old_ins._id);\r\n\t\t\told_pos = old_ins && old_ins._id && old_par && old_ins._model.data[old_par] && old_ins._model.data[old_par].children ? langx.inArray(obj.id, old_ins._model.data[old_par].children) : -1;\r\n\t\t\tif(old_ins && old_ins._id) {\r\n\t\t\t\tobj = old_ins._model.data[obj.id];\r\n\t\t\t}\r\n\r\n\t\t\tif(is_multi) {\r\n\t\t\t\tif((tmp = this.copy_node(obj, par, pos, callback, is_loaded, false, origin))) {\r\n\t\t\t\t\tif(old_ins) { old_ins.delete_node(obj); }\r\n\t\t\t\t\treturn tmp;\r\n\t\t\t\t}\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t//var m = this._model.data;\r\n\t\t\tif(par.id === $.jstree.root) {\r\n\t\t\t\tif(pos === \"before\") { pos = \"first\"; }\r\n\t\t\t\tif(pos === \"after\") { pos = \"last\"; }\r\n\t\t\t}\r\n\t\t\tswitch(pos) {\r\n\t\t\t\tcase \"before\":\r\n\t\t\t\t\tpos = langx.inArray(par.id, new_par.children);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"after\" :\r\n\t\t\t\t\tpos = langx.inArray(par.id, new_par.children) + 1;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"inside\":\r\n\t\t\t\tcase \"first\":\r\n\t\t\t\t\tpos = 0;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"last\":\r\n\t\t\t\t\tpos = new_par.children.length;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tif(!pos) { pos = 0; }\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tif(pos > new_par.children.length) { pos = new_par.children.length; }\r\n\t\t\tif(!this.check(\"move_node\", obj, new_par, pos, { 'core' : true, 'origin' : origin, 'is_multi' : (old_ins && old_ins._id && old_ins._id !== this._id), 'is_foreign' : (!old_ins || !old_ins._id) })) {\r\n\t\t\t\tthis.settings.core.error.call(this, this._data.core.last_error);\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif(obj.parent === new_par.id) {\r\n\t\t\t\tdpc = new_par.children.concat();\r\n\t\t\t\ttmp = langx.inArray(obj.id, dpc);\r\n\t\t\t\tif(tmp !== -1) {\r\n\t\t\t\t\tdpc = $.vakata.array_remove(dpc, tmp);\r\n\t\t\t\t\tif(pos > tmp) { pos--; }\r\n\t\t\t\t}\r\n\t\t\t\ttmp = [];\r\n\t\t\t\tfor(i = 0, j = dpc.length; i < j; i++) {\r\n\t\t\t\t\ttmp[i >= pos ? i+1 : i] = dpc[i];\r\n\t\t\t\t}\r\n\t\t\t\ttmp[pos] = obj.id;\r\n\t\t\t\tnew_par.children = tmp;\r\n\t\t\t\tthis._node_changed(new_par.id);\r\n\t\t\t\tthis.redraw(new_par.id === $.jstree.root);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// clean old parent and up\r\n\t\t\t\ttmp = obj.children_d.concat();\r\n\t\t\t\ttmp.push(obj.id);\r\n\t\t\t\tfor(i = 0, j = obj.parents.length; i < j; i++) {\r\n\t\t\t\t\tdpc = [];\r\n\t\t\t\t\tp = old_ins._model.data[obj.parents[i]].children_d;\r\n\t\t\t\t\tfor(k = 0, l = p.length; k < l; k++) {\r\n\t\t\t\t\t\tif(langx.inArray(p[k], tmp) === -1) {\r\n\t\t\t\t\t\t\tdpc.push(p[k]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\told_ins._model.data[obj.parents[i]].children_d = dpc;\r\n\t\t\t\t}\r\n\t\t\t\told_ins._model.data[old_par].children = $.vakata.array_remove_item(old_ins._model.data[old_par].children, obj.id);\r\n\r\n\t\t\t\t// insert into new parent and up\r\n\t\t\t\tfor(i = 0, j = new_par.parents.length; i < j; i++) {\r\n\t\t\t\t\tthis._model.data[new_par.parents[i]].children_d = this._model.data[new_par.parents[i]].children_d.concat(tmp);\r\n\t\t\t\t}\r\n\t\t\t\tdpc = [];\r\n\t\t\t\tfor(i = 0, j = new_par.children.length; i < j; i++) {\r\n\t\t\t\t\tdpc[i >= pos ? i+1 : i] = new_par.children[i];\r\n\t\t\t\t}\r\n\t\t\t\tdpc[pos] = obj.id;\r\n\t\t\t\tnew_par.children = dpc;\r\n\t\t\t\tnew_par.children_d.push(obj.id);\r\n\t\t\t\tnew_par.children_d = new_par.children_d.concat(obj.children_d);\r\n\r\n\t\t\t\t// update object\r\n\t\t\t\tobj.parent = new_par.id;\r\n\t\t\t\ttmp = new_par.parents.concat();\r\n\t\t\t\ttmp.unshift(new_par.id);\r\n\t\t\t\tp = obj.parents.length;\r\n\t\t\t\tobj.parents = tmp;\r\n\r\n\t\t\t\t// update object children\r\n\t\t\t\ttmp = tmp.concat();\r\n\t\t\t\tfor(i = 0, j = obj.children_d.length; i < j; i++) {\r\n\t\t\t\t\tthis._model.data[obj.children_d[i]].parents = this._model.data[obj.children_d[i]].parents.slice(0,p*-1);\r\n\t\t\t\t\tArray.prototype.push.apply(this._model.data[obj.children_d[i]].parents, tmp);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(old_par === $.jstree.root || new_par.id === $.jstree.root) {\r\n\t\t\t\t\tthis._model.force_full_redraw = true;\r\n\t\t\t\t}\r\n\t\t\t\tif(!this._model.force_full_redraw) {\r\n\t\t\t\t\tthis._node_changed(old_par);\r\n\t\t\t\t\tthis._node_changed(new_par.id);\r\n\t\t\t\t}\r\n\t\t\t\tif(!skip_redraw) {\r\n\t\t\t\t\tthis.redraw();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(callback) { callback.call(this, obj, new_par, pos); }\r\n\t\t\t/**\r\n\t\t\t * triggered when a node is moved\r\n\t\t\t * @event\r\n\t\t\t * @name move_node.jstree\r\n\t\t\t * @param {Object} node\r\n\t\t\t * @param {String} parent the parent's ID\r\n\t\t\t * @param {Number} position the position of the node among the parent's children\r\n\t\t\t * @param {String} old_parent the old parent of the node\r\n\t\t\t * @param {Number} old_position the old position of the node\r\n\t\t\t * @param {Boolean} is_multi do the node and new parent belong to different instances\r\n\t\t\t * @param {jsTree} old_instance the instance the node came from\r\n\t\t\t * @param {jsTree} new_instance the instance of the new parent\r\n\t\t\t */\r\n\t\t\tthis.trigger('move_node', { \"node\" : obj, \"parent\" : new_par.id, \"position\" : pos, \"old_parent\" : old_par, \"old_position\" : old_pos, 'is_multi' : (old_ins && old_ins._id && old_ins._id !== this._id), 'is_foreign' : (!old_ins || !old_ins._id), 'old_instance' : old_ins, 'new_instance' : this });\r\n\t\t\treturn obj.id;\r\n\t\t},\r\n\t\t/**\r\n\t\t * copy a node to a new parent\r\n\t\t * @name copy_node(obj, par [, pos, callback, is_loaded])\r\n\t\t * @param  {mixed} obj the node to copy, pass an array to copy multiple nodes\r\n\t\t * @param  {mixed} par the new parent\r\n\t\t * @param  {mixed} pos the position to insert at (besides integer values, \"first\" and \"last\" are supported, as well as \"before\" and \"after\"), defaults to integer `0`\r\n\t\t * @param  {function} callback a function to call once the move is completed, receives 3 arguments - the node, the new parent and the position\r\n\t\t * @param  {Boolean} is_loaded internal parameter indicating if the parent node has been loaded\r\n\t\t * @param  {Boolean} skip_redraw internal parameter indicating if the tree should be redrawn\r\n\t\t * @param  {Boolean} instance internal parameter indicating if the node comes from another instance\r\n\t\t * @trigger model.jstree copy_node.jstree\r\n\t\t */\r\n\t\tcopy_node : function (obj, par, pos, callback, is_loaded, skip_redraw, origin) {\r\n\t\t\tvar t1, t2, dpc, tmp, i, j, node, old_par, new_par, old_ins, is_multi;\r\n\r\n\t\t\tpar = this.get_node(par);\r\n\t\t\tpos = pos === undefined ? 0 : pos;\r\n\t\t\tif(!par) { return false; }\r\n\t\t\tif(!pos.toString().match(/^(before|after)$/) && !is_loaded && !this.is_loaded(par)) {\r\n\t\t\t\treturn this.load_node(par, function () { this.copy_node(obj, par, pos, callback, true, false, origin); });\r\n\t\t\t}\r\n\r\n\t\t\tif(langx.isArray(obj)) {\r\n\t\t\t\tif(obj.length === 1) {\r\n\t\t\t\t\tobj = obj[0];\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t//obj = obj.slice();\r\n\t\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\r\n\t\t\t\t\t\tif((tmp = this.copy_node(obj[t1], par, pos, callback, is_loaded, true, origin))) {\r\n\t\t\t\t\t\t\tpar = tmp;\r\n\t\t\t\t\t\t\tpos = \"after\";\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.redraw();\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tobj = obj && obj.id ? obj : this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root) { return false; }\r\n\r\n\t\t\told_par = (obj.parent || $.jstree.root).toString();\r\n\t\t\tnew_par = (!pos.toString().match(/^(before|after)$/) || par.id === $.jstree.root) ? par : this.get_node(par.parent);\r\n\t\t\told_ins = origin ? origin : (this._model.data[obj.id] ? this : $.jstree.reference(obj.id));\r\n\t\t\tis_multi = !old_ins || !old_ins._id || (this._id !== old_ins._id);\r\n\r\n\t\t\tif(old_ins && old_ins._id) {\r\n\t\t\t\tobj = old_ins._model.data[obj.id];\r\n\t\t\t}\r\n\r\n\t\t\tif(par.id === $.jstree.root) {\r\n\t\t\t\tif(pos === \"before\") { pos = \"first\"; }\r\n\t\t\t\tif(pos === \"after\") { pos = \"last\"; }\r\n\t\t\t}\r\n\t\t\tswitch(pos) {\r\n\t\t\t\tcase \"before\":\r\n\t\t\t\t\tpos = langx.inArray(par.id, new_par.children);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"after\" :\r\n\t\t\t\t\tpos = langx.inArray(par.id, new_par.children) + 1;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"inside\":\r\n\t\t\t\tcase \"first\":\r\n\t\t\t\t\tpos = 0;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"last\":\r\n\t\t\t\t\tpos = new_par.children.length;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tif(!pos) { pos = 0; }\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tif(pos > new_par.children.length) { pos = new_par.children.length; }\r\n\t\t\tif(!this.check(\"copy_node\", obj, new_par, pos, { 'core' : true, 'origin' : origin, 'is_multi' : (old_ins && old_ins._id && old_ins._id !== this._id), 'is_foreign' : (!old_ins || !old_ins._id) })) {\r\n\t\t\t\tthis.settings.core.error.call(this, this._data.core.last_error);\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tnode = old_ins ? old_ins.get_json(obj, { no_id : true, no_data : true, no_state : true }) : obj;\r\n\t\t\tif(!node) { return false; }\r\n\t\t\tif(node.id === true) { delete node.id; }\r\n\t\t\tnode = this._parse_model_from_json(node, new_par.id, new_par.parents.concat());\r\n\t\t\tif(!node) { return false; }\r\n\t\t\ttmp = this.get_node(node);\r\n\t\t\tif(obj && obj.state && obj.state.loaded === false) { tmp.state.loaded = false; }\r\n\t\t\tdpc = [];\r\n\t\t\tdpc.push(node);\r\n\t\t\tdpc = dpc.concat(tmp.children_d);\r\n\t\t\tthis.trigger('model', { \"nodes\" : dpc, \"parent\" : new_par.id });\r\n\r\n\t\t\t// insert into new parent and up\r\n\t\t\tfor(i = 0, j = new_par.parents.length; i < j; i++) {\r\n\t\t\t\tthis._model.data[new_par.parents[i]].children_d = this._model.data[new_par.parents[i]].children_d.concat(dpc);\r\n\t\t\t}\r\n\t\t\tdpc = [];\r\n\t\t\tfor(i = 0, j = new_par.children.length; i < j; i++) {\r\n\t\t\t\tdpc[i >= pos ? i+1 : i] = new_par.children[i];\r\n\t\t\t}\r\n\t\t\tdpc[pos] = tmp.id;\r\n\t\t\tnew_par.children = dpc;\r\n\t\t\tnew_par.children_d.push(tmp.id);\r\n\t\t\tnew_par.children_d = new_par.children_d.concat(tmp.children_d);\r\n\r\n\t\t\tif(new_par.id === $.jstree.root) {\r\n\t\t\t\tthis._model.force_full_redraw = true;\r\n\t\t\t}\r\n\t\t\tif(!this._model.force_full_redraw) {\r\n\t\t\t\tthis._node_changed(new_par.id);\r\n\t\t\t}\r\n\t\t\tif(!skip_redraw) {\r\n\t\t\t\tthis.redraw(new_par.id === $.jstree.root);\r\n\t\t\t}\r\n\t\t\tif(callback) { callback.call(this, tmp, new_par, pos); }\r\n\t\t\t/**\r\n\t\t\t * triggered when a node is copied\r\n\t\t\t * @event\r\n\t\t\t * @name copy_node.jstree\r\n\t\t\t * @param {Object} node the copied node\r\n\t\t\t * @param {Object} original the original node\r\n\t\t\t * @param {String} parent the parent's ID\r\n\t\t\t * @param {Number} position the position of the node among the parent's children\r\n\t\t\t * @param {String} old_parent the old parent of the node\r\n\t\t\t * @param {Number} old_position the position of the original node\r\n\t\t\t * @param {Boolean} is_multi do the node and new parent belong to different instances\r\n\t\t\t * @param {jsTree} old_instance the instance the node came from\r\n\t\t\t * @param {jsTree} new_instance the instance of the new parent\r\n\t\t\t */\r\n\t\t\tthis.trigger('copy_node', { \"node\" : tmp, \"original\" : obj, \"parent\" : new_par.id, \"position\" : pos, \"old_parent\" : old_par, \"old_position\" : old_ins && old_ins._id && old_par && old_ins._model.data[old_par] && old_ins._model.data[old_par].children ? langx.inArray(obj.id, old_ins._model.data[old_par].children) : -1,'is_multi' : (old_ins && old_ins._id && old_ins._id !== this._id), 'is_foreign' : (!old_ins || !old_ins._id), 'old_instance' : old_ins, 'new_instance' : this });\r\n\t\t\treturn tmp.id;\r\n\t\t},\r\n\t\t/**\r\n\t\t * cut a node (a later call to `paste(obj)` would move the node)\r\n\t\t * @name cut(obj)\r\n\t\t * @param  {mixed} obj multiple objects can be passed using an array\r\n\t\t * @trigger cut.jstree\r\n\t\t */\r\n\t\tcut : function (obj) {\r\n\t\t\tif(!obj) { obj = this._data.core.selected.concat(); }\r\n\t\t\tif(!langx.isArray(obj)) { obj = [obj]; }\r\n\t\t\tif(!obj.length) { return false; }\r\n\t\t\tvar tmp = [], o, t1, t2;\r\n\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\r\n\t\t\t\to = this.get_node(obj[t1]);\r\n\t\t\t\tif(o && o.id && o.id !== $.jstree.root) { tmp.push(o); }\r\n\t\t\t}\r\n\t\t\tif(!tmp.length) { return false; }\r\n\t\t\tccp_node = tmp;\r\n\t\t\tccp_inst = this;\r\n\t\t\tccp_mode = 'move_node';\r\n\t\t\t/**\r\n\t\t\t * triggered when nodes are added to the buffer for moving\r\n\t\t\t * @event\r\n\t\t\t * @name cut.jstree\r\n\t\t\t * @param {Array} node\r\n\t\t\t */\r\n\t\t\tthis.trigger('cut', { \"node\" : obj });\r\n\t\t},\r\n\t\t/**\r\n\t\t * copy a node (a later call to `paste(obj)` would copy the node)\r\n\t\t * @name copy(obj)\r\n\t\t * @param  {mixed} obj multiple objects can be passed using an array\r\n\t\t * @trigger copy.jstree\r\n\t\t */\r\n\t\tcopy : function (obj) {\r\n\t\t\tif(!obj) { obj = this._data.core.selected.concat(); }\r\n\t\t\tif(!langx.isArray(obj)) { obj = [obj]; }\r\n\t\t\tif(!obj.length) { return false; }\r\n\t\t\tvar tmp = [], o, t1, t2;\r\n\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\r\n\t\t\t\to = this.get_node(obj[t1]);\r\n\t\t\t\tif(o && o.id && o.id !== $.jstree.root) { tmp.push(o); }\r\n\t\t\t}\r\n\t\t\tif(!tmp.length) { return false; }\r\n\t\t\tccp_node = tmp;\r\n\t\t\tccp_inst = this;\r\n\t\t\tccp_mode = 'copy_node';\r\n\t\t\t/**\r\n\t\t\t * triggered when nodes are added to the buffer for copying\r\n\t\t\t * @event\r\n\t\t\t * @name copy.jstree\r\n\t\t\t * @param {Array} node\r\n\t\t\t */\r\n\t\t\tthis.trigger('copy', { \"node\" : obj });\r\n\t\t},\r\n\t\t/**\r\n\t\t * get the current buffer (any nodes that are waiting for a paste operation)\r\n\t\t * @name get_buffer()\r\n\t\t * @return {Object} an object consisting of `mode` (\"copy_node\" or \"move_node\"), `node` (an array of objects) and `inst` (the instance)\r\n\t\t */\r\n\t\tget_buffer : function () {\r\n\t\t\treturn { 'mode' : ccp_mode, 'node' : ccp_node, 'inst' : ccp_inst };\r\n\t\t},\r\n\t\t/**\r\n\t\t * check if there is something in the buffer to paste\r\n\t\t * @name can_paste()\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tcan_paste : function () {\r\n\t\t\treturn ccp_mode !== false && ccp_node !== false; // && ccp_inst._model.data[ccp_node];\r\n\t\t},\r\n\t\t/**\r\n\t\t * copy or move the previously cut or copied nodes to a new parent\r\n\t\t * @name paste(obj [, pos])\r\n\t\t * @param  {mixed} obj the new parent\r\n\t\t * @param  {mixed} pos the position to insert at (besides integer, \"first\" and \"last\" are supported), defaults to integer `0`\r\n\t\t * @trigger paste.jstree\r\n\t\t */\r\n\t\tpaste : function (obj, pos) {\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || !ccp_mode || !ccp_mode.match(/^(copy_node|move_node)$/) || !ccp_node) { return false; }\r\n\t\t\tif(this[ccp_mode](ccp_node, obj, pos, false, false, false, ccp_inst)) {\r\n\t\t\t\t/**\r\n\t\t\t\t * triggered when paste is invoked\r\n\t\t\t\t * @event\r\n\t\t\t\t * @name paste.jstree\r\n\t\t\t\t * @param {String} parent the ID of the receiving node\r\n\t\t\t\t * @param {Array} node the nodes in the buffer\r\n\t\t\t\t * @param {String} mode the performed operation - \"copy_node\" or \"move_node\"\r\n\t\t\t\t */\r\n\t\t\t\tthis.trigger('paste', { \"parent\" : obj.id, \"node\" : ccp_node, \"mode\" : ccp_mode });\r\n\t\t\t}\r\n\t\t\tccp_node = false;\r\n\t\t\tccp_mode = false;\r\n\t\t\tccp_inst = false;\r\n\t\t},\r\n\t\t/**\r\n\t\t * clear the buffer of previously copied or cut nodes\r\n\t\t * @name clear_buffer()\r\n\t\t * @trigger clear_buffer.jstree\r\n\t\t */\r\n\t\tclear_buffer : function () {\r\n\t\t\tccp_node = false;\r\n\t\t\tccp_mode = false;\r\n\t\t\tccp_inst = false;\r\n\t\t\t/**\r\n\t\t\t * triggered when the copy / cut buffer is cleared\r\n\t\t\t * @event\r\n\t\t\t * @name clear_buffer.jstree\r\n\t\t\t */\r\n\t\t\tthis.trigger('clear_buffer');\r\n\t\t},\r\n\t\t/**\r\n\t\t * put a node in edit mode (input field to rename the node)\r\n\t\t * @name edit(obj [, default_text, callback])\r\n\t\t * @param  {mixed} obj\r\n\t\t * @param  {String} default_text the text to populate the input with (if omitted or set to a non-string value the node's text value is used)\r\n\t\t * @param  {Function} callback a function to be called once the text box is blurred, it is called in the instance's scope and receives the node, a status parameter (true if the rename is successful, false otherwise) and a boolean indicating if the user cancelled the edit. You can access the node's title using .text\r\n\t\t */\r\n\t\tedit : function (obj, default_text, callback) {\r\n\t\t\tvar rtl, w, a, s, t, h1, h2, fn, tmp, cancel = false;\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj) { return false; }\r\n\t\t\tif(!this.check(\"edit\", obj, this.get_parent(obj))) {\r\n\t\t\t\tthis.settings.core.error.call(this, this._data.core.last_error);\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\ttmp = obj;\r\n\t\t\tdefault_text = typeof default_text === 'string' ? default_text : obj.text;\r\n\t\t\tthis.set_text(obj, \"\");\r\n\t\t\tobj = this._open_to(obj);\r\n\t\t\ttmp.text = default_text;\r\n\r\n\t\t\trtl = this._data.core.rtl;\r\n\t\t\tw  = this.element.width();\r\n\t\t\tthis._data.core.focused = tmp.id;\r\n\t\t\ta  = obj.children('.jstree-anchor').focus();\r\n\t\t\ts  = $('<span>');\r\n\t\t\t/*!\r\n\t\t\toi = obj.children(\"i:visible\"),\r\n\t\t\tai = a.children(\"i:visible\"),\r\n\t\t\tw1 = oi.width() * oi.length,\r\n\t\t\tw2 = ai.width() * ai.length,\r\n\t\t\t*/\r\n\t\t\tt  = default_text;\r\n\t\t\th1 = $(\"<\"+\"div />\", { css : { \"position\" : \"absolute\", \"top\" : \"-200px\", \"left\" : (rtl ? \"0px\" : \"-1000px\"), \"visibility\" : \"hidden\" } }).appendTo(document.body);\r\n\t\t\th2 = $(\"<\"+\"input />\", {\r\n\t\t\t\t\t\t\"value\" : t,\r\n\t\t\t\t\t\t\"class\" : \"jstree-rename-input\",\r\n\t\t\t\t\t\t// \"size\" : t.length,\r\n\t\t\t\t\t\t\"css\" : {\r\n\t\t\t\t\t\t\t\"padding\" : \"0\",\r\n\t\t\t\t\t\t\t\"border\" : \"1px solid silver\",\r\n\t\t\t\t\t\t\t\"box-sizing\" : \"border-box\",\r\n\t\t\t\t\t\t\t\"display\" : \"inline-block\",\r\n\t\t\t\t\t\t\t\"height\" : (this._data.core.li_height) + \"px\",\r\n\t\t\t\t\t\t\t\"lineHeight\" : (this._data.core.li_height) + \"px\",\r\n\t\t\t\t\t\t\t\"width\" : \"150px\" // will be set a bit further down\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"blur\" : langx.proxy(function (e) {\r\n\t\t\t\t\t\t\te.stopImmediatePropagation();\r\n\t\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\t\tvar i = s.children(\".jstree-rename-input\"),\r\n\t\t\t\t\t\t\t\tv = i.val(),\r\n\t\t\t\t\t\t\t\tf = this.settings.core.force_text,\r\n\t\t\t\t\t\t\t\tnv;\r\n\t\t\t\t\t\t\tif(v === \"\") { v = t; }\r\n\t\t\t\t\t\t\th1.remove();\r\n\t\t\t\t\t\t\ts.replaceWith(a);\r\n\t\t\t\t\t\t\ts.remove();\r\n\t\t\t\t\t\t\tt = f ? t : $('<div></div>').append(langx.parseHTML(t)).html();\r\n\t\t\t\t\t\t\tthis.set_text(obj, t);\r\n\t\t\t\t\t\t\tnv = !!this.rename_node(obj, f ? $('<div></div>').text(v).text() : $('<div></div>').append(langx.parseHTML(v)).html());\r\n\t\t\t\t\t\t\tif(!nv) {\r\n\t\t\t\t\t\t\t\tthis.set_text(obj, t); // move this up? and fix #483\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tthis._data.core.focused = tmp.id;\r\n\t\t\t\t\t\t\tsetTimeout(langx.proxy(function () {\r\n\t\t\t\t\t\t\t\tvar node = this.get_node(tmp.id, true);\r\n\t\t\t\t\t\t\t\tif(node.length) {\r\n\t\t\t\t\t\t\t\t\tthis._data.core.focused = tmp.id;\r\n\t\t\t\t\t\t\t\t\tnode.children('.jstree-anchor').focus();\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}, this), 0);\r\n\t\t\t\t\t\t\tif(callback) {\r\n\t\t\t\t\t\t\t\tcallback.call(this, tmp, nv, cancel);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\th2 = null;\r\n\t\t\t\t\t\t}, this),\r\n\t\t\t\t\t\t\"keydown\" : function (e) {\r\n\t\t\t\t\t\t\tvar key = e.which;\r\n\t\t\t\t\t\t\tif(key === 27) {\r\n\t\t\t\t\t\t\t\tcancel = true;\r\n\t\t\t\t\t\t\t\tthis.value = t;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(key === 27 || key === 13 || key === 37 || key === 38 || key === 39 || key === 40 || key === 32) {\r\n\t\t\t\t\t\t\t\te.stopImmediatePropagation();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(key === 27 || key === 13) {\r\n\t\t\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\t\t\tthis.blur();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"click\" : function (e) { e.stopImmediatePropagation(); },\r\n\t\t\t\t\t\t\"mousedown\" : function (e) { e.stopImmediatePropagation(); },\r\n\t\t\t\t\t\t\"keyup\" : function (e) {\r\n\t\t\t\t\t\t\th2.width(Math.min(h1.text(\"pW\" + this.value).width(),w));\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"keypress\" : function(e) {\r\n\t\t\t\t\t\t\tif(e.which === 13) { return false; }\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\tfn = {\r\n\t\t\t\t\t\tfontFamily\t\t: a.css('fontFamily')\t\t|| '',\r\n\t\t\t\t\t\tfontSize\t\t: a.css('fontSize')\t\t\t|| '',\r\n\t\t\t\t\t\tfontWeight\t\t: a.css('fontWeight')\t\t|| '',\r\n\t\t\t\t\t\tfontStyle\t\t: a.css('fontStyle')\t\t|| '',\r\n\t\t\t\t\t\tfontStretch\t\t: a.css('fontStretch')\t\t|| '',\r\n\t\t\t\t\t\tfontVariant\t\t: a.css('fontVariant')\t\t|| '',\r\n\t\t\t\t\t\tletterSpacing\t: a.css('letterSpacing')\t|| '',\r\n\t\t\t\t\t\twordSpacing\t\t: a.css('wordSpacing')\t\t|| ''\r\n\t\t\t\t};\r\n\t\t\ts.attr('class', a.attr('class')).append(a.contents().clone()).append(h2);\r\n\t\t\ta.replaceWith(s);\r\n\t\t\th1.css(fn);\r\n\t\t\th2.css(fn).width(Math.min(h1.text(\"pW\" + h2[0].value).width(),w))[0].select();\r\n\t\t\t$(document).one('mousedown.jstree touchstart.jstree dnd_start.vakata', function (e) {\r\n\t\t\t\tif (h2 && e.target !== h2) {\r\n\t\t\t\t\t$(h2).blur();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t},\r\n\r\n\r\n\t\t/**\r\n\t\t * changes the theme\r\n\t\t * @name set_theme(theme_name [, theme_url])\r\n\t\t * @param {String} theme_name the name of the new theme to apply\r\n\t\t * @param {mixed} theme_url  the location of the CSS file for this theme. Omit or set to `false` if you manually included the file. Set to `true` to autoload from the `core.themes.dir` directory.\r\n\t\t * @trigger set_theme.jstree\r\n\t\t */\r\n\t\tset_theme : function (theme_name, theme_url) {\r\n\t\t\tif(!theme_name) { return false; }\r\n\t\t\tif(theme_url === true) {\r\n\t\t\t\tvar dir = this.settings.core.themes.dir;\r\n\t\t\t\tif(!dir) { dir = $.jstree.path + '/themes'; }\r\n\t\t\t\ttheme_url = dir + '/' + theme_name + '/style.css';\r\n\t\t\t}\r\n\t\t\tif(theme_url && langx.inArray(theme_url, themes_loaded) === -1) {\r\n\t\t\t\t$('head').append('<'+'link rel=\"stylesheet\" href=\"' + theme_url + '\" type=\"text/css\" />');\r\n\t\t\t\tthemes_loaded.push(theme_url);\r\n\t\t\t}\r\n\t\t\tif(this._data.core.themes.name) {\r\n\t\t\t\tthis.element.removeClass('jstree-' + this._data.core.themes.name);\r\n\t\t\t}\r\n\t\t\tthis._data.core.themes.name = theme_name;\r\n\t\t\tthis.element.addClass('jstree-' + theme_name);\r\n\t\t\tthis.element[this.settings.core.themes.responsive ? 'addClass' : 'removeClass' ]('jstree-' + theme_name + '-responsive');\r\n\t\t\t/**\r\n\t\t\t * triggered when a theme is set\r\n\t\t\t * @event\r\n\t\t\t * @name set_theme.jstree\r\n\t\t\t * @param {String} theme the new theme\r\n\t\t\t */\r\n\t\t\tthis.trigger('set_theme', { 'theme' : theme_name });\r\n\t\t},\r\n\t\t/**\r\n\t\t * gets the name of the currently applied theme name\r\n\t\t * @name get_theme()\r\n\t\t * @return {String}\r\n\t\t */\r\n\t\tget_theme : function () { return this._data.core.themes.name; },\r\n\t\t/**\r\n\t\t * changes the theme variant (if the theme has variants)\r\n\t\t * @name set_theme_variant(variant_name)\r\n\t\t * @param {String|Boolean} variant_name the variant to apply (if `false` is used the current variant is removed)\r\n\t\t */\r\n\t\tset_theme_variant : function (variant_name) {\r\n\t\t\tif(this._data.core.themes.variant) {\r\n\t\t\t\tthis.element.removeClass('jstree-' + this._data.core.themes.name + '-' + this._data.core.themes.variant);\r\n\t\t\t}\r\n\t\t\tthis._data.core.themes.variant = variant_name;\r\n\t\t\tif(variant_name) {\r\n\t\t\t\tthis.element.addClass('jstree-' + this._data.core.themes.name + '-' + this._data.core.themes.variant);\r\n\t\t\t}\r\n\t\t},\r\n\t\t/**\r\n\t\t * gets the name of the currently applied theme variant\r\n\t\t * @name get_theme()\r\n\t\t * @return {String}\r\n\t\t */\r\n\t\tget_theme_variant : function () { return this._data.core.themes.variant; },\r\n\t\t/**\r\n\t\t * shows a striped background on the container (if the theme supports it)\r\n\t\t * @name show_stripes()\r\n\t\t */\r\n\t\tshow_stripes : function () {\r\n\t\t\tthis._data.core.themes.stripes = true;\r\n\t\t\tthis.get_container_ul().addClass(\"jstree-striped\");\r\n\t\t\t/**\r\n\t\t\t * triggered when stripes are shown\r\n\t\t\t * @event\r\n\t\t\t * @name show_stripes.jstree\r\n\t\t\t */\r\n\t\t\tthis.trigger('show_stripes');\r\n\t\t},\r\n\t\t/**\r\n\t\t * hides the striped background on the container\r\n\t\t * @name hide_stripes()\r\n\t\t */\r\n\t\thide_stripes : function () {\r\n\t\t\tthis._data.core.themes.stripes = false;\r\n\t\t\tthis.get_container_ul().removeClass(\"jstree-striped\");\r\n\t\t\t/**\r\n\t\t\t * triggered when stripes are hidden\r\n\t\t\t * @event\r\n\t\t\t * @name hide_stripes.jstree\r\n\t\t\t */\r\n\t\t\tthis.trigger('hide_stripes');\r\n\t\t},\r\n\t\t/**\r\n\t\t * toggles the striped background on the container\r\n\t\t * @name toggle_stripes()\r\n\t\t */\r\n\t\ttoggle_stripes : function () { if(this._data.core.themes.stripes) { this.hide_stripes(); } else { this.show_stripes(); } },\r\n\t\t/**\r\n\t\t * shows the connecting dots (if the theme supports it)\r\n\t\t * @name show_dots()\r\n\t\t */\r\n\t\tshow_dots : function () {\r\n\t\t\tthis._data.core.themes.dots = true;\r\n\t\t\tthis.get_container_ul().removeClass(\"jstree-no-dots\");\r\n\t\t\t/**\r\n\t\t\t * triggered when dots are shown\r\n\t\t\t * @event\r\n\t\t\t * @name show_dots.jstree\r\n\t\t\t */\r\n\t\t\tthis.trigger('show_dots');\r\n\t\t},\r\n\t\t/**\r\n\t\t * hides the connecting dots\r\n\t\t * @name hide_dots()\r\n\t\t */\r\n\t\thide_dots : function () {\r\n\t\t\tthis._data.core.themes.dots = false;\r\n\t\t\tthis.get_container_ul().addClass(\"jstree-no-dots\");\r\n\t\t\t/**\r\n\t\t\t * triggered when dots are hidden\r\n\t\t\t * @event\r\n\t\t\t * @name hide_dots.jstree\r\n\t\t\t */\r\n\t\t\tthis.trigger('hide_dots');\r\n\t\t},\r\n\t\t/**\r\n\t\t * toggles the connecting dots\r\n\t\t * @name toggle_dots()\r\n\t\t */\r\n\t\ttoggle_dots : function () { if(this._data.core.themes.dots) { this.hide_dots(); } else { this.show_dots(); } },\r\n\t\t/**\r\n\t\t * show the node icons\r\n\t\t * @name show_icons()\r\n\t\t */\r\n\t\tshow_icons : function () {\r\n\t\t\tthis._data.core.themes.icons = true;\r\n\t\t\tthis.get_container_ul().removeClass(\"jstree-no-icons\");\r\n\t\t\t/**\r\n\t\t\t * triggered when icons are shown\r\n\t\t\t * @event\r\n\t\t\t * @name show_icons.jstree\r\n\t\t\t */\r\n\t\t\tthis.trigger('show_icons');\r\n\t\t},\r\n\t\t/**\r\n\t\t * hide the node icons\r\n\t\t * @name hide_icons()\r\n\t\t */\r\n\t\thide_icons : function () {\r\n\t\t\tthis._data.core.themes.icons = false;\r\n\t\t\tthis.get_container_ul().addClass(\"jstree-no-icons\");\r\n\t\t\t/**\r\n\t\t\t * triggered when icons are hidden\r\n\t\t\t * @event\r\n\t\t\t * @name hide_icons.jstree\r\n\t\t\t */\r\n\t\t\tthis.trigger('hide_icons');\r\n\t\t},\r\n\t\t/**\r\n\t\t * toggle the node icons\r\n\t\t * @name toggle_icons()\r\n\t\t */\r\n\t\ttoggle_icons : function () { if(this._data.core.themes.icons) { this.hide_icons(); } else { this.show_icons(); } },\r\n\t\t/**\r\n\t\t * show the node ellipsis\r\n\t\t * @name show_icons()\r\n\t\t */\r\n\t\tshow_ellipsis : function () {\r\n\t\t\tthis._data.core.themes.ellipsis = true;\r\n\t\t\tthis.get_container_ul().addClass(\"jstree-ellipsis\");\r\n\t\t\t/**\r\n\t\t\t * triggered when ellisis is shown\r\n\t\t\t * @event\r\n\t\t\t * @name show_ellipsis.jstree\r\n\t\t\t */\r\n\t\t\tthis.trigger('show_ellipsis');\r\n\t\t},\r\n\t\t/**\r\n\t\t * hide the node ellipsis\r\n\t\t * @name hide_ellipsis()\r\n\t\t */\r\n\t\thide_ellipsis : function () {\r\n\t\t\tthis._data.core.themes.ellipsis = false;\r\n\t\t\tthis.get_container_ul().removeClass(\"jstree-ellipsis\");\r\n\t\t\t/**\r\n\t\t\t * triggered when ellisis is hidden\r\n\t\t\t * @event\r\n\t\t\t * @name hide_ellipsis.jstree\r\n\t\t\t */\r\n\t\t\tthis.trigger('hide_ellipsis');\r\n\t\t},\r\n\t\t/**\r\n\t\t * toggle the node ellipsis\r\n\t\t * @name toggle_icons()\r\n\t\t */\r\n\t\ttoggle_ellipsis : function () { if(this._data.core.themes.ellipsis) { this.hide_ellipsis(); } else { this.show_ellipsis(); } },\r\n\t\t/**\r\n\t\t * set the node icon for a node\r\n\t\t * @name set_icon(obj, icon)\r\n\t\t * @param {mixed} obj\r\n\t\t * @param {String} icon the new icon - can be a path to an icon or a className, if using an image that is in the current directory use a `./` prefix, otherwise it will be detected as a class\r\n\t\t */\r\n\t\tset_icon : function (obj, icon) {\r\n\t\t\tvar t1, t2, dom, old;\r\n\t\t\tif(langx.isArray(obj)) {\r\n\t\t\t\tobj = obj.slice();\r\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\r\n\t\t\t\t\tthis.set_icon(obj[t1], icon);\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root) { return false; }\r\n\t\t\told = obj.icon;\r\n\t\t\tobj.icon = icon === true || icon === null || icon === undefined || icon === '' ? true : icon;\r\n\t\t\tdom = this.get_node(obj, true).children(\".jstree-anchor\").children(\".jstree-themeicon\");\r\n\t\t\tif(icon === false) {\r\n\t\t\t\tdom.removeClass('jstree-themeicon-custom ' + old).css(\"background\",\"\").removeAttr(\"rel\");\r\n\t\t\t\tthis.hide_icon(obj);\r\n\t\t\t}\r\n\t\t\telse if(icon === true || icon === null || icon === undefined || icon === '') {\r\n\t\t\t\tdom.removeClass('jstree-themeicon-custom ' + old).css(\"background\",\"\").removeAttr(\"rel\");\r\n\t\t\t\tif(old === false) { this.show_icon(obj); }\r\n\t\t\t}\r\n\t\t\telse if(icon.indexOf(\"/\") === -1 && icon.indexOf(\".\") === -1) {\r\n\t\t\t\tdom.removeClass(old).css(\"background\",\"\");\r\n\t\t\t\tdom.addClass(icon + ' jstree-themeicon-custom').attr(\"rel\",icon);\r\n\t\t\t\tif(old === false) { this.show_icon(obj); }\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdom.removeClass(old).css(\"background\",\"\");\r\n\t\t\t\tdom.addClass('jstree-themeicon-custom').css(\"background\", \"url('\" + icon + \"') center center no-repeat\").attr(\"rel\",icon);\r\n\t\t\t\tif(old === false) { this.show_icon(obj); }\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t},\r\n\t\t/**\r\n\t\t * get the node icon for a node\r\n\t\t * @name get_icon(obj)\r\n\t\t * @param {mixed} obj\r\n\t\t * @return {String}\r\n\t\t */\r\n\t\tget_icon : function (obj) {\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\treturn (!obj || obj.id === $.jstree.root) ? false : obj.icon;\r\n\t\t},\r\n\t\t/**\r\n\t\t * hide the icon on an individual node\r\n\t\t * @name hide_icon(obj)\r\n\t\t * @param {mixed} obj\r\n\t\t */\r\n\t\thide_icon : function (obj) {\r\n\t\t\tvar t1, t2;\r\n\t\t\tif(langx.isArray(obj)) {\r\n\t\t\t\tobj = obj.slice();\r\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\r\n\t\t\t\t\tthis.hide_icon(obj[t1]);\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj === $.jstree.root) { return false; }\r\n\t\t\tobj.icon = false;\r\n\t\t\tthis.get_node(obj, true).children(\".jstree-anchor\").children(\".jstree-themeicon\").addClass('jstree-themeicon-hidden');\r\n\t\t\treturn true;\r\n\t\t},\r\n\t\t/**\r\n\t\t * show the icon on an individual node\r\n\t\t * @name show_icon(obj)\r\n\t\t * @param {mixed} obj\r\n\t\t */\r\n\t\tshow_icon : function (obj) {\r\n\t\t\tvar t1, t2, dom;\r\n\t\t\tif(langx.isArray(obj)) {\r\n\t\t\t\tobj = obj.slice();\r\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\r\n\t\t\t\t\tthis.show_icon(obj[t1]);\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj === $.jstree.root) { return false; }\r\n\t\t\tdom = this.get_node(obj, true);\r\n\t\t\tobj.icon = dom.length ? dom.children(\".jstree-anchor\").children(\".jstree-themeicon\").attr('rel') : true;\r\n\t\t\tif(!obj.icon) { obj.icon = true; }\r\n\t\t\tdom.children(\".jstree-anchor\").children(\".jstree-themeicon\").removeClass('jstree-themeicon-hidden');\r\n\t\t\treturn true;\r\n\t\t}\r\n\t});\r\n\r\n\t// helpers\r\n\t$.vakata = {};\r\n\r\n\t$.vakata.search = function(pattern, txt, options) {\r\n\t\toptions = options || {};\r\n\t\tif(options.fuzzy !== false) {\r\n\t\t\toptions.fuzzy = true;\r\n\t\t}\r\n\t\tpattern = options.caseSensitive ? pattern : pattern.toLowerCase();\r\n\t\tvar MATCH_LOCATION\t= options.location || 0,\r\n\t\t\tMATCH_DISTANCE\t= options.distance || 100,\r\n\t\t\tMATCH_THRESHOLD\t= options.threshold || 0.6,\r\n\t\t\tpatternLen = pattern.length;\r\n\t\tif(patternLen > 32) {\r\n\t\t\toptions.fuzzy = false;\r\n\t\t}\r\n\t\tif(options.fuzzy) {\r\n\t\t\tvar matchmask = 1 << (patternLen - 1);\r\n\t\t\tvar pattern_alphabet = (function () {\r\n\t\t\t\tvar mask = {},\r\n\t\t\t\t\ti = 0;\r\n\t\t\t\tfor (i = 0; i < patternLen; i++) {\r\n\t\t\t\t\tmask[pattern.charAt(i)] = 0;\r\n\t\t\t\t}\r\n\t\t\t\tfor (i = 0; i < patternLen; i++) {\r\n\t\t\t\t\tmask[pattern.charAt(i)] |= 1 << (patternLen - i - 1);\r\n\t\t\t\t}\r\n\t\t\t\treturn mask;\r\n\t\t\t})();\r\n\t\t\tvar match_bitapScore = function (e, x) {\r\n\t\t\t\tvar accuracy = e / patternLen,\r\n\t\t\t\t\tproximity = Math.abs(MATCH_LOCATION - x);\r\n\t\t\t\tif(!MATCH_DISTANCE) {\r\n\t\t\t\t\treturn proximity ? 1.0 : accuracy;\r\n\t\t\t\t}\r\n\t\t\t\treturn accuracy + (proximity / MATCH_DISTANCE);\r\n\t\t\t};\r\n\t\t}\r\n\t\tvar search = function (text) {\r\n\t\t\ttext = options.caseSensitive ? text : text.toLowerCase();\r\n\t\t\tif(pattern === text || text.indexOf(pattern) !== -1) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tisMatch: true,\r\n\t\t\t\t\tscore: 0\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\tif(!options.fuzzy) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tisMatch: false,\r\n\t\t\t\t\tscore: 1\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\tvar i, j,\r\n\t\t\t\ttextLen = text.length,\r\n\t\t\t\tscoreThreshold = MATCH_THRESHOLD,\r\n\t\t\t\tbestLoc = text.indexOf(pattern, MATCH_LOCATION),\r\n\t\t\t\tbinMin, binMid,\r\n\t\t\t\tbinMax = patternLen + textLen,\r\n\t\t\t\tlastRd, start, finish, rd, charMatch,\r\n\t\t\t\tscore = 1,\r\n\t\t\t\tlocations = [];\r\n\t\t\tif (bestLoc != -1) {\r\n\t\t\t\tscoreThreshold = Math.min(match_bitapScore(0, bestLoc), scoreThreshold);\r\n\t\t\t\tbestLoc = text.lastIndexOf(pattern, MATCH_LOCATION + patternLen);\r\n\t\t\t\tif (bestLoc != -1) {\r\n\t\t\t\t\tscoreThreshold = Math.min(match_bitapScore(0, bestLoc), scoreThreshold);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tbestLoc = -1;\r\n\t\t\tfor (i = 0; i < patternLen; i++) {\r\n\t\t\t\tbinMin = 0;\r\n\t\t\t\tbinMid = binMax;\r\n\t\t\t\twhile (binMin < binMid) {\r\n\t\t\t\t\tif (match_bitapScore(i, MATCH_LOCATION + binMid) <= scoreThreshold) {\r\n\t\t\t\t\t\tbinMin = binMid;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tbinMax = binMid;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbinMid = Math.floor((binMax - binMin) / 2 + binMin);\r\n\t\t\t\t}\r\n\t\t\t\tbinMax = binMid;\r\n\t\t\t\tstart = Math.max(1, MATCH_LOCATION - binMid + 1);\r\n\t\t\t\tfinish = Math.min(MATCH_LOCATION + binMid, textLen) + patternLen;\r\n\t\t\t\trd = Array(finish + 2);\r\n\t\t\t\trd[finish + 1] = (1 << i) - 1;\r\n\t\t\t\tfor (j = finish; j >= start; j--) {\r\n\t\t\t\t\tcharMatch = pattern_alphabet[text.charAt(j - 1)];\r\n\t\t\t\t\tif (i === 0) {\r\n\t\t\t\t\t\trd[j] = ((rd[j + 1] << 1) | 1) & charMatch;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\trd[j] = ((rd[j + 1] << 1) | 1) & charMatch | (((lastRd[j + 1] | lastRd[j]) << 1) | 1) | lastRd[j + 1];\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (rd[j] & matchmask) {\r\n\t\t\t\t\t\tscore = match_bitapScore(i, j - 1);\r\n\t\t\t\t\t\tif (score <= scoreThreshold) {\r\n\t\t\t\t\t\t\tscoreThreshold = score;\r\n\t\t\t\t\t\t\tbestLoc = j - 1;\r\n\t\t\t\t\t\t\tlocations.push(bestLoc);\r\n\t\t\t\t\t\t\tif (bestLoc > MATCH_LOCATION) {\r\n\t\t\t\t\t\t\t\tstart = Math.max(1, 2 * MATCH_LOCATION - bestLoc);\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (match_bitapScore(i + 1, MATCH_LOCATION) > scoreThreshold) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tlastRd = rd;\r\n\t\t\t}\r\n\t\t\treturn {\r\n\t\t\t\tisMatch: bestLoc >= 0,\r\n\t\t\t\tscore: score\r\n\t\t\t};\r\n\t\t};\r\n\t\treturn txt === true ? { 'search' : search } : search(txt);\r\n\t};\r\n\r\n\t// collect attributes\r\n\t$.vakata.attributes = function(node, with_values) {\r\n\t\tnode = $(node)[0];\r\n\t\tvar attr = with_values ? {} : [];\r\n\t\tif(node && node.attributes) {\r\n\t\t\tlangx.each(node.attributes, function (i, v) {\r\n\t\t\t\tif(langx.inArray(v.name.toLowerCase(),['style','contenteditable','hasfocus','tabindex']) !== -1) { return; }\r\n\t\t\t\tif(v.value !== null && langx.trim(v.value) !== '') {\r\n\t\t\t\t\tif(with_values) { attr[v.name] = v.value; }\r\n\t\t\t\t\telse { attr.push(v.name); }\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn attr;\r\n\t};\r\n\t$.vakata.array_unique = function(array) {\r\n\t\tvar a = [], i, j, l, o = {};\r\n\t\tfor(i = 0, l = array.length; i < l; i++) {\r\n\t\t\tif(o[array[i]] === undefined) {\r\n\t\t\t\ta.push(array[i]);\r\n\t\t\t\to[array[i]] = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn a;\r\n\t};\r\n\t// remove item from array\r\n\t$.vakata.array_remove = function(array, from) {\r\n\t\tarray.splice(from, 1);\r\n\t\treturn array;\r\n\t\t//var rest = array.slice((to || from) + 1 || array.length);\r\n\t\t//array.length = from < 0 ? array.length + from : from;\r\n\t\t//array.push.apply(array, rest);\r\n\t\t//return array;\r\n\t};\r\n\t// remove item from array\r\n\t$.vakata.array_remove_item = function(array, item) {\r\n\t\tvar tmp = langx.inArray(item, array);\r\n\t\treturn tmp !== -1 ? $.vakata.array_remove(array, tmp) : array;\r\n\t};\r\n\t$.vakata.array_filter = function(c,a,b,d,e) {\r\n\t\tif (c.filter) {\r\n\t\t\treturn c.filter(a, b);\r\n\t\t}\r\n\t\td=[];\r\n\t\tfor (e in c) {\r\n\t\t\tif (~~e+''===e+'' && e>=0 && a.call(b,c[e],+e,c)) {\r\n\t\t\t\td.push(c[e]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn d;\r\n\t};\r\n\r\n\r\n\treturn Tree;\r\n\r\n});\r\n\ndefine('skylark-widgets-hierarchy/addons/changed',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-browser\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-geom\",\r\n  \"skylark-domx-query\",\r\n  \"../Hierarchy\"\r\n],function(langx,browser,eventer,noder,geom,$,jstree){\r\n\t\"use strict\";\r\n\r\n\tif($.jstree.plugins.changed) { return; }\r\n\r\n\t$.jstree.plugins.changed = function (options, parent) {\r\n\t\tvar last = [];\r\n\t\tthis.trigger = function (ev, data) {\r\n\t\t\tvar i, j;\r\n\t\t\tif(!data) {\r\n\t\t\t\tdata = {};\r\n\t\t\t}\r\n\t\t\tif(ev.replace('.jstree','') === 'changed') {\r\n\t\t\t\tdata.changed = { selected : [], deselected : [] };\r\n\t\t\t\tvar tmp = {};\r\n\t\t\t\tfor(i = 0, j = last.length; i < j; i++) {\r\n\t\t\t\t\ttmp[last[i]] = 1;\r\n\t\t\t\t}\r\n\t\t\t\tfor(i = 0, j = data.selected.length; i < j; i++) {\r\n\t\t\t\t\tif(!tmp[data.selected[i]]) {\r\n\t\t\t\t\t\tdata.changed.selected.push(data.selected[i]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\ttmp[data.selected[i]] = 2;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tfor(i = 0, j = last.length; i < j; i++) {\r\n\t\t\t\t\tif(tmp[last[i]] === 1) {\r\n\t\t\t\t\t\tdata.changed.deselected.push(last[i]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tlast = data.selected.slice();\r\n\t\t\t}\r\n\t\t\t/**\r\n\t\t\t * triggered when selection changes (the \"changed\" plugin enhances the original event with more data)\r\n\t\t\t * @event\r\n\t\t\t * @name changed.jstree\r\n\t\t\t * @param {Object} node\r\n\t\t\t * @param {Object} action the action that caused the selection to change\r\n\t\t\t * @param {Array} selected the current selection\r\n\t\t\t * @param {Object} changed an object containing two properties `selected` and `deselected` - both arrays of node IDs, which were selected or deselected since the last changed event\r\n\t\t\t * @param {Object} event the event (if any) that triggered this changed event\r\n\t\t\t * @plugin changed\r\n\t\t\t */\r\n\t\t\tparent.trigger.call(this, ev, data);\r\n\t\t};\r\n\t\tthis.refresh = function (skip_loading, forget_state) {\r\n\t\t\tlast = [];\r\n\t\t\treturn parent.refresh.apply(this, arguments);\r\n\t\t};\r\n\t};\r\n\r\n\treturn $;\r\n});\ndefine('skylark-widgets-hierarchy/addons/checkbox',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-browser\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-geom\",\r\n  \"skylark-domx-query\",\r\n  \"../Hierarchy\"\r\n],function(langx,browser,eventer,noder,geom,$,jstree){\r\n\t\"use strict\";\r\n\r\n\tif($.jstree.plugins.checkbox) { return; }\r\n\r\n\tvar _i = document.createElement('I');\r\n\t_i.className = 'jstree-icon jstree-checkbox';\r\n\t_i.setAttribute('role', 'presentation');\r\n\t/**\r\n\t * stores all defaults for the checkbox plugin\r\n\t * @name $.jstree.defaults.checkbox\r\n\t * @plugin checkbox\r\n\t */\r\n\t$.jstree.defaults.checkbox = {\r\n\t\t/**\r\n\t\t * a boolean indicating if checkboxes should be visible (can be changed at a later time using `show_checkboxes()` and `hide_checkboxes`). Defaults to `true`.\r\n\t\t * @name $.jstree.defaults.checkbox.visible\r\n\t\t * @plugin checkbox\r\n\t\t */\r\n\t\tvisible\t\t\t\t: true,\r\n\t\t/**\r\n\t\t * a boolean indicating if checkboxes should cascade down and have an undetermined state. Defaults to `true`.\r\n\t\t * @name $.jstree.defaults.checkbox.three_state\r\n\t\t * @plugin checkbox\r\n\t\t */\r\n\t\tthree_state\t\t\t: true,\r\n\t\t/**\r\n\t\t * a boolean indicating if clicking anywhere on the node should act as clicking on the checkbox. Defaults to `true`.\r\n\t\t * @name $.jstree.defaults.checkbox.whole_node\r\n\t\t * @plugin checkbox\r\n\t\t */\r\n\t\twhole_node\t\t\t: true,\r\n\t\t/**\r\n\t\t * a boolean indicating if the selected style of a node should be kept, or removed. Defaults to `true`.\r\n\t\t * @name $.jstree.defaults.checkbox.keep_selected_style\r\n\t\t * @plugin checkbox\r\n\t\t */\r\n\t\tkeep_selected_style\t: true,\r\n\t\t/**\r\n\t\t * This setting controls how cascading and undetermined nodes are applied.\r\n\t\t * If 'up' is in the string - cascading up is enabled, if 'down' is in the string - cascading down is enabled, if 'undetermined' is in the string - undetermined nodes will be used.\r\n\t\t * If `three_state` is set to `true` this setting is automatically set to 'up+down+undetermined'. Defaults to ''.\r\n\t\t * @name $.jstree.defaults.checkbox.cascade\r\n\t\t * @plugin checkbox\r\n\t\t */\r\n\t\tcascade\t\t\t\t: '',\r\n\t\t/**\r\n\t\t * This setting controls if checkbox are bound to the general tree selection or to an internal array maintained by the checkbox plugin. Defaults to `true`, only set to `false` if you know exactly what you are doing.\r\n\t\t * @name $.jstree.defaults.checkbox.tie_selection\r\n\t\t * @plugin checkbox\r\n\t\t */\r\n\t\ttie_selection\t\t: true,\r\n\r\n\t\t/**\r\n\t\t * This setting controls if cascading down affects disabled checkboxes\r\n\t\t * @name $.jstree.defaults.checkbox.cascade_to_disabled\r\n\t\t * @plugin checkbox\r\n\t\t */\r\n\t\tcascade_to_disabled : true,\r\n\r\n\t\t/**\r\n\t\t * This setting controls if cascading down affects hidden checkboxes\r\n\t\t * @name $.jstree.defaults.checkbox.cascade_to_hidden\r\n\t\t * @plugin checkbox\r\n\t\t */\r\n\t\tcascade_to_hidden : true\r\n\t};\r\n\t$.jstree.plugins.checkbox = function (options, parent) {\r\n\t\tthis.bind = function () {\r\n\t\t\tparent.bind.call(this);\r\n\t\t\tthis._data.checkbox.uto = false;\r\n\t\t\tthis._data.checkbox.selected = [];\r\n\t\t\tif(this.settings.checkbox.three_state) {\r\n\t\t\t\tthis.settings.checkbox.cascade = 'up+down+undetermined';\r\n\t\t\t}\r\n\t\t\tthis.element\r\n\t\t\t\t.on(\"init.jstree\", langx.proxy(function () {\r\n\t\t\t\t\t\tthis._data.checkbox.visible = this.settings.checkbox.visible;\r\n\t\t\t\t\t\tif(!this.settings.checkbox.keep_selected_style) {\r\n\t\t\t\t\t\t\tthis.element.addClass('jstree-checkbox-no-clicked');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(this.settings.checkbox.tie_selection) {\r\n\t\t\t\t\t\t\tthis.element.addClass('jstree-checkbox-selection');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on(\"loading.jstree\", langx.proxy(function () {\r\n\t\t\t\t\t\tthis[ this._data.checkbox.visible ? 'show_checkboxes' : 'hide_checkboxes' ]();\r\n\t\t\t\t\t}, this));\r\n\t\t\tif(this.settings.checkbox.cascade.indexOf('undetermined') !== -1) {\r\n\t\t\t\tthis.element\r\n\t\t\t\t\t.on('changed.jstree uncheck_node.jstree check_node.jstree uncheck_all.jstree check_all.jstree move_node.jstree copy_node.jstree redraw.jstree open_node.jstree', langx.proxy(function () {\r\n\t\t\t\t\t\t\t// only if undetermined is in setting\r\n\t\t\t\t\t\t\tif(this._data.checkbox.uto) { clearTimeout(this._data.checkbox.uto); }\r\n\t\t\t\t\t\t\tthis._data.checkbox.uto = setTimeout(langx.proxy(this._undetermined, this), 50);\r\n\t\t\t\t\t\t}, this));\r\n\t\t\t}\r\n\t\t\tif(!this.settings.checkbox.tie_selection) {\r\n\t\t\t\tthis.element\r\n\t\t\t\t\t.on('model.jstree', langx.proxy(function (e, data) {\r\n\t\t\t\t\t\tvar m = this._model.data,\r\n\t\t\t\t\t\t\tp = m[data.parent],\r\n\t\t\t\t\t\t\tdpc = data.nodes,\r\n\t\t\t\t\t\t\ti, j;\r\n\t\t\t\t\t\tfor(i = 0, j = dpc.length; i < j; i++) {\r\n\t\t\t\t\t\t\tm[dpc[i]].state.checked = m[dpc[i]].state.checked || (m[dpc[i]].original && m[dpc[i]].original.state && m[dpc[i]].original.state.checked);\r\n\t\t\t\t\t\t\tif(m[dpc[i]].state.checked) {\r\n\t\t\t\t\t\t\t\tthis._data.checkbox.selected.push(dpc[i]);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, this));\r\n\t\t\t}\r\n\t\t\tif(this.settings.checkbox.cascade.indexOf('up') !== -1 || this.settings.checkbox.cascade.indexOf('down') !== -1) {\r\n\t\t\t\tthis.element\r\n\t\t\t\t\t.on('model.jstree', langx.proxy(function (e, data) {\r\n\t\t\t\t\t\t\tvar m = this._model.data,\r\n\t\t\t\t\t\t\t\tp = m[data.parent],\r\n\t\t\t\t\t\t\t\tdpc = data.nodes,\r\n\t\t\t\t\t\t\t\tchd = [],\r\n\t\t\t\t\t\t\t\tc, i, j, k, l, tmp, s = this.settings.checkbox.cascade, t = this.settings.checkbox.tie_selection;\r\n\r\n\t\t\t\t\t\t\tif(s.indexOf('down') !== -1) {\r\n\t\t\t\t\t\t\t\t// apply down\r\n\t\t\t\t\t\t\t\tif(p.state[ t ? 'selected' : 'checked' ]) {\r\n\t\t\t\t\t\t\t\t\tfor(i = 0, j = dpc.length; i < j; i++) {\r\n\t\t\t\t\t\t\t\t\t\tm[dpc[i]].state[ t ? 'selected' : 'checked' ] = true;\r\n\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\tthis._data[ t ? 'core' : 'checkbox' ].selected = this._data[ t ? 'core' : 'checkbox' ].selected.concat(dpc);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tfor(i = 0, j = dpc.length; i < j; i++) {\r\n\t\t\t\t\t\t\t\t\t\tif(m[dpc[i]].state[ t ? 'selected' : 'checked' ]) {\r\n\t\t\t\t\t\t\t\t\t\t\tfor(k = 0, l = m[dpc[i]].children_d.length; k < l; k++) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tm[m[dpc[i]].children_d[k]].state[ t ? 'selected' : 'checked' ] = true;\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\tthis._data[ t ? 'core' : 'checkbox' ].selected = this._data[ t ? 'core' : 'checkbox' ].selected.concat(m[dpc[i]].children_d);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif(s.indexOf('up') !== -1) {\r\n\t\t\t\t\t\t\t\t// apply up\r\n\t\t\t\t\t\t\t\tfor(i = 0, j = p.children_d.length; i < j; i++) {\r\n\t\t\t\t\t\t\t\t\tif(!m[p.children_d[i]].children.length) {\r\n\t\t\t\t\t\t\t\t\t\tchd.push(m[p.children_d[i]].parent);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tchd = $.vakata.array_unique(chd);\r\n\t\t\t\t\t\t\t\tfor(k = 0, l = chd.length; k < l; k++) {\r\n\t\t\t\t\t\t\t\t\tp = m[chd[k]];\r\n\t\t\t\t\t\t\t\t\twhile(p && p.id !== $.jstree.root) {\r\n\t\t\t\t\t\t\t\t\t\tc = 0;\r\n\t\t\t\t\t\t\t\t\t\tfor(i = 0, j = p.children.length; i < j; i++) {\r\n\t\t\t\t\t\t\t\t\t\t\tc += m[p.children[i]].state[ t ? 'selected' : 'checked' ];\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\tif(c === j) {\r\n\t\t\t\t\t\t\t\t\t\t\tp.state[ t ? 'selected' : 'checked' ] = true;\r\n\t\t\t\t\t\t\t\t\t\t\tthis._data[ t ? 'core' : 'checkbox' ].selected.push(p.id);\r\n\t\t\t\t\t\t\t\t\t\t\ttmp = this.get_node(p, true);\r\n\t\t\t\t\t\t\t\t\t\t\tif(tmp && tmp.length) {\r\n\t\t\t\t\t\t\t\t\t\t\t\ttmp.attr('aria-selected', true).children('.jstree-anchor').addClass( t ? 'jstree-clicked' : 'jstree-checked');\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\tp = this.get_node(p.parent);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tthis._data[ t ? 'core' : 'checkbox' ].selected = $.vakata.array_unique(this._data[ t ? 'core' : 'checkbox' ].selected);\r\n\t\t\t\t\t\t}, this))\r\n\t\t\t\t\t.on(this.settings.checkbox.tie_selection ? 'select_node.jstree' : 'check_node.jstree', langx.proxy(function (e, data) {\r\n\t\t\t\t\t\t\tvar self = this,\r\n\t\t\t\t\t\t\t\tobj = data.node,\r\n\t\t\t\t\t\t\t\tm = this._model.data,\r\n\t\t\t\t\t\t\t\tpar = this.get_node(obj.parent),\r\n\t\t\t\t\t\t\t\ti, j, c, tmp, s = this.settings.checkbox.cascade, t = this.settings.checkbox.tie_selection,\r\n\t\t\t\t\t\t\t\tsel = {}, cur = this._data[ t ? 'core' : 'checkbox' ].selected;\r\n\r\n\t\t\t\t\t\t\tfor (i = 0, j = cur.length; i < j; i++) {\r\n\t\t\t\t\t\t\t\tsel[cur[i]] = true;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t// apply down\r\n\t\t\t\t\t\t\tif(s.indexOf('down') !== -1) {\r\n\t\t\t\t\t\t\t\t//this._data[ t ? 'core' : 'checkbox' ].selected = $.vakata.array_unique(this._data[ t ? 'core' : 'checkbox' ].selected.concat(obj.children_d));\r\n\t\t\t\t\t\t\t\tvar selectedIds = this._cascade_new_checked_state(obj.id, true);\r\n\t\t\t\t\t\t\t\tvar temp = obj.children_d.concat(obj.id);\r\n\t\t\t\t\t\t\t\tfor (i = 0, j = temp.length; i < j; i++) {\r\n\t\t\t\t\t\t\t\t\tif (selectedIds.indexOf(temp[i]) > -1) {\r\n\t\t\t\t\t\t\t\t\t\tsel[temp[i]] = true;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\tdelete sel[temp[i]];\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t// apply up\r\n\t\t\t\t\t\t\tif(s.indexOf('up') !== -1) {\r\n\t\t\t\t\t\t\t\twhile(par && par.id !== $.jstree.root) {\r\n\t\t\t\t\t\t\t\t\tc = 0;\r\n\t\t\t\t\t\t\t\t\tfor(i = 0, j = par.children.length; i < j; i++) {\r\n\t\t\t\t\t\t\t\t\t\tc += m[par.children[i]].state[ t ? 'selected' : 'checked' ];\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tif(c === j) {\r\n\t\t\t\t\t\t\t\t\t\tpar.state[ t ? 'selected' : 'checked' ] = true;\r\n\t\t\t\t\t\t\t\t\t\tsel[par.id] = true;\r\n\t\t\t\t\t\t\t\t\t\t//this._data[ t ? 'core' : 'checkbox' ].selected.push(par.id);\r\n\t\t\t\t\t\t\t\t\t\ttmp = this.get_node(par, true);\r\n\t\t\t\t\t\t\t\t\t\tif(tmp && tmp.length) {\r\n\t\t\t\t\t\t\t\t\t\t\ttmp.attr('aria-selected', true).children('.jstree-anchor').addClass(t ? 'jstree-clicked' : 'jstree-checked');\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tpar = this.get_node(par.parent);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tcur = [];\r\n\t\t\t\t\t\t\tfor (i in sel) {\r\n\t\t\t\t\t\t\t\tif (sel.hasOwnProperty(i)) {\r\n\t\t\t\t\t\t\t\t\tcur.push(i);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tthis._data[ t ? 'core' : 'checkbox' ].selected = cur;\r\n\t\t\t\t\t\t}, this))\r\n\t\t\t\t\t.on(this.settings.checkbox.tie_selection ? 'deselect_all.jstree' : 'uncheck_all.jstree', langx.proxy(function (e, data) {\r\n\t\t\t\t\t\t\tvar obj = this.get_node($.jstree.root),\r\n\t\t\t\t\t\t\t\tm = this._model.data,\r\n\t\t\t\t\t\t\t\ti, j, tmp;\r\n\t\t\t\t\t\t\tfor(i = 0, j = obj.children_d.length; i < j; i++) {\r\n\t\t\t\t\t\t\t\ttmp = m[obj.children_d[i]];\r\n\t\t\t\t\t\t\t\tif(tmp && tmp.original && tmp.original.state && tmp.original.state.undetermined) {\r\n\t\t\t\t\t\t\t\t\ttmp.original.state.undetermined = false;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}, this))\r\n\t\t\t\t\t.on(this.settings.checkbox.tie_selection ? 'deselect_node.jstree' : 'uncheck_node.jstree', langx.proxy(function (e, data) {\r\n\t\t\t\t\t\t\tvar self = this,\r\n\t\t\t\t\t\t\t\tobj = data.node,\r\n\t\t\t\t\t\t\t\tdom = this.get_node(obj, true),\r\n\t\t\t\t\t\t\t\ti, j, tmp, s = this.settings.checkbox.cascade, t = this.settings.checkbox.tie_selection,\r\n\t\t\t\t\t\t\t\tcur = this._data[ t ? 'core' : 'checkbox' ].selected, sel = {},\r\n\t\t\t\t\t\t\t\tstillSelectedIds = [],\r\n\t\t\t\t\t\t\t\tallIds = obj.children_d.concat(obj.id);\r\n\r\n\t\t\t\t\t\t\t// apply down\r\n\t\t\t\t\t\t\tif(s.indexOf('down') !== -1) {\r\n\t\t\t\t\t\t\t\tvar selectedIds = this._cascade_new_checked_state(obj.id, false);\r\n\r\n\t\t\t\t\t\t\t\tcur = cur.filter(function(id) {\r\n\t\t\t\t\t\t\t\t\treturn allIds.indexOf(id) === -1 || selectedIds.indexOf(id) > -1;\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t// only apply up if cascade up is enabled and if this node is not selected\r\n\t\t\t\t\t\t\t// (if all child nodes are disabled and cascade_to_disabled === false then this node will till be selected).\r\n\t\t\t\t\t\t\tif(s.indexOf('up') !== -1 && cur.indexOf(obj.id) === -1) {\r\n\t\t\t\t\t\t\t\tfor(i = 0, j = obj.parents.length; i < j; i++) {\r\n\t\t\t\t\t\t\t\t\ttmp = this._model.data[obj.parents[i]];\r\n\t\t\t\t\t\t\t\t\ttmp.state[ t ? 'selected' : 'checked' ] = false;\r\n\t\t\t\t\t\t\t\t\tif(tmp && tmp.original && tmp.original.state && tmp.original.state.undetermined) {\r\n\t\t\t\t\t\t\t\t\t\ttmp.original.state.undetermined = false;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\ttmp = this.get_node(obj.parents[i], true);\r\n\t\t\t\t\t\t\t\t\tif(tmp && tmp.length) {\r\n\t\t\t\t\t\t\t\t\t\ttmp.attr('aria-selected', false).children('.jstree-anchor').removeClass(t ? 'jstree-clicked' : 'jstree-checked');\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tcur = cur.filter(function(id) {\r\n\t\t\t\t\t\t\t\t\treturn obj.parents.indexOf(id) === -1;\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tthis._data[ t ? 'core' : 'checkbox' ].selected = cur;\r\n\t\t\t\t\t\t}, this));\r\n\t\t\t}\r\n\t\t\tif(this.settings.checkbox.cascade.indexOf('up') !== -1) {\r\n\t\t\t\tthis.element\r\n\t\t\t\t\t.on('delete_node.jstree', langx.proxy(function (e, data) {\r\n\t\t\t\t\t\t\t// apply up (whole handler)\r\n\t\t\t\t\t\t\tvar p = this.get_node(data.parent),\r\n\t\t\t\t\t\t\t\tm = this._model.data,\r\n\t\t\t\t\t\t\t\ti, j, c, tmp, t = this.settings.checkbox.tie_selection;\r\n\t\t\t\t\t\t\twhile(p && p.id !== $.jstree.root && !p.state[ t ? 'selected' : 'checked' ]) {\r\n\t\t\t\t\t\t\t\tc = 0;\r\n\t\t\t\t\t\t\t\tfor(i = 0, j = p.children.length; i < j; i++) {\r\n\t\t\t\t\t\t\t\t\tc += m[p.children[i]].state[ t ? 'selected' : 'checked' ];\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif(j > 0 && c === j) {\r\n\t\t\t\t\t\t\t\t\tp.state[ t ? 'selected' : 'checked' ] = true;\r\n\t\t\t\t\t\t\t\t\tthis._data[ t ? 'core' : 'checkbox' ].selected.push(p.id);\r\n\t\t\t\t\t\t\t\t\ttmp = this.get_node(p, true);\r\n\t\t\t\t\t\t\t\t\tif(tmp && tmp.length) {\r\n\t\t\t\t\t\t\t\t\t\ttmp.attr('aria-selected', true).children('.jstree-anchor').addClass(t ? 'jstree-clicked' : 'jstree-checked');\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tp = this.get_node(p.parent);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}, this))\r\n\t\t\t\t\t.on('move_node.jstree', langx.proxy(function (e, data) {\r\n\t\t\t\t\t\t\t// apply up (whole handler)\r\n\t\t\t\t\t\t\tvar is_multi = data.is_multi,\r\n\t\t\t\t\t\t\t\told_par = data.old_parent,\r\n\t\t\t\t\t\t\t\tnew_par = this.get_node(data.parent),\r\n\t\t\t\t\t\t\t\tm = this._model.data,\r\n\t\t\t\t\t\t\t\tp, c, i, j, tmp, t = this.settings.checkbox.tie_selection;\r\n\t\t\t\t\t\t\tif(!is_multi) {\r\n\t\t\t\t\t\t\t\tp = this.get_node(old_par);\r\n\t\t\t\t\t\t\t\twhile(p && p.id !== $.jstree.root && !p.state[ t ? 'selected' : 'checked' ]) {\r\n\t\t\t\t\t\t\t\t\tc = 0;\r\n\t\t\t\t\t\t\t\t\tfor(i = 0, j = p.children.length; i < j; i++) {\r\n\t\t\t\t\t\t\t\t\t\tc += m[p.children[i]].state[ t ? 'selected' : 'checked' ];\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tif(j > 0 && c === j) {\r\n\t\t\t\t\t\t\t\t\t\tp.state[ t ? 'selected' : 'checked' ] = true;\r\n\t\t\t\t\t\t\t\t\t\tthis._data[ t ? 'core' : 'checkbox' ].selected.push(p.id);\r\n\t\t\t\t\t\t\t\t\t\ttmp = this.get_node(p, true);\r\n\t\t\t\t\t\t\t\t\t\tif(tmp && tmp.length) {\r\n\t\t\t\t\t\t\t\t\t\t\ttmp.attr('aria-selected', true).children('.jstree-anchor').addClass(t ? 'jstree-clicked' : 'jstree-checked');\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tp = this.get_node(p.parent);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tp = new_par;\r\n\t\t\t\t\t\t\twhile(p && p.id !== $.jstree.root) {\r\n\t\t\t\t\t\t\t\tc = 0;\r\n\t\t\t\t\t\t\t\tfor(i = 0, j = p.children.length; i < j; i++) {\r\n\t\t\t\t\t\t\t\t\tc += m[p.children[i]].state[ t ? 'selected' : 'checked' ];\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif(c === j) {\r\n\t\t\t\t\t\t\t\t\tif(!p.state[ t ? 'selected' : 'checked' ]) {\r\n\t\t\t\t\t\t\t\t\t\tp.state[ t ? 'selected' : 'checked' ] = true;\r\n\t\t\t\t\t\t\t\t\t\tthis._data[ t ? 'core' : 'checkbox' ].selected.push(p.id);\r\n\t\t\t\t\t\t\t\t\t\ttmp = this.get_node(p, true);\r\n\t\t\t\t\t\t\t\t\t\tif(tmp && tmp.length) {\r\n\t\t\t\t\t\t\t\t\t\t\ttmp.attr('aria-selected', true).children('.jstree-anchor').addClass(t ? 'jstree-clicked' : 'jstree-checked');\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tif(p.state[ t ? 'selected' : 'checked' ]) {\r\n\t\t\t\t\t\t\t\t\t\tp.state[ t ? 'selected' : 'checked' ] = false;\r\n\t\t\t\t\t\t\t\t\t\tthis._data[ t ? 'core' : 'checkbox' ].selected = $.vakata.array_remove_item(this._data[ t ? 'core' : 'checkbox' ].selected, p.id);\r\n\t\t\t\t\t\t\t\t\t\ttmp = this.get_node(p, true);\r\n\t\t\t\t\t\t\t\t\t\tif(tmp && tmp.length) {\r\n\t\t\t\t\t\t\t\t\t\t\ttmp.attr('aria-selected', false).children('.jstree-anchor').removeClass(t ? 'jstree-clicked' : 'jstree-checked');\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tp = this.get_node(p.parent);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}, this));\r\n\t\t\t}\r\n\t\t};\r\n\t\t/**\r\n\t\t * get an array of all nodes whose state is \"undetermined\"\r\n\t\t * @name get_undetermined([full])\r\n\t\t * @param  {boolean} full: if set to `true` the returned array will consist of the full node objects, otherwise - only IDs will be returned\r\n\t\t * @return {Array}\r\n\t\t * @plugin checkbox\r\n\t\t */\r\n\t\tthis.get_undetermined = function (full) {\r\n\t\t\tif (this.settings.checkbox.cascade.indexOf('undetermined') === -1) {\r\n\t\t\t\treturn [];\r\n\t\t\t}\r\n\t\t\tvar i, j, k, l, o = {}, m = this._model.data, t = this.settings.checkbox.tie_selection, s = this._data[ t ? 'core' : 'checkbox' ].selected, p = [], tt = this, r = [];\r\n\t\t\tfor(i = 0, j = s.length; i < j; i++) {\r\n\t\t\t\tif(m[s[i]] && m[s[i]].parents) {\r\n\t\t\t\t\tfor(k = 0, l = m[s[i]].parents.length; k < l; k++) {\r\n\t\t\t\t\t\tif(o[m[s[i]].parents[k]] !== undefined) {\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(m[s[i]].parents[k] !== $.jstree.root) {\r\n\t\t\t\t\t\t\to[m[s[i]].parents[k]] = true;\r\n\t\t\t\t\t\t\tp.push(m[s[i]].parents[k]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// attempt for server side undetermined state\r\n\t\t\tthis.element.find('.jstree-closed').not(':has(.jstree-children)')\r\n\t\t\t\t.each(function () {\r\n\t\t\t\t\tvar tmp = tt.get_node(this), tmp2;\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(!tmp) { return; }\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(!tmp.state.loaded) {\r\n\t\t\t\t\t\tif(tmp.original && tmp.original.state && tmp.original.state.undetermined && tmp.original.state.undetermined === true) {\r\n\t\t\t\t\t\t\tif(o[tmp.id] === undefined && tmp.id !== $.jstree.root) {\r\n\t\t\t\t\t\t\t\to[tmp.id] = true;\r\n\t\t\t\t\t\t\t\tp.push(tmp.id);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tfor(k = 0, l = tmp.parents.length; k < l; k++) {\r\n\t\t\t\t\t\t\t\tif(o[tmp.parents[k]] === undefined && tmp.parents[k] !== $.jstree.root) {\r\n\t\t\t\t\t\t\t\t\to[tmp.parents[k]] = true;\r\n\t\t\t\t\t\t\t\t\tp.push(tmp.parents[k]);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tfor(i = 0, j = tmp.children_d.length; i < j; i++) {\r\n\t\t\t\t\t\t\ttmp2 = m[tmp.children_d[i]];\r\n\t\t\t\t\t\t\tif(!tmp2.state.loaded && tmp2.original && tmp2.original.state && tmp2.original.state.undetermined && tmp2.original.state.undetermined === true) {\r\n\t\t\t\t\t\t\t\tif(o[tmp2.id] === undefined && tmp2.id !== $.jstree.root) {\r\n\t\t\t\t\t\t\t\t\to[tmp2.id] = true;\r\n\t\t\t\t\t\t\t\t\tp.push(tmp2.id);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tfor(k = 0, l = tmp2.parents.length; k < l; k++) {\r\n\t\t\t\t\t\t\t\t\tif(o[tmp2.parents[k]] === undefined && tmp2.parents[k] !== $.jstree.root) {\r\n\t\t\t\t\t\t\t\t\t\to[tmp2.parents[k]] = true;\r\n\t\t\t\t\t\t\t\t\t\tp.push(tmp2.parents[k]);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\tfor (i = 0, j = p.length; i < j; i++) {\r\n\t\t\t\tif(!m[p[i]].state[ t ? 'selected' : 'checked' ]) {\r\n\t\t\t\t\tr.push(full ? m[p[i]] : p[i]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn r;\r\n\t\t};\r\n\t\t/**\r\n\t\t * set the undetermined state where and if necessary. Used internally.\r\n\t\t * @private\r\n\t\t * @name _undetermined()\r\n\t\t * @plugin checkbox\r\n\t\t */\r\n\t\tthis._undetermined = function () {\r\n\t\t\tif(this.element === null) { return; }\r\n\t\t\tvar p = this.get_undetermined(false), i, j, s;\r\n\r\n\t\t\tthis.element.find('.jstree-undetermined').removeClass('jstree-undetermined');\r\n\t\t\tfor (i = 0, j = p.length; i < j; i++) {\r\n\t\t\t\ts = this.get_node(p[i], true);\r\n\t\t\t\tif(s && s.length) {\r\n\t\t\t\t\ts.children('.jstree-anchor').children('.jstree-checkbox').addClass('jstree-undetermined');\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\tthis.redraw_node = function(obj, deep, is_callback, force_render) {\r\n\t\t\tobj = parent.redraw_node.apply(this, arguments);\r\n\t\t\tif(obj) {\r\n\t\t\t\tvar i, j, tmp = null, icon = null;\r\n\t\t\t\tfor(i = 0, j = obj.childNodes.length; i < j; i++) {\r\n\t\t\t\t\tif(obj.childNodes[i] && obj.childNodes[i].className && obj.childNodes[i].className.indexOf(\"jstree-anchor\") !== -1) {\r\n\t\t\t\t\t\ttmp = obj.childNodes[i];\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif(tmp) {\r\n\t\t\t\t\tif(!this.settings.checkbox.tie_selection && this._model.data[obj.id].state.checked) { tmp.className += ' jstree-checked'; }\r\n\t\t\t\t\ticon = _i.cloneNode(false);\r\n\t\t\t\t\tif(this._model.data[obj.id].state.checkbox_disabled) { icon.className += ' jstree-checkbox-disabled'; }\r\n\t\t\t\t\ttmp.insertBefore(icon, tmp.childNodes[0]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(!is_callback && this.settings.checkbox.cascade.indexOf('undetermined') !== -1) {\r\n\t\t\t\tif(this._data.checkbox.uto) { clearTimeout(this._data.checkbox.uto); }\r\n\t\t\t\tthis._data.checkbox.uto = setTimeout(langx.proxy(this._undetermined, this), 50);\r\n\t\t\t}\r\n\t\t\treturn obj;\r\n\t\t};\r\n\t\t/**\r\n\t\t * show the node checkbox icons\r\n\t\t * @name show_checkboxes()\r\n\t\t * @plugin checkbox\r\n\t\t */\r\n\t\tthis.show_checkboxes = function () { this._data.core.themes.checkboxes = true; this.get_container_ul().removeClass(\"jstree-no-checkboxes\"); };\r\n\t\t/**\r\n\t\t * hide the node checkbox icons\r\n\t\t * @name hide_checkboxes()\r\n\t\t * @plugin checkbox\r\n\t\t */\r\n\t\tthis.hide_checkboxes = function () { this._data.core.themes.checkboxes = false; this.get_container_ul().addClass(\"jstree-no-checkboxes\"); };\r\n\t\t/**\r\n\t\t * toggle the node icons\r\n\t\t * @name toggle_checkboxes()\r\n\t\t * @plugin checkbox\r\n\t\t */\r\n\t\tthis.toggle_checkboxes = function () { if(this._data.core.themes.checkboxes) { this.hide_checkboxes(); } else { this.show_checkboxes(); } };\r\n\t\t/**\r\n\t\t * checks if a node is in an undetermined state\r\n\t\t * @name is_undetermined(obj)\r\n\t\t * @param  {mixed} obj\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tthis.is_undetermined = function (obj) {\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tvar s = this.settings.checkbox.cascade, i, j, t = this.settings.checkbox.tie_selection, d = this._data[ t ? 'core' : 'checkbox' ].selected, m = this._model.data;\r\n\t\t\tif(!obj || obj.state[ t ? 'selected' : 'checked' ] === true || s.indexOf('undetermined') === -1 || (s.indexOf('down') === -1 && s.indexOf('up') === -1)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif(!obj.state.loaded && obj.original.state.undetermined === true) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tfor(i = 0, j = obj.children_d.length; i < j; i++) {\r\n\t\t\t\tif(langx.inArray(obj.children_d[i], d) !== -1 || (!m[obj.children_d[i]].state.loaded && m[obj.children_d[i]].original.state.undetermined)) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t};\r\n\t\t/**\r\n\t\t * disable a node's checkbox\r\n\t\t * @name disable_checkbox(obj)\r\n\t\t * @param {mixed} obj an array can be used too\r\n\t\t * @trigger disable_checkbox.jstree\r\n\t\t * @plugin checkbox\r\n\t\t */\r\n\t\tthis.disable_checkbox = function (obj) {\r\n\t\t\tvar t1, t2, dom;\r\n\t\t\tif(langx.isArray(obj)) {\r\n\t\t\t\tobj = obj.slice();\r\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\r\n\t\t\t\t\tthis.disable_checkbox(obj[t1]);\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tdom = this.get_node(obj, true);\r\n\t\t\tif(!obj.state.checkbox_disabled) {\r\n\t\t\t\tobj.state.checkbox_disabled = true;\r\n\t\t\t\tif(dom && dom.length) {\r\n\t\t\t\t\tdom.children('.jstree-anchor').children('.jstree-checkbox').addClass('jstree-checkbox-disabled');\r\n\t\t\t\t}\r\n\t\t\t\t/**\r\n\t\t\t\t * triggered when an node's checkbox is disabled\r\n\t\t\t\t * @event\r\n\t\t\t\t * @name disable_checkbox.jstree\r\n\t\t\t\t * @param {Object} node\r\n\t\t\t\t * @plugin checkbox\r\n\t\t\t\t */\r\n\t\t\t\tthis.trigger('disable_checkbox', { 'node' : obj });\r\n\t\t\t}\r\n\t\t};\r\n\t\t/**\r\n\t\t * enable a node's checkbox\r\n\t\t * @name disable_checkbox(obj)\r\n\t\t * @param {mixed} obj an array can be used too\r\n\t\t * @trigger enable_checkbox.jstree\r\n\t\t * @plugin checkbox\r\n\t\t */\r\n\t\tthis.enable_checkbox = function (obj) {\r\n\t\t\tvar t1, t2, dom;\r\n\t\t\tif(langx.isArray(obj)) {\r\n\t\t\t\tobj = obj.slice();\r\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\r\n\t\t\t\t\tthis.enable_checkbox(obj[t1]);\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tdom = this.get_node(obj, true);\r\n\t\t\tif(obj.state.checkbox_disabled) {\r\n\t\t\t\tobj.state.checkbox_disabled = false;\r\n\t\t\t\tif(dom && dom.length) {\r\n\t\t\t\t\tdom.children('.jstree-anchor').children('.jstree-checkbox').removeClass('jstree-checkbox-disabled');\r\n\t\t\t\t}\r\n\t\t\t\t/**\r\n\t\t\t\t * triggered when an node's checkbox is enabled\r\n\t\t\t\t * @event\r\n\t\t\t\t * @name enable_checkbox.jstree\r\n\t\t\t\t * @param {Object} node\r\n\t\t\t\t * @plugin checkbox\r\n\t\t\t\t */\r\n\t\t\t\tthis.trigger('enable_checkbox', { 'node' : obj });\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tthis.activate_node = function (obj, e) {\r\n\t\t\tif($(e.target).hasClass('jstree-checkbox-disabled')) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif(this.settings.checkbox.tie_selection && (this.settings.checkbox.whole_node || $(e.target).hasClass('jstree-checkbox'))) {\r\n\t\t\t\te.ctrlKey = true;\r\n\t\t\t}\r\n\t\t\tif(this.settings.checkbox.tie_selection || (!this.settings.checkbox.whole_node && !$(e.target).hasClass('jstree-checkbox'))) {\r\n\t\t\t\treturn parent.activate_node.call(this, obj, e);\r\n\t\t\t}\r\n\t\t\tif(this.is_disabled(obj)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif(this.is_checked(obj)) {\r\n\t\t\t\tthis.uncheck_node(obj, e);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.check_node(obj, e);\r\n\t\t\t}\r\n\t\t\tthis.trigger('activate_node', { 'node' : this.get_node(obj) });\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Cascades checked state to a node and all its descendants. This function does NOT affect hidden and disabled nodes (or their descendants).\r\n\t\t * However if these unaffected nodes are already selected their ids will be included in the returned array.\r\n\t\t * @private\r\n\t\t * @param {string} id the node ID\r\n\t\t * @param {bool} checkedState should the nodes be checked or not\r\n\t\t * @returns {Array} Array of all node id's (in this tree branch) that are checked.\r\n\t\t */\r\n\t\tthis._cascade_new_checked_state = function (id, checkedState) {\r\n\t\t\tvar self = this;\r\n\t\t\tvar t = this.settings.checkbox.tie_selection;\r\n\t\t\tvar node = this._model.data[id];\r\n\t\t\tvar selectedNodeIds = [];\r\n\t\t\tvar selectedChildrenIds = [], i, j, selectedChildIds;\r\n\r\n\t\t\tif (\r\n\t\t\t\t(this.settings.checkbox.cascade_to_disabled || !node.state.disabled) &&\r\n\t\t\t\t(this.settings.checkbox.cascade_to_hidden || !node.state.hidden)\r\n\t\t\t) {\r\n\t\t\t\t//First try and check/uncheck the children\r\n\t\t\t\tif (node.children) {\r\n\t\t\t\t\tfor (i = 0, j = node.children.length; i < j; i++) {\r\n\t\t\t\t\t\tvar childId = node.children[i];\r\n\t\t\t\t\t\tselectedChildIds = self._cascade_new_checked_state(childId, checkedState);\r\n\t\t\t\t\t\tselectedNodeIds = selectedNodeIds.concat(selectedChildIds);\r\n\t\t\t\t\t\tif (selectedChildIds.indexOf(childId) > -1) {\r\n\t\t\t\t\t\t\tselectedChildrenIds.push(childId);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar dom = self.get_node(node, true);\r\n\r\n\t\t\t\t//A node's state is undetermined if some but not all of it's children are checked/selected .\r\n\t\t\t\tvar undetermined = selectedChildrenIds.length > 0 && selectedChildrenIds.length < node.children.length;\r\n\r\n\t\t\t\tif(node.original && node.original.state && node.original.state.undetermined) {\r\n\t\t\t\t\tnode.original.state.undetermined = undetermined;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//If a node is undetermined then remove selected class\r\n\t\t\t\tif (undetermined) {\r\n\t\t\t\t\tnode.state[ t ? 'selected' : 'checked' ] = false;\r\n\t\t\t\t\tdom.attr('aria-selected', false).children('.jstree-anchor').removeClass(t ? 'jstree-clicked' : 'jstree-checked');\r\n\t\t\t\t}\r\n\t\t\t\t//Otherwise, if the checkedState === true (i.e. the node is being checked now) and all of the node's children are checked (if it has any children),\r\n\t\t\t\t//check the node and style it correctly.\r\n\t\t\t\telse if (checkedState && selectedChildrenIds.length === node.children.length) {\r\n\t\t\t\t\tnode.state[ t ? 'selected' : 'checked' ] = checkedState;\r\n\t\t\t\t\tselectedNodeIds.push(node.id);\r\n\r\n\t\t\t\t\tdom.attr('aria-selected', true).children('.jstree-anchor').addClass(t ? 'jstree-clicked' : 'jstree-checked');\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tnode.state[ t ? 'selected' : 'checked' ] = false;\r\n\t\t\t\t\tdom.attr('aria-selected', false).children('.jstree-anchor').removeClass(t ? 'jstree-clicked' : 'jstree-checked');\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tselectedChildIds = this.get_checked_descendants(id);\r\n\r\n\t\t\t\tif (node.state[ t ? 'selected' : 'checked' ]) {\r\n\t\t\t\t\tselectedChildIds.push(node.id);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tselectedNodeIds = selectedNodeIds.concat(selectedChildIds);\r\n\t\t\t}\r\n\r\n\t\t\treturn selectedNodeIds;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Gets ids of nodes selected in branch (of tree) specified by id (does not include the node specified by id)\r\n\t\t * @name get_checked_descendants(obj)\r\n\t\t * @param {string} id the node ID\r\n\t\t * @return {Array} array of IDs\r\n\t\t * @plugin checkbox\r\n\t\t */\r\n\t\tthis.get_checked_descendants = function (id) {\r\n\t\t\tvar self = this;\r\n\t\t\tvar t = self.settings.checkbox.tie_selection;\r\n\t\t\tvar node = self._model.data[id];\r\n\r\n\t\t\treturn node.children_d.filter(function(_id) {\r\n\t\t\t\treturn self._model.data[_id].state[ t ? 'selected' : 'checked' ];\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * check a node (only if tie_selection in checkbox settings is false, otherwise select_node will be called internally)\r\n\t\t * @name check_node(obj)\r\n\t\t * @param {mixed} obj an array can be used to check multiple nodes\r\n\t\t * @trigger check_node.jstree\r\n\t\t * @plugin checkbox\r\n\t\t */\r\n\t\tthis.check_node = function (obj, e) {\r\n\t\t\tif(this.settings.checkbox.tie_selection) { return this.select_node(obj, false, true, e); }\r\n\t\t\tvar dom, t1, t2, th;\r\n\t\t\tif(langx.isArray(obj)) {\r\n\t\t\t\tobj = obj.slice();\r\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\r\n\t\t\t\t\tthis.check_node(obj[t1], e);\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tdom = this.get_node(obj, true);\r\n\t\t\tif(!obj.state.checked) {\r\n\t\t\t\tobj.state.checked = true;\r\n\t\t\t\tthis._data.checkbox.selected.push(obj.id);\r\n\t\t\t\tif(dom && dom.length) {\r\n\t\t\t\t\tdom.children('.jstree-anchor').addClass('jstree-checked');\r\n\t\t\t\t}\r\n\t\t\t\t/**\r\n\t\t\t\t * triggered when an node is checked (only if tie_selection in checkbox settings is false)\r\n\t\t\t\t * @event\r\n\t\t\t\t * @name check_node.jstree\r\n\t\t\t\t * @param {Object} node\r\n\t\t\t\t * @param {Array} selected the current selection\r\n\t\t\t\t * @param {Object} event the event (if any) that triggered this check_node\r\n\t\t\t\t * @plugin checkbox\r\n\t\t\t\t */\r\n\t\t\t\tthis.trigger('check_node', { 'node' : obj, 'selected' : this._data.checkbox.selected, 'event' : e });\r\n\t\t\t}\r\n\t\t};\r\n\t\t/**\r\n\t\t * uncheck a node (only if tie_selection in checkbox settings is false, otherwise deselect_node will be called internally)\r\n\t\t * @name uncheck_node(obj)\r\n\t\t * @param {mixed} obj an array can be used to uncheck multiple nodes\r\n\t\t * @trigger uncheck_node.jstree\r\n\t\t * @plugin checkbox\r\n\t\t */\r\n\t\tthis.uncheck_node = function (obj, e) {\r\n\t\t\tif(this.settings.checkbox.tie_selection) { return this.deselect_node(obj, false, e); }\r\n\t\t\tvar t1, t2, dom;\r\n\t\t\tif(langx.isArray(obj)) {\r\n\t\t\t\tobj = obj.slice();\r\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\r\n\t\t\t\t\tthis.uncheck_node(obj[t1], e);\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tdom = this.get_node(obj, true);\r\n\t\t\tif(obj.state.checked) {\r\n\t\t\t\tobj.state.checked = false;\r\n\t\t\t\tthis._data.checkbox.selected = $.vakata.array_remove_item(this._data.checkbox.selected, obj.id);\r\n\t\t\t\tif(dom.length) {\r\n\t\t\t\t\tdom.children('.jstree-anchor').removeClass('jstree-checked');\r\n\t\t\t\t}\r\n\t\t\t\t/**\r\n\t\t\t\t * triggered when an node is unchecked (only if tie_selection in checkbox settings is false)\r\n\t\t\t\t * @event\r\n\t\t\t\t * @name uncheck_node.jstree\r\n\t\t\t\t * @param {Object} node\r\n\t\t\t\t * @param {Array} selected the current selection\r\n\t\t\t\t * @param {Object} event the event (if any) that triggered this uncheck_node\r\n\t\t\t\t * @plugin checkbox\r\n\t\t\t\t */\r\n\t\t\t\tthis.trigger('uncheck_node', { 'node' : obj, 'selected' : this._data.checkbox.selected, 'event' : e });\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\t/**\r\n\t\t * checks all nodes in the tree (only if tie_selection in checkbox settings is false, otherwise select_all will be called internally)\r\n\t\t * @name check_all()\r\n\t\t * @trigger check_all.jstree, changed.jstree\r\n\t\t * @plugin checkbox\r\n\t\t */\r\n\t\tthis.check_all = function () {\r\n\t\t\tif(this.settings.checkbox.tie_selection) { return this.select_all(); }\r\n\t\t\tvar tmp = this._data.checkbox.selected.concat([]), i, j;\r\n\t\t\tthis._data.checkbox.selected = this._model.data[$.jstree.root].children_d.concat();\r\n\t\t\tfor(i = 0, j = this._data.checkbox.selected.length; i < j; i++) {\r\n\t\t\t\tif(this._model.data[this._data.checkbox.selected[i]]) {\r\n\t\t\t\t\tthis._model.data[this._data.checkbox.selected[i]].state.checked = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.redraw(true);\r\n\t\t\t/**\r\n\t\t\t * triggered when all nodes are checked (only if tie_selection in checkbox settings is false)\r\n\t\t\t * @event\r\n\t\t\t * @name check_all.jstree\r\n\t\t\t * @param {Array} selected the current selection\r\n\t\t\t * @plugin checkbox\r\n\t\t\t */\r\n\t\t\tthis.trigger('check_all', { 'selected' : this._data.checkbox.selected });\r\n\t\t};\r\n\t\t/**\r\n\t\t * uncheck all checked nodes (only if tie_selection in checkbox settings is false, otherwise deselect_all will be called internally)\r\n\t\t * @name uncheck_all()\r\n\t\t * @trigger uncheck_all.jstree\r\n\t\t * @plugin checkbox\r\n\t\t */\r\n\t\tthis.uncheck_all = function () {\r\n\t\t\tif(this.settings.checkbox.tie_selection) { return this.deselect_all(); }\r\n\t\t\tvar tmp = this._data.checkbox.selected.concat([]), i, j;\r\n\t\t\tfor(i = 0, j = this._data.checkbox.selected.length; i < j; i++) {\r\n\t\t\t\tif(this._model.data[this._data.checkbox.selected[i]]) {\r\n\t\t\t\t\tthis._model.data[this._data.checkbox.selected[i]].state.checked = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis._data.checkbox.selected = [];\r\n\t\t\tthis.element.find('.jstree-checked').removeClass('jstree-checked');\r\n\t\t\t/**\r\n\t\t\t * triggered when all nodes are unchecked (only if tie_selection in checkbox settings is false)\r\n\t\t\t * @event\r\n\t\t\t * @name uncheck_all.jstree\r\n\t\t\t * @param {Object} node the previous selection\r\n\t\t\t * @param {Array} selected the current selection\r\n\t\t\t * @plugin checkbox\r\n\t\t\t */\r\n\t\t\tthis.trigger('uncheck_all', { 'selected' : this._data.checkbox.selected, 'node' : tmp });\r\n\t\t};\r\n\t\t/**\r\n\t\t * checks if a node is checked (if tie_selection is on in the settings this function will return the same as is_selected)\r\n\t\t * @name is_checked(obj)\r\n\t\t * @param  {mixed}  obj\r\n\t\t * @return {Boolean}\r\n\t\t * @plugin checkbox\r\n\t\t */\r\n\t\tthis.is_checked = function (obj) {\r\n\t\t\tif(this.settings.checkbox.tie_selection) { return this.is_selected(obj); }\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root) { return false; }\r\n\t\t\treturn obj.state.checked;\r\n\t\t};\r\n\t\t/**\r\n\t\t * get an array of all checked nodes (if tie_selection is on in the settings this function will return the same as get_selected)\r\n\t\t * @name get_checked([full])\r\n\t\t * @param  {mixed}  full if set to `true` the returned array will consist of the full node objects, otherwise - only IDs will be returned\r\n\t\t * @return {Array}\r\n\t\t * @plugin checkbox\r\n\t\t */\r\n\t\tthis.get_checked = function (full) {\r\n\t\t\tif(this.settings.checkbox.tie_selection) { return this.get_selected(full); }\r\n\t\t\treturn full ? langx.map(this._data.checkbox.selected, langx.proxy(function (i) { return this.get_node(i); }, this)) : this._data.checkbox.selected;\r\n\t\t};\r\n\t\t/**\r\n\t\t * get an array of all top level checked nodes (ignoring children of checked nodes) (if tie_selection is on in the settings this function will return the same as get_top_selected)\r\n\t\t * @name get_top_checked([full])\r\n\t\t * @param  {mixed}  full if set to `true` the returned array will consist of the full node objects, otherwise - only IDs will be returned\r\n\t\t * @return {Array}\r\n\t\t * @plugin checkbox\r\n\t\t */\r\n\t\tthis.get_top_checked = function (full) {\r\n\t\t\tif(this.settings.checkbox.tie_selection) { return this.get_top_selected(full); }\r\n\t\t\tvar tmp = this.get_checked(true),\r\n\t\t\t\tobj = {}, i, j, k, l;\r\n\t\t\tfor(i = 0, j = tmp.length; i < j; i++) {\r\n\t\t\t\tobj[tmp[i].id] = tmp[i];\r\n\t\t\t}\r\n\t\t\tfor(i = 0, j = tmp.length; i < j; i++) {\r\n\t\t\t\tfor(k = 0, l = tmp[i].children_d.length; k < l; k++) {\r\n\t\t\t\t\tif(obj[tmp[i].children_d[k]]) {\r\n\t\t\t\t\t\tdelete obj[tmp[i].children_d[k]];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\ttmp = [];\r\n\t\t\tfor(i in obj) {\r\n\t\t\t\tif(obj.hasOwnProperty(i)) {\r\n\t\t\t\t\ttmp.push(i);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn full ? langx.map(tmp, langx.proxy(function (i) { return this.get_node(i); }, this)) : tmp;\r\n\t\t};\r\n\t\t/**\r\n\t\t * get an array of all bottom level checked nodes (ignoring selected parents) (if tie_selection is on in the settings this function will return the same as get_bottom_selected)\r\n\t\t * @name get_bottom_checked([full])\r\n\t\t * @param  {mixed}  full if set to `true` the returned array will consist of the full node objects, otherwise - only IDs will be returned\r\n\t\t * @return {Array}\r\n\t\t * @plugin checkbox\r\n\t\t */\r\n\t\tthis.get_bottom_checked = function (full) {\r\n\t\t\tif(this.settings.checkbox.tie_selection) { return this.get_bottom_selected(full); }\r\n\t\t\tvar tmp = this.get_checked(true),\r\n\t\t\t\tobj = [], i, j;\r\n\t\t\tfor(i = 0, j = tmp.length; i < j; i++) {\r\n\t\t\t\tif(!tmp[i].children.length) {\r\n\t\t\t\t\tobj.push(tmp[i].id);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn full ? langx.map(obj, langx.proxy(function (i) { return this.get_node(i); }, this)) : obj;\r\n\t\t};\r\n\t\tthis.load_node = function (obj, callback) {\r\n\t\t\tvar k, l, i, j, c, tmp;\r\n\t\t\tif(!langx.isArray(obj) && !this.settings.checkbox.tie_selection) {\r\n\t\t\t\ttmp = this.get_node(obj);\r\n\t\t\t\tif(tmp && tmp.state.loaded) {\r\n\t\t\t\t\tfor(k = 0, l = tmp.children_d.length; k < l; k++) {\r\n\t\t\t\t\t\tif(this._model.data[tmp.children_d[k]].state.checked) {\r\n\t\t\t\t\t\t\tc = true;\r\n\t\t\t\t\t\t\tthis._data.checkbox.selected = $.vakata.array_remove_item(this._data.checkbox.selected, tmp.children_d[k]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn parent.load_node.apply(this, arguments);\r\n\t\t};\r\n\t\tthis.get_state = function () {\r\n\t\t\tvar state = parent.get_state.apply(this, arguments);\r\n\t\t\tif(this.settings.checkbox.tie_selection) { return state; }\r\n\t\t\tstate.checkbox = this._data.checkbox.selected.slice();\r\n\t\t\treturn state;\r\n\t\t};\r\n\t\tthis.set_state = function (state, callback) {\r\n\t\t\tvar res = parent.set_state.apply(this, arguments);\r\n\t\t\tif(res && state.checkbox) {\r\n\t\t\t\tif(!this.settings.checkbox.tie_selection) {\r\n\t\t\t\t\tthis.uncheck_all();\r\n\t\t\t\t\tvar _this = this;\r\n\t\t\t\t\tlangx.each(state.checkbox, function (i, v) {\r\n\t\t\t\t\t\t_this.check_node(v);\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tdelete state.checkbox;\r\n\t\t\t\tthis.set_state(state, callback);\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\treturn res;\r\n\t\t};\r\n\t\tthis.refresh = function (skip_loading, forget_state) {\r\n\t\t\tif(!this.settings.checkbox.tie_selection) {\r\n\t\t\t\tthis._data.checkbox.selected = [];\r\n\t\t\t}\r\n\t\t\treturn parent.refresh.apply(this, arguments);\r\n\t\t};\r\n\t};\r\n\r\n\t// include the checkbox plugin by default\r\n\t// $.jstree.defaults.plugins.push(\"checkbox\");\r\n\r\n\treturn $;\r\n});\r\n\ndefine('skylark-widgets-hierarchy/addons/conditionalselect',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-browser\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-geom\",\r\n  \"skylark-domx-query\",\r\n  \"../Hierarchy\"\r\n],function(langx,browser,eventer,noder,geom,$,jstree){\r\n\t\"use strict\";\r\n\r\n\tif($.jstree.plugins.conditionalselect) { return; }\r\n\r\n\t/**\r\n\t * a callback (function) which is invoked in the instance's scope and receives two arguments - the node and the event that triggered the `activate_node` call. Returning false prevents working with the node, returning true allows invoking activate_node. Defaults to returning `true`.\r\n\t * @name $.jstree.defaults.checkbox.visible\r\n\t * @plugin checkbox\r\n\t */\r\n\t$.jstree.defaults.conditionalselect = function () { return true; };\r\n\t$.jstree.plugins.conditionalselect = function (options, parent) {\r\n\t\t// own function\r\n\t\tthis.activate_node = function (obj, e) {\r\n\t\t\tif(this.settings.conditionalselect.call(this, this.get_node(obj), e)) {\r\n\t\t\t\treturn parent.activate_node.call(this, obj, e);\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\treturn $;\r\n});\ndefine('skylark-widgets-hierarchy/addons/menu',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-browser\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-geom\",\r\n  \"skylark-domx-query\"\r\n],function(langx,browser,eventer,noder,geom,$){\r\n\r\n\tvar popup = null;\r\n\tvar right_to_left ;\r\n\r\n\tvar Menu = langx.Evented.inherit({\r\n        klassName: \"Menu\",\r\n\r\n        init : function(elm,options) {\r\n        \tif (!options) {\r\n        \t\toptions = elm;\r\n        \t\telm = null;\r\n        \t}\r\n\t\t\tvar self = this,$el;\r\n\r\n\t\t\tthis._options = langx.mixin({\r\n\t\t\t\t\thide_onmouseleave\t: 0,\r\n\t\t\t\t\ticons\t\t\t\t: true\r\n\r\n\t\t\t},options);\r\n\r\n\t\t\tif (!elm) {\r\n\t\t\t\t$el = this.$el = $(\"<ul class='vakata-context'></ul>\");\r\n\t\t\t} else {\r\n\t\t\t\t$el = this.$el = $(elm);\r\n\t\t\t}\r\n\r\n\t\t\tvar to = false;\r\n\t\t\t$el.on(\"mouseenter\", \"li\", function (e) {\r\n\t\t\t\t\te.stopImmediatePropagation();\r\n\r\n\t\t\t\t\tif(noder.contains(this, e.relatedTarget)) {\r\n\t\t\t\t\t\t// премахнато заради delegate mouseleave по-долу\r\n\t\t\t\t\t\t// $(this).find(\".vakata-context-hover\").removeClass(\"vakata-context-hover\");\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif(to) { clearTimeout(to); }\r\n\t\t\t\t\t$el.find(\".vakata-context-hover\").removeClass(\"vakata-context-hover\").end();\r\n\r\n\t\t\t\t\t$(this)\r\n\t\t\t\t\t\t.siblings().find(\"ul\").hide().end().end()\r\n\t\t\t\t\t\t.parentsUntil(\".vakata-context\", \"li\").addBack().addClass(\"vakata-context-hover\");\r\n\t\t\t\t\tself._show_submenu(this);\r\n\t\t\t\t})\r\n\t\t\t\t// тестово - дали не натоварва?\r\n\t\t\t\t.on(\"mouseleave\", \"li\", function (e) {\r\n\t\t\t\t\tif(noder.contains(this, e.relatedTarget)) { return; }\r\n\t\t\t\t\t$(this).find(\".vakata-context-hover\").addBack().removeClass(\"vakata-context-hover\");\r\n\t\t\t\t})\r\n\t\t\t\t.on(\"mouseleave\", function (e) {\r\n\t\t\t\t\t$(this).find(\".vakata-context-hover\").removeClass(\"vakata-context-hover\");\r\n\t\t\t\t\tif(self._options.hide_onmouseleave) {\r\n\t\t\t\t\t\tto = setTimeout(\r\n\t\t\t\t\t\t\t(function (t) {\r\n\t\t\t\t\t\t\t\treturn function () { self.hide(); };\r\n\t\t\t\t\t\t\t}(this)), self._options.hide_onmouseleave);\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t\t.on(\"click\", \"a\", function (e) {\r\n\t\t\t\t\te.preventDefault();\r\n\t\t\t\t//})\r\n\t\t\t\t//.on(\"mouseup\", \"a\", function (e) {\r\n\t\t\t\t\tif(!$(this).blur().parent().hasClass(\"vakata-context-disabled\") && self._execute($(this).attr(\"rel\")) !== false) {\r\n\t\t\t\t\t\tself.hide();\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t\t.on('keydown', 'a', function (e) {\r\n\t\t\t\t\t\tvar o = null;\r\n\t\t\t\t\t\tswitch(e.which) {\r\n\t\t\t\t\t\t\tcase 13:\r\n\t\t\t\t\t\t\tcase 32:\r\n\t\t\t\t\t\t\t\te.type = \"click\";\r\n\t\t\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\t\t\t$(e.currentTarget).trigger(e);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase 37:\r\n\t\t\t\t\t\t\t\tself.$el.find(\".vakata-context-hover\").last().closest(\"li\").first().find(\"ul\").hide().find(\".vakata-context-hover\").removeClass(\"vakata-context-hover\").end().end().children('a').focus();\r\n\t\t\t\t\t\t\t\te.stopImmediatePropagation();\r\n\t\t\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase 38:\r\n\t\t\t\t\t\t\t\to = self.$el.find(\"ul:visible\").addBack().last().children(\".vakata-context-hover\").removeClass(\"vakata-context-hover\").prevAll(\"li:not(.vakata-context-separator)\").first();\r\n\t\t\t\t\t\t\t\tif(!o.length) { o = self.$el.find(\"ul:visible\").addBack().last().children(\"li:not(.vakata-context-separator)\").last(); }\r\n\t\t\t\t\t\t\t\to.addClass(\"vakata-context-hover\").children('a').focus();\r\n\t\t\t\t\t\t\t\te.stopImmediatePropagation();\r\n\t\t\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase 39:\r\n\t\t\t\t\t\t\t\tself.$el.find(\".vakata-context-hover\").last().children(\"ul\").show().children(\"li:not(.vakata-context-separator)\").removeClass(\"vakata-context-hover\").first().addClass(\"vakata-context-hover\").children('a').focus();\r\n\t\t\t\t\t\t\t\te.stopImmediatePropagation();\r\n\t\t\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase 40:\r\n\t\t\t\t\t\t\t\to = self.$el.find(\"ul:visible\").addBack().last().children(\".vakata-context-hover\").removeClass(\"vakata-context-hover\").nextAll(\"li:not(.vakata-context-separator)\").first();\r\n\t\t\t\t\t\t\t\tif(!o.length) { o = self.$el.find(\"ul:visible\").addBack().last().children(\"li:not(.vakata-context-separator)\").first(); }\r\n\t\t\t\t\t\t\t\to.addClass(\"vakata-context-hover\").children('a').focus();\r\n\t\t\t\t\t\t\t\te.stopImmediatePropagation();\r\n\t\t\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase 27:\r\n\t\t\t\t\t\t\t\tself.hide();\r\n\t\t\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\t//console.log(e.which);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t\t.on('keydown', function (e) {\r\n\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\tvar a = self.$el.find('.vakata-contextmenu-shortcut-' + e.which).parent();\r\n\t\t\t\t\tif(a.parent().not('.vakata-context-disabled')) {\r\n\t\t\t\t\t\ta.click();\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\tthis.render();\r\n        },\r\n\r\n        render : function() {\r\n        \tvar items = this._options.items;\r\n\t\t\tif(this._parse(items)) {\r\n\t\t\t\tthis.$el.html(this.html);\r\n\t\t\t}\r\n\t\t\tthis.$el.width('');\r\n        },\r\n\r\n\t\t_trigger : function (event_name) {\r\n\t\t\t$(document).trigger(\"context_\" + event_name + \".sbswt\", {\r\n\t\t\t\t\"reference\"\t: this.reference,\r\n\t\t\t\t\"element\"\t: this.$el,\r\n\t\t\t\t\"position\"\t: {\r\n\t\t\t\t\t\"x\" : this.position_x,\r\n\t\t\t\t\t\"y\" : this.position_y\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t},        \r\n\r\n\t\t_execute : function (i) {\r\n\t\t\ti = this.items[i];\r\n\t\t\treturn i && (!i._disabled || (langx.isFunction(i._disabled) && !i._disabled({ \"item\" : i, \"reference\" : this.reference, \"element\" : this.$el }))) && i.action ? i.action.call(null, {\r\n\t\t\t\t\t\t\"item\"\t\t: i,\r\n\t\t\t\t\t\t\"reference\"\t: this.reference,\r\n\t\t\t\t\t\t\"element\"\t: this.$el,\r\n\t\t\t\t\t\t\"position\"\t: {\r\n\t\t\t\t\t\t\t\"x\" : this.position_x,\r\n\t\t\t\t\t\t\t\"y\" : this.position_y\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}) : false;\r\n\t\t},\r\n\t\t_parse : function (o, is_callback) {\r\n\t\t\tvar self = this,\r\n\t\t\t\treference = self._options.reference;\r\n\r\n\t\t\tif(!o) { return false; }\r\n\t\t\tif(!is_callback) {\r\n\t\t\t\tself.html\t\t= \"\";\r\n\t\t\t\tself.items\t= [];\r\n\t\t\t}\r\n\t\t\tvar str = \"\",\r\n\t\t\t\tsep = false,\r\n\t\t\t\ttmp;\r\n\r\n\t\t\tif(is_callback) { str += \"<\"+\"ul>\"; }\r\n\t\t\tlangx.each(o, function (i, val) {\r\n\t\t\t\tif(!val) { return true; }\r\n\t\t\t\tself.items.push(val);\r\n\t\t\t\tif(!sep && val.separator_before) {\r\n\t\t\t\t\tstr += \"<\"+\"li class='vakata-context-separator'><\"+\"a href='#' \" + (self._options.icons ? '' : 'style=\"margin-left:0px;\"') + \">&#160;<\"+\"/a><\"+\"/li>\";\r\n\t\t\t\t}\r\n\t\t\t\tsep = false;\r\n\t\t\t\tstr += \"<\"+\"li class='\" + (val._class || \"\") + (val._disabled === true || (langx.isFunction(val._disabled) && val._disabled({ \"item\" : val, \"reference\" : reference, \"element\" : self.$el })) ? \" vakata-contextmenu-disabled \" : \"\") + \"' \"+(val.shortcut?\" data-shortcut='\"+val.shortcut+\"' \":'')+\">\";\r\n\t\t\t\tstr += \"<\"+\"a href='#' rel='\" + (self.items.length - 1) + \"' \" + (val.title ? \"title='\" + val.title + \"'\" : \"\") + \">\";\r\n\t\t\t\tif(self._options.icons) {\r\n\t\t\t\t\tstr += \"<\"+\"i \";\r\n\t\t\t\t\tif(val.icon) {\r\n\t\t\t\t\t\tif(val.icon.indexOf(\"/\") !== -1 || val.icon.indexOf(\".\") !== -1) { str += \" style='background:url(\\\"\" + val.icon + \"\\\") center center no-repeat' \"; }\r\n\t\t\t\t\t\telse { str += \" class='\" + val.icon + \"' \"; }\r\n\t\t\t\t\t}\r\n\t\t\t\t\tstr += \"><\"+\"/i><\"+\"span class='vakata-contextmenu-sep'>&#160;<\"+\"/span>\";\r\n\t\t\t\t}\r\n\t\t\t\tstr += (langx.isFunction(val.label) ? val.label({ \"item\" : i, \"reference\" : reference, \"element\" : self.$el }) : val.label) + (val.shortcut?' <span class=\"vakata-contextmenu-shortcut vakata-contextmenu-shortcut-'+val.shortcut+'\">'+ (val.shortcut_label || '') +'</span>':'') + \"<\"+\"/a>\";\r\n\t\t\t\tif(val.submenu) {\r\n\t\t\t\t\ttmp = self._parse(val.submenu, true);\r\n\t\t\t\t\tif(tmp) { str += tmp; }\r\n\t\t\t\t}\r\n\t\t\t\tstr += \"<\"+\"/li>\";\r\n\t\t\t\tif(val.separator_after) {\r\n\t\t\t\t\tstr += \"<\"+\"li class='vakata-context-separator'><\"+\"a href='#' \" + (self._options.icons ? '' : 'style=\"margin-left:0px;\"') + \">&#160;<\"+\"/a><\"+\"/li>\";\r\n\t\t\t\t\tsep = true;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tstr  = str.replace(/<li class\\='vakata-context-separator'\\><\\/li\\>$/,\"\");\r\n\t\t\tif(is_callback) { str += \"</ul>\"; }\r\n\t\t\t/**\r\n\t\t\t * triggered on the document when the contextmenu is parsed (HTML is built)\r\n\t\t\t * @event\r\n\t\t\t * @plugin contextmenu\r\n\t\t\t * @name context_parse.vakata\r\n\t\t\t * @param {jQuery} reference the element that was right clicked\r\n\t\t\t * @param {jQuery} element the DOM element of the menu itself\r\n\t\t\t * @param {Object} position the x & y coordinates of the menu\r\n\t\t\t */\r\n\t\t\tif(!is_callback) { self.html = str; self._trigger(\"parse\"); }\r\n\t\t\treturn str.length > 10 ? str : false;\r\n\t\t},\r\n\t\t_show_submenu : function (o) {\r\n\t\t\to = $(o);\r\n\t\t\tif(!o.length || !o.children(\"ul\").length) { return; }\r\n\t\t\tvar e = o.children(\"ul\"),\r\n\t\t\t\txl = o.offset().left,\r\n\t\t\t\tx = xl + o.outerWidth(),\r\n\t\t\t\ty = o.offset().top,\r\n\t\t\t\tw = e.width(),\r\n\t\t\t\th = e.height(),\r\n\t\t\t\tdw = $(window).width() + $(window).scrollLeft(),\r\n\t\t\t\tdh = $(window).height() + $(window).scrollTop();\r\n\t\t\t// може да се спести е една проверка - дали няма някой от класовете вече нагоре\r\n\t\t\tif(right_to_left) {\r\n\t\t\t\to[x - (w + 10 + o.outerWidth()) < 0 ? \"addClass\" : \"removeClass\"](\"vakata-context-left\");\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\to[x + w > dw  && xl > dw - x ? \"addClass\" : \"removeClass\"](\"vakata-context-right\");\r\n\t\t\t}\r\n\t\t\tif(y + h + 10 > dh) {\r\n\t\t\t\te.css(\"bottom\",\"-1px\");\r\n\t\t\t}\r\n\r\n\t\t\t//if does not fit - stick it to the side\r\n\t\t\tif (o.hasClass('vakata-context-right')) {\r\n\t\t\t\tif (xl < w) {\r\n\t\t\t\t\te.css(\"margin-right\", xl - w);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tif (dw - x < w) {\r\n\t\t\t\t\te.css(\"margin-left\", dw - x - w);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\te.show();\r\n\t\t},\r\n\t\tshow : function (reference, position, data) {\r\n\t\t\tvar o, e, x, y, w, h, dw, dh, cond = true;\r\n\t\t\tswitch(cond) {\r\n\t\t\t\tcase (!position && !reference):\r\n\t\t\t\t\treturn false;\r\n\t\t\t\tcase (!!position && !!reference):\r\n\t\t\t\t\tthis.reference\t= reference;\r\n\t\t\t\t\tthis.position_x\t= position.x;\r\n\t\t\t\t\tthis.position_y\t= position.y;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase (!position && !!reference):\r\n\t\t\t\t\tthis.reference\t= reference;\r\n\t\t\t\t\to = reference.offset();\r\n\t\t\t\t\tthis.position_x\t= o.left + reference.outerHeight();\r\n\t\t\t\t\tthis.position_y\t= o.top;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase (!!position && !reference):\r\n\t\t\t\t\tthis.position_x\t= position.x;\r\n\t\t\t\t\tthis.position_y\t= position.y;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tif(!!reference && !data && $(reference).data('vakata_contextmenu')) {\r\n\t\t\t\tdata = $(reference).data('vakata_contextmenu');\r\n\t\t\t}\r\n\r\n\t\t\tif(this.items.length) {\r\n\t\t\t\tthis.$el.appendTo(document.body);\r\n\t\t\t\te = this.$el;\r\n\t\t\t\tx = this.position_x;\r\n\t\t\t\ty = this.position_y;\r\n\t\t\t\tw = e.width();\r\n\t\t\t\th = e.height();\r\n\t\t\t\tdw = $(window).width() + $(window).scrollLeft();\r\n\t\t\t\tdh = $(window).height() + $(window).scrollTop();\r\n\t\t\t\tif(right_to_left) {\r\n\t\t\t\t\tx -= (e.outerWidth() - $(reference).outerWidth());\r\n\t\t\t\t\tif(x < $(window).scrollLeft() + 20) {\r\n\t\t\t\t\t\tx = $(window).scrollLeft() + 20;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif(x + w + 20 > dw) {\r\n\t\t\t\t\tx = dw - (w + 20);\r\n\t\t\t\t}\r\n\t\t\t\tif(y + h + 20 > dh) {\r\n\t\t\t\t\ty = dh - (h + 20);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.$el\r\n\t\t\t\t\t.css({ \"left\" : x, \"top\" : y })\r\n\t\t\t\t\t.show()\r\n\t\t\t\t\t.find('a').first().focus().parent().addClass(\"vakata-context-hover\");\r\n\t\t\t\tthis.is_visible = true;\r\n\r\n\t\t\t\tpopup = this;\r\n\r\n\t\t\t\t/**\r\n\t\t\t\t * triggered on the document when the contextmenu is shown\r\n\t\t\t\t * @event\r\n\t\t\t\t * @plugin contextmenu\r\n\t\t\t\t * @name context_show.vakata\r\n\t\t\t\t * @param {jQuery} reference the element that was right clicked\r\n\t\t\t\t * @param {jQuery} element the DOM element of the menu itself\r\n\t\t\t\t * @param {Object} position the x & y coordinates of the menu\r\n\t\t\t\t */\r\n\t\t\t\tthis._trigger(\"show\");\r\n\t\t\t}\r\n\t\t},\r\n\t\thide : function () {\r\n\t\t\tif(this.is_visible) {\r\n\t\t\t\tthis.$el.hide().find(\"ul\").hide().end().find(':focus').blur().end().detach();\r\n\t\t\t\tthis.is_visible = false;\r\n\t\t\t\tpopup = null;\r\n\t\t\t\t/**\r\n\t\t\t\t * triggered on the document when the contextmenu is hidden\r\n\t\t\t\t * @event\r\n\t\t\t\t * @plugin contextmenu\r\n\t\t\t\t * @name context_hide.vakata\r\n\t\t\t\t * @param {jQuery} reference the element that was right clicked\r\n\t\t\t\t * @param {jQuery} element the DOM element of the menu itself\r\n\t\t\t\t * @param {Object} position the x & y coordinates of the menu\r\n\t\t\t\t */\r\n\t\t\t\tthis._trigger(\"hide\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n    });\t\r\n\r\n\t$(function () {\r\n\t\tright_to_left = $(document.body).css(\"direction\") === \"rtl\";\r\n\r\n\t\t$(document)\r\n\t\t\t.on(\"mousedown.sbswt.popup\", function (e) {\r\n\t\t\t\tif(popup && popup.$el[0] !== e.target  && !noder.contains(popup.$el[0], e.target)) {\r\n\t\t\t\t\tpopup.hide();\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.on(\"context_show.sbswt.popup\", function (e, data) {\r\n\t\t\t\tpopup.$el.find(\"li:has(ul)\").children(\"a\").addClass(\"vakata-context-parent\");\r\n\t\t\t\tif(right_to_left) {\r\n\t\t\t\t\tpopup.$el.addClass(\"vakata-context-rtl\").css(\"direction\", \"rtl\");\r\n\t\t\t\t}\r\n\t\t\t\t// also apply a RTL class?\r\n\t\t\t\tpopup.$el.find(\"ul\").hide().end();\r\n\t\t\t});\r\n\t});\r\n\r\n\tMenu.popup = function (reference, position, data) {\r\n\t\tvar m = new Menu({\r\n\t\t\treference : reference,\r\n\t\t\titems : data\r\n\t\t});\r\n\t\tm.show(reference,position);\r\n\t};\r\n\r\n\tMenu.hide = function() {\r\n\t\tif (popup) {\r\n\t\t\tpopup.hide();\r\n\t\t}\r\n\t}\r\n\r\n\treturn Menu;\r\n\r\n});\ndefine('skylark-widgets-hierarchy/addons/contextmenu',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-browser\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-geom\",\r\n  \"skylark-domx-query\",\r\n  \"./menu\",\r\n  \"../Hierarchy\"\r\n],function(langx,browser,eventer,noder,geom,$, menu,jstree){\r\n\r\n\t\"use strict\";\r\n\r\n\tif($.jstree.plugins.contextmenu) { return; }\r\n\r\n\t/**\r\n\t * stores all defaults for the contextmenu plugin\r\n\t * @name $.jstree.defaults.contextmenu\r\n\t * @plugin contextmenu\r\n\t */\r\n\t$.jstree.defaults.contextmenu = {\r\n\t\t/**\r\n\t\t * a boolean indicating if the node should be selected when the context menu is invoked on it. Defaults to `true`.\r\n\t\t * @name $.jstree.defaults.contextmenu.select_node\r\n\t\t * @plugin contextmenu\r\n\t\t */\r\n\t\tselect_node : true,\r\n\t\t/**\r\n\t\t * a boolean indicating if the menu should be shown aligned with the node. Defaults to `true`, otherwise the mouse coordinates are used.\r\n\t\t * @name $.jstree.defaults.contextmenu.show_at_node\r\n\t\t * @plugin contextmenu\r\n\t\t */\r\n\t\tshow_at_node : true,\r\n\t\t/**\r\n\t\t * an object of actions, or a function that accepts a node and a callback function and calls the callback function with an object of actions available for that node (you can also return the items too).\r\n\t\t *\r\n\t\t * Each action consists of a key (a unique name) and a value which is an object with the following properties (only label and action are required). Once a menu item is activated the `action` function will be invoked with an object containing the following keys: item - the contextmenu item definition as seen below, reference - the DOM node that was used (the tree node), element - the contextmenu DOM element, position - an object with x/y properties indicating the position of the menu.\r\n\t\t *\r\n\t\t * * `separator_before` - a boolean indicating if there should be a separator before this item\r\n\t\t * * `separator_after` - a boolean indicating if there should be a separator after this item\r\n\t\t * * `_disabled` - a boolean indicating if this action should be disabled\r\n\t\t * * `label` - a string - the name of the action (could be a function returning a string)\r\n\t\t * * `title` - a string - an optional tooltip for the item\r\n\t\t * * `action` - a function to be executed if this item is chosen, the function will receive \r\n\t\t * * `icon` - a string, can be a path to an icon or a className, if using an image that is in the current directory use a `./` prefix, otherwise it will be detected as a class\r\n\t\t * * `shortcut` - keyCode which will trigger the action if the menu is open (for example `113` for rename, which equals F2)\r\n\t\t * * `shortcut_label` - shortcut label (like for example `F2` for rename)\r\n\t\t * * `submenu` - an object with the same structure as $.jstree.defaults.contextmenu.items which can be used to create a submenu - each key will be rendered as a separate option in a submenu that will appear once the current item is hovered\r\n\t\t *\r\n\t\t * @name $.jstree.defaults.contextmenu.items\r\n\t\t * @plugin contextmenu\r\n\t\t */\r\n\t\titems : function (o, cb) { // Could be an object directly\r\n\t\t\treturn {\r\n\t\t\t\t\"create\" : {\r\n\t\t\t\t\t\"separator_before\"\t: false,\r\n\t\t\t\t\t\"separator_after\"\t: true,\r\n\t\t\t\t\t\"_disabled\"\t\t\t: false, //(this.check(\"create_node\", data.reference, {}, \"last\")),\r\n\t\t\t\t\t\"label\"\t\t\t\t: \"Create\",\r\n\t\t\t\t\t\"action\"\t\t\t: function (data) {\r\n\t\t\t\t\t\tvar inst = $.jstree.reference(data.reference),\r\n\t\t\t\t\t\t\tobj = inst.get_node(data.reference);\r\n\t\t\t\t\t\tinst.create_node(obj, {}, \"last\", function (new_node) {\r\n\t\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\t\tinst.edit(new_node);\r\n\t\t\t\t\t\t\t} catch (ex) {\r\n\t\t\t\t\t\t\t\tsetTimeout(function () { inst.edit(new_node); },0);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\t\"rename\" : {\r\n\t\t\t\t\t\"separator_before\"\t: false,\r\n\t\t\t\t\t\"separator_after\"\t: false,\r\n\t\t\t\t\t\"_disabled\"\t\t\t: false, //(this.check(\"rename_node\", data.reference, this.get_parent(data.reference), \"\")),\r\n\t\t\t\t\t\"label\"\t\t\t\t: \"Rename\",\r\n\t\t\t\t\t/*!\r\n\t\t\t\t\t\"shortcut\"\t\t\t: 113,\r\n\t\t\t\t\t\"shortcut_label\"\t: 'F2',\r\n\t\t\t\t\t\"icon\"\t\t\t\t: \"glyphicon glyphicon-leaf\",\r\n\t\t\t\t\t*/\r\n\t\t\t\t\t\"action\"\t\t\t: function (data) {\r\n\t\t\t\t\t\tvar inst = $.jstree.reference(data.reference),\r\n\t\t\t\t\t\t\tobj = inst.get_node(data.reference);\r\n\t\t\t\t\t\tinst.edit(obj);\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\t\"remove\" : {\r\n\t\t\t\t\t\"separator_before\"\t: false,\r\n\t\t\t\t\t\"icon\"\t\t\t\t: false,\r\n\t\t\t\t\t\"separator_after\"\t: false,\r\n\t\t\t\t\t\"_disabled\"\t\t\t: false, //(this.check(\"delete_node\", data.reference, this.get_parent(data.reference), \"\")),\r\n\t\t\t\t\t\"label\"\t\t\t\t: \"Delete\",\r\n\t\t\t\t\t\"action\"\t\t\t: function (data) {\r\n\t\t\t\t\t\tvar inst = $.jstree.reference(data.reference),\r\n\t\t\t\t\t\t\tobj = inst.get_node(data.reference);\r\n\t\t\t\t\t\tif(inst.is_selected(obj)) {\r\n\t\t\t\t\t\t\tinst.delete_node(inst.get_selected());\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tinst.delete_node(obj);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\t\"ccp\" : {\r\n\t\t\t\t\t\"separator_before\"\t: true,\r\n\t\t\t\t\t\"icon\"\t\t\t\t: false,\r\n\t\t\t\t\t\"separator_after\"\t: false,\r\n\t\t\t\t\t\"label\"\t\t\t\t: \"Edit\",\r\n\t\t\t\t\t\"action\"\t\t\t: false,\r\n\t\t\t\t\t\"submenu\" : {\r\n\t\t\t\t\t\t\"cut\" : {\r\n\t\t\t\t\t\t\t\"separator_before\"\t: false,\r\n\t\t\t\t\t\t\t\"separator_after\"\t: false,\r\n\t\t\t\t\t\t\t\"label\"\t\t\t\t: \"Cut\",\r\n\t\t\t\t\t\t\t\"action\"\t\t\t: function (data) {\r\n\t\t\t\t\t\t\t\tvar inst = $.jstree.reference(data.reference),\r\n\t\t\t\t\t\t\t\t\tobj = inst.get_node(data.reference);\r\n\t\t\t\t\t\t\t\tif(inst.is_selected(obj)) {\r\n\t\t\t\t\t\t\t\t\tinst.cut(inst.get_top_selected());\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tinst.cut(obj);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"copy\" : {\r\n\t\t\t\t\t\t\t\"separator_before\"\t: false,\r\n\t\t\t\t\t\t\t\"icon\"\t\t\t\t: false,\r\n\t\t\t\t\t\t\t\"separator_after\"\t: false,\r\n\t\t\t\t\t\t\t\"label\"\t\t\t\t: \"Copy\",\r\n\t\t\t\t\t\t\t\"action\"\t\t\t: function (data) {\r\n\t\t\t\t\t\t\t\tvar inst = $.jstree.reference(data.reference),\r\n\t\t\t\t\t\t\t\t\tobj = inst.get_node(data.reference);\r\n\t\t\t\t\t\t\t\tif(inst.is_selected(obj)) {\r\n\t\t\t\t\t\t\t\t\tinst.copy(inst.get_top_selected());\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tinst.copy(obj);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"paste\" : {\r\n\t\t\t\t\t\t\t\"separator_before\"\t: false,\r\n\t\t\t\t\t\t\t\"icon\"\t\t\t\t: false,\r\n\t\t\t\t\t\t\t\"_disabled\"\t\t\t: function (data) {\r\n\t\t\t\t\t\t\t\treturn !$.jstree.reference(data.reference).can_paste();\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\"separator_after\"\t: false,\r\n\t\t\t\t\t\t\t\"label\"\t\t\t\t: \"Paste\",\r\n\t\t\t\t\t\t\t\"action\"\t\t\t: function (data) {\r\n\t\t\t\t\t\t\t\tvar inst = $.jstree.reference(data.reference),\r\n\t\t\t\t\t\t\t\t\tobj = inst.get_node(data.reference);\r\n\t\t\t\t\t\t\t\tinst.paste(obj);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t}\r\n\t};\r\n\r\n\t$.jstree.plugins.contextmenu = function (options, parent) {\r\n\t\tthis.bind = function () {\r\n\t\t\tparent.bind.call(this);\r\n\r\n\t\t\tvar last_ts = 0, cto = null, ex, ey;\r\n\t\t\tthis.element\r\n\t\t\t\t.on(\"init.jstree loading.jstree ready.jstree\", langx.proxy(function () {\r\n\t\t\t\t\t\tthis.get_container_ul().addClass('jstree-contextmenu');\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on(\"contextmenu.jstree\", \".jstree-anchor\", langx.proxy(function (e, data) {\r\n\t\t\t\t\t\tif (e.target.tagName.toLowerCase() === 'input') {\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\tlast_ts = e.ctrlKey ? +new Date() : 0;\r\n\t\t\t\t\t\tif(data || cto) {\r\n\t\t\t\t\t\t\tlast_ts = (+new Date()) + 10000;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(cto) {\r\n\t\t\t\t\t\t\tclearTimeout(cto);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(!this.is_loading(e.currentTarget)) {\r\n\t\t\t\t\t\t\tthis.show_contextmenu(e.currentTarget, e.pageX, e.pageY, e);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on(\"click.jstree\", \".jstree-anchor\", langx.proxy(function (e) {\r\n\t\t\t\t\t\tif(this._data.contextmenu.visible && (!last_ts || (+new Date()) - last_ts > 250)) { // work around safari & macOS ctrl+click\r\n\t\t\t\t\t\t\tmenu.hide();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tlast_ts = 0;\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on(\"touchstart.jstree\", \".jstree-anchor\", function (e) {\r\n\t\t\t\t\t\tif(!e.originalEvent || !e.originalEvent.changedTouches || !e.originalEvent.changedTouches[0]) {\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tex = e.originalEvent.changedTouches[0].clientX;\r\n\t\t\t\t\t\tey = e.originalEvent.changedTouches[0].clientY;\r\n\t\t\t\t\t\tcto = setTimeout(function () {\r\n\t\t\t\t\t\t\t$(e.currentTarget).trigger('contextmenu', true);\r\n\t\t\t\t\t\t}, 750);\r\n\t\t\t\t\t})\r\n\t\t\t\t.on('touchmove.vakata.jstree', function (e) {\r\n\t\t\t\t\t\tif(cto && e.originalEvent && e.originalEvent.changedTouches && e.originalEvent.changedTouches[0] && (Math.abs(ex - e.originalEvent.changedTouches[0].clientX) > 10 || Math.abs(ey - e.originalEvent.changedTouches[0].clientY) > 10)) {\r\n\t\t\t\t\t\t\tclearTimeout(cto);\r\n\t\t\t\t\t\t\tmenu.hide();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t\t.on('touchend.vakata.jstree', function (e) {\r\n\t\t\t\t\t\tif(cto) {\r\n\t\t\t\t\t\t\tclearTimeout(cto);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\r\n\t\t\t/*!\r\n\t\t\tif(!('oncontextmenu' in document.body) && ('ontouchstart' in document.body)) {\r\n\t\t\t\tvar el = null, tm = null;\r\n\t\t\t\tthis.element\r\n\t\t\t\t\t.on(\"touchstart\", \".jstree-anchor\", function (e) {\r\n\t\t\t\t\t\tel = e.currentTarget;\r\n\t\t\t\t\t\ttm = +new Date();\r\n\t\t\t\t\t\t$(document).one(\"touchend\", function (e) {\r\n\t\t\t\t\t\t\te.target = document.elementFromPoint(e.originalEvent.targetTouches[0].pageX - window.pageXOffset, e.originalEvent.targetTouches[0].pageY - window.pageYOffset);\r\n\t\t\t\t\t\t\te.currentTarget = e.target;\r\n\t\t\t\t\t\t\ttm = ((+(new Date())) - tm);\r\n\t\t\t\t\t\t\tif(e.target === el && tm > 600 && tm < 1000) {\r\n\t\t\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\t\t\t$(el).trigger('contextmenu', e);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tel = null;\r\n\t\t\t\t\t\t\ttm = null;\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t});\r\n\t\t\t}\r\n\t\t\t*/\r\n\t\t\t$(document).on(\"context_hide.sbswt.popup\", langx.proxy(function (e, data) {\r\n\t\t\t\tthis._data.contextmenu.visible = false;\r\n\t\t\t\t$(data.reference).removeClass('jstree-context');\r\n\t\t\t}, this));\r\n\t\t};\r\n\t\tthis.teardown = function () {\r\n\t\t\tif(this._data.contextmenu.visible) {\r\n\t\t\t\tmenu.hide();\r\n\t\t\t}\r\n\t\t\tparent.teardown.call(this);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * prepare and show the context menu for a node\r\n\t\t * @name show_contextmenu(obj [, x, y])\r\n\t\t * @param {mixed} obj the node\r\n\t\t * @param {Number} x the x-coordinate relative to the document to show the menu at\r\n\t\t * @param {Number} y the y-coordinate relative to the document to show the menu at\r\n\t\t * @param {Object} e the event if available that triggered the contextmenu\r\n\t\t * @plugin contextmenu\r\n\t\t * @trigger show_contextmenu.jstree\r\n\t\t */\r\n\t\tthis.show_contextmenu = function (obj, x, y, e) {\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root) { return false; }\r\n\t\t\tvar s = this.settings.contextmenu,\r\n\t\t\t\td = this.get_node(obj, true),\r\n\t\t\t\ta = d.children(\".jstree-anchor\"),\r\n\t\t\t\to = false,\r\n\t\t\t\ti = false;\r\n\t\t\tif(s.show_at_node || x === undefined || y === undefined) {\r\n\t\t\t\to = a.offset();\r\n\t\t\t\tx = o.left;\r\n\t\t\t\ty = o.top + this._data.core.li_height;\r\n\t\t\t}\r\n\t\t\tif(this.settings.contextmenu.select_node && !this.is_selected(obj)) {\r\n\t\t\t\tthis.activate_node(obj, e);\r\n\t\t\t}\r\n\r\n\t\t\ti = s.items;\r\n\t\t\tif(langx.isFunction(i)) {\r\n\t\t\t\ti = i.call(this, obj, langx.proxy(function (i) {\r\n\t\t\t\t\tthis._show_contextmenu(obj, x, y, i);\r\n\t\t\t\t}, this));\r\n\t\t\t}\r\n\t\t\tif(langx.isPlainObject(i)) {\r\n\t\t\t\tthis._show_contextmenu(obj, x, y, i);\r\n\t\t\t}\r\n\t\t};\r\n\t\t/**\r\n\t\t * show the prepared context menu for a node\r\n\t\t * @name _show_contextmenu(obj, x, y, i)\r\n\t\t * @param {mixed} obj the node\r\n\t\t * @param {Number} x the x-coordinate relative to the document to show the menu at\r\n\t\t * @param {Number} y the y-coordinate relative to the document to show the menu at\r\n\t\t * @param {Number} i the object of items to show\r\n\t\t * @plugin contextmenu\r\n\t\t * @trigger show_contextmenu.jstree\r\n\t\t * @private\r\n\t\t */\r\n\t\tthis._show_contextmenu = function (obj, x, y, i) {\r\n\t\t\tvar d = this.get_node(obj, true),\r\n\t\t\t\ta = d.children(\".jstree-anchor\");\r\n\t\t\t$(document).one(\"context_show.sbswt.popup\", langx.proxy(function (e, data) {\r\n\t\t\t\tvar cls = 'jstree-contextmenu jstree-' + this.get_theme() + '-contextmenu';\r\n\t\t\t\t$(data.element).addClass(cls);\r\n\t\t\t\ta.addClass('jstree-context');\r\n\t\t\t}, this));\r\n\t\t\tthis._data.contextmenu.visible = true;\r\n\t\t\tmenu.popup(a, { 'x' : x, 'y' : y }, i);\r\n\t\t\t/**\r\n\t\t\t * triggered when the contextmenu is shown for a node\r\n\t\t\t * @event\r\n\t\t\t * @name show_contextmenu.jstree\r\n\t\t\t * @param {Object} node the node\r\n\t\t\t * @param {Number} x the x-coordinate of the menu relative to the document\r\n\t\t\t * @param {Number} y the y-coordinate of the menu relative to the document\r\n\t\t\t * @plugin contextmenu\r\n\t\t\t */\r\n\t\t\tthis.trigger('show_contextmenu', { \"node\" : obj, \"x\" : x, \"y\" : y });\r\n\t\t};\r\n\t};\r\n\r\n\t// $.jstree.defaults.plugins.push(\"contextmenu\");\r\n\r\n\treturn $;\r\n\t\r\n});\r\n\ndefine('skylark-widgets-hierarchy/addons/dnd',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-browser\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-geom\",\r\n  \"skylark-domx-query\",\r\n  \"../Hierarchy\"\r\n],function(langx,browser,eventer,noder,geom,$,jstree){\r\n\r\n\t\"use strict\";\r\n\r\n\tif($.jstree.plugins.dnd) { return; }\r\n\r\n\t/**\r\n\t * stores all defaults for the drag'n'drop plugin\r\n\t * @name $.jstree.defaults.dnd\r\n\t * @plugin dnd\r\n\t */\r\n\t$.jstree.defaults.dnd = {\r\n\t\t/**\r\n\t\t * a boolean indicating if a copy should be possible while dragging (by pressint the meta key or Ctrl). Defaults to `true`.\r\n\t\t * @name $.jstree.defaults.dnd.copy\r\n\t\t * @plugin dnd\r\n\t\t */\r\n\t\tcopy : true,\r\n\t\t/**\r\n\t\t * a number indicating how long a node should remain hovered while dragging to be opened. Defaults to `500`.\r\n\t\t * @name $.jstree.defaults.dnd.open_timeout\r\n\t\t * @plugin dnd\r\n\t\t */\r\n\t\topen_timeout : 500,\r\n\t\t/**\r\n\t\t * a function invoked each time a node is about to be dragged, invoked in the tree's scope and receives the nodes about to be dragged as an argument (array) and the event that started the drag - return `false` to prevent dragging\r\n\t\t * @name $.jstree.defaults.dnd.is_draggable\r\n\t\t * @plugin dnd\r\n\t\t */\r\n\t\tis_draggable : true,\r\n\t\t/**\r\n\t\t * a boolean indicating if checks should constantly be made while the user is dragging the node (as opposed to checking only on drop), default is `true`\r\n\t\t * @name $.jstree.defaults.dnd.check_while_dragging\r\n\t\t * @plugin dnd\r\n\t\t */\r\n\t\tcheck_while_dragging : true,\r\n\t\t/**\r\n\t\t * a boolean indicating if nodes from this tree should only be copied with dnd (as opposed to moved), default is `false`\r\n\t\t * @name $.jstree.defaults.dnd.always_copy\r\n\t\t * @plugin dnd\r\n\t\t */\r\n\t\talways_copy : false,\r\n\t\t/**\r\n\t\t * when dropping a node \"inside\", this setting indicates the position the node should go to - it can be an integer or a string: \"first\" (same as 0) or \"last\", default is `0`\r\n\t\t * @name $.jstree.defaults.dnd.inside_pos\r\n\t\t * @plugin dnd\r\n\t\t */\r\n\t\tinside_pos : 0,\r\n\t\t/**\r\n\t\t * when starting the drag on a node that is selected this setting controls if all selected nodes are dragged or only the single node, default is `true`, which means all selected nodes are dragged when the drag is started on a selected node\r\n\t\t * @name $.jstree.defaults.dnd.drag_selection\r\n\t\t * @plugin dnd\r\n\t\t */\r\n\t\tdrag_selection : true,\r\n\t\t/**\r\n\t\t * controls whether dnd works on touch devices. If left as boolean true dnd will work the same as in desktop browsers, which in some cases may impair scrolling. If set to boolean false dnd will not work on touch devices. There is a special third option - string \"selected\" which means only selected nodes can be dragged on touch devices.\r\n\t\t * @name $.jstree.defaults.dnd.touch\r\n\t\t * @plugin dnd\r\n\t\t */\r\n\t\ttouch : true,\r\n\t\t/**\r\n\t\t * controls whether items can be dropped anywhere on the node, not just on the anchor, by default only the node anchor is a valid drop target. Works best with the wholerow plugin. If enabled on mobile depending on the interface it might be hard for the user to cancel the drop, since the whole tree container will be a valid drop target.\r\n\t\t * @name $.jstree.defaults.dnd.large_drop_target\r\n\t\t * @plugin dnd\r\n\t\t */\r\n\t\tlarge_drop_target : false,\r\n\t\t/**\r\n\t\t * controls whether a drag can be initiated from any part of the node and not just the text/icon part, works best with the wholerow plugin. Keep in mind it can cause problems with tree scrolling on mobile depending on the interface - in that case set the touch option to \"selected\".\r\n\t\t * @name $.jstree.defaults.dnd.large_drag_target\r\n\t\t * @plugin dnd\r\n\t\t */\r\n\t\tlarge_drag_target : false,\r\n\t\t/**\r\n\t\t * controls whether use HTML5 dnd api instead of classical. That will allow better integration of dnd events with other HTML5 controls.\r\n\t\t * @reference http://caniuse.com/#feat=dragndrop\r\n\t\t * @name $.jstree.defaults.dnd.use_html5\r\n\t\t * @plugin dnd\r\n\t\t */\r\n\t\tuse_html5: false\r\n\t};\r\n\tvar drg, elm;\r\n\t// TODO: now check works by checking for each node individually, how about max_children, unique, etc?\r\n\t$.jstree.plugins.dnd = function (options, parent) {\r\n\t\tthis.init = function (el, options) {\r\n\t\t\tparent.init.call(this, el, options);\r\n\t\t\tthis.settings.dnd.use_html5 = this.settings.dnd.use_html5 && ('draggable' in document.createElement('span'));\r\n\t\t};\r\n\t\tthis.bind = function () {\r\n\t\t\tparent.bind.call(this);\r\n\r\n\t\t\tthis.element\r\n\t\t\t\t.on(this.settings.dnd.use_html5 ? 'dragstart.jstree' : 'mousedown.jstree touchstart.jstree', this.settings.dnd.large_drag_target ? '.jstree-node' : '.jstree-anchor', langx.proxy(function (e) {\r\n\t\t\t\t\t\tif(this.settings.dnd.large_drag_target && $(e.target).closest('.jstree-node')[0] !== e.currentTarget) {\r\n\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(e.type === \"touchstart\" && (!this.settings.dnd.touch || (this.settings.dnd.touch === 'selected' && !$(e.currentTarget).closest('.jstree-node').children('.jstree-anchor').hasClass('jstree-clicked')))) {\r\n\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tvar obj = this.get_node(e.target),\r\n\t\t\t\t\t\t\tmlt = this.is_selected(obj) && this.settings.dnd.drag_selection ? this.get_top_selected().length : 1,\r\n\t\t\t\t\t\t\ttxt = (mlt > 1 ? mlt + ' ' + this.get_string('nodes') : this.get_text(e.currentTarget));\r\n\t\t\t\t\t\tif(this.settings.core.force_text) {\r\n\t\t\t\t\t\t\ttxt = $.vakata.html.escape(txt);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(obj && obj.id && obj.id !== $.jstree.root && (e.which === 1 || e.type === \"touchstart\" || e.type === \"dragstart\") &&\r\n\t\t\t\t\t\t\t(this.settings.dnd.is_draggable === true || (langx.isFunction(this.settings.dnd.is_draggable) && this.settings.dnd.is_draggable.call(this, (mlt > 1 ? this.get_top_selected(true) : [obj]), e)))\r\n\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\tdrg = { 'jstree' : true, 'origin' : this, 'obj' : this.get_node(obj,true), 'nodes' : mlt > 1 ? this.get_top_selected() : [obj.id] };\r\n\t\t\t\t\t\t\telm = e.currentTarget;\r\n\t\t\t\t\t\t\tif (this.settings.dnd.use_html5) {\r\n\t\t\t\t\t\t\t\t$.vakata.dnd._trigger('start', e, { 'helper': $(), 'element': elm, 'data': drg });\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tthis.element.trigger('mousedown.jstree');\r\n\t\t\t\t\t\t\t\treturn $.vakata.dnd.start(e, drg, '<div id=\"jstree-dnd\" class=\"jstree-' + this.get_theme() + ' jstree-' + this.get_theme() + '-' + this.get_theme_variant() + ' ' + ( this.settings.core.themes.responsive ? ' jstree-dnd-responsive' : '' ) + '\"><i class=\"jstree-icon jstree-er\"></i>' + txt + '<ins class=\"jstree-copy\" style=\"display:none;\">+</ins></div>');\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, this));\r\n\t\t\tif (this.settings.dnd.use_html5) {\r\n\t\t\t\tthis.element\r\n\t\t\t\t\t.on('dragover.jstree', function (e) {\r\n\t\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\t\t$.vakata.dnd._trigger('move', e, { 'helper': $(), 'element': elm, 'data': drg });\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t//.on('dragenter.jstree', this.settings.dnd.large_drop_target ? '.jstree-node' : '.jstree-anchor', $.proxy(function (e) {\r\n\t\t\t\t\t//\t\te.preventDefault();\r\n\t\t\t\t\t//\t\t$.vakata.dnd._trigger('move', e, { 'helper': $(), 'element': elm, 'data': drg });\r\n\t\t\t\t\t//\t\treturn false;\r\n\t\t\t\t\t//\t}, this))\r\n\t\t\t\t\t.on('drop.jstree', langx.proxy(function (e) {\r\n\t\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\t\t$.vakata.dnd._trigger('stop', e, { 'helper': $(), 'element': elm, 'data': drg });\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}, this));\r\n\t\t\t}\r\n\t\t};\r\n\t\tthis.redraw_node = function(obj, deep, callback, force_render) {\r\n\t\t\tobj = parent.redraw_node.apply(this, arguments);\r\n\t\t\tif (obj && this.settings.dnd.use_html5) {\r\n\t\t\t\tif (this.settings.dnd.large_drag_target) {\r\n\t\t\t\t\tobj.setAttribute('draggable', true);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tvar i, j, tmp = null;\r\n\t\t\t\t\tfor(i = 0, j = obj.childNodes.length; i < j; i++) {\r\n\t\t\t\t\t\tif(obj.childNodes[i] && obj.childNodes[i].className && obj.childNodes[i].className.indexOf(\"jstree-anchor\") !== -1) {\r\n\t\t\t\t\t\t\ttmp = obj.childNodes[i];\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(tmp) {\r\n\t\t\t\t\t\ttmp.setAttribute('draggable', true);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn obj;\r\n\t\t};\r\n\t};\r\n\r\n\t$(function() {\r\n\t\t// bind only once for all instances\r\n\t\tvar lastmv = false,\r\n\t\t\tlaster = false,\r\n\t\t\tlastev = false,\r\n\t\t\topento = false,\r\n\t\t\tmarker = $('<div id=\"jstree-marker\">&#160;</div>').hide(); //.appendTo('body');\r\n\r\n\t\t$(document)\r\n\t\t\t.on('dnd_start.vakata.jstree', function (e, data) {\r\n\t\t\t\tlastmv = false;\r\n\t\t\t\tlastev = false;\r\n\t\t\t\tif(!data || !data.data || !data.data.jstree) { return; }\r\n\t\t\t\tmarker.appendTo(document.body); //.show();\r\n\t\t\t})\r\n\t\t\t.on('dnd_move.vakata.jstree', function (e, data) {\r\n\t\t\t\tvar isDifferentNode = data.event.target !== lastev.target;\r\n\t\t\t\tif(opento) {\r\n\t\t\t\t\tif (!data.event || data.event.type !== 'dragover' || isDifferentNode) {\r\n\t\t\t\t\t\tclearTimeout(opento);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif(!data || !data.data || !data.data.jstree) { return; }\r\n\r\n\t\t\t\t// if we are hovering the marker image do nothing (can happen on \"inside\" drags)\r\n\t\t\t\tif(data.event.target.id && data.event.target.id === 'jstree-marker') {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tlastev = data.event;\r\n\r\n\t\t\t\tvar ins = $.jstree.reference(data.event.target),\r\n\t\t\t\t\tref = false,\r\n\t\t\t\t\toff = false,\r\n\t\t\t\t\trel = false,\r\n\t\t\t\t\ttmp, l, t, h, p, i, o, ok, t1, t2, op, ps, pr, ip, tm, is_copy, pn;\r\n\t\t\t\t// if we are over an instance\r\n\t\t\t\tif(ins && ins._data && ins._data.dnd) {\r\n\t\t\t\t\tmarker.attr('class', 'jstree-' + ins.get_theme() + ( ins.settings.core.themes.responsive ? ' jstree-dnd-responsive' : '' ));\r\n\t\t\t\t\tis_copy = data.data.origin && (data.data.origin.settings.dnd.always_copy || (data.data.origin.settings.dnd.copy && (data.event.metaKey || data.event.ctrlKey)));\r\n\t\t\t\t\tdata.helper\r\n\t\t\t\t\t\t.children().attr('class', 'jstree-' + ins.get_theme() + ' jstree-' + ins.get_theme() + '-' + ins.get_theme_variant() + ' ' + ( ins.settings.core.themes.responsive ? ' jstree-dnd-responsive' : '' ))\r\n\t\t\t\t\t\t.find('.jstree-copy').first()[ is_copy ? 'show' : 'hide' ]();\r\n\r\n\t\t\t\t\t// if are hovering the container itself add a new root node\r\n\t\t\t\t\t//console.log(data.event);\r\n\t\t\t\t\tif( (data.event.target === ins.element[0] || data.event.target === ins.get_container_ul()[0]) && ins.get_container_ul().children().length === 0) {\r\n\t\t\t\t\t\tok = true;\r\n\t\t\t\t\t\tfor(t1 = 0, t2 = data.data.nodes.length; t1 < t2; t1++) {\r\n\t\t\t\t\t\t\tok = ok && ins.check( (data.data.origin && (data.data.origin.settings.dnd.always_copy || (data.data.origin.settings.dnd.copy && (data.event.metaKey || data.event.ctrlKey)) ) ? \"copy_node\" : \"move_node\"), (data.data.origin && data.data.origin !== ins ? data.data.origin.get_node(data.data.nodes[t1]) : data.data.nodes[t1]), $.jstree.root, 'last', { 'dnd' : true, 'ref' : ins.get_node($.jstree.root), 'pos' : 'i', 'origin' : data.data.origin, 'is_multi' : (data.data.origin && data.data.origin !== ins), 'is_foreign' : (!data.data.origin) });\r\n\t\t\t\t\t\t\tif(!ok) { break; }\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(ok) {\r\n\t\t\t\t\t\t\tlastmv = { 'ins' : ins, 'par' : $.jstree.root, 'pos' : 'last' };\r\n\t\t\t\t\t\t\tmarker.hide();\r\n\t\t\t\t\t\t\tdata.helper.find('.jstree-icon').first().removeClass('jstree-er').addClass('jstree-ok');\r\n\t\t\t\t\t\t\tif (data.event.originalEvent && data.event.originalEvent.dataTransfer) {\r\n\t\t\t\t\t\t\t\tdata.event.originalEvent.dataTransfer.dropEffect = is_copy ? 'copy' : 'move';\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\t// if we are hovering a tree node\r\n\t\t\t\t\t\tref = ins.settings.dnd.large_drop_target ? $(data.event.target).closest('.jstree-node').children('.jstree-anchor') : $(data.event.target).closest('.jstree-anchor');\r\n\t\t\t\t\t\tif(ref && ref.length && ref.parent().is('.jstree-closed, .jstree-open, .jstree-leaf')) {\r\n\t\t\t\t\t\t\toff = ref.offset();\r\n\t\t\t\t\t\t\trel = (data.event.pageY !== undefined ? data.event.pageY : data.event.originalEvent.pageY) - off.top;\r\n\t\t\t\t\t\t\th = ref.outerHeight();\r\n\t\t\t\t\t\t\tif(rel < h / 3) {\r\n\t\t\t\t\t\t\t\to = ['b', 'i', 'a'];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse if(rel > h - h / 3) {\r\n\t\t\t\t\t\t\t\to = ['a', 'i', 'b'];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\to = rel > h / 2 ? ['i', 'a', 'b'] : ['i', 'b', 'a'];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tlangx.each(o, function (j, v) {\r\n\t\t\t\t\t\t\t\tswitch(v) {\r\n\t\t\t\t\t\t\t\t\tcase 'b':\r\n\t\t\t\t\t\t\t\t\t\tl = off.left - 6;\r\n\t\t\t\t\t\t\t\t\t\tt = off.top;\r\n\t\t\t\t\t\t\t\t\t\tp = ins.get_parent(ref);\r\n\t\t\t\t\t\t\t\t\t\ti = ref.parent().index();\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\tcase 'i':\r\n\t\t\t\t\t\t\t\t\t\tip = ins.settings.dnd.inside_pos;\r\n\t\t\t\t\t\t\t\t\t\ttm = ins.get_node(ref.parent());\r\n\t\t\t\t\t\t\t\t\t\tl = off.left - 2;\r\n\t\t\t\t\t\t\t\t\t\tt = off.top + h / 2 + 1;\r\n\t\t\t\t\t\t\t\t\t\tp = tm.id;\r\n\t\t\t\t\t\t\t\t\t\ti = ip === 'first' ? 0 : (ip === 'last' ? tm.children.length : Math.min(ip, tm.children.length));\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\tcase 'a':\r\n\t\t\t\t\t\t\t\t\t\tl = off.left - 6;\r\n\t\t\t\t\t\t\t\t\t\tt = off.top + h;\r\n\t\t\t\t\t\t\t\t\t\tp = ins.get_parent(ref);\r\n\t\t\t\t\t\t\t\t\t\ti = ref.parent().index() + 1;\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tok = true;\r\n\t\t\t\t\t\t\t\tfor(t1 = 0, t2 = data.data.nodes.length; t1 < t2; t1++) {\r\n\t\t\t\t\t\t\t\t\top = data.data.origin && (data.data.origin.settings.dnd.always_copy || (data.data.origin.settings.dnd.copy && (data.event.metaKey || data.event.ctrlKey))) ? \"copy_node\" : \"move_node\";\r\n\t\t\t\t\t\t\t\t\tps = i;\r\n\t\t\t\t\t\t\t\t\tif(op === \"move_node\" && v === 'a' && (data.data.origin && data.data.origin === ins) && p === ins.get_parent(data.data.nodes[t1])) {\r\n\t\t\t\t\t\t\t\t\t\tpr = ins.get_node(p);\r\n\t\t\t\t\t\t\t\t\t\tif(ps > langx.inArray(data.data.nodes[t1], pr.children)) {\r\n\t\t\t\t\t\t\t\t\t\t\tps -= 1;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tok = ok && ( (ins && ins.settings && ins.settings.dnd && ins.settings.dnd.check_while_dragging === false) || ins.check(op, (data.data.origin && data.data.origin !== ins ? data.data.origin.get_node(data.data.nodes[t1]) : data.data.nodes[t1]), p, ps, { 'dnd' : true, 'ref' : ins.get_node(ref.parent()), 'pos' : v, 'origin' : data.data.origin, 'is_multi' : (data.data.origin && data.data.origin !== ins), 'is_foreign' : (!data.data.origin) }) );\r\n\t\t\t\t\t\t\t\t\tif(!ok) {\r\n\t\t\t\t\t\t\t\t\t\tif(ins && ins.last_error) { laster = ins.last_error(); }\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif(v === 'i' && ref.parent().is('.jstree-closed') && ins.settings.dnd.open_timeout) {\r\n\t\t\t\t\t\t\t\t\tif (!data.event || data.event.type !== 'dragover' || isDifferentNode) {\r\n\t\t\t\t\t\t\t\t\t\tif (opento) { clearTimeout(opento); }\r\n\t\t\t\t\t\t\t\t\t\topento = setTimeout((function (x, z) { return function () { x.open_node(z); }; }(ins, ref)), ins.settings.dnd.open_timeout);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif(ok) {\r\n\t\t\t\t\t\t\t\t\tpn = ins.get_node(p, true);\r\n\t\t\t\t\t\t\t\t\tif (!pn.hasClass('.jstree-dnd-parent')) {\r\n\t\t\t\t\t\t\t\t\t\t$('.jstree-dnd-parent').removeClass('jstree-dnd-parent');\r\n\t\t\t\t\t\t\t\t\t\tpn.addClass('jstree-dnd-parent');\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tlastmv = { 'ins' : ins, 'par' : p, 'pos' : v === 'i' && ip === 'last' && i === 0 && !ins.is_loaded(tm) ? 'last' : i };\r\n\t\t\t\t\t\t\t\t\tmarker.css({ 'left' : l + 'px', 'top' : t + 'px' }).show();\r\n\t\t\t\t\t\t\t\t\tdata.helper.find('.jstree-icon').first().removeClass('jstree-er').addClass('jstree-ok');\r\n\t\t\t\t\t\t\t\t\tif (data.event.originalEvent && data.event.originalEvent.dataTransfer) {\r\n\t\t\t\t\t\t\t\t\t\tdata.event.originalEvent.dataTransfer.dropEffect = is_copy ? 'copy' : 'move';\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tlaster = {};\r\n\t\t\t\t\t\t\t\t\to = true;\r\n\t\t\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\tif(o === true) { return; }\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t$('.jstree-dnd-parent').removeClass('jstree-dnd-parent');\r\n\t\t\t\tlastmv = false;\r\n\t\t\t\tdata.helper.find('.jstree-icon').removeClass('jstree-ok').addClass('jstree-er');\r\n\t\t\t\tif (data.event.originalEvent && data.event.originalEvent.dataTransfer) {\r\n\t\t\t\t\tdata.event.originalEvent.dataTransfer.dropEffect = 'none';\r\n\t\t\t\t}\r\n\t\t\t\tmarker.hide();\r\n\t\t\t})\r\n\t\t\t.on('dnd_scroll.vakata.jstree', function (e, data) {\r\n\t\t\t\tif(!data || !data.data || !data.data.jstree) { return; }\r\n\t\t\t\tmarker.hide();\r\n\t\t\t\tlastmv = false;\r\n\t\t\t\tlastev = false;\r\n\t\t\t\tdata.helper.find('.jstree-icon').first().removeClass('jstree-ok').addClass('jstree-er');\r\n\t\t\t})\r\n\t\t\t.on('dnd_stop.vakata.jstree', function (e, data) {\r\n\t\t\t\t$('.jstree-dnd-parent').removeClass('jstree-dnd-parent');\r\n\t\t\t\tif(opento) { clearTimeout(opento); }\r\n\t\t\t\tif(!data || !data.data || !data.data.jstree) { return; }\r\n\t\t\t\tmarker.hide().detach();\r\n\t\t\t\tvar i, j, nodes = [];\r\n\t\t\t\tif(lastmv) {\r\n\t\t\t\t\tfor(i = 0, j = data.data.nodes.length; i < j; i++) {\r\n\t\t\t\t\t\tnodes[i] = data.data.origin ? data.data.origin.get_node(data.data.nodes[i]) : data.data.nodes[i];\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlastmv.ins[ data.data.origin && (data.data.origin.settings.dnd.always_copy || (data.data.origin.settings.dnd.copy && (data.event.metaKey || data.event.ctrlKey))) ? 'copy_node' : 'move_node' ](nodes, lastmv.par, lastmv.pos, false, false, false, data.data.origin);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\ti = $(data.event.target).closest('.jstree');\r\n\t\t\t\t\tif(i.length && laster && laster.error && laster.error === 'check') {\r\n\t\t\t\t\t\ti = i.jstree(true);\r\n\t\t\t\t\t\tif(i) {\r\n\t\t\t\t\t\t\ti.settings.core.error.call(this, laster);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tlastev = false;\r\n\t\t\t\tlastmv = false;\r\n\t\t\t})\r\n\t\t\t.on('keyup.jstree keydown.jstree', function (e, data) {\r\n\t\t\t\tdata = $.vakata.dnd._get();\r\n\t\t\t\tif(data && data.data && data.data.jstree) {\r\n\t\t\t\t\tif (e.type === \"keyup\" && e.which === 27) {\r\n\t\t\t\t\t\tif (opento) { clearTimeout(opento); }\r\n\t\t\t\t\t\tlastmv = false;\r\n\t\t\t\t\t\tlaster = false;\r\n\t\t\t\t\t\tlastev = false;\r\n\t\t\t\t\t\topento = false;\r\n\t\t\t\t\t\tmarker.hide().detach();\r\n\t\t\t\t\t\t$.vakata.dnd._clean();\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tdata.helper.find('.jstree-copy').first()[ data.data.origin && (data.data.origin.settings.dnd.always_copy || (data.data.origin.settings.dnd.copy && (e.metaKey || e.ctrlKey))) ? 'show' : 'hide' ]();\r\n\t\t\t\t\t\tif(lastev) {\r\n\t\t\t\t\t\t\tlastev.metaKey = e.metaKey;\r\n\t\t\t\t\t\t\tlastev.ctrlKey = e.ctrlKey;\r\n\t\t\t\t\t\t\t$.vakata.dnd._trigger('move', lastev);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t});\r\n\r\n\t// helpers\r\n\t(function ($) {\r\n\t\t$.vakata.html = {\r\n\t\t\tdiv : $('<div />'),\r\n\t\t\tescape : function (str) {\r\n\t\t\t\treturn $.vakata.html.div.text(str).html();\r\n\t\t\t},\r\n\t\t\tstrip : function (str) {\r\n\t\t\t\treturn $.vakata.html.div.empty().append(langx.parseHTML(str)).text();\r\n\t\t\t}\r\n\t\t};\r\n\t\t// private variable\r\n\t\tvar vakata_dnd = {\r\n\t\t\telement\t: false,\r\n\t\t\ttarget\t: false,\r\n\t\t\tis_down\t: false,\r\n\t\t\tis_drag\t: false,\r\n\t\t\thelper\t: false,\r\n\t\t\thelper_w: 0,\r\n\t\t\tdata\t: false,\r\n\t\t\tinit_x\t: 0,\r\n\t\t\tinit_y\t: 0,\r\n\t\t\tscroll_l: 0,\r\n\t\t\tscroll_t: 0,\r\n\t\t\tscroll_e: false,\r\n\t\t\tscroll_i: false,\r\n\t\t\tis_touch: false\r\n\t\t};\r\n\t\t$.vakata.dnd = {\r\n\t\t\tsettings : {\r\n\t\t\t\tscroll_speed\t\t: 10,\r\n\t\t\t\tscroll_proximity\t: 20,\r\n\t\t\t\thelper_left\t\t\t: 5,\r\n\t\t\t\thelper_top\t\t\t: 10,\r\n\t\t\t\tthreshold\t\t\t: 5,\r\n\t\t\t\tthreshold_touch\t\t: 10\r\n\t\t\t},\r\n\t\t\t_trigger : function (event_name, e, data) {\r\n\t\t\t\tif (data === undefined) {\r\n\t\t\t\t\tdata = $.vakata.dnd._get();\r\n\t\t\t\t}\r\n\t\t\t\tdata.event = e;\r\n\t\t\t\t$(document).trigger(\"dnd_\" + event_name + \".vakata\", data);\r\n\t\t\t},\r\n\t\t\t_get : function () {\r\n\t\t\t\treturn {\r\n\t\t\t\t\t\"data\"\t\t: vakata_dnd.data,\r\n\t\t\t\t\t\"element\"\t: vakata_dnd.element,\r\n\t\t\t\t\t\"helper\"\t: vakata_dnd.helper\r\n\t\t\t\t};\r\n\t\t\t},\r\n\t\t\t_clean : function () {\r\n\t\t\t\tif(vakata_dnd.helper) { vakata_dnd.helper.remove(); }\r\n\t\t\t\tif(vakata_dnd.scroll_i) { clearInterval(vakata_dnd.scroll_i); vakata_dnd.scroll_i = false; }\r\n\t\t\t\tvakata_dnd = {\r\n\t\t\t\t\telement\t: false,\r\n\t\t\t\t\ttarget\t: false,\r\n\t\t\t\t\tis_down\t: false,\r\n\t\t\t\t\tis_drag\t: false,\r\n\t\t\t\t\thelper\t: false,\r\n\t\t\t\t\thelper_w: 0,\r\n\t\t\t\t\tdata\t: false,\r\n\t\t\t\t\tinit_x\t: 0,\r\n\t\t\t\t\tinit_y\t: 0,\r\n\t\t\t\t\tscroll_l: 0,\r\n\t\t\t\t\tscroll_t: 0,\r\n\t\t\t\t\tscroll_e: false,\r\n\t\t\t\t\tscroll_i: false,\r\n\t\t\t\t\tis_touch: false\r\n\t\t\t\t};\r\n\t\t\t\t$(document).off(\"mousemove.vakata.jstree touchmove.vakata.jstree\", $.vakata.dnd.drag);\r\n\t\t\t\t$(document).off(\"mouseup.vakata.jstree touchend.vakata.jstree\", $.vakata.dnd.stop);\r\n\t\t\t},\r\n\t\t\t_scroll : function (init_only) {\r\n\t\t\t\tif(!vakata_dnd.scroll_e || (!vakata_dnd.scroll_l && !vakata_dnd.scroll_t)) {\r\n\t\t\t\t\tif(vakata_dnd.scroll_i) { clearInterval(vakata_dnd.scroll_i); vakata_dnd.scroll_i = false; }\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\tif(!vakata_dnd.scroll_i) {\r\n\t\t\t\t\tvakata_dnd.scroll_i = setInterval($.vakata.dnd._scroll, 100);\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\tif(init_only === true) { return false; }\r\n\r\n\t\t\t\tvar i = vakata_dnd.scroll_e.scrollTop(),\r\n\t\t\t\t\tj = vakata_dnd.scroll_e.scrollLeft();\r\n\t\t\t\tvakata_dnd.scroll_e.scrollTop(i + vakata_dnd.scroll_t * $.vakata.dnd.settings.scroll_speed);\r\n\t\t\t\tvakata_dnd.scroll_e.scrollLeft(j + vakata_dnd.scroll_l * $.vakata.dnd.settings.scroll_speed);\r\n\t\t\t\tif(i !== vakata_dnd.scroll_e.scrollTop() || j !== vakata_dnd.scroll_e.scrollLeft()) {\r\n\t\t\t\t\t/**\r\n\t\t\t\t\t * triggered on the document when a drag causes an element to scroll\r\n\t\t\t\t\t * @event\r\n\t\t\t\t\t * @plugin dnd\r\n\t\t\t\t\t * @name dnd_scroll.vakata\r\n\t\t\t\t\t * @param {Mixed} data any data supplied with the call to $.vakata.dnd.start\r\n\t\t\t\t\t * @param {DOM} element the DOM element being dragged\r\n\t\t\t\t\t * @param {jQuery} helper the helper shown next to the mouse\r\n\t\t\t\t\t * @param {jQuery} event the element that is scrolling\r\n\t\t\t\t\t */\r\n\t\t\t\t\t$.vakata.dnd._trigger(\"scroll\", vakata_dnd.scroll_e);\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tstart : function (e, data, html) {\r\n\t\t\t\tif(e.type === \"touchstart\" && e.originalEvent && e.originalEvent.changedTouches && e.originalEvent.changedTouches[0]) {\r\n\t\t\t\t\te.pageX = e.originalEvent.changedTouches[0].pageX;\r\n\t\t\t\t\te.pageY = e.originalEvent.changedTouches[0].pageY;\r\n\t\t\t\t\te.target = document.elementFromPoint(e.originalEvent.changedTouches[0].pageX - window.pageXOffset, e.originalEvent.changedTouches[0].pageY - window.pageYOffset);\r\n\t\t\t\t}\r\n\t\t\t\tif(vakata_dnd.is_drag) { $.vakata.dnd.stop({}); }\r\n\t\t\t\ttry {\r\n\t\t\t\t\te.currentTarget.unselectable = \"on\";\r\n\t\t\t\t\te.currentTarget.onselectstart = function() { return false; };\r\n\t\t\t\t\tif(e.currentTarget.style) {\r\n\t\t\t\t\t\te.currentTarget.style.touchAction = \"none\";\r\n\t\t\t\t\t\te.currentTarget.style.msTouchAction = \"none\";\r\n\t\t\t\t\t\te.currentTarget.style.MozUserSelect = \"none\";\r\n\t\t\t\t\t}\r\n\t\t\t\t} catch(ignore) { }\r\n\t\t\t\tvakata_dnd.init_x\t= e.pageX;\r\n\t\t\t\tvakata_dnd.init_y\t= e.pageY;\r\n\t\t\t\tvakata_dnd.data\t\t= data;\r\n\t\t\t\tvakata_dnd.is_down\t= true;\r\n\t\t\t\tvakata_dnd.element\t= e.currentTarget;\r\n\t\t\t\tvakata_dnd.target\t= e.target;\r\n\t\t\t\tvakata_dnd.is_touch\t= e.type === \"touchstart\";\r\n\t\t\t\tif(html !== false) {\r\n\t\t\t\t\tvakata_dnd.helper = $(\"<div id='vakata-dnd'></div>\").html(html).css({\r\n\t\t\t\t\t\t\"display\"\t\t: \"block\",\r\n\t\t\t\t\t\t\"margin\"\t\t: \"0\",\r\n\t\t\t\t\t\t\"padding\"\t\t: \"0\",\r\n\t\t\t\t\t\t\"position\"\t\t: \"absolute\",\r\n\t\t\t\t\t\t\"top\"\t\t\t: \"-2000px\",\r\n\t\t\t\t\t\t\"lineHeight\"\t: \"16px\",\r\n\t\t\t\t\t\t\"zIndex\"\t\t: \"10000\"\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\t$(document).on(\"mousemove.vakata.jstree touchmove.vakata.jstree\", $.vakata.dnd.drag);\r\n\t\t\t\t$(document).on(\"mouseup.vakata.jstree touchend.vakata.jstree\", $.vakata.dnd.stop);\r\n\t\t\t\treturn false;\r\n\t\t\t},\r\n\t\t\tdrag : function (e) {\r\n\t\t\t\tif(e.type === \"touchmove\" && e.originalEvent && e.originalEvent.changedTouches && e.originalEvent.changedTouches[0]) {\r\n\t\t\t\t\te.pageX = e.originalEvent.changedTouches[0].pageX;\r\n\t\t\t\t\te.pageY = e.originalEvent.changedTouches[0].pageY;\r\n\t\t\t\t\te.target = document.elementFromPoint(e.originalEvent.changedTouches[0].pageX - window.pageXOffset, e.originalEvent.changedTouches[0].pageY - window.pageYOffset);\r\n\t\t\t\t}\r\n\t\t\t\tif(!vakata_dnd.is_down) { return; }\r\n\t\t\t\tif(!vakata_dnd.is_drag) {\r\n\t\t\t\t\tif(\r\n\t\t\t\t\t\tMath.abs(e.pageX - vakata_dnd.init_x) > (vakata_dnd.is_touch ? $.vakata.dnd.settings.threshold_touch : $.vakata.dnd.settings.threshold) ||\r\n\t\t\t\t\t\tMath.abs(e.pageY - vakata_dnd.init_y) > (vakata_dnd.is_touch ? $.vakata.dnd.settings.threshold_touch : $.vakata.dnd.settings.threshold)\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\tif(vakata_dnd.helper) {\r\n\t\t\t\t\t\t\tvakata_dnd.helper.appendTo(document.body);\r\n\t\t\t\t\t\t\tvakata_dnd.helper_w = vakata_dnd.helper.outerWidth();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tvakata_dnd.is_drag = true;\r\n\t\t\t\t\t\t$(vakata_dnd.target).one('click.vakata', false);\r\n\t\t\t\t\t\t/**\r\n\t\t\t\t\t\t * triggered on the document when a drag starts\r\n\t\t\t\t\t\t * @event\r\n\t\t\t\t\t\t * @plugin dnd\r\n\t\t\t\t\t\t * @name dnd_start.vakata\r\n\t\t\t\t\t\t * @param {Mixed} data any data supplied with the call to $.vakata.dnd.start\r\n\t\t\t\t\t\t * @param {DOM} element the DOM element being dragged\r\n\t\t\t\t\t\t * @param {jQuery} helper the helper shown next to the mouse\r\n\t\t\t\t\t\t * @param {Object} event the event that caused the start (probably mousemove)\r\n\t\t\t\t\t\t */\r\n\t\t\t\t\t\t$.vakata.dnd._trigger(\"start\", e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse { return; }\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar d  = false, w  = false,\r\n\t\t\t\t\tdh = false, wh = false,\r\n\t\t\t\t\tdw = false, ww = false,\r\n\t\t\t\t\tdt = false, dl = false,\r\n\t\t\t\t\tht = false, hl = false;\r\n\r\n\t\t\t\tvakata_dnd.scroll_t = 0;\r\n\t\t\t\tvakata_dnd.scroll_l = 0;\r\n\t\t\t\tvakata_dnd.scroll_e = false;\r\n\t\t\t\t$($(e.target).parentsUntil(\"body\").addBack().get().reverse())\r\n\t\t\t\t\t.filter(function () {\r\n\t\t\t\t\t\treturn\t(/^auto|scroll$/).test($(this).css(\"overflow\")) &&\r\n\t\t\t\t\t\t\t\t(this.scrollHeight > this.offsetHeight || this.scrollWidth > this.offsetWidth);\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.each(function () {\r\n\t\t\t\t\t\tvar t = $(this), o = t.offset();\r\n\t\t\t\t\t\tif(this.scrollHeight > this.offsetHeight) {\r\n\t\t\t\t\t\t\tif(o.top + t.height() - e.pageY < $.vakata.dnd.settings.scroll_proximity)\t{ vakata_dnd.scroll_t = 1; }\r\n\t\t\t\t\t\t\tif(e.pageY - o.top < $.vakata.dnd.settings.scroll_proximity)\t\t\t\t{ vakata_dnd.scroll_t = -1; }\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(this.scrollWidth > this.offsetWidth) {\r\n\t\t\t\t\t\t\tif(o.left + t.width() - e.pageX < $.vakata.dnd.settings.scroll_proximity)\t{ vakata_dnd.scroll_l = 1; }\r\n\t\t\t\t\t\t\tif(e.pageX - o.left < $.vakata.dnd.settings.scroll_proximity)\t\t\t\t{ vakata_dnd.scroll_l = -1; }\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(vakata_dnd.scroll_t || vakata_dnd.scroll_l) {\r\n\t\t\t\t\t\t\tvakata_dnd.scroll_e = $(this);\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\tif(!vakata_dnd.scroll_e) {\r\n\t\t\t\t\td  = $(document); w = $(window);\r\n\t\t\t\t\tdh = d.height(); wh = w.height();\r\n\t\t\t\t\tdw = d.width(); ww = w.width();\r\n\t\t\t\t\tdt = d.scrollTop(); dl = d.scrollLeft();\r\n\t\t\t\t\tif(dh > wh && e.pageY - dt < $.vakata.dnd.settings.scroll_proximity)\t\t{ vakata_dnd.scroll_t = -1;  }\r\n\t\t\t\t\tif(dh > wh && wh - (e.pageY - dt) < $.vakata.dnd.settings.scroll_proximity)\t{ vakata_dnd.scroll_t = 1; }\r\n\t\t\t\t\tif(dw > ww && e.pageX - dl < $.vakata.dnd.settings.scroll_proximity)\t\t{ vakata_dnd.scroll_l = -1; }\r\n\t\t\t\t\tif(dw > ww && ww - (e.pageX - dl) < $.vakata.dnd.settings.scroll_proximity)\t{ vakata_dnd.scroll_l = 1; }\r\n\t\t\t\t\tif(vakata_dnd.scroll_t || vakata_dnd.scroll_l) {\r\n\t\t\t\t\t\tvakata_dnd.scroll_e = d;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif(vakata_dnd.scroll_e) { $.vakata.dnd._scroll(true); }\r\n\r\n\t\t\t\tif(vakata_dnd.helper) {\r\n\t\t\t\t\tht = parseInt(e.pageY + $.vakata.dnd.settings.helper_top, 10);\r\n\t\t\t\t\thl = parseInt(e.pageX + $.vakata.dnd.settings.helper_left, 10);\r\n\t\t\t\t\tif(dh && ht + 25 > dh) { ht = dh - 50; }\r\n\t\t\t\t\tif(dw && hl + vakata_dnd.helper_w > dw) { hl = dw - (vakata_dnd.helper_w + 2); }\r\n\t\t\t\t\tvakata_dnd.helper.css({\r\n\t\t\t\t\t\tleft\t: hl + \"px\",\r\n\t\t\t\t\t\ttop\t\t: ht + \"px\"\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\t/**\r\n\t\t\t\t * triggered on the document when a drag is in progress\r\n\t\t\t\t * @event\r\n\t\t\t\t * @plugin dnd\r\n\t\t\t\t * @name dnd_move.vakata\r\n\t\t\t\t * @param {Mixed} data any data supplied with the call to $.vakata.dnd.start\r\n\t\t\t\t * @param {DOM} element the DOM element being dragged\r\n\t\t\t\t * @param {jQuery} helper the helper shown next to the mouse\r\n\t\t\t\t * @param {Object} event the event that caused this to trigger (most likely mousemove)\r\n\t\t\t\t */\r\n\t\t\t\t$.vakata.dnd._trigger(\"move\", e);\r\n\t\t\t\treturn false;\r\n\t\t\t},\r\n\t\t\tstop : function (e) {\r\n\t\t\t\tif(e.type === \"touchend\" && e.originalEvent && e.originalEvent.changedTouches && e.originalEvent.changedTouches[0]) {\r\n\t\t\t\t\te.pageX = e.originalEvent.changedTouches[0].pageX;\r\n\t\t\t\t\te.pageY = e.originalEvent.changedTouches[0].pageY;\r\n\t\t\t\t\te.target = document.elementFromPoint(e.originalEvent.changedTouches[0].pageX - window.pageXOffset, e.originalEvent.changedTouches[0].pageY - window.pageYOffset);\r\n\t\t\t\t}\r\n\t\t\t\tif(vakata_dnd.is_drag) {\r\n\t\t\t\t\t/**\r\n\t\t\t\t\t * triggered on the document when a drag stops (the dragged element is dropped)\r\n\t\t\t\t\t * @event\r\n\t\t\t\t\t * @plugin dnd\r\n\t\t\t\t\t * @name dnd_stop.vakata\r\n\t\t\t\t\t * @param {Mixed} data any data supplied with the call to $.vakata.dnd.start\r\n\t\t\t\t\t * @param {DOM} element the DOM element being dragged\r\n\t\t\t\t\t * @param {jQuery} helper the helper shown next to the mouse\r\n\t\t\t\t\t * @param {Object} event the event that caused the stop\r\n\t\t\t\t\t */\r\n\t\t\t\t\tif (e.target !== vakata_dnd.target) {\r\n\t\t\t\t\t\t$(vakata_dnd.target).off('click.vakata');\r\n\t\t\t\t\t}\r\n\t\t\t\t\t$.vakata.dnd._trigger(\"stop\", e);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tif(e.type === \"touchend\" && e.target === vakata_dnd.target) {\r\n\t\t\t\t\t\tvar to = setTimeout(function () { $(e.target).click(); }, 100);\r\n\t\t\t\t\t\t$(e.target).one('click', function() { if(to) { clearTimeout(to); } });\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t$.vakata.dnd._clean();\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t};\r\n\t}($));\r\n\r\n\t// include the dnd plugin by default\r\n\t// $.jstree.defaults.plugins.push(\"dnd\");\r\n\r\n\treturn $;\r\n\t\r\n});\r\n\ndefine('skylark-widgets-hierarchy/addons/massload',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-browser\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-geom\",\r\n  \"skylark-domx-query\",\r\n  \"../Hierarchy\"\r\n],function(langx,browser,eventer,noder,geom,$,jstree){\r\n\r\n\t\"use strict\";\r\n\r\n\tif($.jstree.plugins.massload) { return; }\r\n\r\n\t/**\r\n\t * massload configuration\r\n\t *\r\n\t * It is possible to set this to a standard jQuery-like AJAX config.\r\n\t * In addition to the standard jQuery ajax options here you can supply functions for `data` and `url`, the functions will be run in the current instance's scope and a param will be passed indicating which node IDs need to be loaded, the return value of those functions will be used.\r\n\t *\r\n\t * You can also set this to a function, that function will receive the node IDs being loaded as argument and a second param which is a function (callback) which should be called with the result.\r\n\t *\r\n\t * Both the AJAX and the function approach rely on the same return value - an object where the keys are the node IDs, and the value is the children of that node as an array.\r\n\t *\r\n\t *\t{\r\n\t *\t\t\"id1\" : [{ \"text\" : \"Child of ID1\", \"id\" : \"c1\" }, { \"text\" : \"Another child of ID1\", \"id\" : \"c2\" }],\r\n\t *\t\t\"id2\" : [{ \"text\" : \"Child of ID2\", \"id\" : \"c3\" }]\r\n\t *\t}\r\n\t * \r\n\t * @name $.jstree.defaults.massload\r\n\t * @plugin massload\r\n\t */\r\n\t$.jstree.defaults.massload = null;\r\n\t$.jstree.plugins.massload = function (options, parent) {\r\n\t\tthis.init = function (el, options) {\r\n\t\t\tthis._data.massload = {};\r\n\t\t\tparent.init.call(this, el, options);\r\n\t\t};\r\n\t\tthis._load_nodes = function (nodes, callback, is_callback, force_reload) {\r\n\t\t\tvar s = this.settings.massload,\r\n\t\t\t\tnodesString = JSON.stringify(nodes),\r\n\t\t\t\ttoLoad = [],\r\n\t\t\t\tm = this._model.data,\r\n\t\t\t\ti, j, dom;\r\n\t\t\tif (!is_callback) {\r\n\t\t\t\tfor(i = 0, j = nodes.length; i < j; i++) {\r\n\t\t\t\t\tif(!m[nodes[i]] || ( (!m[nodes[i]].state.loaded && !m[nodes[i]].state.failed) || force_reload) ) {\r\n\t\t\t\t\t\ttoLoad.push(nodes[i]);\r\n\t\t\t\t\t\tdom = this.get_node(nodes[i], true);\r\n\t\t\t\t\t\tif (dom && dom.length) {\r\n\t\t\t\t\t\t\tdom.addClass(\"jstree-loading\").attr('aria-busy',true);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tthis._data.massload = {};\r\n\t\t\t\tif (toLoad.length) {\r\n\t\t\t\t\tif(langx.isFunction(s)) {\r\n\t\t\t\t\t\treturn s.call(this, toLoad, langx.proxy(function (data) {\r\n\t\t\t\t\t\t\tvar i, j;\r\n\t\t\t\t\t\t\tif(data) {\r\n\t\t\t\t\t\t\t\tfor(i in data) {\r\n\t\t\t\t\t\t\t\t\tif(data.hasOwnProperty(i)) {\r\n\t\t\t\t\t\t\t\t\t\tthis._data.massload[i] = data[i];\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tfor(i = 0, j = nodes.length; i < j; i++) {\r\n\t\t\t\t\t\t\t\tdom = this.get_node(nodes[i], true);\r\n\t\t\t\t\t\t\t\tif (dom && dom.length) {\r\n\t\t\t\t\t\t\t\t\tdom.removeClass(\"jstree-loading\").attr('aria-busy',false);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tparent._load_nodes.call(this, nodes, callback, is_callback, force_reload);\r\n\t\t\t\t\t\t}, this));\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(typeof s === 'object' && s && s.url) {\r\n\t\t\t\t\t\ts = langx.extend(true, {}, s);\r\n\t\t\t\t\t\tif(langx.isFunction(s.url)) {\r\n\t\t\t\t\t\t\ts.url = s.url.call(this, toLoad);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(langx.isFunction(s.data)) {\r\n\t\t\t\t\t\t\ts.data = s.data.call(this, toLoad);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn ajax(s)\r\n\t\t\t\t\t\t\t.done(langx.proxy(function (data,t,x) {\r\n\t\t\t\t\t\t\t\t\tvar i, j;\r\n\t\t\t\t\t\t\t\t\tif(data) {\r\n\t\t\t\t\t\t\t\t\t\tfor(i in data) {\r\n\t\t\t\t\t\t\t\t\t\t\tif(data.hasOwnProperty(i)) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tthis._data.massload[i] = data[i];\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tfor(i = 0, j = nodes.length; i < j; i++) {\r\n\t\t\t\t\t\t\t\t\t\tdom = this.get_node(nodes[i], true);\r\n\t\t\t\t\t\t\t\t\t\tif (dom && dom.length) {\r\n\t\t\t\t\t\t\t\t\t\t\tdom.removeClass(\"jstree-loading\").attr('aria-busy',false);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tparent._load_nodes.call(this, nodes, callback, is_callback, force_reload);\r\n\t\t\t\t\t\t\t\t}, this))\r\n\t\t\t\t\t\t\t.fail(langx.proxy(function (f) {\r\n\t\t\t\t\t\t\t\t\tparent._load_nodes.call(this, nodes, callback, is_callback, force_reload);\r\n\t\t\t\t\t\t\t\t}, this));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn parent._load_nodes.call(this, nodes, callback, is_callback, force_reload);\r\n\t\t};\r\n\t\tthis._load_node = function (obj, callback) {\r\n\t\t\tvar data = this._data.massload[obj.id],\r\n\t\t\t\trslt = null, dom;\r\n\t\t\tif(data) {\r\n\t\t\t\trslt = this[typeof data === 'string' ? '_append_html_data' : '_append_json_data'](\r\n\t\t\t\t\tobj,\r\n\t\t\t\t\ttypeof data === 'string' ? $(langx.parseHTML(data)).filter(function () { return this.nodeType !== 3; }) : data,\r\n\t\t\t\t\tfunction (status) { callback.call(this, status); }\r\n\t\t\t\t);\r\n\t\t\t\tdom = this.get_node(obj.id, true);\r\n\t\t\t\tif (dom && dom.length) {\r\n\t\t\t\t\tdom.removeClass(\"jstree-loading\").attr('aria-busy',false);\r\n\t\t\t\t}\r\n\t\t\t\tdelete this._data.massload[obj.id];\r\n\t\t\t\treturn rslt;\r\n\t\t\t}\r\n\t\t\treturn parent._load_node.call(this, obj, callback);\r\n\t\t};\r\n\t};\r\n\r\n\treturn $;\r\n\t\r\n});\ndefine('skylark-widgets-hierarchy/addons/search',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-browser\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-geom\",\r\n  \"skylark-domx-query\",\r\n  \"../Hierarchy\"\r\n],function(langx,browser,eventer,noder,geom,$,jstree){\r\n\r\n\t\"use strict\";\r\n\r\n\tif($.jstree.plugins.search) { return; }\r\n\r\n\t/**\r\n\t * stores all defaults for the search plugin\r\n\t * @name $.jstree.defaults.search\r\n\t * @plugin search\r\n\t */\r\n\t$.jstree.defaults.search = {\r\n\t\t/**\r\n\t\t * a jQuery-like AJAX config, which jstree uses if a server should be queried for results.\r\n\t\t *\r\n\t\t * A `str` (which is the search string) parameter will be added with the request, an optional `inside` parameter will be added if the search is limited to a node id. The expected result is a JSON array with nodes that need to be opened so that matching nodes will be revealed.\r\n\t\t * Leave this setting as `false` to not query the server. You can also set this to a function, which will be invoked in the instance's scope and receive 3 parameters - the search string, the callback to call with the array of nodes to load, and the optional node ID to limit the search to\r\n\t\t * @name $.jstree.defaults.search.ajax\r\n\t\t * @plugin search\r\n\t\t */\r\n\t\tajax : false,\r\n\t\t/**\r\n\t\t * Indicates if the search should be fuzzy or not (should `chnd3` match `child node 3`). Default is `false`.\r\n\t\t * @name $.jstree.defaults.search.fuzzy\r\n\t\t * @plugin search\r\n\t\t */\r\n\t\tfuzzy : false,\r\n\t\t/**\r\n\t\t * Indicates if the search should be case sensitive. Default is `false`.\r\n\t\t * @name $.jstree.defaults.search.case_sensitive\r\n\t\t * @plugin search\r\n\t\t */\r\n\t\tcase_sensitive : false,\r\n\t\t/**\r\n\t\t * Indicates if the tree should be filtered (by default) to show only matching nodes (keep in mind this can be a heavy on large trees in old browsers).\r\n\t\t * This setting can be changed at runtime when calling the search method. Default is `false`.\r\n\t\t * @name $.jstree.defaults.search.show_only_matches\r\n\t\t * @plugin search\r\n\t\t */\r\n\t\tshow_only_matches : false,\r\n\t\t/**\r\n\t\t * Indicates if the children of matched element are shown (when show_only_matches is true)\r\n\t\t * This setting can be changed at runtime when calling the search method. Default is `false`.\r\n\t\t * @name $.jstree.defaults.search.show_only_matches_children\r\n\t\t * @plugin search\r\n\t\t */\r\n\t\tshow_only_matches_children : false,\r\n\t\t/**\r\n\t\t * Indicates if all nodes opened to reveal the search result, should be closed when the search is cleared or a new search is performed. Default is `true`.\r\n\t\t * @name $.jstree.defaults.search.close_opened_onclear\r\n\t\t * @plugin search\r\n\t\t */\r\n\t\tclose_opened_onclear : true,\r\n\t\t/**\r\n\t\t * Indicates if only leaf nodes should be included in search results. Default is `false`.\r\n\t\t * @name $.jstree.defaults.search.search_leaves_only\r\n\t\t * @plugin search\r\n\t\t */\r\n\t\tsearch_leaves_only : false,\r\n\t\t/**\r\n\t\t * If set to a function it wil be called in the instance's scope with two arguments - search string and node (where node will be every node in the structure, so use with caution).\r\n\t\t * If the function returns a truthy value the node will be considered a match (it might not be displayed if search_only_leaves is set to true and the node is not a leaf). Default is `false`.\r\n\t\t * @name $.jstree.defaults.search.search_callback\r\n\t\t * @plugin search\r\n\t\t */\r\n\t\tsearch_callback : false\r\n\t};\r\n\r\n\t$.jstree.plugins.search = function (options, parent) {\r\n\t\tthis.bind = function () {\r\n\t\t\tparent.bind.call(this);\r\n\r\n\t\t\tthis._data.search.str = \"\";\r\n\t\t\tthis._data.search.dom = $();\r\n\t\t\tthis._data.search.res = [];\r\n\t\t\tthis._data.search.opn = [];\r\n\t\t\tthis._data.search.som = false;\r\n\t\t\tthis._data.search.smc = false;\r\n\t\t\tthis._data.search.hdn = [];\r\n\r\n\t\t\tthis.element\r\n\t\t\t\t.on(\"search.jstree\", $.proxy(function (e, data) {\r\n\t\t\t\t\t\tif(this._data.search.som && data.res.length) {\r\n\t\t\t\t\t\t\tvar m = this._model.data, i, j, p = [], k, l;\r\n\t\t\t\t\t\t\tfor(i = 0, j = data.res.length; i < j; i++) {\r\n\t\t\t\t\t\t\t\tif(m[data.res[i]] && !m[data.res[i]].state.hidden) {\r\n\t\t\t\t\t\t\t\t\tp.push(data.res[i]);\r\n\t\t\t\t\t\t\t\t\tp = p.concat(m[data.res[i]].parents);\r\n\t\t\t\t\t\t\t\t\tif(this._data.search.smc) {\r\n\t\t\t\t\t\t\t\t\t\tfor (k = 0, l = m[data.res[i]].children_d.length; k < l; k++) {\r\n\t\t\t\t\t\t\t\t\t\t\tif (m[m[data.res[i]].children_d[k]] && !m[m[data.res[i]].children_d[k]].state.hidden) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tp.push(m[data.res[i]].children_d[k]);\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tp = $.vakata.array_remove_item($.vakata.array_unique(p), $.jstree.root);\r\n\t\t\t\t\t\t\tthis._data.search.hdn = this.hide_all(true);\r\n\t\t\t\t\t\t\tthis.show_node(p, true);\r\n\t\t\t\t\t\t\tthis.redraw(true);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on(\"clear_search.jstree\", langx.proxy(function (e, data) {\r\n\t\t\t\t\t\tif(this._data.search.som && data.res.length) {\r\n\t\t\t\t\t\t\tthis.show_node(this._data.search.hdn, true);\r\n\t\t\t\t\t\t\tthis.redraw(true);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, this));\r\n\t\t};\r\n\t\t/**\r\n\t\t * used to search the tree nodes for a given string\r\n\t\t * @name search(str [, skip_async])\r\n\t\t * @param {String} str the search string\r\n\t\t * @param {Boolean} skip_async if set to true server will not be queried even if configured\r\n\t\t * @param {Boolean} show_only_matches if set to true only matching nodes will be shown (keep in mind this can be very slow on large trees or old browsers)\r\n\t\t * @param {mixed} inside an optional node to whose children to limit the search\r\n\t\t * @param {Boolean} append if set to true the results of this search are appended to the previous search\r\n\t\t * @plugin search\r\n\t\t * @trigger search.jstree\r\n\t\t */\r\n\t\tthis.search = function (str, skip_async, show_only_matches, inside, append, show_only_matches_children) {\r\n\t\t\tif(str === false || langx.trim(str.toString()) === \"\") {\r\n\t\t\t\treturn this.clear_search();\r\n\t\t\t}\r\n\t\t\tinside = this.get_node(inside);\r\n\t\t\tinside = inside && inside.id ? inside.id : null;\r\n\t\t\tstr = str.toString();\r\n\t\t\tvar s = this.settings.search,\r\n\t\t\t\ta = s.ajax ? s.ajax : false,\r\n\t\t\t\tm = this._model.data,\r\n\t\t\t\tf = null,\r\n\t\t\t\tr = [],\r\n\t\t\t\tp = [], i, j;\r\n\t\t\tif(this._data.search.res.length && !append) {\r\n\t\t\t\tthis.clear_search();\r\n\t\t\t}\r\n\t\t\tif(show_only_matches === undefined) {\r\n\t\t\t\tshow_only_matches = s.show_only_matches;\r\n\t\t\t}\r\n\t\t\tif(show_only_matches_children === undefined) {\r\n\t\t\t\tshow_only_matches_children = s.show_only_matches_children;\r\n\t\t\t}\r\n\t\t\tif(!skip_async && a !== false) {\r\n\t\t\t\tif(langx.isFunction(a)) {\r\n\t\t\t\t\treturn a.call(this, str, langx.proxy(function (d) {\r\n\t\t\t\t\t\t\tif(d && d.d) { d = d.d; }\r\n\t\t\t\t\t\t\tthis._load_nodes(!langx.isArray(d) ? [] : $.vakata.array_unique(d), function () {\r\n\t\t\t\t\t\t\t\tthis.search(str, true, show_only_matches, inside, append, show_only_matches_children);\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}, this), inside);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\ta = langx.extend({}, a);\r\n\t\t\t\t\tif(!a.data) { a.data = {}; }\r\n\t\t\t\t\ta.data.str = str;\r\n\t\t\t\t\tif(inside) {\r\n\t\t\t\t\t\ta.data.inside = inside;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (this._data.search.lastRequest) {\r\n\t\t\t\t\t\tthis._data.search.lastRequest.abort();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis._data.search.lastRequest = ajax(a)\r\n\t\t\t\t\t\t.fail(langx.proxy(function () {\r\n\t\t\t\t\t\t\tthis._data.core.last_error = { 'error' : 'ajax', 'plugin' : 'search', 'id' : 'search_01', 'reason' : 'Could not load search parents', 'data' : JSON.stringify(a) };\r\n\t\t\t\t\t\t\tthis.settings.core.error.call(this, this._data.core.last_error);\r\n\t\t\t\t\t\t}, this))\r\n\t\t\t\t\t\t.done(langx.proxy(function (d) {\r\n\t\t\t\t\t\t\tif(d && d.d) { d = d.d; }\r\n\t\t\t\t\t\t\tthis._load_nodes(!langx.isArray(d) ? [] : $.vakata.array_unique(d), function () {\r\n\t\t\t\t\t\t\t\tthis.search(str, true, show_only_matches, inside, append, show_only_matches_children);\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}, this));\r\n\t\t\t\t\treturn this._data.search.lastRequest;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(!append) {\r\n\t\t\t\tthis._data.search.str = str;\r\n\t\t\t\tthis._data.search.dom = $();\r\n\t\t\t\tthis._data.search.res = [];\r\n\t\t\t\tthis._data.search.opn = [];\r\n\t\t\t\tthis._data.search.som = show_only_matches;\r\n\t\t\t\tthis._data.search.smc = show_only_matches_children;\r\n\t\t\t}\r\n\r\n\t\t\tf = new $.vakata.search(str, true, { caseSensitive : s.case_sensitive, fuzzy : s.fuzzy });\r\n\t\t\tlangx.each(m[inside ? inside : $.jstree.root].children_d, function (ii, i) {\r\n\t\t\t\tvar v = m[i];\r\n\t\t\t\tif(v.text && !v.state.hidden && (!s.search_leaves_only || (v.state.loaded && v.children.length === 0)) && ( (s.search_callback && s.search_callback.call(this, str, v)) || (!s.search_callback && f.search(v.text).isMatch) ) ) {\r\n\t\t\t\t\tr.push(i);\r\n\t\t\t\t\tp = p.concat(v.parents);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tif(r.length) {\r\n\t\t\t\tp = $.vakata.array_unique(p);\r\n\t\t\t\tfor(i = 0, j = p.length; i < j; i++) {\r\n\t\t\t\t\tif(p[i] !== $.jstree.root && m[p[i]] && this.open_node(p[i], null, 0) === true) {\r\n\t\t\t\t\t\tthis._data.search.opn.push(p[i]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif(!append) {\r\n\t\t\t\t\tthis._data.search.dom = $(this.element[0].querySelectorAll('#' + langx.map(r, function (v) { return \"0123456789\".indexOf(v[0]) !== -1 ? '\\\\3' + v[0] + ' ' + v.substr(1).replace($.jstree.idregex,'\\\\$&') : v.replace($.jstree.idregex,'\\\\$&'); }).join(', #')));\r\n\t\t\t\t\tthis._data.search.res = r;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis._data.search.dom = this._data.search.dom.add($(this.element[0].querySelectorAll('#' + langx.map(r, function (v) { return \"0123456789\".indexOf(v[0]) !== -1 ? '\\\\3' + v[0] + ' ' + v.substr(1).replace($.jstree.idregex,'\\\\$&') : v.replace($.jstree.idregex,'\\\\$&'); }).join(', #'))));\r\n\t\t\t\t\tthis._data.search.res = $.vakata.array_unique(this._data.search.res.concat(r));\r\n\t\t\t\t}\r\n\t\t\t\tthis._data.search.dom.children(\".jstree-anchor\").addClass('jstree-search');\r\n\t\t\t}\r\n\t\t\t/**\r\n\t\t\t * triggered after search is complete\r\n\t\t\t * @event\r\n\t\t\t * @name search.jstree\r\n\t\t\t * @param {jQuery} nodes a jQuery collection of matching nodes\r\n\t\t\t * @param {String} str the search string\r\n\t\t\t * @param {Array} res a collection of objects represeing the matching nodes\r\n\t\t\t * @plugin search\r\n\t\t\t */\r\n\t\t\tthis.trigger('search', { nodes : this._data.search.dom, str : str, res : this._data.search.res, show_only_matches : show_only_matches });\r\n\t\t};\r\n\t\t/**\r\n\t\t * used to clear the last search (removes classes and shows all nodes if filtering is on)\r\n\t\t * @name clear_search()\r\n\t\t * @plugin search\r\n\t\t * @trigger clear_search.jstree\r\n\t\t */\r\n\t\tthis.clear_search = function () {\r\n\t\t\tif(this.settings.search.close_opened_onclear) {\r\n\t\t\t\tthis.close_node(this._data.search.opn, 0);\r\n\t\t\t}\r\n\t\t\t/**\r\n\t\t\t * triggered after search is complete\r\n\t\t\t * @event\r\n\t\t\t * @name clear_search.jstree\r\n\t\t\t * @param {jQuery} nodes a jQuery collection of matching nodes (the result from the last search)\r\n\t\t\t * @param {String} str the search string (the last search string)\r\n\t\t\t * @param {Array} res a collection of objects represeing the matching nodes (the result from the last search)\r\n\t\t\t * @plugin search\r\n\t\t\t */\r\n\t\t\tthis.trigger('clear_search', { 'nodes' : this._data.search.dom, str : this._data.search.str, res : this._data.search.res });\r\n\t\t\tif(this._data.search.res.length) {\r\n\t\t\t\tthis._data.search.dom = $(this.element[0].querySelectorAll('#' + langx.map(this._data.search.res, function (v) {\r\n\t\t\t\t\treturn \"0123456789\".indexOf(v[0]) !== -1 ? '\\\\3' + v[0] + ' ' + v.substr(1).replace($.jstree.idregex,'\\\\$&') : v.replace($.jstree.idregex,'\\\\$&');\r\n\t\t\t\t}).join(', #')));\r\n\t\t\t\tthis._data.search.dom.children(\".jstree-anchor\").removeClass(\"jstree-search\");\r\n\t\t\t}\r\n\t\t\tthis._data.search.str = \"\";\r\n\t\t\tthis._data.search.res = [];\r\n\t\t\tthis._data.search.opn = [];\r\n\t\t\tthis._data.search.dom = $();\r\n\t\t};\r\n\r\n\t\tthis.redraw_node = function(obj, deep, callback, force_render) {\r\n\t\t\tobj = parent.redraw_node.apply(this, arguments);\r\n\t\t\tif(obj) {\r\n\t\t\t\tif(langx.inArray(obj.id, this._data.search.res) !== -1) {\r\n\t\t\t\t\tvar i, j, tmp = null;\r\n\t\t\t\t\tfor(i = 0, j = obj.childNodes.length; i < j; i++) {\r\n\t\t\t\t\t\tif(obj.childNodes[i] && obj.childNodes[i].className && obj.childNodes[i].className.indexOf(\"jstree-anchor\") !== -1) {\r\n\t\t\t\t\t\t\ttmp = obj.childNodes[i];\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(tmp) {\r\n\t\t\t\t\t\ttmp.className += ' jstree-search';\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn obj;\r\n\t\t};\r\n\t};\r\n\r\n\t// helpers\r\n\t(function ($) {\r\n\t\t// from http://kiro.me/projects/fuse.html\r\n\t\t$.vakata.search = function(pattern, txt, options) {\r\n\t\t\toptions = options || {};\r\n\t\t\toptions = langx.extend({}, $.vakata.search.defaults, options);\r\n\t\t\tif(options.fuzzy !== false) {\r\n\t\t\t\toptions.fuzzy = true;\r\n\t\t\t}\r\n\t\t\tpattern = options.caseSensitive ? pattern : pattern.toLowerCase();\r\n\t\t\tvar MATCH_LOCATION\t= options.location,\r\n\t\t\t\tMATCH_DISTANCE\t= options.distance,\r\n\t\t\t\tMATCH_THRESHOLD\t= options.threshold,\r\n\t\t\t\tpatternLen = pattern.length,\r\n\t\t\t\tmatchmask, pattern_alphabet, match_bitapScore, search;\r\n\t\t\tif(patternLen > 32) {\r\n\t\t\t\toptions.fuzzy = false;\r\n\t\t\t}\r\n\t\t\tif(options.fuzzy) {\r\n\t\t\t\tmatchmask = 1 << (patternLen - 1);\r\n\t\t\t\tpattern_alphabet = (function () {\r\n\t\t\t\t\tvar mask = {},\r\n\t\t\t\t\t\ti = 0;\r\n\t\t\t\t\tfor (i = 0; i < patternLen; i++) {\r\n\t\t\t\t\t\tmask[pattern.charAt(i)] = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tfor (i = 0; i < patternLen; i++) {\r\n\t\t\t\t\t\tmask[pattern.charAt(i)] |= 1 << (patternLen - i - 1);\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn mask;\r\n\t\t\t\t}());\r\n\t\t\t\tmatch_bitapScore = function (e, x) {\r\n\t\t\t\t\tvar accuracy = e / patternLen,\r\n\t\t\t\t\t\tproximity = Math.abs(MATCH_LOCATION - x);\r\n\t\t\t\t\tif(!MATCH_DISTANCE) {\r\n\t\t\t\t\t\treturn proximity ? 1.0 : accuracy;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn accuracy + (proximity / MATCH_DISTANCE);\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\tsearch = function (text) {\r\n\t\t\t\ttext = options.caseSensitive ? text : text.toLowerCase();\r\n\t\t\t\tif(pattern === text || text.indexOf(pattern) !== -1) {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tisMatch: true,\r\n\t\t\t\t\t\tscore: 0\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tif(!options.fuzzy) {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tisMatch: false,\r\n\t\t\t\t\t\tscore: 1\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tvar i, j,\r\n\t\t\t\t\ttextLen = text.length,\r\n\t\t\t\t\tscoreThreshold = MATCH_THRESHOLD,\r\n\t\t\t\t\tbestLoc = text.indexOf(pattern, MATCH_LOCATION),\r\n\t\t\t\t\tbinMin, binMid,\r\n\t\t\t\t\tbinMax = patternLen + textLen,\r\n\t\t\t\t\tlastRd, start, finish, rd, charMatch,\r\n\t\t\t\t\tscore = 1,\r\n\t\t\t\t\tlocations = [];\r\n\t\t\t\tif (bestLoc !== -1) {\r\n\t\t\t\t\tscoreThreshold = Math.min(match_bitapScore(0, bestLoc), scoreThreshold);\r\n\t\t\t\t\tbestLoc = text.lastIndexOf(pattern, MATCH_LOCATION + patternLen);\r\n\t\t\t\t\tif (bestLoc !== -1) {\r\n\t\t\t\t\t\tscoreThreshold = Math.min(match_bitapScore(0, bestLoc), scoreThreshold);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbestLoc = -1;\r\n\t\t\t\tfor (i = 0; i < patternLen; i++) {\r\n\t\t\t\t\tbinMin = 0;\r\n\t\t\t\t\tbinMid = binMax;\r\n\t\t\t\t\twhile (binMin < binMid) {\r\n\t\t\t\t\t\tif (match_bitapScore(i, MATCH_LOCATION + binMid) <= scoreThreshold) {\r\n\t\t\t\t\t\t\tbinMin = binMid;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tbinMax = binMid;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbinMid = Math.floor((binMax - binMin) / 2 + binMin);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbinMax = binMid;\r\n\t\t\t\t\tstart = Math.max(1, MATCH_LOCATION - binMid + 1);\r\n\t\t\t\t\tfinish = Math.min(MATCH_LOCATION + binMid, textLen) + patternLen;\r\n\t\t\t\t\trd = new Array(finish + 2);\r\n\t\t\t\t\trd[finish + 1] = (1 << i) - 1;\r\n\t\t\t\t\tfor (j = finish; j >= start; j--) {\r\n\t\t\t\t\t\tcharMatch = pattern_alphabet[text.charAt(j - 1)];\r\n\t\t\t\t\t\tif (i === 0) {\r\n\t\t\t\t\t\t\trd[j] = ((rd[j + 1] << 1) | 1) & charMatch;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\trd[j] = ((rd[j + 1] << 1) | 1) & charMatch | (((lastRd[j + 1] | lastRd[j]) << 1) | 1) | lastRd[j + 1];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (rd[j] & matchmask) {\r\n\t\t\t\t\t\t\tscore = match_bitapScore(i, j - 1);\r\n\t\t\t\t\t\t\tif (score <= scoreThreshold) {\r\n\t\t\t\t\t\t\t\tscoreThreshold = score;\r\n\t\t\t\t\t\t\t\tbestLoc = j - 1;\r\n\t\t\t\t\t\t\t\tlocations.push(bestLoc);\r\n\t\t\t\t\t\t\t\tif (bestLoc > MATCH_LOCATION) {\r\n\t\t\t\t\t\t\t\t\tstart = Math.max(1, 2 * MATCH_LOCATION - bestLoc);\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (match_bitapScore(i + 1, MATCH_LOCATION) > scoreThreshold) {\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlastRd = rd;\r\n\t\t\t\t}\r\n\t\t\t\treturn {\r\n\t\t\t\t\tisMatch: bestLoc >= 0,\r\n\t\t\t\t\tscore: score\r\n\t\t\t\t};\r\n\t\t\t};\r\n\t\t\treturn txt === true ? { 'search' : search } : search(txt);\r\n\t\t};\r\n\t\t$.vakata.search.defaults = {\r\n\t\t\tlocation : 0,\r\n\t\t\tdistance : 100,\r\n\t\t\tthreshold : 0.6,\r\n\t\t\tfuzzy : false,\r\n\t\t\tcaseSensitive : false\r\n\t\t};\r\n\t}($));\r\n\r\n\t// include the search plugin by default\r\n\t// $.jstree.defaults.plugins.push(\"search\");\r\n\r\n\treturn $;\r\n\t\r\n});\r\n\ndefine('skylark-widgets-hierarchy/addons/sort',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-browser\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-geom\",\r\n  \"skylark-domx-query\",\r\n  \"../Hierarchy\"\r\n],function(langx,browser,eventer,noder,geom,$,jstree){\r\n\r\n\t\"use strict\";\r\n\r\n\tif($.jstree.plugins.sort) { return; }\r\n\r\n\t/**\r\n\t * the settings function used to sort the nodes.\r\n\t * It is executed in the tree's context, accepts two nodes as arguments and should return `1` or `-1`.\r\n\t * @name $.jstree.defaults.sort\r\n\t * @plugin sort\r\n\t */\r\n\t$.jstree.defaults.sort = function (a, b) {\r\n\t\t//return this.get_type(a) === this.get_type(b) ? (this.get_text(a) > this.get_text(b) ? 1 : -1) : this.get_type(a) >= this.get_type(b);\r\n\t\treturn this.get_text(a) > this.get_text(b) ? 1 : -1;\r\n\t};\r\n\t$.jstree.plugins.sort = function (options, parent) {\r\n\t\tthis.bind = function () {\r\n\t\t\tparent.bind.call(this);\r\n\t\t\tthis.element\r\n\t\t\t\t.on(\"model.jstree\", langx.proxy(function (e, data) {\r\n\t\t\t\t\t\tthis.sort(data.parent, true);\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on(\"rename_node.jstree create_node.jstree\", langx.proxy(function (e, data) {\r\n\t\t\t\t\t\tthis.sort(data.parent || data.node.parent, false);\r\n\t\t\t\t\t\tthis.redraw_node(data.parent || data.node.parent, true);\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on(\"move_node.jstree copy_node.jstree\", langx.proxy(function (e, data) {\r\n\t\t\t\t\t\tthis.sort(data.parent, false);\r\n\t\t\t\t\t\tthis.redraw_node(data.parent, true);\r\n\t\t\t\t\t}, this));\r\n\t\t};\r\n\t\t/**\r\n\t\t * used to sort a node's children\r\n\t\t * @private\r\n\t\t * @name sort(obj [, deep])\r\n\t\t * @param  {mixed} obj the node\r\n\t\t * @param {Boolean} deep if set to `true` nodes are sorted recursively.\r\n\t\t * @plugin sort\r\n\t\t * @trigger search.jstree\r\n\t\t */\r\n\t\tthis.sort = function (obj, deep) {\r\n\t\t\tvar i, j;\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(obj && obj.children && obj.children.length) {\r\n\t\t\t\tobj.children.sort(langx.proxy(this.settings.sort, this));\r\n\t\t\t\tif(deep) {\r\n\t\t\t\t\tfor(i = 0, j = obj.children_d.length; i < j; i++) {\r\n\t\t\t\t\t\tthis.sort(obj.children_d[i], false);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n\t// include the sort plugin by default\r\n\t// $.jstree.defaults.plugins.push(\"sort\");\r\n\r\n\treturn $;\r\n\t\r\n});\ndefine('skylark-widgets-hierarchy/addons/state',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-browser\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-geom\",\r\n  \"skylark-domx-query\",\r\n  \"../Hierarchy\"\r\n],function(langx,browser,eventer,noder,geom,$,jstree){\r\n\r\n\t\"use strict\";\r\n\r\n\tif($.jstree.plugins.state) { return; }\r\n\r\n\tvar to = false;\r\n\t/**\r\n\t * stores all defaults for the state plugin\r\n\t * @name $.jstree.defaults.state\r\n\t * @plugin state\r\n\t */\r\n\t$.jstree.defaults.state = {\r\n\t\t/**\r\n\t\t * A string for the key to use when saving the current tree (change if using multiple trees in your project). Defaults to `jstree`.\r\n\t\t * @name $.jstree.defaults.state.key\r\n\t\t * @plugin state\r\n\t\t */\r\n\t\tkey\t\t: 'jstree',\r\n\t\t/**\r\n\t\t * A space separated list of events that trigger a state save. Defaults to `changed.jstree open_node.jstree close_node.jstree`.\r\n\t\t * @name $.jstree.defaults.state.events\r\n\t\t * @plugin state\r\n\t\t */\r\n\t\tevents\t: 'changed.jstree open_node.jstree close_node.jstree check_node.jstree uncheck_node.jstree',\r\n\t\t/**\r\n\t\t * Time in milliseconds after which the state will expire. Defaults to 'false' meaning - no expire.\r\n\t\t * @name $.jstree.defaults.state.ttl\r\n\t\t * @plugin state\r\n\t\t */\r\n\t\tttl\t\t: false,\r\n\t\t/**\r\n\t\t * A function that will be executed prior to restoring state with one argument - the state object. Can be used to clear unwanted parts of the state.\r\n\t\t * @name $.jstree.defaults.state.filter\r\n\t\t * @plugin state\r\n\t\t */\r\n\t\tfilter\t: false,\r\n\t\t/**\r\n\t\t * Should loaded nodes be restored (setting this to true means that it is possible that the whole tree will be loaded for some users - use with caution). Defaults to `false`\r\n\t\t * @name $.jstree.defaults.state.preserve_loaded\r\n\t\t * @plugin state\r\n\t\t */\r\n\t\tpreserve_loaded : false\r\n\t};\r\n\t$.jstree.plugins.state = function (options, parent) {\r\n\t\tthis.bind = function () {\r\n\t\t\tparent.bind.call(this);\r\n\t\t\tvar bind = langx.proxy(function () {\r\n\t\t\t\tthis.element.on(this.settings.state.events, langx.proxy(function () {\r\n\t\t\t\t\tif(to) { clearTimeout(to); }\r\n\t\t\t\t\tto = setTimeout(langx.proxy(function () { this.save_state(); }, this), 100);\r\n\t\t\t\t}, this));\r\n\t\t\t\t/**\r\n\t\t\t\t * triggered when the state plugin is finished restoring the state (and immediately after ready if there is no state to restore).\r\n\t\t\t\t * @event\r\n\t\t\t\t * @name state_ready.jstree\r\n\t\t\t\t * @plugin state\r\n\t\t\t\t */\r\n\t\t\t\tthis.trigger('state_ready');\r\n\t\t\t}, this);\r\n\t\t\tthis.element\r\n\t\t\t\t.on(\"ready.jstree\", langx.proxy(function (e, data) {\r\n\t\t\t\t\t\tthis.element.one(\"restore_state.jstree\", bind);\r\n\t\t\t\t\t\tif(!this.restore_state()) { bind(); }\r\n\t\t\t\t\t}, this));\r\n\t\t};\r\n\t\t/**\r\n\t\t * save the state\r\n\t\t * @name save_state()\r\n\t\t * @plugin state\r\n\t\t */\r\n\t\tthis.save_state = function () {\r\n\t\t\tvar tm = this.get_state();\r\n\t\t\tif (!this.settings.state.preserve_loaded) {\r\n\t\t\t\tdelete tm.core.loaded;\r\n\t\t\t}\r\n\t\t\tvar st = { 'state' : tm, 'ttl' : this.settings.state.ttl, 'sec' : +(new Date()) };\r\n\t\t\t$.vakata.storage.set(this.settings.state.key, JSON.stringify(st));\r\n\t\t};\r\n\t\t/**\r\n\t\t * restore the state from the user's computer\r\n\t\t * @name restore_state()\r\n\t\t * @plugin state\r\n\t\t */\r\n\t\tthis.restore_state = function () {\r\n\t\t\tvar k = $.vakata.storage.get(this.settings.state.key);\r\n\t\t\tif(!!k) { try { k = JSON.parse(k); } catch(ex) { return false; } }\r\n\t\t\tif(!!k && k.ttl && k.sec && +(new Date()) - k.sec > k.ttl) { return false; }\r\n\t\t\tif(!!k && k.state) { k = k.state; }\r\n\t\t\tif(!!k && langx.isFunction(this.settings.state.filter)) { k = this.settings.state.filter.call(this, k); }\r\n\t\t\tif(!!k) {\r\n\t\t\t\tif (!this.settings.state.preserve_loaded) {\r\n\t\t\t\t\tdelete k.core.loaded;\r\n\t\t\t\t}\r\n\t\t\t\tthis.element.one(\"set_state.jstree\", function (e, data) { data.instance.trigger('restore_state', { 'state' : langx.extend(true, {}, k) }); });\r\n\t\t\t\tthis.set_state(k);\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t};\r\n\t\t/**\r\n\t\t * clear the state on the user's computer\r\n\t\t * @name clear_state()\r\n\t\t * @plugin state\r\n\t\t */\r\n\t\tthis.clear_state = function () {\r\n\t\t\treturn $.vakata.storage.del(this.settings.state.key);\r\n\t\t};\r\n\t};\r\n\r\n\t(function ($, undefined) {\r\n\t\t$.vakata.storage = {\r\n\t\t\t// simply specifying the functions in FF throws an error\r\n\t\t\tset : function (key, val) { return window.localStorage.setItem(key, val); },\r\n\t\t\tget : function (key) { return window.localStorage.getItem(key); },\r\n\t\t\tdel : function (key) { return window.localStorage.removeItem(key); }\r\n\t\t};\r\n\t}($));\r\n\r\n\t// include the state plugin by default\r\n\t// $.jstree.defaults.plugins.push(\"state\");\r\n\r\n\treturn $;\r\n\t\r\n});\ndefine('skylark-widgets-hierarchy/addons/treegrid',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-browser\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-geom\",\r\n  \"skylark-domx-query\",\r\n  \"./menu\",\r\n  \"../Hierarchy\"\r\n],function(langx,browser,eventer,noder,geom,$,menu,jstree){\r\n    var BLANKRE = /^\\s*$/g,\r\n        IDREGEX = /[\\\\:&!^|()\\[\\]<>@*'+~#\";,= \\/${}%]/g,\r\n        escapeId = function(id) {\r\n            return (id || \"\").replace(IDREGEX, '\\\\$&');\r\n        },\r\n        NODE_DATA_ATTR = \"data-jstreegrid\",\r\n        COL_DATA_ATTR = \"data-jstreegrid-column\",\r\n        SEARCHCLASS = \"jstree-search\",\r\n        SPECIAL_TITLE = \"_DATA_\",\r\n        LEVELINDENT = 24,\r\n        styled = false,\r\n        MINCOLWIDTH = 10,\r\n        generateCellId = function(tree, id) {\r\n            return (\"jstree_\" + tree + \"_grid_\" + escapeId(id) + \"_col\");\r\n        },\r\n        getIds = function(nodes) {\r\n            return langx.makeArray(nodes.map(function() {\r\n                return this.id;\r\n            }));\r\n        },\r\n        findDataCell = function(uniq, ids, col, scope) {\r\n            if (scope == undefined) {\r\n                scope = $();\r\n            };\r\n            if (ids === null || ids === undefined || ids.length === 0) {\r\n                return scope;\r\n            }\r\n            var ret = $(),\r\n                columns = [].concat(col),\r\n                cellId;\r\n            if (typeof(ids) === \"string\") {\r\n                cellId = generateCellId(uniq, ids);\r\n                ret = columns.map(function(col) {\r\n                    return \"#\" + cellId + col;\r\n                }).join(\", \");\r\n            } else {\r\n                ret = []\r\n                ids.forEach(function(elm, i) {\r\n                    var cellId = generateCellId(uniq, elm);\r\n                    ret = ret.concat(columns.map(function(col) {\r\n                        return \"#\" + cellId + col;\r\n                    }));\r\n                });\r\n                ret = ret.join(\", \");\r\n            }\r\n            return columns.length == 1 ? scope.find(ret) : $(ret);\r\n        },\r\n        isClickedSep = false,\r\n        toResize = null,\r\n        oldMouseX = 0,\r\n        newMouseX = 0,\r\n\r\n        /*jslint regexp:true */\r\n        htmlstripre = /<\\/?[^>]+>/gi,\r\n        /*jslint regexp:false */\r\n\r\n        getIndent = function(node, tree) {\r\n            var div, i, li, width;\r\n\r\n            // did we already save it for this tree?\r\n            tree._gridSettings = tree._gridSettings || {};\r\n            if (tree._gridSettings.indent > 0) {\r\n                width = tree._gridSettings.indent;\r\n            } else {\r\n                // create a new div on the DOM but not visible on the page\r\n                div = $(\"<div></div>\");\r\n                i = node.prev(\"i\");\r\n                li = i.parent();\r\n                // add to that div all of the classes on the tree root\r\n                div.addClass(tree.get_node(\"#\", true).attr(\"class\"));\r\n\r\n                // move the li to the temporary div root\r\n                li.appendTo(div);\r\n\r\n                // attach to the body quickly\r\n                div.appendTo($(\"body\"));\r\n\r\n                // get the width\r\n                width = i.width() || LEVELINDENT;\r\n\r\n                // detach the li from the new div and destroy the new div\r\n                li.detach();\r\n                div.remove();\r\n\r\n                // save it for the future\r\n                tree._gridSettings.indent = width;\r\n            }\r\n\r\n\r\n            return (width);\r\n\r\n        },\r\n\r\n        copyData = function(fromtree, from, totree, to, recurse) {\r\n            var i, j;\r\n            to.data = langx.extend(true, {}, from.data);\r\n            if (from && from.children_d && recurse) {\r\n                for (i = 0, j = from.children_d.length; i < j; i++) {\r\n                    copyData(fromtree, fromtree.get_node(from.children_d[i]), totree, totree.get_node(to.children_d[i]), recurse);\r\n                }\r\n            }\r\n        },\r\n\r\n        findLastClosedNode = function(tree, id) {\r\n            // first get our node\r\n            var ret, node = tree.get_node(id),\r\n                children = node.children;\r\n            // is it closed?\r\n            if (!children || children.length <= 0 || !node.state.opened) {\r\n                ret = id;\r\n            } else {\r\n                ret = findLastClosedNode(tree, children[children.length - 1]);\r\n            }\r\n            return (ret);\r\n        },\r\n\r\n        renderAWidth = function(node, tree) {\r\n            var depth, width,\r\n                fullWidth = parseInt(tree.settings.grid.columns[0].width, 10) + parseInt(tree._gridSettings.treeWidthDiff, 10);\r\n            // need to use a selector in jquery 1.4.4+\r\n            depth = tree.get_node(node).parents.length;\r\n            width = fullWidth - depth * getIndent(node, tree);\r\n            // the following line is no longer needed, since we are doing this inside a <td>\r\n            //a.css({\"vertical-align\": \"top\", \"overflow\":\"hidden\"});\r\n            return (fullWidth);\r\n        },\r\n        renderATitle = function(node, t, tree) {\r\n            var a = node.hasClass(\"jstree-anchor\") ? node : node.children(\"[class~='jstree-anchor']\"),\r\n                title, col = tree.settings.grid.columns[0];\r\n            // get the title\r\n            title = \"\";\r\n            if (col.title) {\r\n                if (col.title === SPECIAL_TITLE) {\r\n                    title = tree.get_text(t);\r\n                } else if (t.attr(col.title)) {\r\n                    title = t.attr(col.title);\r\n                }\r\n            }\r\n            // strip out HTML\r\n            title = title.replace(htmlstripre, '');\r\n            if (title) {\r\n                a.attr(\"title\", title);\r\n            }\r\n        },\r\n        getCellData = function(value, data) {\r\n            var val;\r\n            // get the contents of the cell - value could be a string or a function\r\n            if (value !== undefined && value !== null) {\r\n                if (typeof(value) === \"function\") {\r\n                    val = value(data);\r\n                } else if (data.data !== null && data.data !== undefined && data.data[value] !== undefined) {\r\n                    val = data.data[value];\r\n                } else {\r\n                    val = \"\";\r\n                }\r\n            } else {\r\n                val = \"\";\r\n            }\r\n            return val;\r\n        };\r\n\r\n    $.jstree.defaults.grid = {\r\n        width: 'auto'\r\n    };\r\n\r\n    $.jstree.plugins.grid = function(options, parent) {\r\n        this._initialize = function() {\r\n            if (!this._initialized) {\r\n                var s = this.settings.grid || {},\r\n                    styles, container = this.element,\r\n                    i,\r\n                    gs = this._gridSettings = {\r\n                        columns: s.columns || [],\r\n                        treeClass: \"jstree-grid-col-0\",\r\n                        context: s.contextmenu || false,\r\n                        columnWidth: s.columnWidth,\r\n                        defaultConf: {\r\n                            \"*display\": \"inline\",\r\n                            \"*+display\": \"inline\"\r\n                        },\r\n                        isThemeroller: !!this._data.themeroller,\r\n                        treeWidthDiff: 0,\r\n                        resizable: s.resizable,\r\n                        draggable: s.draggable,\r\n                        stateful: s.stateful,\r\n                        indent: 0,\r\n                        sortOrder: 'text',\r\n                        sortAsc: true,\r\n                        caseInsensitive: s.caseInsensitive,\r\n                        fixedHeader: s.fixedHeader !== false,\r\n                        width: s.width,\r\n                        height: s.height,\r\n                        gridcontextmenu: s.gridcontextmenu,\r\n                        treecol: 0,\r\n                        gridcols: []\r\n                    },\r\n                    cols = gs.columns,\r\n                    treecol = 0,\r\n                    columnSearch = false;\r\n                if (gs.gridcontextmenu === true) {\r\n                    gs.gridcontextmenu = function(grid, tree, node, val, col, t, target) {\r\n                        return {\r\n                            \"edit\": {\r\n                                label: \"Edit\",\r\n                                \"action\": function(data) {\r\n                                    var obj = t.get_node(node);\r\n                                    grid._edit(obj, col, target);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                } else if (gs.gridcontextmenu === false) {\r\n                    gs.gridcontextmenu = false;\r\n                }\r\n                // find which column our tree shuld go in\r\n                for (var i = 0, len = s.columns.length; i < len; i++) {\r\n                    if (s.columns[i].tree) {\r\n                        // save which column it was\r\n                        treecol = i;\r\n                        gs.treecol = treecol;\r\n                    } else {\r\n                        gs.gridcols.push(i);\r\n                    }\r\n                }\r\n                // set a unique ID for this table\r\n                this.uniq = Math.ceil(Math.random() * 1000);\r\n                this.rootid = container.attr(\"id\");\r\n\r\n                var msie = /msie/.test(navigator.userAgent.toLowerCase());\r\n                if (msie) {\r\n                    var version = parseFloat(navigator.appVersion.split(\"MSIE\")[1]);\r\n                    if (version < 8) {\r\n                        gs.defaultConf.display = \"inline\";\r\n                        gs.defaultConf.zoom = \"1\";\r\n                    }\r\n                }\r\n\r\n                // set up the classes we need\r\n                if (!styled) {\r\n                    styled = true;\r\n                    styles = [\r\n                        '.jstree-grid-cell {vertical-align: top; overflow:hidden;margin-left:0;position:relative;width: 100%;padding-left:7px;white-space: nowrap;}',\r\n                        '.jstree-grid-cell span {margin-right:0px;margin-right:0px;*display:inline;*+display:inline;white-space: nowrap;}',\r\n                        '.jstree-grid-separator {position:absolute; top:0; right:0; height:24px; margin-left: -2px; border-width: 0 2px 0 0; *display:inline; *+display:inline; margin-right:0px;width:0px;}',\r\n                        '.jstree-grid-header-cell {overflow: hidden; white-space: nowrap;padding: 1px 3px 2px 5px; cursor: default;}',\r\n                        '.jstree-grid-header-themeroller {border: 0; padding: 1px 3px;}',\r\n                        '.jstree-grid-header-regular {position:relative; background-color: #EBF3FD; z-index: 1;}',\r\n                        '.jstree-grid-hidden {display: none;}',\r\n                        '.jstree-grid-resizable-separator {cursor: col-resize; width: 2px;}',\r\n                        '.jstree-grid-separator-regular {border-color: #d0d0d0; border-style: solid;}',\r\n                        '.jstree-grid-cell-themeroller {border: none !important; background: transparent !important;}',\r\n                        '.jstree-grid-wrapper {table-layout: fixed; width: 100%; overflow: auto; position: relative;}',\r\n                        '.jstree-grid-midwrapper {display: table-row;}',\r\n                        '.jstree-grid-width-auto {width:auto;display:block;}',\r\n                        '.jstree-grid-column {display: table-cell; overflow: hidden;}',\r\n                        '.jstree-grid-ellipsis {text-overflow: ellipsis;}',\r\n                        '.jstree-grid-col-0 {width: 100%;}'\r\n                    ];\r\n                    $('<style type=\"text/css\">' + styles.join(\"\\n\") + '</style>').appendTo(\"head\");\r\n                }\r\n                this.gridWrapper = $(\"<div></div>\").addClass(\"jstree-grid-wrapper\").insertAfter(container);\r\n                this.midWrapper = $(\"<div></div>\").addClass(\"jstree-grid-midwrapper\").appendTo(this.gridWrapper);\r\n                // set the wrapper width\r\n                if (s.width) {\r\n                    this.gridWrapper.width(s.width);\r\n                }\r\n                if (s.height) {\r\n                    this.gridWrapper.height(s.height);\r\n                }\r\n                // create the data columns\r\n                for (var i = 0, len = cols.length; i < len; i++) {\r\n                    // create the column\r\n                    $(\"<div></div>\").addClass(\"jstree-default jstree-grid-column jstree-grid-column-\" + i + \" jstree-grid-column-root-\" + this.rootid).appendTo(this.midWrapper);\r\n                }\r\n                this.midWrapper.children(\"div:eq(\" + treecol + \")\").append(container);\r\n                container.addClass(\"jstree-grid-cell\");\r\n\r\n                //move header with scroll\r\n                if (gs.fixedHeader) {\r\n                    this.gridWrapper.scroll(function() {\r\n                        $(this).find('.jstree-grid-header').css('top', $(this).scrollTop());\r\n                    });\r\n                }\r\n\r\n                // copy original sort function\r\n                var defaultSort = langx.proxy(this.settings.sort, this);\r\n\r\n                // override sort function\r\n                this.settings.sort = function(a, b) {\r\n                    var bigger, colrefs = this.colrefs;\r\n\r\n                    if (gs.sortOrder === 'text') {\r\n                        var caseInsensitiveSort = this.get_text(a).toLowerCase().localeCompare(this.get_text(b).toLowerCase());\r\n                        bigger = gs.caseInsensitive ? (caseInsensitiveSort === 1) : (defaultSort(a, b) === 1);\r\n                    } else {\r\n                        // gs.sortOrder just refers to the unique random name for this column\r\n                        // we need to get the correct value\r\n                        var nodeA = this.get_node(a),\r\n                            nodeB = this.get_node(b),\r\n                            value = colrefs[gs.sortOrder].value,\r\n                            valueA = typeof(value) === 'function' ? value(nodeA) : nodeA.data[value],\r\n                            valueB = typeof(value) === 'function' ? value(nodeB) : nodeB.data[value];\r\n                        if (typeof(valueA) && typeof(valueB) !== 'undefined') {\r\n                            bigger = gs.caseInsensitive ? valueA.toLowerCase() > valueB.toLowerCase() : valueA > valueB;\r\n                        }\r\n                    }\r\n\r\n                    if (!gs.sortAsc)\r\n                        bigger = !bigger;\r\n\r\n                    return bigger ? 1 : -1;\r\n                };\r\n\r\n                // sortable columns when jQuery UI is available\r\n                if (gs.draggable) {\r\n                    if (!$.ui || !$.ui.sortable) {\r\n                        console.warn('[jstree-grid] draggable option requires jQuery UI');\r\n                    } else {\r\n                        var from, to;\r\n\r\n                        $(this.midWrapper).sortable({\r\n                            axis: \"x\",\r\n                            handle: \".jstree-grid-header\",\r\n                            cancel: \".jstree-grid-separator\",\r\n                            start: function(event, ui) {\r\n                                from = ui.item.index();\r\n                            },\r\n                            stop: function(event, ui) {\r\n                                to = ui.item.index();\r\n                                gs.columns.splice(to, 0, gs.columns.splice(from, 1)[0]);\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n\r\n                //public function. validate searchObject keys, set columnSearch flag, calls jstree search and reset columnSearch flag\r\n                this.searchColumn = function(searchObj) {\r\n                    var validatedSearchObj = {};\r\n\r\n                    if (typeof searchObj == 'object') {\r\n                        for (var columnIndex in searchObj) {\r\n                            if (searchObj.hasOwnProperty(columnIndex)) {\r\n                                // keys should be the index of a column. This means the following:\r\n                                // only integers and smaller than the number of columns and bigger or equal to 0\r\n                                // (possilbe idea for in the future: ability to set key as a more human readable term like the column header and then map it here to an index)\r\n                                if (columnIndex % 1 === 0 && columnIndex < cols.length && columnIndex >= 0) {\r\n                                    validatedSearchObj[columnIndex] = searchObj[columnIndex];\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    columnSearch = validatedSearchObj;\r\n\r\n                    if (Object.keys(validatedSearchObj).length !== 0) {\r\n                        //the search string doesn't matter. we'll use the search string in the columnSearch object!\r\n                        this.search('someValue');\r\n                    } else { // nothing to search so reset jstree's search by passing an empty string\r\n                        this.search('');\r\n                    }\r\n                    columnSearch = false;\r\n                }\r\n\r\n\r\n                // set default search for each column with no user defined search function (used when doing a columnSearch)\r\n                for (var i = 0, len = cols.length; i < len; i++) {\r\n                    var column = cols[i];\r\n                    if (typeof(column.search_callback) !== \"function\") {\r\n                        // no search callback so set default function\r\n                        column.search_callback = function(str, columnValue, node, column) {\r\n                            var f = new $.vakata.search(str, true, {\r\n                                caseSensitive: searchSettings.case_sensitive,\r\n                                fuzzy: searchSettings.fuzzy\r\n                            });\r\n\r\n                            return f.search(columnValue).isMatch;\r\n\r\n                        };\r\n                    }\r\n                }\r\n\r\n                // if there was no overridden search_callback, we will provide it\r\n                // it will use the default per-node search algorithm, augmented by searching our data nodes\r\n                var searchSettings = this.settings.search;\r\n                var omniSearchCallback = searchSettings.search_callback;\r\n\r\n                if (!omniSearchCallback) {\r\n                    omniSearchCallback = function(str, node) {\r\n                        var i, f = new $.vakata.search(str, true, {\r\n                                caseSensitive: searchSettings.case_sensitive,\r\n                                fuzzy: searchSettings.fuzzy\r\n                            }),\r\n                            matched = f.search(node.text).isMatch,\r\n                            col;\r\n\r\n                        // only bother looking in each cell if it was not yet matched\r\n                        if (!matched) {\r\n                            for (var i = 0, len = cols.length; i < len; i++) {\r\n                                if (treecol === i) {\r\n                                    continue;\r\n                                }\r\n                                col = cols[i];\r\n                                matched = f.search(getCellData(col.value, node)).isMatch;\r\n                                if (matched) {\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                        return matched;\r\n                    }\r\n                }\r\n\r\n                searchSettings.search_callback = function(str, node) {\r\n                    var matched = false;\r\n                    if (columnSearch) {\r\n                        //using logical AND for column searches (more options in the future)\r\n                        for (var columnIndex in columnSearch) {\r\n                            if (columnSearch.hasOwnProperty(columnIndex)) {\r\n                                var searchValue = columnSearch[columnIndex];\r\n                                if (searchValue == '') {\r\n                                    continue;\r\n                                }\r\n                                var col = cols[columnIndex];\r\n                                if (treecol == columnIndex) {\r\n                                    matched = col.search_callback(searchValue, node.text, node, col)\r\n                                } else {\r\n                                    matched = col.search_callback(searchValue, getCellData(col.value, node), node, col)\r\n                                }\r\n\r\n                                if (!matched) {\r\n                                    break; //found one that didn't match\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        container.trigger(\"columnSearch_grid.jstree\");\r\n                    } else {\r\n                        matched = omniSearchCallback(str, node);\r\n                        container.trigger(\"omniSearch_grid.jstree\");\r\n                    }\r\n                    return matched;\r\n                };\r\n                this._initialized = true;\r\n            }\r\n        };\r\n        this.init = function(el, options) {\r\n            parent.init.call(this, el, options);\r\n            this._initialize();\r\n        };\r\n        this.bind = function() {\r\n            parent.bind.call(this);\r\n            this._initialize();\r\n            this.element\r\n                .on(\"move_node.jstree create_node.jstree clean_node.jstree change_node.jstree\", langx.proxy(function(e, data) {\r\n                    var target = this.get_node(data || \"#\", true);\r\n                    var id = _guid();\r\n                    this._detachColumns(id);\r\n                    this._prepare_grid(target);\r\n                    this._reattachColumns(id);\r\n                }, this))\r\n                .on(\"delete_node.jstree\", langx.proxy(function(e, data) {\r\n                    if (data.node.id !== undefined) {\r\n                        var grid = this.gridWrapper,\r\n                            removeNodes = [data.node.id],\r\n                            i;\r\n                        // add children to remove list\r\n                        if (data.node && data.node.children_d) {\r\n                            removeNodes = removeNodes.concat(data.node.children_d);\r\n                        }\r\n                        findDataCell(this.uniq, removeNodes, this._gridSettings.gridcols).remove();\r\n                    }\r\n                }, this))\r\n                .on(\"show_node.jstree\", langx.proxy(function(e, data) {\r\n                    this._hideOrShowTree(data.node, false);\r\n                }, this))\r\n                .on(\"hide_node.jstree\", langx.proxy(function(e, data) {\r\n                    this._hideOrShowTree(data.node, true);\r\n                }, this))\r\n                .on(\"close_node.jstree\", langx.proxy(function(e, data) {\r\n                    this._hide_grid(data.node);\r\n                }, this))\r\n                .on(\"open_node.jstree\", langx.proxy(function(e, data) {}, this))\r\n                .on(\"load_node.jstree\", langx.proxy(function(e, data) {}, this))\r\n                .on(\"loaded.jstree\", langx.proxy(function(e) {\r\n                    this._prepare_headers();\r\n                    this.element.trigger(\"loaded_grid.jstree\");\r\n                }, this))\r\n                .on(\"ready.jstree\", langx.proxy(function(e, data) {\r\n                    // find the line-height of the first known node\r\n                    var anchorHeight = this.element.find(\"[class~='jstree-anchor']:first\").outerHeight(),\r\n                        q,\r\n                        cls = this.element.attr(\"class\") || \"\";\r\n                    $('<style type=\"text/css\">div.jstree-grid-cell-root-' + this.rootid + ' {line-height: ' + anchorHeight + 'px; height: ' + anchorHeight + 'px;}</style>').appendTo(\"head\");\r\n\r\n                    // add container classes to the wrapper - EXCEPT those that are added by jstree, i.e. \"jstree\" and \"jstree-*\"\r\n                    q = cls.split(/\\s+/).map(function(i) {\r\n                        var match = i.match(/^jstree(-|$)/);\r\n                        return (match ? \"\" : i);\r\n                    });\r\n                    this.gridWrapper.addClass(q.join(\" \"));\r\n\r\n                }, this))\r\n                .on(\"move_node.jstree\", langx.proxy(function(e, data) {\r\n                    var node = data.new_instance.element;\r\n                    //renderAWidth(node,this);\r\n                    // check all the children, because we could drag a tree over\r\n                    node.find(\"li > a\").each(langx.proxy(function(i, elm) {\r\n                        //renderAWidth($(elm),this);\r\n                    }, this));\r\n\r\n                }, this))\r\n                .on(\"hover_node.jstree\", langx.proxy(function(node, selected, event) {\r\n                    var id = selected.node.id;\r\n                    if (this._hover_node !== null && this._hover_node !== undefined) {\r\n                        findDataCell(this.uniq, this._hover_node, this._gridSettings.gridcols).removeClass(\"jstree-hovered\");\r\n                    }\r\n                    this._hover_node = id;\r\n                    findDataCell(this.uniq, id, this._gridSettings.gridcols).addClass(\"jstree-hovered\");\r\n                }, this))\r\n                .on(\"dehover_node.jstree\", langx.proxy(function(node, selected, event) {\r\n                    var id = selected.node.id;\r\n                    this._hover_node = null;\r\n                    findDataCell(this.uniq, id, this._gridSettings.gridcols).removeClass(\"jstree-hovered\");\r\n                }, this))\r\n                .on(\"select_node.jstree\", langx.proxy(function(node, selected, event) {\r\n                    var id = selected.node.id;\r\n                    findDataCell(this.uniq, id, this._gridSettings.gridcols).addClass(\"jstree-clicked\");\r\n                    this.get_node(selected.node.id, true).children(\"div.jstree-grid-cell\").addClass(\"jstree-clicked\");\r\n                }, this))\r\n                .on(\"deselect_node.jstree\", langx.proxy(function(node, selected, event) {\r\n                    var id = selected.node.id;\r\n                    findDataCell(this.uniq, id, this._gridSettings.gridcols).removeClass(\"jstree-clicked\");\r\n                }, this))\r\n                .on(\"deselect_all.jstree\", langx.proxy(function(node, selected, event) {\r\n                    // get all of the ids that were unselected\r\n                    var ids = selected.node || [],\r\n                        i;\r\n                    findDataCell(this.uniq, ids, this._gridSettings.gridcols).removeClass(\"jstree-clicked\");\r\n                }, this))\r\n                .on(\"search.jstree\", langx.proxy(function(e, data) {\r\n                    // search sometimes filters, so we need to hide all of the appropriate grid cells as well, and show only the matches\r\n                    var grid = this.gridWrapper,\r\n                        that = this,\r\n                        nodesToShow, startTime = new Date().getTime(),\r\n                        ids = getIds(data.nodes.filter(\".jstree-node\")),\r\n                        endTime;\r\n                    this.holdingCells = {};\r\n                    if (data.nodes.length) {\r\n                        var id = _guid();\r\n                        // save the cells we will hide\r\n                        var cells = grid.find('div.jstree-grid-cell-regular');\r\n                        this._detachColumns(id);\r\n                        if (this._data.search.som) {\r\n                            // create the list of nodes we want to look at\r\n                            if (this._data.search.smc) {\r\n                                nodesToShow = data.nodes.add(data.nodes.find('.jstree-node'));\r\n                            }\r\n                            nodesToShow = (nodesToShow || data.nodes).add(data.nodes.parentsUntil(\".jstree\"));\r\n\r\n                            // hide all of the grid cells\r\n                            cells.hide();\r\n                            // show only those that match\r\n                            nodesToShow.filter(\".jstree-node\").each(function(i, node) {\r\n                                var id = node.id;\r\n                                if (id) {\r\n                                    that._prepare_grid(node);\r\n                                    for (var i = 0, len = that._gridSettings.gridcols.length; i < len; i++) {\r\n                                        if (i === that._gridSettings.treecol) {\r\n                                            continue;\r\n                                        }\r\n                                        findDataCell(that.uniq, id, that._gridSettings.gridcols[i], $(that._domManipulation.columns[i])).show();\r\n                                    }\r\n                                }\r\n                            });\r\n                        }\r\n\r\n                        for (var i = 0, len = this._gridSettings.gridcols.length; i < len; i++) {\r\n                            if (i === this._gridSettings.treecol) {\r\n                                continue;\r\n                            }\r\n                            findDataCell(that.uniq, ids, this._gridSettings.gridcols[i], $(this._domManipulation.columns[i])).addClass(SEARCHCLASS);\r\n                        }\r\n                        this._reattachColumns(id);\r\n                        endTime = new Date().getTime();\r\n                        this.element.trigger(\"search-complete.jstree-grid\", [{\r\n                            time: endTime - startTime\r\n                        }]);\r\n                    }\r\n                    return true;\r\n                }, this))\r\n                .on(\"clear_search.jstree\", langx.proxy(function(e, data) {\r\n                    // search has been cleared, so we need to show all rows\r\n                    var grid = this.gridWrapper,\r\n                        ids = getIds(data.nodes.filter(\".jstree-node\"));\r\n                    grid.find('div.jstree-grid-cell').show();\r\n                    findDataCell(this.uniq, ids, this._gridSettings.gridcols).removeClass(SEARCHCLASS);\r\n                    return true;\r\n                }, this))\r\n                .on(\"copy_node.jstree\", function(e, data) {\r\n                    var newtree = data.new_instance,\r\n                        oldtree = data.old_instance,\r\n                        obj = newtree.get_node(data.node, true);\r\n                    copyData(oldtree, data.original, newtree, data.node, true);\r\n                    newtree._detachColumns(obj.id);\r\n                    newtree._prepare_grid(obj);\r\n                    newtree._reattachColumns(obj.id);\r\n                    return true;\r\n                })\r\n                .on(\"show_ellipsis.jstree\", langx.proxy(function(e, data) {\r\n                    this.gridWrapper.find(\".jstree-grid-cell\").add(\".jstree-grid-header\", this.gridWrapper).addClass(\"jstree-grid-ellipsis\");\r\n                    return true;\r\n                }, this))\r\n                .on(\"hide_ellipsis.jstree\", langx.proxy(function(e, data) {\r\n                    this.gridWrapper.find(\".jstree-grid-cell\").add(\".jstree-grid-header\", this.gridWrapper).removeClass(\"jstree-grid-ellipsis\");\r\n                    return true;\r\n                }, this));\r\n            if (this._gridSettings.isThemeroller) {\r\n                this.element\r\n                    .on(\"select_node.jstree\", langx.proxy(function(e, data) {\r\n                        data.rslt.obj.children(\"[class~='jstree-anchor']\").nextAll(\"div\").addClass(\"ui-state-active\");\r\n                    }, this))\r\n                    .on(\"deselect_node.jstree deselect_all.jstree\", langx.proxy(function(e, data) {\r\n                        data.rslt.obj.children(\"[class~='jstree-anchor']\").nextAll(\"div\").removeClass(\"ui-state-active\");\r\n                    }, this))\r\n                    .on(\"hover_node.jstree\", langx.proxy(function(e, data) {\r\n                        data.rslt.obj.children(\"[class~='jstree-anchor']\").nextAll(\"div\").addClass(\"ui-state-hover\");\r\n                    }, this))\r\n                    .on(\"dehover_node.jstree\", langx.proxy(function(e, data) {\r\n                        data.rslt.obj.children(\"[class~='jstree-anchor']\").nextAll(\"div\").removeClass(\"ui-state-hover\");\r\n                    }, this));\r\n            }\r\n\r\n            if (this._gridSettings.stateful) {\r\n                this.element\r\n                    .on(\"resize_column.jstree-grid\", langx.proxy(function(e, col, width) {\r\n                        localStorage['jstree-root-' + this.rootid + '-column-' + col] = width;\r\n                    }, this));\r\n            }\r\n        };\r\n\r\n        // tear down the tree entirely\r\n        this.teardown = function() {\r\n            var gw = this.gridWrapper,\r\n                container = this.element,\r\n                gridparent = gw.parent();\r\n            container.detach();\r\n            gw.remove();\r\n            gridparent.append(container);\r\n            parent.teardown.call(this);\r\n        };\r\n        // clean the grid in case of redraw or refresh entire tree\r\n        this._clean_grid = function(target, id) {\r\n            var grid = this.gridWrapper;\r\n            if (target) {\r\n                findDataCell(this.uniq, id, this._gridSettings.gridcols).remove();\r\n            } else {\r\n                // get all of the `div` children in all of the `td` in dataRow except for :first (that is the tree itself) and remove\r\n                grid.find(\"div.jstree-grid-cell-regular\").remove();\r\n            }\r\n        };\r\n        // prepare the headers\r\n        this._prepare_headers = function() {\r\n            var header, i, col, _this = this,\r\n                gs = this._gridSettings,\r\n                cols = gs.columns || [],\r\n                width, defaultWidth = gs.columnWidth,\r\n                resizable = gs.resizable || false,\r\n                cl, ccl, val, name, last, tr = gs.isThemeroller,\r\n                classAdd = (tr ? \"themeroller\" : \"regular\"),\r\n                puller,\r\n                hasHeaders = false,\r\n                gridparent = this.gridparent,\r\n                rootid = this.rootid,\r\n                conf = gs.defaultConf,\r\n                coluuid,\r\n                borPadWidth = 0,\r\n                totalWidth = 0;\r\n\r\n            // save the original parent so we can reparent on destroy\r\n            this.parent = gridparent;\r\n\r\n            // save the references to columns by unique ID\r\n            this.colrefs = {};\r\n\r\n\r\n            // create the headers\r\n            for (var i = 0, len = cols.length; i < len; i++) {\r\n                //col = $(\"<col/>\");\r\n                //col.appendTo(colgroup);\r\n                cl = cols[i].headerClass || \"\";\r\n                ccl = cols[i].columnClass || \"\";\r\n                val = cols[i].header || \"\";\r\n                do {\r\n                    coluuid = String(Math.floor(Math.random() * 10000));\r\n                } while (this.colrefs[coluuid] !== undefined);\r\n                // create a unique name for this column\r\n                name = cols[i].value ? coluuid : \"text\";\r\n                this.colrefs[name] = cols[i];\r\n\r\n                if (val) {\r\n                    hasHeaders = true;\r\n                }\r\n                if (gs.stateful && localStorage['jstree-root-' + rootid + '-column-' + i])\r\n                    width = localStorage['jstree-root-' + rootid + '-column-' + i];\r\n                else\r\n                    width = cols[i].width || defaultWidth;\r\n\r\n                var minWidth = cols[i].minWidth || width;\r\n                var maxWidth = cols[i].maxWidth || width;\r\n\r\n                // we only deal with borders if width is not auto and not percentages\r\n                borPadWidth = tr ? 1 + 6 : 2 + 8; // account for the borders and padding\r\n                if (width !== 'auto' && typeof(width) !== \"string\") {\r\n                    width -= borPadWidth;\r\n                }\r\n                col = this.midWrapper.children(\"div.jstree-grid-column-\" + i);\r\n                last = $(\"<div></div>\").css(conf).addClass(\"jstree-grid-div-\" + this.uniq + \"-\" + i + \" \" + (tr ? \"ui-widget-header \" : \"\") + \" jstree-grid-header jstree-grid-header-cell jstree-grid-header-\" + classAdd + \" \" + cl + \" \" + ccl).html(val);\r\n                last.addClass((tr ? \"ui-widget-header \" : \"\") + \"jstree-grid-header jstree-grid-header-\" + classAdd);\r\n                if (this.settings.core.themes.ellipsis === true) {\r\n                    last.addClass('jstree-grid-ellipsis');\r\n                }\r\n                last.prependTo(col);\r\n                last.attr(COL_DATA_ATTR, name);\r\n                totalWidth += last.outerWidth();\r\n                puller = $(\"<div class='jstree-grid-separator jstree-grid-separator-\" + classAdd + (tr ? \" ui-widget-header\" : \"\") + (resizable ? \" jstree-grid-resizable-separator\" : \"\") + \"'>&nbsp;</div>\").appendTo(last);\r\n                col.width(width);\r\n                col.css(\"min-width\", minWidth);\r\n                col.css(\"max-width\", maxWidth);\r\n            }\r\n\r\n            last.addClass((tr ? \"ui-widget-header \" : \"\") + \"jstree-grid-header jstree-grid-header-last jstree-grid-header-\" + classAdd);\r\n            // if there is no width given for the last column, do it via automatic\r\n            if (cols[cols.length - 1].width === undefined) {\r\n                totalWidth -= width;\r\n                col.css({\r\n                    width: \"auto\"\r\n                });\r\n                last.addClass(\"jstree-grid-width-auto\").next(\".jstree-grid-separator\").remove();\r\n            }\r\n            if (hasHeaders) {\r\n                // save the offset of the div from the body\r\n                //gs.divOffset = header.parent().offset().left;\r\n                gs.header = header;\r\n            } else {\r\n                $(\"div.jstree-grid-header\").hide();\r\n            }\r\n\r\n            if (!this.bound && resizable) {\r\n                this.bound = true;\r\n                $(document).mouseup(function() {\r\n                    var ref, cols, width, headers, currentTree, colNum;\r\n                    if (isClickedSep) {\r\n                        colNum = toResize.prevAll(\".jstree-grid-column\").length;\r\n                        currentTree = toResize.closest(\".jstree-grid-wrapper\").find(\".jstree\");\r\n                        ref = $.jstree.reference(currentTree);\r\n                        cols = ref.settings.grid.columns;\r\n                        headers = toResize.parent().children(\"div.jstree-grid-column\");\r\n                        if (isNaN(colNum) || colNum < 0) {\r\n                            ref._gridSettings.treeWidthDiff = currentTree.find(\"ins:eq(0)\").width() + currentTree.find(\"[class~='jstree-anchor']:eq(0)\").width() - ref._gridSettings.columns[0].width;\r\n                        }\r\n                        width = ref._gridSettings.columns[colNum].width = parseFloat(toResize.css(\"width\"));\r\n                        isClickedSep = false;\r\n                        toResize = null;\r\n\r\n                        currentTree.trigger(\"resize_column.jstree-grid\", [colNum, width]);\r\n                    }\r\n                }).mousemove(function(e) {\r\n                    if (isClickedSep) {\r\n                        newMouseX = e.pageX;\r\n                        var diff = newMouseX - oldMouseX,\r\n                            oldPrevHeaderInner,\r\n                            oldPrevColWidth, newPrevColWidth;\r\n\r\n                        if (diff !== 0) {\r\n                            oldPrevHeaderInner = toResize.width();\r\n                            oldPrevColWidth = parseFloat(toResize.css(\"width\"));\r\n\r\n                            // handle a Chrome issue with columns set to auto\r\n                            // thanks to Brabus https://github.com/side-by-side\r\n                            if (!oldPrevColWidth) {\r\n                                oldPrevColWidth = toResize.innerWidth();\r\n                            }\r\n\r\n                            // make sure that diff cannot be beyond the left/right limits\r\n                            diff = diff < 0 ? Math.max(diff, -oldPrevHeaderInner) : diff;\r\n                            newPrevColWidth = oldPrevColWidth + diff;\r\n\r\n                            // only do this if we are not shrinking past 0 on left - and limit it to that amount\r\n                            if ((diff > 0 || oldPrevHeaderInner > 0) && newPrevColWidth > MINCOLWIDTH) {\r\n                                toResize.width(newPrevColWidth + \"px\");\r\n                                toResize.css(\"min-width\", newPrevColWidth + \"px\");\r\n                                toResize.css(\"max-width\", newPrevColWidth + \"px\");\r\n                                oldMouseX = newMouseX;\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n                this.gridWrapper.on(\"selectstart\", \".jstree-grid-resizable-separator\", function() {\r\n                        return false;\r\n                    }).on(\"mousedown\", \".jstree-grid-resizable-separator\", function(e) {\r\n                        isClickedSep = true;\r\n                        oldMouseX = e.pageX;\r\n                        toResize = $(this).closest(\"div.jstree-grid-column\");\r\n                        // the max rightmost position we will allow is the right-most of the wrapper minus a buffer (10)\r\n                        return false;\r\n                    })\r\n                    .on(\"dblclick\", \".jstree-grid-resizable-separator\", function(e) {\r\n                        var clickedSep = $(this),\r\n                            col = clickedSep.closest(\"div.jstree-grid-column\"),\r\n                            oldPrevColWidth = parseFloat(col.css(\"width\")),\r\n                            newWidth = 0,\r\n                            diff,\r\n                            colNum = col.prevAll(\".jstree-grid-column\").length,\r\n                            oldPrevHeaderInner = col.width(),\r\n                            newPrevColWidth;\r\n\r\n\r\n                        //find largest width\r\n                        col.find(\".jstree-grid-cell\").each(function() {\r\n                            var item = $(this),\r\n                                width;\r\n                            item.css(\"position\", \"absolute\");\r\n                            item.css(\"width\", \"auto\");\r\n                            width = item.outerWidth();\r\n                            item.css(\"position\", \"relative\");\r\n\r\n                            if (width > newWidth) {\r\n                                newWidth = width;\r\n                            }\r\n                        });\r\n\r\n                        diff = newWidth - oldPrevColWidth;\r\n\r\n                        // make sure that diff cannot be beyond the left limits\r\n                        diff = diff < 0 ? Math.max(diff, -oldPrevHeaderInner) : diff;\r\n                        newPrevColWidth = (oldPrevColWidth + diff) + \"px\";\r\n\r\n                        col.width(newPrevColWidth);\r\n                        col.css(\"min-width\", newPrevColWidth);\r\n                        col.css(\"max-width\", newPrevColWidth);\r\n\r\n                        $(this).closest(\".jstree-grid-wrapper\").find(\".jstree\").trigger(\"resize_column.jstree-grid\", [colNum, newPrevColWidth]);\r\n                    })\r\n                    .on(\"click\", \".jstree-grid-separator\", function(e) {\r\n                        // don't sort after resize\r\n                        e.stopPropagation();\r\n                    });\r\n            }\r\n            this.gridWrapper.on(\"click\", \".jstree-grid-header-cell\", function(e) {\r\n                if (!_this.sort) {\r\n                    return;\r\n                }\r\n\r\n                // get column\r\n                var name = $(this).attr(COL_DATA_ATTR);\r\n\r\n                // sort order\r\n                var symbol;\r\n                if (gs.sortOrder === name && gs.sortAsc === true) {\r\n                    gs.sortAsc = false;\r\n                    symbol = \"&darr;\";\r\n                } else {\r\n                    gs.sortOrder = name;\r\n                    gs.sortAsc = true;\r\n                    symbol = \"&uarr;\";\r\n                }\r\n\r\n                // add sort arrow\r\n                $(this.closest('.jstree-grid-wrapper')).find(\".jstree-grid-sort-icon\").remove();\r\n                $(\"<span></span>\").addClass(\"jstree-grid-sort-icon\").appendTo($(this)).html(symbol);\r\n\r\n                // sort by column\r\n                var rootNode = _this.get_node('#');\r\n                _this.sort(rootNode, true);\r\n                _this.redraw_node(rootNode, true);\r\n            });\r\n\r\n        };\r\n\r\n        this._domManipulation = null; // We'll store the column nodes in this object and an id for the grid-node that started the manipulation { id: \"id of the node that started the manipulation\", columns: { Key-Value-Pair col-No: Column }}\r\n\r\n        function _guid() {\r\n            function s4() {\r\n                return Math.floor((1 + Math.random()) * 0x10000)\r\n                    .toString(16)\r\n                    .substring(1);\r\n            }\r\n            return s4() + s4() + '-' + s4() + '-' + s4() + '-' +\r\n                s4() + '-' + s4() + s4() + s4();\r\n        }\r\n        /*\r\n         * Trys to detach the tree columns on massive dom manipulations\r\n         */\r\n        this._detachColumns = function(id) {\r\n            // if the columns are not detached, then detach them\r\n            if (this._domManipulation == null) {\r\n                var cols = this._gridSettings.columns || [],\r\n                    treecol = this._gridSettings.treecol,\r\n                    mw = this.midWrapper;\r\n                this._domManipulation = {\r\n                    id: id,\r\n                    columns: {}\r\n                };\r\n                for (var i = 0, len = cols.length; i < len; i++) {\r\n                    //if (treecol === i) {\r\n                    //  continue;\r\n                    //}\r\n                    this._domManipulation.columns[i] = mw.children(\".jstree-grid-column-\" + i)[0];\r\n                    this._domManipulation.columns[i].parentNode.removeChild(this._domManipulation.columns[i]);\r\n                }\r\n            }\r\n            return this._domManipulation;\r\n        }\r\n\r\n        this._reattachColumns = function(id) {\r\n            if (this._domManipulation == null) {\r\n                return false;\r\n            }\r\n            if (this._domManipulation.id === id) {\r\n                var cols = this._gridSettings.columns || [],\r\n                    treecol = this._gridSettings.treecol,\r\n                    mw = this.midWrapper;\r\n                for (var i = 0, len = cols.length; i < len; i++) {\r\n                    //if (treecol === i) {\r\n                    //  continue;\r\n                    //}\r\n                    mw[0].appendChild(this._domManipulation.columns[i]);\r\n                }\r\n                this._domManipulation = null;\r\n            }\r\n            return true;\r\n        }\r\n\r\n        /*\r\n         * Override open_node to detach the columns before redrawing child-nodes, and do reattach them afterwarts\r\n         */\r\n        this.open_node = function(obj, callback, animation) {\r\n            var isArray = langx.isArray(obj);\r\n            var node = null;\r\n            if (!isArray) {\r\n                node = this.get_node(obj);\r\n                if (node.id === \"#\") {\r\n                    return;\r\n                } // wtf??? we ar in the root and do not need a open!\r\n            }\r\n            var id = isArray ? _guid() : node.id;\r\n            this._detachColumns(id);\r\n            var ret = parent.open_node.call(this, obj, callback, animation);\r\n            this._reattachColumns(id);\r\n            return ret;\r\n        }\r\n\r\n        /*\r\n         * Override redraw_node to correctly insert the grid\r\n         */\r\n        this.redraw_node = function(obj, deep, is_callback, force_render) {\r\n            var id = langx.isArray(obj) ? _guid() : this.get_node(obj).id;\r\n            // we detach the columns once\r\n            this._detachColumns(id);\r\n            // first allow the parent to redraw the node\r\n            obj = parent.redraw_node.call(this, obj, deep, is_callback, force_render);\r\n            // next prepare the grid for a redrawn node - but only if ths node is not hidden (search does that)\r\n            if (obj) {\r\n                this._prepare_grid(obj);\r\n            }\r\n            // don't forget to reattach\r\n            this._reattachColumns(id);\r\n            return obj;\r\n        };\r\n        this.refresh = function() {\r\n            this._clean_grid();\r\n            return parent.refresh.apply(this, arguments);\r\n        };\r\n        /*\r\n         * Override set_id to update cell attributes\r\n         */\r\n        this.set_id = function(obj, id) {\r\n            var old, uniq = this.uniq;\r\n            if (obj) {\r\n                old = obj.id;\r\n            }\r\n            var result = parent.set_id.apply(this, arguments);\r\n            if (result) {\r\n                if (old !== undefined) {\r\n                    var grid = this.gridWrapper,\r\n                        oldNodes = [old],\r\n                        i;\r\n                    // get children\r\n                    if (obj && obj.children_d) {\r\n                        oldNodes = oldNodes.concat(obj.children_d);\r\n                    }\r\n                    // update id in children\r\n                    findDataCell(uniq, oldNodes, this._gridSettings.gridcols)\r\n                        .attr(NODE_DATA_ATTR, obj.id)\r\n                        .removeClass(generateCellId(uniq, old))\r\n                        .addClass(generateCellId(uniq, obj.id))\r\n                        .each(function(i, node) {\r\n                            $(node).attr('id', generateCellId(uniq, obj.id) + (i + 1));\r\n                        });\r\n                }\r\n            }\r\n            return result;\r\n        };\r\n\r\n        this._hideOrShowTree = function(node, hide) {\r\n            //Hides or shows a tree\r\n            this._detachColumns(node.id);\r\n            // show cells in each detachted column\r\n            this._hideOrShowNode(node, hide, this._gridSettings.columns || [], this._gridSettings.treecol);\r\n            this._reattachColumns(node.id);\r\n        }\r\n        this._hideOrShowNode = function(node, hide, cols, treecol) {\r\n            //Hides or shows a node with recursive calls to all open child-nodes\r\n            for (var i = 0, len = cols.length; i < len; i++) {\r\n                if (i === treecol) {\r\n                    continue;\r\n                }\r\n                var cells = findDataCell(this.uniq, node.id, i, $(this._domManipulation.columns[i]));\r\n                if (hide) {\r\n                    cells.addClass(\"jstree-grid-hidden\");\r\n                } else {\r\n                    cells.removeClass(\"jstree-grid-hidden\");\r\n                }\r\n            }\r\n            if (node.state.opened && node.children) {\r\n                for (var i = 0, len = node.children.length; i < len; i++) {\r\n                    this._hideOrShowNode(this.get_node(node.children[i]), hide, cols, treecol);\r\n                }\r\n            }\r\n        }\r\n        this._hide_grid = function(node) {\r\n            if (!node) {\r\n                return true;\r\n            }\r\n            this._detachColumns(node.id);\r\n            var children = node.children ? node.children : [],\r\n                cols = this._gridSettings.columns || [],\r\n                treecol = this._gridSettings.treecol;\r\n            // try to remove all children\r\n            for (var i = 0, len = children.length; i < len; i++) {\r\n                var child = this.get_node(children[i]);\r\n                // go through each column, remove all children with the correct ID name\r\n                for (var j = 0, lenj = cols.length; j < lenj; j++) {\r\n                    if (j === treecol) {\r\n                        continue;\r\n                    }\r\n                    findDataCell(this.uniq, child.id, j, $(this._domManipulation.columns[j])).remove();\r\n                }\r\n                if (child.state.opened) {\r\n                    this._hide_grid(child);\r\n                }\r\n            }\r\n\r\n\r\n            this._reattachColumns(node.id);\r\n        };\r\n        this.holdingCells = {};\r\n        this.getHoldingCells = function(obj, col, hc) {\r\n            if (obj.state.hidden || !obj.state.opened) {\r\n                return $();\r\n            }\r\n            var ret = $(),\r\n                children = obj.children || [],\r\n                child, i, uniq = this.uniq;\r\n            // run through each child, render it, and then render its children recursively\r\n            for (i = 0; i < children.length; i++) {\r\n                child = generateCellId(uniq, children[i]) + col;\r\n                if (hc[child]) {\r\n                    ret = ret.add(hc[child]).add(this.getHoldingCells(this.get_node(children[i]), col, hc));\r\n                    //delete hc[child];\r\n                }\r\n            }\r\n            return (ret);\r\n        };\r\n\r\n        /**\r\n         * put a grid cell in edit mode (input field to edit the data)\r\n         * @name edit(obj, col)\r\n         * @param  {mixed} obj\r\n         * @param  {obj} col definition\r\n         * @param  {element} cell element, either span or wrapping div\r\n         */\r\n        this._edit = function(obj, col, element) {\r\n            if (!obj) {\r\n                return false;\r\n            }\r\n            if (!obj.data) {\r\n                obj.data = {};\r\n            }\r\n            if (element) {\r\n                element = $(element);\r\n                if (element.prop(\"tagName\").toLowerCase() === \"div\") {\r\n                    element = element.children(\"span:first\");\r\n                }\r\n            } else {\r\n                // need to find the element - later\r\n                return false;\r\n            }\r\n            var rtl = this._data.core.rtl,\r\n                w = this.element.width(),\r\n                t = obj.data[col.value],\r\n                h1 = $(\"<\" + \"div />\", {\r\n                    css: {\r\n                        \"position\": \"absolute\",\r\n                        \"top\": \"-200px\",\r\n                        \"left\": (rtl ? \"0px\" : \"-1000px\"),\r\n                        \"visibility\": \"hidden\"\r\n                    }\r\n                }).appendTo(\"body\"),\r\n                h2 = $(\"<\" + \"input />\", {\r\n                    \"value\": t,\r\n                    \"class\": \"jstree-rename-input\",\r\n                    \"css\": {\r\n                        \"padding\": \"0\",\r\n                        \"border\": \"1px solid silver\",\r\n                        \"box-sizing\": \"border-box\",\r\n                        \"display\": \"inline-block\",\r\n                        \"height\": (this._data.core.li_height) + \"px\",\r\n                        \"lineHeight\": (this._data.core.li_height) + \"px\",\r\n                        \"width\": \"150px\" // will be set a bit further down\r\n                    },\r\n                    \"blur\": langx.proxy(function() {\r\n                        var v = h2.val();\r\n                        // save the value if changed\r\n                        if (v === \"\" || v === t) {\r\n                            v = t;\r\n                        } else {\r\n                            obj.data[col.value] = v;\r\n                            this.element.trigger('update_cell.jstree-grid', {\r\n                                node: obj,\r\n                                col: col.value,\r\n                                value: v,\r\n                                old: t\r\n                            });\r\n                            var id = _guid();\r\n                            this._detachColumns(id);\r\n                            this._prepare_grid(this.get_node(obj, true));\r\n                            this._reattachColumns(id);\r\n                        }\r\n                        h2.remove();\r\n                        element.show();\r\n                    }, this),\r\n                    \"keydown\": function(event) {\r\n                        var key = event.which;\r\n                        if (key === 27) {\r\n                            this.value = t;\r\n                        }\r\n                        if (key === 27 || key === 13 || key === 37 || key === 38 || key === 39 || key === 40 || key === 32) {\r\n                            event.stopImmediatePropagation();\r\n                        }\r\n                        if (key === 27 || key === 13) {\r\n                            event.preventDefault();\r\n                            this.blur();\r\n                        }\r\n                    },\r\n                    \"click\": function(e) {\r\n                        e.stopImmediatePropagation();\r\n                    },\r\n                    \"mousedown\": function(e) {\r\n                        e.stopImmediatePropagation();\r\n                    },\r\n                    \"keyup\": function(event) {\r\n                        h2.width(Math.min(h1.text(\"pW\" + this.value).width(), w));\r\n                    },\r\n                    \"keypress\": function(event) {\r\n                        if (event.which === 13) {\r\n                            return false;\r\n                        }\r\n                    }\r\n                }),\r\n                fn = {\r\n                    fontFamily: element.css('fontFamily') || '',\r\n                    fontSize: element.css('fontSize') || '',\r\n                    fontWeight: element.css('fontWeight') || '',\r\n                    fontStyle: element.css('fontStyle') || '',\r\n                    fontStretch: element.css('fontStretch') || '',\r\n                    fontVariant: element.css('fontVariant') || '',\r\n                    letterSpacing: element.css('letterSpacing') || '',\r\n                    wordSpacing: element.css('wordSpacing') || ''\r\n                };\r\n            element.hide();\r\n            element.parent().append(h2);\r\n            h2.css(fn).width(Math.min(h1.text(\"pW\" + h2[0].value).width(), w))[0].select();\r\n        };\r\n\r\n        this.grid_hide_column = function(col) {\r\n            this.midWrapper.find(\".jstree-grid-column-\" + col).hide();\r\n        };\r\n        this.grid_show_column = function(col) {\r\n            this.midWrapper.find(\".jstree-grid-column-\" + col).show();\r\n        };\r\n\r\n        this._prepare_grid = function(obj) {\r\n            var gs = this._gridSettings,\r\n                c = gs.treeClass,\r\n                _this = this,\r\n                t,\r\n                cols = gs.columns || [],\r\n                width, tr = gs.isThemeroller,\r\n                uniq = this.uniq,\r\n                treecol = gs.treecol,\r\n                tree = this.element,\r\n                rootid = this.rootid,\r\n                classAdd = (tr ? \"themeroller\" : \"regular\"),\r\n                img, objData = this.get_node(obj),\r\n                defaultWidth = gs.columnWidth,\r\n                conf = gs.defaultConf,\r\n                cellClickHandler = function(tree, node, val, col, t) {\r\n                    return function(e) {\r\n                        //node = tree.find(\"#\"+node.attr(\"id\"));\r\n                        var event = eventer.create(\"select_cell.jstree-grid\");\r\n                        tree.trigger(event, [{\r\n                            value: val,\r\n                            column: col.header,\r\n                            node: node,\r\n                            grid: $(this),\r\n                            sourceName: col.value\r\n                        }]);\r\n                        if (!event.isDefaultPrevented()) {\r\n                            node.children(\".jstree-anchor\").trigger(\"click.jstree\", e);\r\n                        }\r\n                    };\r\n                },\r\n                cellRightClickHandler = function(tree, node, val, col, t) {\r\n                    return function(e) {\r\n                        if (gs.gridcontextmenu) {\r\n                            e.preventDefault();\r\n                            menu.popup(this, {\r\n                                'x': e.pageX,\r\n                                'y': e.pageY\r\n                            }, gs.gridcontextmenu(_this, tree, node, val, col, t, e.target));\r\n                        }\r\n                    };\r\n                },\r\n                hoverInHandler = function(node, jsTreeInstance) {\r\n                    return function() {\r\n                        jsTreeInstance.hover_node(node);\r\n                    };\r\n                },\r\n                hoverOutHandler = function(node, jsTreeInstance) {\r\n                    return function() {\r\n                        jsTreeInstance.dehover_node(node);\r\n                    };\r\n                },\r\n                i, val, cl, wcl, ccl, a, last, valClass, wideValClass, span, paddingleft, title, gridCellName, gridCellParentId, gridCellParent,\r\n                gridCellPrev, gridCellPrevId, gridCellNext, gridCellNextId, gridCellChild, gridCellChildId,\r\n                col, content, tmpWidth, mw = this.midWrapper,\r\n                column, lid = objData.id,\r\n                highlightSearch, isClicked,\r\n                peers = this.get_node(objData.parent).children,\r\n                // find my position in the list of peers. \"peers\" is the list of everyone at my level under my parent, in order\r\n                pos = langx.inArray(lid, peers),\r\n                hc = this.holdingCells,\r\n                rendered = false,\r\n                closed;\r\n            // get our column definition\r\n            t = $(obj);\r\n\r\n            // find the a children\r\n            a = t.children(\"[class~='jstree-anchor']\");\r\n            highlightSearch = a.hasClass(SEARCHCLASS);\r\n            isClicked = a.hasClass(\"jstree-clicked\");\r\n\r\n            if (a.length === 1) {\r\n                closed = !objData.state.opened;\r\n                gridCellName = generateCellId(uniq, lid);\r\n                gridCellParentId = objData.parent === \"#\" ? null : objData.parent;\r\n                a.addClass(c);\r\n                //renderAWidth(a,_this);\r\n                renderATitle(a, t, _this);\r\n                last = a;\r\n\r\n                // calculate position ids once\r\n                gridCellPrevId = pos <= 0 ? objData.parent : findLastClosedNode(this, peers[pos - 1]);\r\n                gridCellNextId = pos >= peers.length - 1 ? \"NULL\" : peers[pos + 1];\r\n                gridCellChildId = objData.children && objData.children.length > 0 ? objData.children[0] : \"NULL\";\r\n\r\n                // find which column our tree shuld go in\r\n                var s = this.settings.grid;\r\n                for (var i = 0, len = cols.length; i < len; i++) {\r\n                    if (treecol === i) {\r\n                        continue;\r\n                    }\r\n                    col = cols[i];\r\n                    column = this._domManipulation == null ? mw.children(\"div:eq(\" + i + \")\") : $(this._domManipulation.columns[i]); //Geht the detached column not mw.children(\"div:eq(\"+i+\")\");\r\n                    // get the cellClass, the wideCellClass, and the columnClass\r\n                    cl = col.cellClass || \"\";\r\n                    wcl = col.wideCellClass || \"\";\r\n                    ccl = col.columnClass || \"\";\r\n\r\n                    // add a column class to the Column\r\n                    column.addClass(ccl);\r\n\r\n\r\n                    // get the contents of the cell - value could be a string or a function\r\n                    val = getCellData(col.value, objData);\r\n\r\n                    if (typeof(col.format) === \"function\") {\r\n                        val = col.format(val);\r\n                    }\r\n\r\n                    // put images instead of text if needed\r\n                    if (col.images) {\r\n                        img = col.images[val] || col.images[\"default\"];\r\n                        if (img) {\r\n                            content = img[0] === \"*\" ? '<span class=\"' + img.substr(1) + '\"></span>' : '<img src=\"' + img + '\">';\r\n                        }\r\n                    } else {\r\n                        content = val;\r\n                    }\r\n\r\n                    // content cannot be blank, or it messes up heights\r\n                    if (content === undefined || content === null || BLANKRE.test(content)) {\r\n                        content = \"&nbsp;\";\r\n                    }\r\n\r\n                    // get the valueClass\r\n                    valClass = col.valueClass && objData.data !== null && objData.data !== undefined ? objData.data[col.valueClass] || \"\" : \"\";\r\n                    if (valClass && col.valueClassPrefix && col.valueClassPrefix !== \"\") {\r\n                        valClass = col.valueClassPrefix + valClass;\r\n                    }\r\n                    // get the wideValueClass\r\n                    wideValClass = col.wideValueClass && objData.data !== null && objData.data !== undefined ? objData.data[col.wideValueClass] || \"\" : \"\";\r\n                    if (wideValClass && col.wideValueClassPrefix && col.wideValueClassPrefix !== \"\") {\r\n                        wideValClass = col.wideValueClassPrefix + wideValClass;\r\n                    }\r\n                    // get the title\r\n                    title = col.title && objData.data !== null && objData.data !== undefined ? objData.data[col.title] || \"\" : \"\";\r\n                    // strip out HTML\r\n                    title = title.replace(htmlstripre, '');\r\n\r\n                    // get the width\r\n                    paddingleft = 7;\r\n                    width = col.width || defaultWidth;\r\n                    if (width !== 'auto') {\r\n                        width = tmpWidth || (width - paddingleft);\r\n                    }\r\n\r\n                    last = findDataCell(uniq, lid, i, column);\r\n                    if (!last || last.length < 1) {\r\n                        last = $(\"<div></div>\");\r\n                        $(\"<span></span>\").appendTo(last);\r\n                        last.attr(\"id\", gridCellName + i);\r\n                        last.addClass(gridCellName);\r\n                        last.attr(NODE_DATA_ATTR, lid);\r\n                        if (highlightSearch) {\r\n                            last.addClass(SEARCHCLASS);\r\n                        } else {\r\n                            last.removeClass(SEARCHCLASS);\r\n                        }\r\n                        if (isClicked) {\r\n                            last.addClass(\"jstree-clicked\");\r\n                        } else {\r\n                            last.removeClass(\"jstree-clicked\");\r\n                        }\r\n                        if (this.settings.core.themes.ellipsis === true && i !== treecol) {\r\n                            last.addClass('jstree-grid-ellipsis');\r\n                        }\r\n\r\n                    }\r\n\r\n                    // we need to check the hidden-state and see if we need to hide the node\r\n                    if (objData.state.hidden) {\r\n                        last.addClass(\"jstree-grid-hidden\");\r\n                    } else {\r\n                        last.removeClass(\"jstree-grid-hidden\");\r\n                    }\r\n\r\n                    // we need to put it in the dataCell - after the parent, but the position matters\r\n                    // if we have no parent, then we are one of the root nodes, but still need to look at peers\r\n\r\n\r\n                    // if we are first, i.e. pos === 0, we go right after the parent;\r\n                    // if we are not first, and our previous peer (one before us) is closed, we go right after the previous peer cell\r\n                    // if we are not first, and our previous peer is opened, then we have to find its youngest & lowest closed child (incl. leaf)\r\n                    //\r\n                    // probably be much easier to go *before* our next one\r\n                    // but that one might not be drawn yet\r\n                    // here is the logic for jstree drawing:\r\n                    //   it draws peers from first to last or from last to first\r\n                    //   it draws children before a parent\r\n                    //\r\n                    // so I can rely on my *parent* not being drawn, but I cannot rely on my previous peer or my next peer being drawn\r\n\r\n                    // so we do the following:\r\n                    //   1- We are the first child: install after the parent\r\n                    //   2- Our previous peer is already drawn: install after the previous peer\r\n                    //   3- Our previous peer is not drawn, we have a child that is drawn: install right before our first child\r\n                    //   4- Our previous peer is not drawn, we have no child that is drawn, our next peer is drawn: install right before our next peer\r\n                    //   5- Our previous peer is not drawn, we have no child that is drawn, our next peer is not drawn: install right after parent\r\n                    gridCellPrev = findDataCell(uniq, gridCellPrevId, i, column);\r\n                    gridCellNext = findDataCell(uniq, gridCellNextId, i, column);\r\n                    gridCellChild = findDataCell(uniq, gridCellChildId, i, column);\r\n                    gridCellParent = findDataCell(uniq, gridCellParentId, i, column);\r\n\r\n\r\n                    // if our parent is already drawn, then we put this in the right order under our parent\r\n                    if (gridCellParentId) {\r\n                        if (gridCellParent && gridCellParent.length > 0) {\r\n                            if (gridCellPrev && gridCellPrev.length > 0) {\r\n                                last.insertAfter(gridCellPrev);\r\n                            } else if (gridCellChild && gridCellChild.length > 0) {\r\n                                last.insertBefore(gridCellChild);\r\n                            } else if (gridCellNext && gridCellNext.length > 0) {\r\n                                last.insertBefore(gridCellNext);\r\n                            } else {\r\n                                last.insertAfter(gridCellParent);\r\n                            }\r\n                            rendered = true;\r\n                        } else {\r\n                            rendered = false;\r\n                        }\r\n                        // always put it in the holding cells, and then sort when the parent comes in, in case parent is (re)drawn later\r\n                        hc[gridCellName + i] = last;\r\n                    } else {\r\n                        if (gridCellPrev && gridCellPrev.length > 0) {\r\n                            last.insertAfter(gridCellPrev);\r\n                        } else if (gridCellChild && gridCellChild.length > 0) {\r\n                            last.insertBefore(gridCellChild);\r\n                        } else if (gridCellNext && gridCellNext.length > 0) {\r\n                            last.insertBefore(gridCellNext);\r\n                        } else {\r\n                            last.appendTo(column);\r\n                        }\r\n                        rendered = true;\r\n                    }\r\n                    // do we have any children waiting for this cell? walk down through the children/grandchildren/etc tree\r\n                    if (rendered) {\r\n                        var toRen = this.getHoldingCells(objData, i, hc);\r\n                        last.after(toRen);\r\n                    }\r\n                    // need to make the height of this match the line height of the tree. How?\r\n                    span = last.children(\"span\");\r\n\r\n                    // create a span inside the div, so we can control what happens in the whole div versus inside just the text/background\r\n                    span.addClass(cl + \" \" + valClass).html(content);\r\n                    last = last.css(conf).addClass(\"jstree-grid-cell jstree-grid-cell-regular jstree-grid-cell-root-\" + rootid + \" jstree-grid-cell-\" + classAdd + \" \" + wcl + \" \" + wideValClass + (tr ? \" ui-state-default\" : \"\")).addClass(\"jstree-grid-col-\" + i).addClass(\"jstree-animated\");\r\n                    // add click handler for clicking inside a grid cell\r\n                    last.click(cellClickHandler(tree, t, val, col, this));\r\n                    last.on(\"contextmenu\", cellRightClickHandler(tree, t, val, col, this));\r\n                    last.hover(hoverInHandler(t, this), hoverOutHandler(t, this));\r\n\r\n                    if (title) {\r\n                        span.attr(\"title\", title);\r\n                    }\r\n\r\n                    tree.trigger(\"render_cell.jstree-grid\", [{\r\n                        value: val,\r\n                        column: col.header,\r\n                        node: t,\r\n                        sourceName: col.value\r\n                    }]);\r\n                }\r\n                last.addClass(\"jstree-grid-cell-last\" + (tr ? \" ui-state-default\" : \"\"));\r\n                // if there is no width given for the last column, do it via automatic\r\n                if (cols[cols.length - 1].width === undefined) {\r\n                    last.addClass(\"jstree-grid-width-auto\").next(\".jstree-grid-separator\").remove();\r\n                }\r\n            }\r\n            this.element.css({\r\n                'overflow-y': 'auto !important'\r\n            });\r\n        };\r\n        // clean up holding cells\r\n        this.holdingCells = {};\r\n\r\n        // need to do alternating background colors or borders\r\n    };\r\n\r\n    return $;\r\n});\ndefine('skylark-widgets-hierarchy/addons/types',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-browser\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-geom\",\r\n  \"skylark-domx-query\",\r\n  \"../Hierarchy\"\r\n],function(langx,browser,eventer,noder,geom,$,jstree){\r\n\t\"use strict\";\r\n\r\n\tif($.jstree.plugins.types) { return; }\r\n\r\n\t/**\r\n\t * An object storing all types as key value pairs, where the key is the type name and the value is an object that could contain following keys (all optional).\r\n\t *\r\n\t * * `max_children` the maximum number of immediate children this node type can have. Do not specify or set to `-1` for unlimited.\r\n\t * * `max_depth` the maximum number of nesting this node type can have. A value of `1` would mean that the node can have children, but no grandchildren. Do not specify or set to `-1` for unlimited.\r\n\t * * `valid_children` an array of node type strings, that nodes of this type can have as children. Do not specify or set to `-1` for no limits.\r\n\t * * `icon` a string - can be a path to an icon or a className, if using an image that is in the current directory use a `./` prefix, otherwise it will be detected as a class. Omit to use the default icon from your theme.\r\n\t * * `li_attr` an object of values which will be used to add HTML attributes on the resulting LI DOM node (merged with the node's own data)\r\n\t * * `a_attr` an object of values which will be used to add HTML attributes on the resulting A DOM node (merged with the node's own data)\r\n\t *\r\n\t * There are two predefined types:\r\n\t *\r\n\t * * `#` represents the root of the tree, for example `max_children` would control the maximum number of root nodes.\r\n\t * * `default` represents the default node - any settings here will be applied to all nodes that do not have a type specified.\r\n\t *\r\n\t * @name $.jstree.defaults.types\r\n\t * @plugin types\r\n\t */\r\n\t$.jstree.defaults.types = {\r\n\t\t'default' : {}\r\n\t};\r\n\t$.jstree.defaults.types[$.jstree.root] = {};\r\n\r\n\t$.jstree.plugins.types = function (options, parent) {\r\n\t\tthis.init = function (el, options) {\r\n\t\t\tvar i, j;\r\n\t\t\tif(options && options.types && options.types['default']) {\r\n\t\t\t\tfor(i in options.types) {\r\n\t\t\t\t\tif(i !== \"default\" && i !== $.jstree.root && options.types.hasOwnProperty(i)) {\r\n\t\t\t\t\t\tfor(j in options.types['default']) {\r\n\t\t\t\t\t\t\tif(options.types['default'].hasOwnProperty(j) && options.types[i][j] === undefined) {\r\n\t\t\t\t\t\t\t\toptions.types[i][j] = options.types['default'][j];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tparent.init.call(this, el, options);\r\n\t\t\tthis._model.data[$.jstree.root].type = $.jstree.root;\r\n\t\t};\r\n\t\tthis.refresh = function (skip_loading, forget_state) {\r\n\t\t\tparent.refresh.call(this, skip_loading, forget_state);\r\n\t\t\tthis._model.data[$.jstree.root].type = $.jstree.root;\r\n\t\t};\r\n\t\tthis.bind = function () {\r\n\t\t\tthis.element\r\n\t\t\t\t.on('model.jstree', langx.proxy(function (e, data) {\r\n\t\t\t\t\t\tvar m = this._model.data,\r\n\t\t\t\t\t\t\tdpc = data.nodes,\r\n\t\t\t\t\t\t\tt = this.settings.types,\r\n\t\t\t\t\t\t\ti, j, c = 'default', k;\r\n\t\t\t\t\t\tfor(i = 0, j = dpc.length; i < j; i++) {\r\n\t\t\t\t\t\t\tc = 'default';\r\n\t\t\t\t\t\t\tif(m[dpc[i]].original && m[dpc[i]].original.type && t[m[dpc[i]].original.type]) {\r\n\t\t\t\t\t\t\t\tc = m[dpc[i]].original.type;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(m[dpc[i]].data && m[dpc[i]].data.jstree && m[dpc[i]].data.jstree.type && t[m[dpc[i]].data.jstree.type]) {\r\n\t\t\t\t\t\t\t\tc = m[dpc[i]].data.jstree.type;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tm[dpc[i]].type = c;\r\n\t\t\t\t\t\t\tif(m[dpc[i]].icon === true && t[c].icon !== undefined) {\r\n\t\t\t\t\t\t\t\tm[dpc[i]].icon = t[c].icon;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(t[c].li_attr !== undefined && typeof t[c].li_attr === 'object') {\r\n\t\t\t\t\t\t\t\tfor (k in t[c].li_attr) {\r\n\t\t\t\t\t\t\t\t\tif (t[c].li_attr.hasOwnProperty(k)) {\r\n\t\t\t\t\t\t\t\t\t\tif (k === 'id') {\r\n\t\t\t\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\telse if (m[dpc[i]].li_attr[k] === undefined) {\r\n\t\t\t\t\t\t\t\t\t\t\tm[dpc[i]].li_attr[k] = t[c].li_attr[k];\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\telse if (k === 'class') {\r\n\t\t\t\t\t\t\t\t\t\t\tm[dpc[i]].li_attr['class'] = t[c].li_attr['class'] + ' ' + m[dpc[i]].li_attr['class'];\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(t[c].a_attr !== undefined && typeof t[c].a_attr === 'object') {\r\n\t\t\t\t\t\t\t\tfor (k in t[c].a_attr) {\r\n\t\t\t\t\t\t\t\t\tif (t[c].a_attr.hasOwnProperty(k)) {\r\n\t\t\t\t\t\t\t\t\t\tif (k === 'id') {\r\n\t\t\t\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\telse if (m[dpc[i]].a_attr[k] === undefined) {\r\n\t\t\t\t\t\t\t\t\t\t\tm[dpc[i]].a_attr[k] = t[c].a_attr[k];\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\telse if (k === 'href' && m[dpc[i]].a_attr[k] === '#') {\r\n\t\t\t\t\t\t\t\t\t\t\tm[dpc[i]].a_attr['href'] = t[c].a_attr['href'];\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\telse if (k === 'class') {\r\n\t\t\t\t\t\t\t\t\t\t\tm[dpc[i]].a_attr['class'] = t[c].a_attr['class'] + ' ' + m[dpc[i]].a_attr['class'];\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tm[$.jstree.root].type = $.jstree.root;\r\n\t\t\t\t\t}, this));\r\n\t\t\tparent.bind.call(this);\r\n\t\t};\r\n\t\tthis.get_json = function (obj, options, flat) {\r\n\t\t\tvar i, j,\r\n\t\t\t\tm = this._model.data,\r\n\t\t\t\topt = options ? langx.extend(true, {}, options, {no_id:false}) : {},\r\n\t\t\t\ttmp = parent.get_json.call(this, obj, opt, flat);\r\n\t\t\tif(tmp === false) { return false; }\r\n\t\t\tif(langx.isArray(tmp)) {\r\n\t\t\t\tfor(i = 0, j = tmp.length; i < j; i++) {\r\n\t\t\t\t\ttmp[i].type = tmp[i].id && m[tmp[i].id] && m[tmp[i].id].type ? m[tmp[i].id].type : \"default\";\r\n\t\t\t\t\tif(options && options.no_id) {\r\n\t\t\t\t\t\tdelete tmp[i].id;\r\n\t\t\t\t\t\tif(tmp[i].li_attr && tmp[i].li_attr.id) {\r\n\t\t\t\t\t\t\tdelete tmp[i].li_attr.id;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(tmp[i].a_attr && tmp[i].a_attr.id) {\r\n\t\t\t\t\t\t\tdelete tmp[i].a_attr.id;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ttmp.type = tmp.id && m[tmp.id] && m[tmp.id].type ? m[tmp.id].type : \"default\";\r\n\t\t\t\tif(options && options.no_id) {\r\n\t\t\t\t\ttmp = this._delete_ids(tmp);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn tmp;\r\n\t\t};\r\n\t\tthis._delete_ids = function (tmp) {\r\n\t\t\tif(langx.isArray(tmp)) {\r\n\t\t\t\tfor(var i = 0, j = tmp.length; i < j; i++) {\r\n\t\t\t\t\ttmp[i] = this._delete_ids(tmp[i]);\r\n\t\t\t\t}\r\n\t\t\t\treturn tmp;\r\n\t\t\t}\r\n\t\t\tdelete tmp.id;\r\n\t\t\tif(tmp.li_attr && tmp.li_attr.id) {\r\n\t\t\t\tdelete tmp.li_attr.id;\r\n\t\t\t}\r\n\t\t\tif(tmp.a_attr && tmp.a_attr.id) {\r\n\t\t\t\tdelete tmp.a_attr.id;\r\n\t\t\t}\r\n\t\t\tif(tmp.children && langx.isArray(tmp.children)) {\r\n\t\t\t\ttmp.children = this._delete_ids(tmp.children);\r\n\t\t\t}\r\n\t\t\treturn tmp;\r\n\t\t};\r\n\t\tthis.check = function (chk, obj, par, pos, more) {\r\n\t\t\tif(parent.check.call(this, chk, obj, par, pos, more) === false) { return false; }\r\n\t\t\tobj = obj && obj.id ? obj : this.get_node(obj);\r\n\t\t\tpar = par && par.id ? par : this.get_node(par);\r\n\t\t\tvar m = obj && obj.id ? (more && more.origin ? more.origin : $.jstree.reference(obj.id)) : null, tmp, d, i, j;\r\n\t\t\tm = m && m._model && m._model.data ? m._model.data : null;\r\n\t\t\tswitch(chk) {\r\n\t\t\t\tcase \"create_node\":\r\n\t\t\t\tcase \"move_node\":\r\n\t\t\t\tcase \"copy_node\":\r\n\t\t\t\t\tif(chk !== 'move_node' || langx.inArray(obj.id, par.children) === -1) {\r\n\t\t\t\t\t\ttmp = this.get_rules(par);\r\n\t\t\t\t\t\tif(tmp.max_children !== undefined && tmp.max_children !== -1 && tmp.max_children === par.children.length) {\r\n\t\t\t\t\t\t\tthis._data.core.last_error = { 'error' : 'check', 'plugin' : 'types', 'id' : 'types_01', 'reason' : 'max_children prevents function: ' + chk, 'data' : JSON.stringify({ 'chk' : chk, 'pos' : pos, 'obj' : obj && obj.id ? obj.id : false, 'par' : par && par.id ? par.id : false }) };\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(tmp.valid_children !== undefined && tmp.valid_children !== -1 && langx.inArray((obj.type || 'default'), tmp.valid_children) === -1) {\r\n\t\t\t\t\t\t\tthis._data.core.last_error = { 'error' : 'check', 'plugin' : 'types', 'id' : 'types_02', 'reason' : 'valid_children prevents function: ' + chk, 'data' : JSON.stringify({ 'chk' : chk, 'pos' : pos, 'obj' : obj && obj.id ? obj.id : false, 'par' : par && par.id ? par.id : false }) };\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(m && obj.children_d && obj.parents) {\r\n\t\t\t\t\t\t\td = 0;\r\n\t\t\t\t\t\t\tfor(i = 0, j = obj.children_d.length; i < j; i++) {\r\n\t\t\t\t\t\t\t\td = Math.max(d, m[obj.children_d[i]].parents.length);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\td = d - obj.parents.length + 1;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(d <= 0 || d === undefined) { d = 1; }\r\n\t\t\t\t\t\tdo {\r\n\t\t\t\t\t\t\tif(tmp.max_depth !== undefined && tmp.max_depth !== -1 && tmp.max_depth < d) {\r\n\t\t\t\t\t\t\t\tthis._data.core.last_error = { 'error' : 'check', 'plugin' : 'types', 'id' : 'types_03', 'reason' : 'max_depth prevents function: ' + chk, 'data' : JSON.stringify({ 'chk' : chk, 'pos' : pos, 'obj' : obj && obj.id ? obj.id : false, 'par' : par && par.id ? par.id : false }) };\r\n\t\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tpar = this.get_node(par.parent);\r\n\t\t\t\t\t\t\ttmp = this.get_rules(par);\r\n\t\t\t\t\t\t\td++;\r\n\t\t\t\t\t\t} while(par);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t};\r\n\t\t/**\r\n\t\t * used to retrieve the type settings object for a node\r\n\t\t * @name get_rules(obj)\r\n\t\t * @param {mixed} obj the node to find the rules for\r\n\t\t * @return {Object}\r\n\t\t * @plugin types\r\n\t\t */\r\n\t\tthis.get_rules = function (obj) {\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj) { return false; }\r\n\t\t\tvar tmp = this.get_type(obj, true);\r\n\t\t\tif(tmp.max_depth === undefined) { tmp.max_depth = -1; }\r\n\t\t\tif(tmp.max_children === undefined) { tmp.max_children = -1; }\r\n\t\t\tif(tmp.valid_children === undefined) { tmp.valid_children = -1; }\r\n\t\t\treturn tmp;\r\n\t\t};\r\n\t\t/**\r\n\t\t * used to retrieve the type string or settings object for a node\r\n\t\t * @name get_type(obj [, rules])\r\n\t\t * @param {mixed} obj the node to find the rules for\r\n\t\t * @param {Boolean} rules if set to `true` instead of a string the settings object will be returned\r\n\t\t * @return {String|Object}\r\n\t\t * @plugin types\r\n\t\t */\r\n\t\tthis.get_type = function (obj, rules) {\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\treturn (!obj) ? false : ( rules ? langx.extend({ 'type' : obj.type }, this.settings.types[obj.type]) : obj.type);\r\n\t\t};\r\n\t\t/**\r\n\t\t * used to change a node's type\r\n\t\t * @name set_type(obj, type)\r\n\t\t * @param {mixed} obj the node to change\r\n\t\t * @param {String} type the new type\r\n\t\t * @plugin types\r\n\t\t */\r\n\t\tthis.set_type = function (obj, type) {\r\n\t\t\tvar m = this._model.data, t, t1, t2, old_type, old_icon, k, d, a;\r\n\t\t\tif(langx.isArray(obj)) {\r\n\t\t\t\tobj = obj.slice();\r\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\r\n\t\t\t\t\tthis.set_type(obj[t1], type);\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tt = this.settings.types;\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!t[type] || !obj) { return false; }\r\n\t\t\td = this.get_node(obj, true);\r\n\t\t\tif (d && d.length) {\r\n\t\t\t\ta = d.children('.jstree-anchor');\r\n\t\t\t}\r\n\t\t\told_type = obj.type;\r\n\t\t\told_icon = this.get_icon(obj);\r\n\t\t\tobj.type = type;\r\n\t\t\tif(old_icon === true || !t[old_type] || (t[old_type].icon !== undefined && old_icon === t[old_type].icon)) {\r\n\t\t\t\tthis.set_icon(obj, t[type].icon !== undefined ? t[type].icon : true);\r\n\t\t\t}\r\n\r\n\t\t\t// remove old type props\r\n\t\t\tif(t[old_type] && t[old_type].li_attr !== undefined && typeof t[old_type].li_attr === 'object') {\r\n\t\t\t\tfor (k in t[old_type].li_attr) {\r\n\t\t\t\t\tif (t[old_type].li_attr.hasOwnProperty(k)) {\r\n\t\t\t\t\t\tif (k === 'id') {\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (k === 'class') {\r\n\t\t\t\t\t\t\tm[obj.id].li_attr['class'] = (m[obj.id].li_attr['class'] || '').replace(t[old_type].li_attr[k], '');\r\n\t\t\t\t\t\t\tif (d) { d.removeClass(t[old_type].li_attr[k]); }\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (m[obj.id].li_attr[k] === t[old_type].li_attr[k]) {\r\n\t\t\t\t\t\t\tm[obj.id].li_attr[k] = null;\r\n\t\t\t\t\t\t\tif (d) { d.removeAttr(k); }\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(t[old_type] && t[old_type].a_attr !== undefined && typeof t[old_type].a_attr === 'object') {\r\n\t\t\t\tfor (k in t[old_type].a_attr) {\r\n\t\t\t\t\tif (t[old_type].a_attr.hasOwnProperty(k)) {\r\n\t\t\t\t\t\tif (k === 'id') {\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (k === 'class') {\r\n\t\t\t\t\t\t\tm[obj.id].a_attr['class'] = (m[obj.id].a_attr['class'] || '').replace(t[old_type].a_attr[k], '');\r\n\t\t\t\t\t\t\tif (a) { a.removeClass(t[old_type].a_attr[k]); }\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (m[obj.id].a_attr[k] === t[old_type].a_attr[k]) {\r\n\t\t\t\t\t\t\tif (k === 'href') {\r\n\t\t\t\t\t\t\t\tm[obj.id].a_attr[k] = '#';\r\n\t\t\t\t\t\t\t\tif (a) { a.attr('href', '#'); }\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\tdelete m[obj.id].a_attr[k];\r\n\t\t\t\t\t\t\t\tif (a) { a.removeAttr(k); }\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// add new props\r\n\t\t\tif(t[type].li_attr !== undefined && typeof t[type].li_attr === 'object') {\r\n\t\t\t\tfor (k in t[type].li_attr) {\r\n\t\t\t\t\tif (t[type].li_attr.hasOwnProperty(k)) {\r\n\t\t\t\t\t\tif (k === 'id') {\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (m[obj.id].li_attr[k] === undefined) {\r\n\t\t\t\t\t\t\tm[obj.id].li_attr[k] = t[type].li_attr[k];\r\n\t\t\t\t\t\t\tif (d) {\r\n\t\t\t\t\t\t\t\tif (k === 'class') {\r\n\t\t\t\t\t\t\t\t\td.addClass(t[type].li_attr[k]);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\td.attr(k, t[type].li_attr[k]);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (k === 'class') {\r\n\t\t\t\t\t\t\tm[obj.id].li_attr['class'] = t[type].li_attr[k] + ' ' + m[obj.id].li_attr['class'];\r\n\t\t\t\t\t\t\tif (d) { d.addClass(t[type].li_attr[k]); }\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(t[type].a_attr !== undefined && typeof t[type].a_attr === 'object') {\r\n\t\t\t\tfor (k in t[type].a_attr) {\r\n\t\t\t\t\tif (t[type].a_attr.hasOwnProperty(k)) {\r\n\t\t\t\t\t\tif (k === 'id') {\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (m[obj.id].a_attr[k] === undefined) {\r\n\t\t\t\t\t\t\tm[obj.id].a_attr[k] = t[type].a_attr[k];\r\n\t\t\t\t\t\t\tif (a) {\r\n\t\t\t\t\t\t\t\tif (k === 'class') {\r\n\t\t\t\t\t\t\t\t\ta.addClass(t[type].a_attr[k]);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\ta.attr(k, t[type].a_attr[k]);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (k === 'href' && m[obj.id].a_attr[k] === '#') {\r\n\t\t\t\t\t\t\tm[obj.id].a_attr['href'] = t[type].a_attr['href'];\r\n\t\t\t\t\t\t\tif (a) { a.attr('href', t[type].a_attr['href']); }\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (k === 'class') {\r\n\t\t\t\t\t\t\tm[obj.id].a_attr['class'] = t[type].a_attr['class'] + ' ' + m[obj.id].a_attr['class'];\r\n\t\t\t\t\t\t\tif (a) { a.addClass(t[type].a_attr[k]); }\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\t\t};\r\n\t};\r\n\t// include the types plugin by default\r\n\t// $.jstree.defaults.plugins.push(\"types\");\r\n\treturn $;\r\n\t\r\n});\r\n\ndefine('skylark-widgets-hierarchy/addons/unique',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-browser\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-geom\",\r\n  \"skylark-domx-query\",\r\n  \"../Hierarchy\"\r\n],function(langx,browser,eventer,noder,geom,$,jstree){\r\n\t\"use strict\";\r\n\r\n\tif($.jstree.plugins.unique) { return; }\r\n\r\n\t/**\r\n\t * stores all defaults for the unique plugin\r\n\t * @name $.jstree.defaults.unique\r\n\t * @plugin unique\r\n\t */\r\n\t$.jstree.defaults.unique = {\r\n\t\t/**\r\n\t\t * Indicates if the comparison should be case sensitive. Default is `false`.\r\n\t\t * @name $.jstree.defaults.unique.case_sensitive\r\n\t\t * @plugin unique\r\n\t\t */\r\n\t\tcase_sensitive : false,\r\n\t\t/**\r\n\t\t * Indicates if white space should be trimmed before the comparison. Default is `false`.\r\n\t\t * @name $.jstree.defaults.unique.trim_whitespace\r\n\t\t * @plugin unique\r\n\t\t */\r\n\t\ttrim_whitespace : false,\r\n\t\t/**\r\n\t\t * A callback executed in the instance's scope when a new node is created and the name is already taken, the two arguments are the conflicting name and the counter. The default will produce results like `New node (2)`.\r\n\t\t * @name $.jstree.defaults.unique.duplicate\r\n\t\t * @plugin unique\r\n\t\t */\r\n\t\tduplicate : function (name, counter) {\r\n\t\t\treturn name + ' (' + counter + ')';\r\n\t\t}\r\n\t};\r\n\r\n\t$.jstree.plugins.unique = function (options, parent) {\r\n\t\tthis.check = function (chk, obj, par, pos, more) {\r\n\t\t\tif(parent.check.call(this, chk, obj, par, pos, more) === false) { return false; }\r\n\t\t\tobj = obj && obj.id ? obj : this.get_node(obj);\r\n\t\t\tpar = par && par.id ? par : this.get_node(par);\r\n\t\t\tif(!par || !par.children) { return true; }\r\n\t\t\tvar n = chk === \"rename_node\" ? pos : obj.text,\r\n\t\t\t\tc = [],\r\n\t\t\t\ts = this.settings.unique.case_sensitive,\r\n\t\t\t\tw = this.settings.unique.trim_whitespace,\r\n\t\t\t\tm = this._model.data, i, j, t;\r\n\t\t\tfor(i = 0, j = par.children.length; i < j; i++) {\r\n\t\t\t\tt = m[par.children[i]].text;\r\n\t\t\t\tif (!s) {\r\n\t\t\t\t\tt = t.toLowerCase();\r\n\t\t\t\t}\r\n\t\t\t\tif (w) {\r\n\t\t\t\t\tt = t.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');\r\n\t\t\t\t}\r\n\t\t\t\tc.push(t);\r\n\t\t\t}\r\n\t\t\tif(!s) { n = n.toLowerCase(); }\r\n\t\t\tif (w) { n = n.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, ''); }\r\n\t\t\tswitch(chk) {\r\n\t\t\t\tcase \"delete_node\":\r\n\t\t\t\t\treturn true;\r\n\t\t\t\tcase \"rename_node\":\r\n\t\t\t\t\tt = obj.text || '';\r\n\t\t\t\t\tif (!s) {\r\n\t\t\t\t\t\tt = t.toLowerCase();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (w) {\r\n\t\t\t\t\t\tt = t.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');\r\n\t\t\t\t\t}\r\n\t\t\t\t\ti = (langx.inArray(n, c) === -1 || (obj.text && t === n));\r\n\t\t\t\t\tif(!i) {\r\n\t\t\t\t\t\tthis._data.core.last_error = { 'error' : 'check', 'plugin' : 'unique', 'id' : 'unique_01', 'reason' : 'Child with name ' + n + ' already exists. Preventing: ' + chk, 'data' : JSON.stringify({ 'chk' : chk, 'pos' : pos, 'obj' : obj && obj.id ? obj.id : false, 'par' : par && par.id ? par.id : false }) };\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn i;\r\n\t\t\t\tcase \"create_node\":\r\n\t\t\t\t\ti = (langx.inArray(n, c) === -1);\r\n\t\t\t\t\tif(!i) {\r\n\t\t\t\t\t\tthis._data.core.last_error = { 'error' : 'check', 'plugin' : 'unique', 'id' : 'unique_04', 'reason' : 'Child with name ' + n + ' already exists. Preventing: ' + chk, 'data' : JSON.stringify({ 'chk' : chk, 'pos' : pos, 'obj' : obj && obj.id ? obj.id : false, 'par' : par && par.id ? par.id : false }) };\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn i;\r\n\t\t\t\tcase \"copy_node\":\r\n\t\t\t\t\ti = (langx.inArray(n, c) === -1);\r\n\t\t\t\t\tif(!i) {\r\n\t\t\t\t\t\tthis._data.core.last_error = { 'error' : 'check', 'plugin' : 'unique', 'id' : 'unique_02', 'reason' : 'Child with name ' + n + ' already exists. Preventing: ' + chk, 'data' : JSON.stringify({ 'chk' : chk, 'pos' : pos, 'obj' : obj && obj.id ? obj.id : false, 'par' : par && par.id ? par.id : false }) };\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn i;\r\n\t\t\t\tcase \"move_node\":\r\n\t\t\t\t\ti = ( (obj.parent === par.id && (!more || !more.is_multi)) || langx.inArray(n, c) === -1);\r\n\t\t\t\t\tif(!i) {\r\n\t\t\t\t\t\tthis._data.core.last_error = { 'error' : 'check', 'plugin' : 'unique', 'id' : 'unique_03', 'reason' : 'Child with name ' + n + ' already exists. Preventing: ' + chk, 'data' : JSON.stringify({ 'chk' : chk, 'pos' : pos, 'obj' : obj && obj.id ? obj.id : false, 'par' : par && par.id ? par.id : false }) };\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn i;\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t};\r\n\t\tthis.create_node = function (par, node, pos, callback, is_loaded) {\r\n\t\t\tif(!node || node.text === undefined) {\r\n\t\t\t\tif(par === null) {\r\n\t\t\t\t\tpar = $.jstree.root;\r\n\t\t\t\t}\r\n\t\t\t\tpar = this.get_node(par);\r\n\t\t\t\tif(!par) {\r\n\t\t\t\t\treturn parent.create_node.call(this, par, node, pos, callback, is_loaded);\r\n\t\t\t\t}\r\n\t\t\t\tpos = pos === undefined ? \"last\" : pos;\r\n\t\t\t\tif(!pos.toString().match(/^(before|after)$/) && !is_loaded && !this.is_loaded(par)) {\r\n\t\t\t\t\treturn parent.create_node.call(this, par, node, pos, callback, is_loaded);\r\n\t\t\t\t}\r\n\t\t\t\tif(!node) { node = {}; }\r\n\t\t\t\tvar tmp, n, dpc, i, j, m = this._model.data, s = this.settings.unique.case_sensitive, w = this.settings.unique.trim_whitespace, cb = this.settings.unique.duplicate, t;\r\n\t\t\t\tn = tmp = this.get_string('New node');\r\n\t\t\t\tdpc = [];\r\n\t\t\t\tfor(i = 0, j = par.children.length; i < j; i++) {\r\n\t\t\t\t\tt = m[par.children[i]].text;\r\n\t\t\t\t\tif (!s) {\r\n\t\t\t\t\t\tt = t.toLowerCase();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (w) {\r\n\t\t\t\t\t\tt = t.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdpc.push(t);\r\n\t\t\t\t}\r\n\t\t\t\ti = 1;\r\n\t\t\t\tt = n;\r\n\t\t\t\tif (!s) {\r\n\t\t\t\t\tt = t.toLowerCase();\r\n\t\t\t\t}\r\n\t\t\t\tif (w) {\r\n\t\t\t\t\tt = t.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');\r\n\t\t\t\t}\r\n\t\t\t\twhile(langx.inArray(t, dpc) !== -1) {\r\n\t\t\t\t\tn = cb.call(this, tmp, (++i)).toString();\r\n\t\t\t\t\tt = n;\r\n\t\t\t\t\tif (!s) {\r\n\t\t\t\t\t\tt = t.toLowerCase();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (w) {\r\n\t\t\t\t\t\tt = t.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tnode.text = n;\r\n\t\t\t}\r\n\t\t\treturn parent.create_node.call(this, par, node, pos, callback, is_loaded);\r\n\t\t};\r\n\t};\r\n\r\n\t// include the unique plugin by default\r\n\t// $.jstree.defaults.plugins.push(\"unique\");\r\n\treturn $;\r\n\t\r\n});\r\n\ndefine('skylark-widgets-hierarchy/addons/wholerow',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-browser\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-geom\",\r\n  \"skylark-domx-query\",\r\n  \"../Hierarchy\"\r\n],function(langx,browser,eventer,noder,geom,$,jstree){\r\n\t\"use strict\";\r\n\r\n\tif($.jstree.plugins.wholerow) { return; }\r\n\r\n\tvar div = document.createElement('DIV');\r\n\tdiv.setAttribute('unselectable','on');\r\n\tdiv.setAttribute('role','presentation');\r\n\tdiv.className = 'jstree-wholerow';\r\n\tdiv.innerHTML = '&#160;';\r\n\t$.jstree.plugins.wholerow = function (options, parent) {\r\n\t\tthis.bind = function () {\r\n\t\t\tparent.bind.call(this);\r\n\r\n\t\t\tthis.element\r\n\t\t\t\t.on('ready.jstree set_state.jstree', langx.proxy(function () {\r\n\t\t\t\t\t\tthis.hide_dots();\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on(\"init.jstree loading.jstree ready.jstree\", langx.proxy(function () {\r\n\t\t\t\t\t\t//div.style.height = this._data.core.li_height + 'px';\r\n\t\t\t\t\t\tthis.get_container_ul().addClass('jstree-wholerow-ul');\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on(\"deselect_all.jstree\", langx.proxy(function (e, data) {\r\n\t\t\t\t\t\tthis.element.find('.jstree-wholerow-clicked').removeClass('jstree-wholerow-clicked');\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on(\"changed.jstree\", langx.proxy(function (e, data) {\r\n\t\t\t\t\t\tthis.element.find('.jstree-wholerow-clicked').removeClass('jstree-wholerow-clicked');\r\n\t\t\t\t\t\tvar tmp = false, i, j;\r\n\t\t\t\t\t\tfor(i = 0, j = data.selected.length; i < j; i++) {\r\n\t\t\t\t\t\t\ttmp = this.get_node(data.selected[i], true);\r\n\t\t\t\t\t\t\tif(tmp && tmp.length) {\r\n\t\t\t\t\t\t\t\ttmp.children('.jstree-wholerow').addClass('jstree-wholerow-clicked');\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on(\"open_node.jstree\", langx.proxy(function (e, data) {\r\n\t\t\t\t\t\tthis.get_node(data.node, true).find('.jstree-clicked').parent().children('.jstree-wholerow').addClass('jstree-wholerow-clicked');\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on(\"hover_node.jstree dehover_node.jstree\", langx.proxy(function (e, data) {\r\n\t\t\t\t\t\tif(e.type === \"hover_node\" && this.is_disabled(data.node)) { return; }\r\n\t\t\t\t\t\tthis.get_node(data.node, true).children('.jstree-wholerow')[e.type === \"hover_node\"?\"addClass\":\"removeClass\"]('jstree-wholerow-hovered');\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on(\"contextmenu.jstree\", \".jstree-wholerow\", langx.proxy(function (e) {\r\n\t\t\t\t\t\tif (this._data.contextmenu) {\r\n\t\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\t\tvar tmp = $.Event('contextmenu', { metaKey : e.metaKey, ctrlKey : e.ctrlKey, altKey : e.altKey, shiftKey : e.shiftKey, pageX : e.pageX, pageY : e.pageY });\r\n\t\t\t\t\t\t\t$(e.currentTarget).closest(\".jstree-node\").children(\".jstree-anchor\").first().trigger(tmp);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t/*!\r\n\t\t\t\t.on(\"mousedown.jstree touchstart.jstree\", \".jstree-wholerow\", function (e) {\r\n\t\t\t\t\t\tif(e.target === e.currentTarget) {\r\n\t\t\t\t\t\t\tvar a = $(e.currentTarget).closest(\".jstree-node\").children(\".jstree-anchor\");\r\n\t\t\t\t\t\t\te.target = a[0];\r\n\t\t\t\t\t\t\ta.trigger(e);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t\t*/\r\n\t\t\t\t.on(\"click.jstree\", \".jstree-wholerow\", function (e) {\r\n\t\t\t\t\t\te.stopImmediatePropagation();\r\n\t\t\t\t\t\tvar tmp = $.Event('click', { metaKey : e.metaKey, ctrlKey : e.ctrlKey, altKey : e.altKey, shiftKey : e.shiftKey });\r\n\t\t\t\t\t\t$(e.currentTarget).closest(\".jstree-node\").children(\".jstree-anchor\").first().trigger(tmp).focus();\r\n\t\t\t\t\t})\r\n\t\t\t\t.on(\"dblclick.jstree\", \".jstree-wholerow\", function (e) {\r\n\t\t\t\t\t\te.stopImmediatePropagation();\r\n\t\t\t\t\t\tvar tmp = $.Event('dblclick', { metaKey : e.metaKey, ctrlKey : e.ctrlKey, altKey : e.altKey, shiftKey : e.shiftKey });\r\n\t\t\t\t\t\t$(e.currentTarget).closest(\".jstree-node\").children(\".jstree-anchor\").first().trigger(tmp).focus();\r\n\t\t\t\t\t})\r\n\t\t\t\t.on(\"click.jstree\", \".jstree-leaf > .jstree-ocl\", langx.proxy(function (e) {\r\n\t\t\t\t\t\te.stopImmediatePropagation();\r\n\t\t\t\t\t\tvar tmp = $.Event('click', { metaKey : e.metaKey, ctrlKey : e.ctrlKey, altKey : e.altKey, shiftKey : e.shiftKey });\r\n\t\t\t\t\t\t$(e.currentTarget).closest(\".jstree-node\").children(\".jstree-anchor\").first().trigger(tmp).focus();\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on(\"mouseover.jstree\", \".jstree-wholerow, .jstree-icon\", langx.proxy(function (e) {\r\n\t\t\t\t\t\te.stopImmediatePropagation();\r\n\t\t\t\t\t\tif(!this.is_disabled(e.currentTarget)) {\r\n\t\t\t\t\t\t\tthis.hover_node(e.currentTarget);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on(\"mouseleave.jstree\", \".jstree-node\", langx.proxy(function (e) {\r\n\t\t\t\t\t\tthis.dehover_node(e.currentTarget);\r\n\t\t\t\t\t}, this));\r\n\t\t};\r\n\t\tthis.teardown = function () {\r\n\t\t\tif(this.settings.wholerow) {\r\n\t\t\t\tthis.element.find(\".jstree-wholerow\").remove();\r\n\t\t\t}\r\n\t\t\tparent.teardown.call(this);\r\n\t\t};\r\n\t\tthis.redraw_node = function(obj, deep, callback, force_render) {\r\n\t\t\tobj = parent.redraw_node.apply(this, arguments);\r\n\t\t\tif(obj) {\r\n\t\t\t\tvar tmp = div.cloneNode(true);\r\n\t\t\t\t//tmp.style.height = this._data.core.li_height + 'px';\r\n\t\t\t\tif(langx.inArray(obj.id, this._data.core.selected) !== -1) { tmp.className += ' jstree-wholerow-clicked'; }\r\n\t\t\t\tif(this._data.core.focused && this._data.core.focused === obj.id) { tmp.className += ' jstree-wholerow-hovered'; }\r\n\t\t\t\tobj.insertBefore(tmp, obj.childNodes[0]);\r\n\t\t\t}\r\n\t\t\treturn obj;\r\n\t\t};\r\n\t};\r\n\t// include the wholerow plugin by default\r\n\t// $.jstree.defaults.plugins.push(\"wholerow\");\r\n\r\n\treturn $;\r\n\r\n});\r\n\ndefine('skylark-widgets-hierarchy/main',[\r\n    \"skylark-domx-query\",\r\n    \"./Hierarchy\",\r\n    \"./addons/changed\",\r\n    \"./addons/checkbox\",\r\n    \"./addons/conditionalselect\",\r\n    \"./addons/contextmenu\",\r\n    \"./addons/dnd\",\r\n    \"./addons/massload\",\r\n    \"./addons/search\",\r\n    \"./addons/sort\",\r\n    \"./addons/state\",\r\n    \"./addons/treegrid\",\r\n    \"./addons/types\",\r\n    \"./addons/unique\",\r\n    \"./addons/wholerow\"\r\n], function($) {\r\n    return $;\r\n});\ndefine('skylark-widgets-hierarchy', ['skylark-widgets-hierarchy/main'], function (main) { return main; });\n\n"]}