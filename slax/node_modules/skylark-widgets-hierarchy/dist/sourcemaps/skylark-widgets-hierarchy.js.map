{"version":3,"sources":["skylark-widgets-hierarchy.js"],"names":["define","skylark","langx","browser","eventer","noder","geom","$","jstree","ajax","options","Xhr","request","url","camelCase","each","extend","target","deep","args","Array","prototype","slice","call","arguments","shift","length","this","forEach","arg","mixin","grep","elements","callback","filter","isArray","isEmptyObject","isFunction","isWindow","isPlainObject","inArray","makeArray","map","noop","parseJSON","window","JSON","parse","proxy","trim","type","fn","stop","instance_counter","ccp_node","ccp_mode","ccp_inst","themes_loaded","src","attr","document","version","defaults","plugins","path","indexOf","replace","idregex","root","create","el","Tree","destroy","off","reference","needle","tmp","obj","id","tagName","nodeType","ignore","closest","data","inst","_model","is_method","result","instance","method","apply","undefined","core","strings","check_callback","error","animation","multiple","themes","name","dir","dots","icons","ellipsis","stripes","variant","responsive","expand_selected_onload","worker","force_text","dblclick_toggle","loaded_state","restore_focus","keyboard","ctrl-space","e","currentTarget","trigger","enter","left","preventDefault","is_open","close_node","o","get_parent","get_node","children","focus","up","get_prev_dom","right","is_closed","open_node","_firstChild","down","get_next_dom","*","open_all","home","get_container_ul","end","element","find","last","f2","edit","Evented","inherit","klassName","plugin","deco","opts","Child","_data","init","_id","_cnt","_wrk","selected","last_error","working","worker_queue","focused","opt","i","k","changed","force_full_redraw","redraw_timeout","default_state","loaded","opened","disabled","parent","parents","children_d","state","addClass","settings","ready","rtl","css","bind","original_container_html","clone","addBack","contents","nodeValue","test","remove","html","get_string","li_height","first","outerHeight","node","_create_prototype_node","load_node","keep_html","URL","revokeObjectURL","empty","teardown","_temp1","_temp2","_node","createElement","setAttribute","className","appendChild","_kbevent_to_func","parts","ctrlKey","push","altKey","shiftKey","8","9","13","19","27","32","33","34","35","36","37","38","39","40","44","45","46","96","97","98","99","100","101","102","103","104","105","-13","112","113","114","115","116","117","118","119","120","121","122","123","144","145","16","17","18","48","49","50","51","52","53","54","55","56","57","59","61","65","66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","107","109","110","186","187","188","189","190","191","192","219","220","221","222","111","106","173","which","sort","join","toLowerCase","kb","hasOwnProperty","split","unbind","removeClass","removeData","word","tout","was_click","on","selection","getSelection","sel","removeAllRanges","collapse","Date","toggle_node","activeElement","activate_node","f","r","status","setTimeout","j","concat","vakata","array_unique","action","clearTimeout","chr","String","fromCharCode","col","ind","index","v","text","RegExp","charAt","s","set_theme","set_theme_variant","mouseleave","not","mouseenter","act","hover_node","dehover_node","ev","get_container","key","a","dom","firstChild","nextSibling","_nextSibling","_previousSibling","previousSibling","as_dom","hasClass","ex","get_path","glue","ids","p","get_text","reverse","strict","offsetHeight","parentsUntil","nextAll","lastChild","parentNode","get_children_dom","is_parent","is_loaded","is_loading","loading","is_leaf","l","c","_load_nodes","array_filter","failed","_load_node","m","has_children","hidden","nodes","is_callback","force_reload","done","load_all","to_load","t","notTextOrCommentNode","d","parseHTML","x","getResponseHeader","_append_json_data","_append_html_data","reason","stringify","xhr","fail","_node_changed","cb","dat","is","par","chd","dpc","_parse_model_from_html","redraw","force_processing","w","df","t_id","t_cnt","func","rslt","add","parse_flat","ps","unshift","tid","toString","icon","li_attr","a_attr","href","original","parse_nest","cnt","mod","postMessage","Blob","Worker","createObjectURL","onmessage","terminate","attributes","_parse_model_from_flat_json","_parse_model_from_json","_redraw","fe","redraw_node","append","full","draw_children","force_render","old","last_sibling","querySelector","substr","getElementById","cloneNode","childNodes","style","backgroundImage","backgroundPosition","backgroundSize","createTextNode","innerHTML","insertBefore","scrollTop","scrollLeft","t1","t2","slideDown","display","ok","_open_to","slideUp","original_obj","_this","close_all","get","is_disabled","enable_node","disable_node","is_hidden","hide_node","skip_redraw","show_node","hide_all","show_all","last_clicked","metaKey","deselect_node","select_node","event","is_selected","deselect_all","supress_event","prevent_open","array_remove_item","select_all","old_selection","get_selected","get_top_selected","get_bottom_selected","get_state","open","scroll","top","set_state","initial_selection","refresh","skip_loading","forget_state","refresh_node","set_id","new","set_text","val","get_json","flat","get_icon","no_data","no_state","no_li_attr","no_a_attr","no_id","no_children","create_node","pos","match","check","position","rename_node","delete_node","lft","array_remove","chk","more","chc","is_multi","functions","move_node","origin","old_par","old_pos","new_par","old_ins","copy_node","is_foreign","old_parent","old_position","old_instance","new_instance","cut","copy","get_buffer","mode","can_paste","paste","clear_buffer","default_text","h1","h2","cancel","width","visibility","appendTo","body","value","class","padding","border","box-sizing","height","lineHeight","blur","stopImmediatePropagation","nv","replaceWith","keydown","click","mousedown","keyup","Math","min","keypress","fontFamily","fontSize","fontWeight","fontStyle","fontStretch","fontVariant","letterSpacing","wordSpacing","select","one","theme_name","theme_url","theme","get_theme","variant_name","get_theme_variant","show_stripes","hide_stripes","toggle_stripes","show_dots","hide_dots","toggle_dots","show_icons","hide_icons","toggle_icons","show_ellipsis","hide_ellipsis","toggle_ellipsis","set_icon","removeAttr","hide_icon","show_icon","search","pattern","txt","fuzzy","caseSensitive","MATCH_LOCATION","location","MATCH_DISTANCE","distance","MATCH_THRESHOLD","threshold","patternLen","matchmask","pattern_alphabet","mask","match_bitapScore","accuracy","proximity","abs","isMatch","score","binMin","binMid","lastRd","start","finish","rd","charMatch","textLen","scoreThreshold","bestLoc","binMax","locations","lastIndexOf","floor","max","with_values","array","from","splice","item","b","deselected","checkbox","_i","visible","three_state","whole_node","keep_selected_style","cascade","tie_selection","cascade_to_disabled","cascade_to_hidden","uto","_undetermined","checked","cur","selectedIds","_cascade_new_checked_state","temp","undetermined","allIds","get_undetermined","tt","tmp2","checkbox_disabled","show_checkboxes","checkboxes","hide_checkboxes","toggle_checkboxes","is_undetermined","disable_checkbox","enable_checkbox","is_checked","uncheck_node","check_node","checkedState","selectedChildIds","selectedNodeIds","selectedChildrenIds","get_checked_descendants","childId","self","check_all","uncheck_all","get_checked","get_top_checked","get_bottom_checked","res","conditionalselect","right_to_left","popup","Menu","elm","$el","_options","hide_onmouseleave","to","contains","relatedTarget","siblings","hide","_show_submenu","_execute","prevAll","show","render","items","_parse","_trigger","event_name","position_x","y","position_y","_disabled","str","sep","separator_before","_class","shortcut","title","label","shortcut_label","submenu","separator_after","xl","offset","outerWidth","h","dw","dh","is_visible","detach","menu","contextmenu","show_at_node","new_node","rename","ccp","ey","last_ts","cto","show_contextmenu","pageX","pageY","originalEvent","changedTouches","clientX","clientY","_show_contextmenu","cls","drg","dnd","open_timeout","is_draggable","check_while_dragging","always_copy","inside_pos","drag_selection","touch","large_drop_target","large_drag_target","use_html5","mlt","escape","helper","lastmv","laster","lastev","opento","marker","isDifferentNode","op","pr","ip","tm","is_copy","pn","ins","ref","rel","z","dataTransfer","dropEffect","_get","_clean","div","strip","vakata_dnd","is_down","is_drag","helper_w","init_x","init_y","scroll_l","scroll_t","scroll_e","scroll_i","is_touch","scroll_speed","scroll_proximity","helper_left","helper_top","threshold_touch","clearInterval","drag","_scroll","init_only","setInterval","elementFromPoint","pageXOffset","pageYOffset","unselectable","onselectstart","touchAction","msTouchAction","MozUserSelect","margin","zIndex","wh","ww","dt","dl","ht","hl","scrollHeight","scrollWidth","offsetWidth","parseInt","massload","toLoad","case_sensitive","show_only_matches","show_only_matches_children","close_opened_onclear","search_leaves_only","search_callback","opn","som","smc","hdn","skip_async","inside","clear_search","lastRequest","abort","ii","querySelectorAll","events","ttl","preserve_loaded","save_state","restore_state","st","sec","storage","set","clear_state","del","localStorage","setItem","getItem","removeItem","BLANKRE","IDREGEX","styled","generateCellId","tree","escapeId","getIds","findDataCell","uniq","scope","cellId","ret","columns","isClickedSep","toResize","oldMouseX","newMouseX","htmlstripre","copyData","fromtree","totree","recurse","findLastClosedNode","getCellData","grid","_guid","s4","random","substring","_initialize","_initialized","container","gs","_gridSettings","treeClass","context","columnWidth","defaultConf","*display","*+display","isThemeroller","themeroller","treeWidthDiff","resizable","draggable","stateful","indent","sortOrder","sortAsc","caseInsensitive","fixedHeader","gridcontextmenu","treecol","gridcols","cols","columnSearch","_edit","len","ceil","rootid","msie","navigator","userAgent","parseFloat","appVersion","zoom","gridWrapper","insertAfter","midWrapper","defaultSort","bigger","colrefs","caseInsensitiveSort","localeCompare","nodeA","nodeB","valueA","valueB","ui","sortable","axis","handle","console","warn","searchColumn","searchObj","validatedSearchObj","columnIndex","Object","keys","column","columnValue","searchSettings","omniSearchCallback","matched","searchValue","_detachColumns","_prepare_grid","_reattachColumns","removeNodes","_hideOrShowTree","_hide_grid","_prepare_headers","q","anchorHeight","_hover_node","nodesToShow","endTime","that","startTime","getTime","holdingCells","cells","_domManipulation","time","newtree","oldtree","gw","gridparent","_clean_grid","cl","ccl","coluuid","defaultWidth","tr","classAdd","hasHeaders","conf","headerClass","columnClass","header","minWidth","maxWidth","prependTo","next","bound","mouseup","currentTree","colNum","isNaN","mousemove","oldPrevHeaderInner","oldPrevColWidth","newPrevColWidth","diff","innerWidth","clickedSep","newWidth","stopPropagation","symbol","rootNode","mw","removeChild","oldNodes","_hideOrShowNode","child","lenj","getHoldingCells","hc","prop","grid_hide_column","grid_show_column","img","wcl","valClass","wideValClass","span","paddingleft","gridCellName","gridCellParentId","gridCellParent","gridCellPrev","gridCellPrevId","gridCellNext","gridCellNextId","gridCellChild","gridCellChildId","content","highlightSearch","isClicked","objData","cellClickHandler","sourceName","isDefaultPrevented","cellRightClickHandler","hoverInHandler","jsTreeInstance","hoverOutHandler","lid","peers","rendered","renderATitle","cellClass","wideCellClass","format","images","valueClass","valueClassPrefix","wideValueClass","wideValueClassPrefix","toRen","after","hover","overflow-y","types","default","_delete_ids","get_rules","max_children","valid_children","max_depth","get_type","rules","set_type","old_type","old_icon","unique","trim_whitespace","duplicate","counter","n","wholerow","Event","main"],"mappings":"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","file":"../skylark-widgets-hierarchy.js","sourcesContent":["define('skylark-widgets-hierarchy/Hierarchy',[\r\n  \"skylark-langx/skylark\",\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-browser\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-geom\",\r\n  \"skylark-domx-query\"\r\n],function(skylark,langx,browser,eventer,noder,geom,$){\r\n\t\"use strict\";\r\n\r\n\tvar jstree = skylark.jstree =  skylark.jstree || {};\r\n\r\n\t$.ajax = $.ajax || function(options) {\r\n        return langx.Xhr.request(options.url,options);\r\n    };\r\n\r\n    $.camelCase = langx.camelCase;\r\n\r\n    $.each = langx.each;\r\n\r\n    $.extend = function(target) {\r\n        var deep, args = Array.prototype.slice.call(arguments, 1);\r\n        if (typeof target == 'boolean') {\r\n            deep = target\r\n            target = args.shift()\r\n        }\r\n        if (args.length == 0) {\r\n            args = [target];\r\n            target = this;\r\n        }\r\n        args.forEach(function(arg) {\r\n        \tlangx.mixin(target, arg, deep);\r\n        });\r\n        return target;\r\n    };\r\n\r\n    $.grep = function(elements, callback) {\r\n        return filter.call(elements, callback)\r\n    };\r\n\r\n    $.isArray = langx.isArray;\r\n    $.isEmptyObject = langx.isEmptyObject;\r\n    $.isFunction = langx.isFunction;\r\n    $.isWindow = langx.isWindow;\r\n    $.isPlainObject = langx.isPlainObject;\r\n\r\n    $.inArray = langx.inArray;\r\n\r\n    $.makeArray = langx.makeArray;\r\n    $.map = langx.map;\r\n\r\n    $.noop = function() {\r\n    };\r\n\r\n    $.parseJSON = window.JSON.parse;\r\n\r\n    $.proxy = langx.proxy;\r\n\r\n    $.trim = langx.trim;\r\n    $.type = langx.type;\r\n\r\n    $.fn.stop = function() {\r\n    \treturn this;\r\n    }\r\n\r\n\r\n\t/*!\r\n\t * jsTree {{VERSION}}\r\n\t * http://jstree.com/\r\n\t *\r\n\t * Copyright (c) 2014 Ivan Bozhanov (http://vakata.com)\r\n\t *\r\n\t * Licensed same as jquery - under the terms of the MIT License\r\n\t *   http://www.opensource.org/licenses/mit-license.php\r\n\t */\r\n\r\n\t// prevent another load? maybe there is a better way?\r\n\tif($.jstree) {\r\n\t\treturn;\r\n\t}\r\n\r\n\t/**\r\n\t * ### jsTree core functionality\r\n\t */\r\n\r\n\t// internal variables\r\n\tvar instance_counter = 0,\r\n\t\tccp_node = false,\r\n\t\tccp_mode = false,\r\n\t\tccp_inst = false,\r\n\t\tthemes_loaded = [],\r\n\t\tsrc = $('script:last').attr('src'),\r\n\t\tdocument = window.document; // local variable is always faster to access then a global\r\n\r\n\t/**\r\n\t * holds all jstree related functions and variables, including the actual class and methods to create, access and manipulate instances.\r\n\t * @name $.jstree\r\n\t */\r\n\t$.jstree = {\r\n\t\t/**\r\n\t\t * specifies the jstree version in use\r\n\t\t * @name $.jstree.version\r\n\t\t */\r\n\t\tversion : '{{VERSION}}',\r\n\t\t/**\r\n\t\t * holds all the default options used when creating new instances\r\n\t\t * @name $.jstree.defaults\r\n\t\t */\r\n\t\tdefaults : {\r\n\t\t\t/**\r\n\t\t\t * configure which plugins will be active on an instance. Should be an array of strings, where each element is a plugin name. The default is `[]`\r\n\t\t\t * @name $.jstree.defaults.plugins\r\n\t\t\t */\r\n\t\t\tplugins : []\r\n\t\t},\r\n\t\t/**\r\n\t\t * stores all loaded jstree plugins (used internally)\r\n\t\t * @name $.jstree.plugins\r\n\t\t */\r\n\t\tplugins : {},\r\n\t\tpath : src && src.indexOf('/') !== -1 ? src.replace(/\\/[^\\/]+$/,'') : '',\r\n\t\tidregex : /[\\\\:&!^|()\\[\\]<>@*'+~#\";.,=\\- \\/${}%?`]/g,\r\n\t\troot : '#'\r\n\t};\r\n\t\r\n\t/**\r\n\t * creates a jstree instance\r\n\t * @name $.jstree.create(el [, options])\r\n\t * @param {DOMElement|jQuery|String} el the element to create the instance on, can be jQuery extended or a selector\r\n\t * @param {Object} options options for this instance (extends `$.jstree.defaults`)\r\n\t * @return {jsTree} the new instance\r\n\t */\r\n\t$.jstree.create = function (el, options) {\r\n\t\treturn new Tree(el,options);\r\n\t};\r\n\r\n\t/**\r\n\t * remove all traces of jstree from the DOM and destroy all instances\r\n\t * @name $.jstree.destroy()\r\n\t */\r\n\t$.jstree.destroy = function () {\r\n\t\t$('.jstree:jstree').jstree('destroy');\r\n\t\t$(document).off('.jstree');\r\n\t};\r\n\r\n\r\n\t/**\r\n\t * get a reference to an existing instance\r\n\t *\r\n\t * __Examples__\r\n\t *\r\n\t *\t// provided a container with an ID of \"tree\", and a nested node with an ID of \"branch\"\r\n\t *\t// all of there will return the same instance\r\n\t *\t$.jstree.reference('tree');\r\n\t *\t$.jstree.reference('#tree');\r\n\t *\t$.jstree.reference($('#tree'));\r\n\t *\t$.jstree.reference(document.getElementByID('tree'));\r\n\t *\t$.jstree.reference('branch');\r\n\t *\t$.jstree.reference('#branch');\r\n\t *\t$.jstree.reference($('#branch'));\r\n\t *\t$.jstree.reference(document.getElementByID('branch'));\r\n\t *\r\n\t * @name $.jstree.reference(needle)\r\n\t * @param {DOMElement|jQuery|String} needle\r\n\t * @return {jsTree|null} the instance or `null` if not found\r\n\t */\r\n\t$.jstree.reference = function (needle) {\r\n\t\tvar tmp = null,\r\n\t\t\tobj = null;\r\n\t\tif(needle && needle.id && (!needle.tagName || !needle.nodeType)) { needle = needle.id; }\r\n\r\n\t\tif(!obj || !obj.length) {\r\n\t\t\ttry { obj = $(needle); } catch (ignore) { }\r\n\t\t}\r\n\t\tif(!obj || !obj.length) {\r\n\t\t\ttry { obj = $('#' + needle.replace($.jstree.idregex,'\\\\$&')); } catch (ignore) { }\r\n\t\t}\r\n\t\tif(obj && obj.length && (obj = obj.closest('.jstree')).length && (obj = obj.data('jstree'))) {\r\n\t\t\ttmp = obj;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t$('.jstree').each(function () {\r\n\t\t\t\tvar inst = $(this).data('jstree');\r\n\t\t\t\tif(inst && inst._model.data[needle]) {\r\n\t\t\t\t\ttmp = inst;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn tmp;\r\n\t};\r\n\r\n\t/**\r\n\t * Create an instance, get an instance or invoke a command on a instance.\r\n\t *\r\n\t * If there is no instance associated with the current node a new one is created and `arg` is used to extend `$.jstree.defaults` for this new instance. There would be no return value (chaining is not broken).\r\n\t *\r\n\t * If there is an existing instance and `arg` is a string the command specified by `arg` is executed on the instance, with any additional arguments passed to the function. If the function returns a value it will be returned (chaining could break depending on function).\r\n\t *\r\n\t * If there is an existing instance and `arg` is not a string the instance itself is returned (similar to `$.jstree.reference`).\r\n\t *\r\n\t * In any other case - nothing is returned and chaining is not broken.\r\n\t *\r\n\t * __Examples__\r\n\t *\r\n\t *\t$('#tree1').jstree(); // creates an instance\r\n\t *\t$('#tree2').jstree({ plugins : [] }); // create an instance with some options\r\n\t *\t$('#tree1').jstree('open_node', '#branch_1'); // call a method on an existing instance, passing additional arguments\r\n\t *\t$('#tree2').jstree(); // get an existing instance (or create an instance)\r\n\t *\t$('#tree2').jstree(true); // get an existing instance (will not create new instance)\r\n\t *\t$('#branch_1').jstree().select_node('#branch_1'); // get an instance (using a nested element and call a method)\r\n\t *\r\n\t * @name $().jstree([arg])\r\n\t * @param {String|Object} arg\r\n\t * @return {Mixed}\r\n\t */\r\n\t$.fn.jstree = function (arg) {\r\n\t\t// check for string argument\r\n\t\tvar is_method\t= (typeof arg === 'string'),\r\n\t\t\targs\t\t= Array.prototype.slice.call(arguments, 1),\r\n\t\t\tresult\t\t= null;\r\n\t\tif(arg === true && !this.length) { return false; }\r\n\t\tthis.each(function () {\r\n\t\t\t// get the instance (if there is one) and method (if it exists)\r\n\t\t\tvar instance = $.jstree.reference(this),\r\n\t\t\t\tmethod = is_method && instance ? instance[arg] : null;\r\n\t\t\t// if calling a method, and method is available - execute on the instance\r\n\t\t\tresult = is_method && method ?\r\n\t\t\t\tmethod.apply(instance, args) :\r\n\t\t\t\tnull;\r\n\t\t\t// if there is no instance and no method is being called - create one\r\n\t\t\tif(!instance && !is_method && (arg === undefined || $.isPlainObject(arg))) {\r\n\t\t\t\t$.jstree.create(this, arg);\r\n\t\t\t}\r\n\t\t\t// if there is an instance and no method is called - return the instance\r\n\t\t\tif( (instance && !is_method) || arg === true ) {\r\n\t\t\t\tresult = instance || false;\r\n\t\t\t}\r\n\t\t\t// if there was a method call which returned a result - break and return the value\r\n\t\t\tif(result !== null && result !== undefined) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t});\r\n\t\t// if there was a method call with a valid return value - return that, otherwise continue the chain\r\n\t\treturn result !== null && result !== undefined ?\r\n\t\t\tresult : this;\r\n\t};\r\n\r\n\t/**\r\n\t * stores all defaults for the core\r\n\t * @name $.jstree.defaults.core\r\n\t */\r\n\t$.jstree.defaults.core = {\r\n\t\t/**\r\n\t\t * data configuration\r\n\t\t *\r\n\t\t * If left as `false` the HTML inside the jstree container element is used to populate the tree (that should be an unordered list with list items).\r\n\t\t *\r\n\t\t * You can also pass in a HTML string or a JSON array here.\r\n\t\t *\r\n\t\t * It is possible to pass in a standard jQuery-like AJAX config and jstree will automatically determine if the response is JSON or HTML and use that to populate the tree.\r\n\t\t * In addition to the standard jQuery ajax options here you can suppy functions for `data` and `url`, the functions will be run in the current instance's scope and a param will be passed indicating which node is being loaded, the return value of those functions will be used.\r\n\t\t *\r\n\t\t * The last option is to specify a function, that function will receive the node being loaded as argument and a second param which is a function which should be called with the result.\r\n\t\t *\r\n\t\t * __Examples__\r\n\t\t *\r\n\t\t *\t// AJAX\r\n\t\t *\t$('#tree').jstree({\r\n\t\t *\t\t'core' : {\r\n\t\t *\t\t\t'data' : {\r\n\t\t *\t\t\t\t'url' : '/get/children/',\r\n\t\t *\t\t\t\t'data' : function (node) {\r\n\t\t *\t\t\t\t\treturn { 'id' : node.id };\r\n\t\t *\t\t\t\t}\r\n\t\t *\t\t\t}\r\n\t\t *\t\t});\r\n\t\t *\r\n\t\t *\t// direct data\r\n\t\t *\t$('#tree').jstree({\r\n\t\t *\t\t'core' : {\r\n\t\t *\t\t\t'data' : [\r\n\t\t *\t\t\t\t'Simple root node',\r\n\t\t *\t\t\t\t{\r\n\t\t *\t\t\t\t\t'id' : 'node_2',\r\n\t\t *\t\t\t\t\t'text' : 'Root node with options',\r\n\t\t *\t\t\t\t\t'state' : { 'opened' : true, 'selected' : true },\r\n\t\t *\t\t\t\t\t'children' : [ { 'text' : 'Child 1' }, 'Child 2']\r\n\t\t *\t\t\t\t}\r\n\t\t *\t\t\t]\r\n\t\t *\t\t}\r\n\t\t *\t});\r\n\t\t *\r\n\t\t *\t// function\r\n\t\t *\t$('#tree').jstree({\r\n\t\t *\t\t'core' : {\r\n\t\t *\t\t\t'data' : function (obj, callback) {\r\n\t\t *\t\t\t\tcallback.call(this, ['Root 1', 'Root 2']);\r\n\t\t *\t\t\t}\r\n\t\t *\t\t});\r\n\t\t *\r\n\t\t * @name $.jstree.defaults.core.data\r\n\t\t */\r\n\t\tdata\t\t\t: false,\r\n\t\t/**\r\n\t\t * configure the various strings used throughout the tree\r\n\t\t *\r\n\t\t * You can use an object where the key is the string you need to replace and the value is your replacement.\r\n\t\t * Another option is to specify a function which will be called with an argument of the needed string and should return the replacement.\r\n\t\t * If left as `false` no replacement is made.\r\n\t\t *\r\n\t\t * __Examples__\r\n\t\t *\r\n\t\t *\t$('#tree').jstree({\r\n\t\t *\t\t'core' : {\r\n\t\t *\t\t\t'strings' : {\r\n\t\t *\t\t\t\t'Loading ...' : 'Please wait ...'\r\n\t\t *\t\t\t}\r\n\t\t *\t\t}\r\n\t\t *\t});\r\n\t\t *\r\n\t\t * @name $.jstree.defaults.core.strings\r\n\t\t */\r\n\t\tstrings\t\t\t: false,\r\n\t\t/**\r\n\t\t * determines what happens when a user tries to modify the structure of the tree\r\n\t\t * If left as `false` all operations like create, rename, delete, move or copy are prevented.\r\n\t\t * You can set this to `true` to allow all interactions or use a function to have better control.\r\n\t\t *\r\n\t\t * __Examples__\r\n\t\t *\r\n\t\t *\t$('#tree').jstree({\r\n\t\t *\t\t'core' : {\r\n\t\t *\t\t\t'check_callback' : function (operation, node, node_parent, node_position, more) {\r\n\t\t *\t\t\t\t// operation can be 'create_node', 'rename_node', 'delete_node', 'move_node', 'copy_node' or 'edit'\r\n\t\t *\t\t\t\t// in case of 'rename_node' node_position is filled with the new node name\r\n\t\t *\t\t\t\treturn operation === 'rename_node' ? true : false;\r\n\t\t *\t\t\t}\r\n\t\t *\t\t}\r\n\t\t *\t});\r\n\t\t *\r\n\t\t * @name $.jstree.defaults.core.check_callback\r\n\t\t */\r\n\t\tcheck_callback\t: false,\r\n\t\t/**\r\n\t\t * a callback called with a single object parameter in the instance's scope when something goes wrong (operation prevented, ajax failed, etc)\r\n\t\t * @name $.jstree.defaults.core.error\r\n\t\t */\r\n\t\terror\t\t\t: $.noop,\r\n\t\t/**\r\n\t\t * the open / close animation duration in milliseconds - set this to `false` to disable the animation (default is `200`)\r\n\t\t * @name $.jstree.defaults.core.animation\r\n\t\t */\r\n\t\tanimation\t\t: 200,\r\n\t\t/**\r\n\t\t * a boolean indicating if multiple nodes can be selected\r\n\t\t * @name $.jstree.defaults.core.multiple\r\n\t\t */\r\n\t\tmultiple\t\t: true,\r\n\t\t/**\r\n\t\t * theme configuration object\r\n\t\t * @name $.jstree.defaults.core.themes\r\n\t\t */\r\n\t\tthemes\t\t\t: {\r\n\t\t\t/**\r\n\t\t\t * the name of the theme to use (if left as `false` the default theme is used)\r\n\t\t\t * @name $.jstree.defaults.core.themes.name\r\n\t\t\t */\r\n\t\t\tname\t\t\t: false,\r\n\t\t\t/**\r\n\t\t\t * the URL of the theme's CSS file, leave this as `false` if you have manually included the theme CSS (recommended). You can set this to `true` too which will try to autoload the theme.\r\n\t\t\t * @name $.jstree.defaults.core.themes.url\r\n\t\t\t */\r\n\t\t\turl\t\t\t\t: false,\r\n\t\t\t/**\r\n\t\t\t * the location of all jstree themes - only used if `url` is set to `true`\r\n\t\t\t * @name $.jstree.defaults.core.themes.dir\r\n\t\t\t */\r\n\t\t\tdir\t\t\t\t: false,\r\n\t\t\t/**\r\n\t\t\t * a boolean indicating if connecting dots are shown\r\n\t\t\t * @name $.jstree.defaults.core.themes.dots\r\n\t\t\t */\r\n\t\t\tdots\t\t\t: true,\r\n\t\t\t/**\r\n\t\t\t * a boolean indicating if node icons are shown\r\n\t\t\t * @name $.jstree.defaults.core.themes.icons\r\n\t\t\t */\r\n\t\t\ticons\t\t\t: true,\r\n\t\t\t/**\r\n\t\t\t * a boolean indicating if node ellipsis should be shown - this only works with a fixed with on the container\r\n\t\t\t * @name $.jstree.defaults.core.themes.ellipsis\r\n\t\t\t */\r\n\t\t\tellipsis\t\t: false,\r\n\t\t\t/**\r\n\t\t\t * a boolean indicating if the tree background is striped\r\n\t\t\t * @name $.jstree.defaults.core.themes.stripes\r\n\t\t\t */\r\n\t\t\tstripes\t\t\t: false,\r\n\t\t\t/**\r\n\t\t\t * a string (or boolean `false`) specifying the theme variant to use (if the theme supports variants)\r\n\t\t\t * @name $.jstree.defaults.core.themes.variant\r\n\t\t\t */\r\n\t\t\tvariant\t\t\t: false,\r\n\t\t\t/**\r\n\t\t\t * a boolean specifying if a reponsive version of the theme should kick in on smaller screens (if the theme supports it). Defaults to `false`.\r\n\t\t\t * @name $.jstree.defaults.core.themes.responsive\r\n\t\t\t */\r\n\t\t\tresponsive\t\t: false\r\n\t\t},\r\n\t\t/**\r\n\t\t * if left as `true` all parents of all selected nodes will be opened once the tree loads (so that all selected nodes are visible to the user)\r\n\t\t * @name $.jstree.defaults.core.expand_selected_onload\r\n\t\t */\r\n\t\texpand_selected_onload : true,\r\n\t\t/**\r\n\t\t * if left as `true` web workers will be used to parse incoming JSON data where possible, so that the UI will not be blocked by large requests. Workers are however about 30% slower. Defaults to `true`\r\n\t\t * @name $.jstree.defaults.core.worker\r\n\t\t */\r\n\t\tworker : true,\r\n\t\t/**\r\n\t\t * Force node text to plain text (and escape HTML). Defaults to `false`\r\n\t\t * @name $.jstree.defaults.core.force_text\r\n\t\t */\r\n\t\tforce_text : false,\r\n\t\t/**\r\n\t\t * Should the node should be toggled if the text is double clicked . Defaults to `true`\r\n\t\t * @name $.jstree.defaults.core.dblclick_toggle\r\n\t\t */\r\n\t\tdblclick_toggle : true,\r\n\t\t/**\r\n\t\t * Should the loaded nodes be part of the state. Defaults to `false`\r\n\t\t * @name $.jstree.defaults.core.loaded_state\r\n\t\t */\r\n\t\tloaded_state : false,\r\n\t\t/**\r\n\t\t * Should the last active node be focused when the tree container is blurred and the focused again. This helps working with screen readers. Defaults to `true`\r\n\t\t * @name $.jstree.defaults.core.restore_focus\r\n\t\t */\r\n\t\trestore_focus : true,\r\n\t\t/**\r\n\t\t * Default keyboard shortcuts (an object where each key is the button name or combo - like 'enter', 'ctrl-space', 'p', etc and the value is the function to execute in the instance's scope)\r\n\t\t * @name $.jstree.defaults.core.keyboard\r\n\t\t */\r\n\t\tkeyboard : {\r\n\t\t\t'ctrl-space': function (e) {\r\n\t\t\t\t// aria defines space only with Ctrl\r\n\t\t\t\te.type = \"click\";\r\n\t\t\t\t$(e.currentTarget).trigger(e);\r\n\t\t\t},\r\n\t\t\t'enter': function (e) {\r\n\t\t\t\t// enter\r\n\t\t\t\te.type = \"click\";\r\n\t\t\t\t$(e.currentTarget).trigger(e);\r\n\t\t\t},\r\n\t\t\t'left': function (e) {\r\n\t\t\t\t// left\r\n\t\t\t\te.preventDefault();\r\n\t\t\t\tif(this.is_open(e.currentTarget)) {\r\n\t\t\t\t\tthis.close_node(e.currentTarget);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tvar o = this.get_parent(e.currentTarget);\r\n\t\t\t\t\tif(o && o.id !== $.jstree.root) { this.get_node(o, true).children('.jstree-anchor').focus(); }\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t'up': function (e) {\r\n\t\t\t\t// up\r\n\t\t\t\te.preventDefault();\r\n\t\t\t\tvar o = this.get_prev_dom(e.currentTarget);\r\n\t\t\t\tif(o && o.length) { o.children('.jstree-anchor').focus(); }\r\n\t\t\t},\r\n\t\t\t'right': function (e) {\r\n\t\t\t\t// right\r\n\t\t\t\te.preventDefault();\r\n\t\t\t\tif(this.is_closed(e.currentTarget)) {\r\n\t\t\t\t\tthis.open_node(e.currentTarget, function (o) { this.get_node(o, true).children('.jstree-anchor').focus(); });\r\n\t\t\t\t}\r\n\t\t\t\telse if (this.is_open(e.currentTarget)) {\r\n\t\t\t\t\tvar o = this.get_node(e.currentTarget, true).children('.jstree-children')[0];\r\n\t\t\t\t\tif(o) { $(this._firstChild(o)).children('.jstree-anchor').focus(); }\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t'down': function (e) {\r\n\t\t\t\t// down\r\n\t\t\t\te.preventDefault();\r\n\t\t\t\tvar o = this.get_next_dom(e.currentTarget);\r\n\t\t\t\tif(o && o.length) { o.children('.jstree-anchor').focus(); }\r\n\t\t\t},\r\n\t\t\t'*': function (e) {\r\n\t\t\t\t// aria defines * on numpad as open_all - not very common\r\n\t\t\t\tthis.open_all();\r\n\t\t\t},\r\n\t\t\t'home': function (e) {\r\n\t\t\t\t// home\r\n\t\t\t\te.preventDefault();\r\n\t\t\t\tvar o = this._firstChild(this.get_container_ul()[0]);\r\n\t\t\t\tif(o) { $(o).children('.jstree-anchor').filter(':visible').focus(); }\r\n\t\t\t},\r\n\t\t\t'end': function (e) {\r\n\t\t\t\t// end\r\n\t\t\t\te.preventDefault();\r\n\t\t\t\tthis.element.find('.jstree-anchor').filter(':visible').last().focus();\r\n\t\t\t},\r\n\t\t\t'f2': function (e) {\r\n\t\t\t\t// f2 - safe to include - if check_callback is false it will fail\r\n\t\t\t\te.preventDefault();\r\n\t\t\t\tthis.edit(e.currentTarget);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n    var Tree = jstree.Tree = langx.Evented.inherit({\r\n        klassName: \"Tree\",\r\n\r\n\t\t/**\r\n\t\t * used to decorate an instance with a plugin. Used internally.\r\n\t\t * @private\r\n\t\t * @name plugin(deco [, opts])\r\n\t\t * @param  {String} deco the plugin to decorate with\r\n\t\t * @param  {Object} opts options for the plugin\r\n\t\t * @return {jsTree}\r\n\t\t */\r\n\t\tplugin : function (deco, opts) {\r\n\t\t\tvar Child = $.jstree.plugins[deco];\r\n\t\t\tif(Child) {\r\n\t\t\t\tthis._data[deco] = {};\r\n\t\t\t\tChild.prototype = this;\r\n\t\t\t\treturn new Child(opts, this);\r\n\t\t\t}\r\n\t\t\treturn this;\r\n\t\t},\r\n\t\t/**\r\n\t\t * initialize the instance. Used internally.\r\n\t\t * @private\r\n\t\t * @name init(el, optons)\r\n\t\t * @param {DOMElement|jQuery|String} el the element we are transforming\r\n\t\t * @param {Object} options options for this instance\r\n\t\t * @trigger init.jstree, loading.jstree, loaded.jstree, ready.jstree, changed.jstree\r\n\t\t */\r\n\t\tinit : function (el, options) {\r\n\t\t\tthis._id = ++instance_counter;\r\n\t\t\tthis._cnt = 0;\r\n\t\t\tthis._wrk = null;\r\n\t\t\tthis._data = {\r\n\t\t\t\tcore : {\r\n\t\t\t\t\tthemes : {\r\n\t\t\t\t\t\tname : false,\r\n\t\t\t\t\t\tdots : false,\r\n\t\t\t\t\t\ticons : false,\r\n\t\t\t\t\t\tellipsis : false\r\n\t\t\t\t\t},\r\n\t\t\t\t\tselected : [],\r\n\t\t\t\t\tlast_error : {},\r\n\t\t\t\t\tworking : false,\r\n\t\t\t\t\tworker_queue : [],\r\n\t\t\t\t\tfocused : null\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tvar  opt = options,\r\n\t\t\t\ttmp = this;\r\n\t\t\toptions = $.extend(true, {}, $.jstree.defaults, options);\r\n\t\t\tif(opt && opt.plugins) {\r\n\t\t\t\toptions.plugins = opt.plugins;\r\n\t\t\t}\r\n\t\t\t$.each(options.plugins, function (i, k) {\r\n\t\t\t\tif(i !== 'core') {\r\n\t\t\t\t\ttmp = tmp.plugin(k, options[k]);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\t$(el).data('jstree', tmp);\r\n\r\n\t\t\ttmp._model = {\r\n\t\t\t\tdata : {},\r\n\t\t\t\tchanged : [],\r\n\t\t\t\tforce_full_redraw : false,\r\n\t\t\t\tredraw_timeout : false,\r\n\t\t\t\tdefault_state : {\r\n\t\t\t\t\tloaded : true,\r\n\t\t\t\t\topened : false,\r\n\t\t\t\t\tselected : false,\r\n\t\t\t\t\tdisabled : false\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\ttmp._model.data[$.jstree.root] = {\r\n\t\t\t\tid : $.jstree.root,\r\n\t\t\t\tparent : null,\r\n\t\t\t\tparents : [],\r\n\t\t\t\tchildren : [],\r\n\t\t\t\tchildren_d : [],\r\n\t\t\t\tstate : { loaded : false }\r\n\t\t\t};\r\n\r\n\t\t\ttmp.element = $(el).addClass('jstree jstree-' + tmp._id);\r\n\t\t\ttmp.settings = options;\r\n\r\n\t\t\ttmp._data.core.ready = false;\r\n\t\t\ttmp._data.core.loaded = false;\r\n\t\t\ttmp._data.core.rtl = (tmp.element.css(\"direction\") === \"rtl\");\r\n\t\t\ttmp.element[tmp._data.core.rtl ? 'addClass' : 'removeClass'](\"jstree-rtl\");\r\n\t\t\ttmp.element.attr('role','tree');\r\n\t\t\tif(tmp.settings.core.multiple) {\r\n\t\t\t\ttmp.element.attr('aria-multiselectable', true);\r\n\t\t\t}\r\n\t\t\tif(!tmp.element.attr('tabindex')) {\r\n\t\t\t\ttmp.element.attr('tabindex','0');\r\n\t\t\t}\r\n\r\n\t\t\ttmp.bind();\r\n\t\t\t/**\r\n\t\t\t * triggered after all events are bound\r\n\t\t\t * @event\r\n\t\t\t * @name init.jstree\r\n\t\t\t */\r\n\t\t\ttmp.trigger(\"init\");\r\n\r\n\t\t\ttmp._data.core.original_container_html = tmp.element.find(\" > ul > li\").clone(true);\r\n\t\t\ttmp._data.core.original_container_html\r\n\t\t\t\t.find(\"li\").addBack()\r\n\t\t\t\t.contents().filter(function() {\r\n\t\t\t\t\treturn this.nodeType === 3 && (!this.nodeValue || /^\\s+$/.test(this.nodeValue));\r\n\t\t\t\t})\r\n\t\t\t\t.remove();\r\n\t\t\ttmp.element.html(\"<\"+\"ul class='jstree-container-ul jstree-children' role='group'><\"+\"li id='j\"+tmp._id+\"_loading' class='jstree-initial-node jstree-loading jstree-leaf jstree-last' role='tree-item'><i class='jstree-icon jstree-ocl'></i><\"+\"a class='jstree-anchor' href='#'><i class='jstree-icon jstree-themeicon-hidden'></i>\" + tmp.get_string(\"Loading ...\") + \"</a></li></ul>\");\r\n\t\t\ttmp.element.attr('aria-activedescendant','j' + tmp._id + '_loading');\r\n\t\t\ttmp._data.core.li_height = tmp.get_container_ul().children(\"li\").first().outerHeight() || 24;\r\n\t\t\ttmp._data.core.node = tmp._create_prototype_node();\r\n\t\t\t/**\r\n\t\t\t * triggered after the loading text is shown and before loading starts\r\n\t\t\t * @event\r\n\t\t\t * @name loading.jstree\r\n\t\t\t */\r\n\t\t\ttmp.trigger(\"loading\");\r\n\t\t\ttmp.load_node($.jstree.root);\r\n\t\t\treturn tmp;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * destroy an instance\r\n\t\t * @name destroy()\r\n\t\t * @param  {Boolean} keep_html if not set to `true` the container will be emptied, otherwise the current DOM elements will be kept intact\r\n\t\t */\r\n\t\tdestroy : function (keep_html) {\r\n\t\t\t/**\r\n\t\t\t * triggered before the tree is destroyed\r\n\t\t\t * @event\r\n\t\t\t * @name destroy.jstree\r\n\t\t\t */\r\n\t\t\ttmp.trigger(\"destroy\");\r\n\t\t\tif(this._wrk) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\twindow.URL.revokeObjectURL(this._wrk);\r\n\t\t\t\t\tthis._wrk = null;\r\n\t\t\t\t}\r\n\t\t\t\tcatch (ignore) { }\r\n\t\t\t}\r\n\t\t\tif(!keep_html) { this.element.empty(); }\r\n\t\t\tthis.teardown();\r\n\t\t},\r\n\t\t/**\r\n\t\t * Create a prototype node\r\n\t\t * @name _create_prototype_node()\r\n\t\t * @return {DOMElement}\r\n\t\t */\r\n\t\t_create_prototype_node : function () {\r\n\t\t\tvar _node = document.createElement('LI'), _temp1, _temp2;\r\n\t\t\t_node.setAttribute('role', 'treeitem');\r\n\t\t\t_temp1 = document.createElement('I');\r\n\t\t\t_temp1.className = 'jstree-icon jstree-ocl';\r\n\t\t\t_temp1.setAttribute('role', 'presentation');\r\n\t\t\t_node.appendChild(_temp1);\r\n\t\t\t_temp1 = document.createElement('A');\r\n\t\t\t_temp1.className = 'jstree-anchor';\r\n\t\t\t_temp1.setAttribute('href','#');\r\n\t\t\t_temp1.setAttribute('tabindex','-1');\r\n\t\t\t_temp2 = document.createElement('I');\r\n\t\t\t_temp2.className = 'jstree-icon jstree-themeicon';\r\n\t\t\t_temp2.setAttribute('role', 'presentation');\r\n\t\t\t_temp1.appendChild(_temp2);\r\n\t\t\t_node.appendChild(_temp1);\r\n\t\t\t_temp1 = _temp2 = null;\r\n\r\n\t\t\treturn _node;\r\n\t\t},\r\n\t\t_kbevent_to_func : function (e) {\r\n\t\t\tvar keys = {\r\n\t\t\t\t8: \"Backspace\", 9: \"Tab\", 13: \"Return\", 19: \"Pause\", 27: \"Esc\",\r\n\t\t\t\t32: \"Space\", 33: \"PageUp\", 34: \"PageDown\", 35: \"End\", 36: \"Home\",\r\n\t\t\t\t37: \"Left\", 38: \"Up\", 39: \"Right\", 40: \"Down\", 44: \"Print\", 45: \"Insert\",\r\n\t\t\t\t46: \"Delete\", 96: \"Numpad0\", 97: \"Numpad1\", 98: \"Numpad2\", 99 : \"Numpad3\",\r\n\t\t\t\t100: \"Numpad4\", 101: \"Numpad5\", 102: \"Numpad6\", 103: \"Numpad7\",\r\n\t\t\t\t104: \"Numpad8\", 105: \"Numpad9\", '-13': \"NumpadEnter\", 112: \"F1\",\r\n\t\t\t\t113: \"F2\", 114: \"F3\", 115: \"F4\", 116: \"F5\", 117: \"F6\", 118: \"F7\",\r\n\t\t\t\t119: \"F8\", 120: \"F9\", 121: \"F10\", 122: \"F11\", 123: \"F12\", 144: \"Numlock\",\r\n\t\t\t\t145: \"Scrolllock\", 16: 'Shift', 17: 'Ctrl', 18: 'Alt',\r\n\t\t\t\t48: '0',  49: '1',  50: '2',  51: '3',  52: '4', 53:  '5',\r\n\t\t\t\t54: '6',  55: '7',  56: '8',  57: '9',  59: ';',  61: '=', 65:  'a',\r\n\t\t\t\t66: 'b',  67: 'c',  68: 'd',  69: 'e',  70: 'f',  71: 'g', 72:  'h',\r\n\t\t\t\t73: 'i',  74: 'j',  75: 'k',  76: 'l',  77: 'm',  78: 'n', 79:  'o',\r\n\t\t\t\t80: 'p',  81: 'q',  82: 'r',  83: 's',  84: 't',  85: 'u', 86:  'v',\r\n\t\t\t\t87: 'w',  88: 'x',  89: 'y',  90: 'z', 107: '+', 109: '-', 110: '.',\r\n\t\t\t\t186: ';', 187: '=', 188: ',', 189: '-', 190: '.', 191: '/', 192: '`',\r\n\t\t\t\t219: '[', 220: '\\\\',221: ']', 222: \"'\", 111: '/', 106: '*', 173: '-'\r\n\t\t\t};\r\n\t\t\tvar parts = [];\r\n\t\t\tif (e.ctrlKey) { parts.push('ctrl'); }\r\n\t\t\tif (e.altKey) { parts.push('alt'); }\r\n\t\t\tif (e.shiftKey) { parts.push('shift'); }\r\n\t\t\tparts.push(keys[e.which] || e.which);\r\n\t\t\tparts = parts.sort().join('-').toLowerCase();\r\n\r\n\t\t\tvar kb = this.settings.core.keyboard, i, tmp;\r\n\t\t\tfor (i in kb) {\r\n\t\t\t\tif (kb.hasOwnProperty(i)) {\r\n\t\t\t\t\ttmp = i;\r\n\t\t\t\t\tif (tmp !== '-' && tmp !== '+') {\r\n\t\t\t\t\t\ttmp = tmp.replace('--', '-MINUS').replace('+-', '-MINUS').replace('++', '-PLUS').replace('-+', '-PLUS');\r\n\t\t\t\t\t\ttmp = tmp.split(/-|\\+/).sort().join('-').replace('MINUS', '-').replace('PLUS', '+').toLowerCase();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (tmp === parts) {\r\n\t\t\t\t\t\treturn kb[i];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t},\r\n\t\t/**\r\n\t\t * part of the destroying of an instance. Used internally.\r\n\t\t * @private\r\n\t\t * @name teardown()\r\n\t\t */\r\n\t\tteardown : function () {\r\n\t\t\tthis.unbind();\r\n\t\t\tthis.element\r\n\t\t\t\t.removeClass('jstree')\r\n\t\t\t\t.removeData('jstree')\r\n\t\t\t\t.find(\"[class^='jstree']\")\r\n\t\t\t\t\t.addBack()\r\n\t\t\t\t\t.attr(\"class\", function () { return this.className.replace(/jstree[^ ]*|$/ig,''); });\r\n\t\t\tthis.element = null;\r\n\t\t},\r\n\t\t/**\r\n\t\t * bind all events. Used internally.\r\n\t\t * @private\r\n\t\t * @name bind()\r\n\t\t */\r\n\t\tbind : function () {\r\n\t\t\tvar word = '',\r\n\t\t\t\ttout = null,\r\n\t\t\t\twas_click = 0;\r\n\t\t\tthis.element\r\n\t\t\t\t.on(\"dblclick.jstree\", function (e) {\r\n\t\t\t\t\t\tif(e.target.tagName && e.target.tagName.toLowerCase() === \"input\") { return true; }\r\n\t\t\t\t\t\tif(document.selection && document.selection.empty) {\r\n\t\t\t\t\t\t\tdocument.selection.empty();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tif(window.getSelection) {\r\n\t\t\t\t\t\t\t\tvar sel = window.getSelection();\r\n\t\t\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\t\t\tsel.removeAllRanges();\r\n\t\t\t\t\t\t\t\t\tsel.collapse();\r\n\t\t\t\t\t\t\t\t} catch (ignore) { }\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t\t.on(\"mousedown.jstree\", $.proxy(function (e) {\r\n\t\t\t\t\t\tif(e.target === this.element[0]) {\r\n\t\t\t\t\t\t\te.preventDefault(); // prevent losing focus when clicking scroll arrows (FF, Chrome)\r\n\t\t\t\t\t\t\twas_click = +(new Date()); // ie does not allow to prevent losing focus\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on(\"mousedown.jstree\", \".jstree-ocl\", function (e) {\r\n\t\t\t\t\t\te.preventDefault(); // prevent any node inside from losing focus when clicking the open/close icon\r\n\t\t\t\t\t})\r\n\t\t\t\t.on(\"click.jstree\", \".jstree-ocl\", $.proxy(function (e) {\r\n\t\t\t\t\t\tthis.toggle_node(e.target);\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on(\"dblclick.jstree\", \".jstree-anchor\", $.proxy(function (e) {\r\n\t\t\t\t\t\tif(e.target.tagName && e.target.tagName.toLowerCase() === \"input\") { return true; }\r\n\t\t\t\t\t\tif(this.settings.core.dblclick_toggle) {\r\n\t\t\t\t\t\t\tthis.toggle_node(e.target);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on(\"click.jstree\", \".jstree-anchor\", $.proxy(function (e) {\r\n\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\tif(e.currentTarget !== document.activeElement) { $(e.currentTarget).focus(); }\r\n\t\t\t\t\t\tthis.activate_node(e.currentTarget, e);\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on('keydown.jstree', '.jstree-anchor', $.proxy(function (e) {\r\n\t\t\t\t\t\tif(e.target.tagName && e.target.tagName.toLowerCase() === \"input\") { return true; }\r\n\t\t\t\t\t\tif(this._data.core.rtl) {\r\n\t\t\t\t\t\t\tif(e.which === 37) { e.which = 39; }\r\n\t\t\t\t\t\t\telse if(e.which === 39) { e.which = 37; }\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tvar f = this._kbevent_to_func(e);\r\n\t\t\t\t\t\tif (f) {\r\n\t\t\t\t\t\t\tvar r = f.call(this, e);\r\n\t\t\t\t\t\t\tif (r === false || r === true) {\r\n\t\t\t\t\t\t\t\treturn r;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on(\"load_node.jstree\", $.proxy(function (e, data) {\r\n\t\t\t\t\t\tif(data.status) {\r\n\t\t\t\t\t\t\tif(data.node.id === $.jstree.root && !this._data.core.loaded) {\r\n\t\t\t\t\t\t\t\tthis._data.core.loaded = true;\r\n\t\t\t\t\t\t\t\tif(this._firstChild(this.get_container_ul()[0])) {\r\n\t\t\t\t\t\t\t\t\tthis.element.attr('aria-activedescendant',this._firstChild(this.get_container_ul()[0]).id);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t/**\r\n\t\t\t\t\t\t\t\t * triggered after the root node is loaded for the first time\r\n\t\t\t\t\t\t\t\t * @event\r\n\t\t\t\t\t\t\t\t * @name loaded.jstree\r\n\t\t\t\t\t\t\t\t */\r\n\t\t\t\t\t\t\t\tthis.trigger(\"loaded\");\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(!this._data.core.ready) {\r\n\t\t\t\t\t\t\t\tsetTimeout($.proxy(function() {\r\n\t\t\t\t\t\t\t\t\tif(this.element && !this.get_container_ul().find('.jstree-loading').length) {\r\n\t\t\t\t\t\t\t\t\t\tthis._data.core.ready = true;\r\n\t\t\t\t\t\t\t\t\t\tif(this._data.core.selected.length) {\r\n\t\t\t\t\t\t\t\t\t\t\tif(this.settings.core.expand_selected_onload) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tvar tmp = [], i, j;\r\n\t\t\t\t\t\t\t\t\t\t\t\tfor(i = 0, j = this._data.core.selected.length; i < j; i++) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\ttmp = tmp.concat(this._model.data[this._data.core.selected[i]].parents);\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\ttmp = $.vakata.array_unique(tmp);\r\n\t\t\t\t\t\t\t\t\t\t\t\tfor(i = 0, j = tmp.length; i < j; i++) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tthis.open_node(tmp[i], false, 0);\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\tthis.trigger('changed', { 'action' : 'ready', 'selected' : this._data.core.selected });\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t/**\r\n\t\t\t\t\t\t\t\t\t\t * triggered after all nodes are finished loading\r\n\t\t\t\t\t\t\t\t\t\t * @event\r\n\t\t\t\t\t\t\t\t\t\t * @name ready.jstree\r\n\t\t\t\t\t\t\t\t\t\t */\r\n\t\t\t\t\t\t\t\t\t\tthis.trigger(\"ready\");\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}, this), 0);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t// quick searching when the tree is focused\r\n\t\t\t\t.on('keypress.jstree', $.proxy(function (e) {\r\n\t\t\t\t\t\tif(e.target.tagName && e.target.tagName.toLowerCase() === \"input\") { return true; }\r\n\t\t\t\t\t\tif(tout) { clearTimeout(tout); }\r\n\t\t\t\t\t\ttout = setTimeout(function () {\r\n\t\t\t\t\t\t\tword = '';\r\n\t\t\t\t\t\t}, 500);\r\n\r\n\t\t\t\t\t\tvar chr = String.fromCharCode(e.which).toLowerCase(),\r\n\t\t\t\t\t\t\tcol = this.element.find('.jstree-anchor').filter(':visible'),\r\n\t\t\t\t\t\t\tind = col.index(document.activeElement) || 0,\r\n\t\t\t\t\t\t\tend = false;\r\n\t\t\t\t\t\tword += chr;\r\n\r\n\t\t\t\t\t\t// match for whole word from current node down (including the current node)\r\n\t\t\t\t\t\tif(word.length > 1) {\r\n\t\t\t\t\t\t\tcol.slice(ind).each($.proxy(function (i, v) {\r\n\t\t\t\t\t\t\t\tif($(v).text().toLowerCase().indexOf(word) === 0) {\r\n\t\t\t\t\t\t\t\t\t$(v).focus();\r\n\t\t\t\t\t\t\t\t\tend = true;\r\n\t\t\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}, this));\r\n\t\t\t\t\t\t\tif(end) { return; }\r\n\r\n\t\t\t\t\t\t\t// match for whole word from the beginning of the tree\r\n\t\t\t\t\t\t\tcol.slice(0, ind).each($.proxy(function (i, v) {\r\n\t\t\t\t\t\t\t\tif($(v).text().toLowerCase().indexOf(word) === 0) {\r\n\t\t\t\t\t\t\t\t\t$(v).focus();\r\n\t\t\t\t\t\t\t\t\tend = true;\r\n\t\t\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}, this));\r\n\t\t\t\t\t\t\tif(end) { return; }\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// list nodes that start with that letter (only if word consists of a single char)\r\n\t\t\t\t\t\tif(new RegExp('^' + chr.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&') + '+$').test(word)) {\r\n\t\t\t\t\t\t\t// search for the next node starting with that letter\r\n\t\t\t\t\t\t\tcol.slice(ind + 1).each($.proxy(function (i, v) {\r\n\t\t\t\t\t\t\t\tif($(v).text().toLowerCase().charAt(0) === chr) {\r\n\t\t\t\t\t\t\t\t\t$(v).focus();\r\n\t\t\t\t\t\t\t\t\tend = true;\r\n\t\t\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}, this));\r\n\t\t\t\t\t\t\tif(end) { return; }\r\n\r\n\t\t\t\t\t\t\t// search from the beginning\r\n\t\t\t\t\t\t\tcol.slice(0, ind + 1).each($.proxy(function (i, v) {\r\n\t\t\t\t\t\t\t\tif($(v).text().toLowerCase().charAt(0) === chr) {\r\n\t\t\t\t\t\t\t\t\t$(v).focus();\r\n\t\t\t\t\t\t\t\t\tend = true;\r\n\t\t\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}, this));\r\n\t\t\t\t\t\t\tif(end) { return; }\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t// THEME RELATED\r\n\t\t\t\t.on(\"init.jstree\", $.proxy(function () {\r\n\t\t\t\t\t\tvar s = this.settings.core.themes;\r\n\t\t\t\t\t\tthis._data.core.themes.dots\t\t\t= s.dots;\r\n\t\t\t\t\t\tthis._data.core.themes.stripes\t\t= s.stripes;\r\n\t\t\t\t\t\tthis._data.core.themes.icons\t\t= s.icons;\r\n\t\t\t\t\t\tthis._data.core.themes.ellipsis\t\t= s.ellipsis;\r\n\t\t\t\t\t\tthis.set_theme(s.name || \"default\", s.url);\r\n\t\t\t\t\t\tthis.set_theme_variant(s.variant);\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on(\"loading.jstree\", $.proxy(function () {\r\n\t\t\t\t\t\tthis[ this._data.core.themes.dots ? \"show_dots\" : \"hide_dots\" ]();\r\n\t\t\t\t\t\tthis[ this._data.core.themes.icons ? \"show_icons\" : \"hide_icons\" ]();\r\n\t\t\t\t\t\tthis[ this._data.core.themes.stripes ? \"show_stripes\" : \"hide_stripes\" ]();\r\n\t\t\t\t\t\tthis[ this._data.core.themes.ellipsis ? \"show_ellipsis\" : \"hide_ellipsis\" ]();\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on('blur.jstree', '.jstree-anchor', $.proxy(function (e) {\r\n\t\t\t\t\t\tthis._data.core.focused = null;\r\n\t\t\t\t\t\t$(e.currentTarget).filter('.jstree-hovered').mouseleave();\r\n\t\t\t\t\t\tthis.element.attr('tabindex', '0');\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on('focus.jstree', '.jstree-anchor', $.proxy(function (e) {\r\n\t\t\t\t\t\tvar tmp = this.get_node(e.currentTarget);\r\n\t\t\t\t\t\tif(tmp && tmp.id) {\r\n\t\t\t\t\t\t\tthis._data.core.focused = tmp.id;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tthis.element.find('.jstree-hovered').not(e.currentTarget).mouseleave();\r\n\t\t\t\t\t\t$(e.currentTarget).mouseenter();\r\n\t\t\t\t\t\tthis.element.attr('tabindex', '-1');\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on('focus.jstree', $.proxy(function () {\r\n\t\t\t\t\t\tif(+(new Date()) - was_click > 500 && !this._data.core.focused && this.settings.core.restore_focus) {\r\n\t\t\t\t\t\t\twas_click = 0;\r\n\t\t\t\t\t\t\tvar act = this.get_node(this.element.attr('aria-activedescendant'), true);\r\n\t\t\t\t\t\t\tif(act) {\r\n\t\t\t\t\t\t\t\tact.find('> .jstree-anchor').focus();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on('mouseenter.jstree', '.jstree-anchor', $.proxy(function (e) {\r\n\t\t\t\t\t\tthis.hover_node(e.currentTarget);\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on('mouseleave.jstree', '.jstree-anchor', $.proxy(function (e) {\r\n\t\t\t\t\t\tthis.dehover_node(e.currentTarget);\r\n\t\t\t\t\t}, this));\r\n\t\t},\r\n\t\t/**\r\n\t\t * part of the destroying of an instance. Used internally.\r\n\t\t * @private\r\n\t\t * @name unbind()\r\n\t\t */\r\n\t\tunbind : function () {\r\n\t\t\tthis.element.off('.jstree');\r\n\t\t\t$(document).off('.jstree-' + this._id);\r\n\t\t},\r\n\t\t/**\r\n\t\t * trigger an event. Used internally.\r\n\t\t * @private\r\n\t\t * @name trigger(ev [, data])\r\n\t\t * @param  {String} ev the name of the event to trigger\r\n\t\t * @param  {Object} data additional data to pass with the event\r\n\t\t */\r\n\t\ttrigger : function (ev, data) {\r\n\t\t\tif(!data) {\r\n\t\t\t\tdata = {};\r\n\t\t\t}\r\n\t\t\tdata.instance = this;\r\n\t\t\tthis.element.trigger(ev.replace('.jstree','') + '.jstree', data);\r\n\t\t},\r\n\t\t/**\r\n\t\t * returns the jQuery extended instance container\r\n\t\t * @name get_container()\r\n\t\t * @return {jQuery}\r\n\t\t */\r\n\t\tget_container : function () {\r\n\t\t\treturn this.element;\r\n\t\t},\r\n\t\t/**\r\n\t\t * returns the jQuery extended main UL node inside the instance container. Used internally.\r\n\t\t * @private\r\n\t\t * @name get_container_ul()\r\n\t\t * @return {jQuery}\r\n\t\t */\r\n\t\tget_container_ul : function () {\r\n\t\t\treturn this.element.children(\".jstree-children\").first();\r\n\t\t},\r\n\t\t/**\r\n\t\t * gets string replacements (localization). Used internally.\r\n\t\t * @private\r\n\t\t * @name get_string(key)\r\n\t\t * @param  {String} key\r\n\t\t * @return {String}\r\n\t\t */\r\n\t\tget_string : function (key) {\r\n\t\t\tvar a = this.settings.core.strings;\r\n\t\t\tif($.isFunction(a)) { return a.call(this, key); }\r\n\t\t\tif(a && a[key]) { return a[key]; }\r\n\t\t\treturn key;\r\n\t\t},\r\n\t\t/**\r\n\t\t * gets the first child of a DOM node. Used internally.\r\n\t\t * @private\r\n\t\t * @name _firstChild(dom)\r\n\t\t * @param  {DOMElement} dom\r\n\t\t * @return {DOMElement}\r\n\t\t */\r\n\t\t_firstChild : function (dom) {\r\n\t\t\tdom = dom ? dom.firstChild : null;\r\n\t\t\twhile(dom !== null && dom.nodeType !== 1) {\r\n\t\t\t\tdom = dom.nextSibling;\r\n\t\t\t}\r\n\t\t\treturn dom;\r\n\t\t},\r\n\t\t/**\r\n\t\t * gets the next sibling of a DOM node. Used internally.\r\n\t\t * @private\r\n\t\t * @name _nextSibling(dom)\r\n\t\t * @param  {DOMElement} dom\r\n\t\t * @return {DOMElement}\r\n\t\t */\r\n\t\t_nextSibling : function (dom) {\r\n\t\t\tdom = dom ? dom.nextSibling : null;\r\n\t\t\twhile(dom !== null && dom.nodeType !== 1) {\r\n\t\t\t\tdom = dom.nextSibling;\r\n\t\t\t}\r\n\t\t\treturn dom;\r\n\t\t},\r\n\t\t/**\r\n\t\t * gets the previous sibling of a DOM node. Used internally.\r\n\t\t * @private\r\n\t\t * @name _previousSibling(dom)\r\n\t\t * @param  {DOMElement} dom\r\n\t\t * @return {DOMElement}\r\n\t\t */\r\n\t\t_previousSibling : function (dom) {\r\n\t\t\tdom = dom ? dom.previousSibling : null;\r\n\t\t\twhile(dom !== null && dom.nodeType !== 1) {\r\n\t\t\t\tdom = dom.previousSibling;\r\n\t\t\t}\r\n\t\t\treturn dom;\r\n\t\t},\r\n\t\t/**\r\n\t\t * get the JSON representation of a node (or the actual jQuery extended DOM node) by using any input (child DOM element, ID string, selector, etc)\r\n\t\t * @name get_node(obj [, as_dom])\r\n\t\t * @param  {mixed} obj\r\n\t\t * @param  {Boolean} as_dom\r\n\t\t * @return {Object|jQuery}\r\n\t\t */\r\n\t\tget_node : function (obj, as_dom) {\r\n\t\t\tif(obj && obj.id) {\r\n\t\t\t\tobj = obj.id;\r\n\t\t\t}\r\n\t\t\tvar dom;\r\n\t\t\ttry {\r\n\t\t\t\tif(this._model.data[obj]) {\r\n\t\t\t\t\tobj = this._model.data[obj];\r\n\t\t\t\t}\r\n\t\t\t\telse if(typeof obj === \"string\" && this._model.data[obj.replace(/^#/, '')]) {\r\n\t\t\t\t\tobj = this._model.data[obj.replace(/^#/, '')];\r\n\t\t\t\t}\r\n\t\t\t\telse if(typeof obj === \"string\" && (dom = $('#' + obj.replace($.jstree.idregex,'\\\\$&'), this.element)).length && this._model.data[dom.closest('.jstree-node').attr('id')]) {\r\n\t\t\t\t\tobj = this._model.data[dom.closest('.jstree-node').attr('id')];\r\n\t\t\t\t}\r\n\t\t\t\telse if((dom = $(obj, this.element)).length && this._model.data[dom.closest('.jstree-node').attr('id')]) {\r\n\t\t\t\t\tobj = this._model.data[dom.closest('.jstree-node').attr('id')];\r\n\t\t\t\t}\r\n\t\t\t\telse if((dom = $(obj, this.element)).length && dom.hasClass('jstree')) {\r\n\t\t\t\t\tobj = this._model.data[$.jstree.root];\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(as_dom) {\r\n\t\t\t\t\tobj = obj.id === $.jstree.root ? this.element : $('#' + obj.id.replace($.jstree.idregex,'\\\\$&'), this.element);\r\n\t\t\t\t}\r\n\t\t\t\treturn obj;\r\n\t\t\t} catch (ex) { return false; }\r\n\t\t},\r\n\t\t/**\r\n\t\t * get the path to a node, either consisting of node texts, or of node IDs, optionally glued together (otherwise an array)\r\n\t\t * @name get_path(obj [, glue, ids])\r\n\t\t * @param  {mixed} obj the node\r\n\t\t * @param  {String} glue if you want the path as a string - pass the glue here (for example '/'), if a falsy value is supplied here, an array is returned\r\n\t\t * @param  {Boolean} ids if set to true build the path using ID, otherwise node text is used\r\n\t\t * @return {mixed}\r\n\t\t */\r\n\t\tget_path : function (obj, glue, ids) {\r\n\t\t\tobj = obj.parents ? obj : this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root || !obj.parents) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tvar i, j, p = [];\r\n\t\t\tp.push(ids ? obj.id : obj.text);\r\n\t\t\tfor(i = 0, j = obj.parents.length; i < j; i++) {\r\n\t\t\t\tp.push(ids ? obj.parents[i] : this.get_text(obj.parents[i]));\r\n\t\t\t}\r\n\t\t\tp = p.reverse().slice(1);\r\n\t\t\treturn glue ? p.join(glue) : p;\r\n\t\t},\r\n\t\t/**\r\n\t\t * get the next visible node that is below the `obj` node. If `strict` is set to `true` only sibling nodes are returned.\r\n\t\t * @name get_next_dom(obj [, strict])\r\n\t\t * @param  {mixed} obj\r\n\t\t * @param  {Boolean} strict\r\n\t\t * @return {jQuery}\r\n\t\t */\r\n\t\tget_next_dom : function (obj, strict) {\r\n\t\t\tvar tmp;\r\n\t\t\tobj = this.get_node(obj, true);\r\n\t\t\tif(obj[0] === this.element[0]) {\r\n\t\t\t\ttmp = this._firstChild(this.get_container_ul()[0]);\r\n\t\t\t\twhile (tmp && tmp.offsetHeight === 0) {\r\n\t\t\t\t\ttmp = this._nextSibling(tmp);\r\n\t\t\t\t}\r\n\t\t\t\treturn tmp ? $(tmp) : false;\r\n\t\t\t}\r\n\t\t\tif(!obj || !obj.length) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif(strict) {\r\n\t\t\t\ttmp = obj[0];\r\n\t\t\t\tdo {\r\n\t\t\t\t\ttmp = this._nextSibling(tmp);\r\n\t\t\t\t} while (tmp && tmp.offsetHeight === 0);\r\n\t\t\t\treturn tmp ? $(tmp) : false;\r\n\t\t\t}\r\n\t\t\tif(obj.hasClass(\"jstree-open\")) {\r\n\t\t\t\ttmp = this._firstChild(obj.children('.jstree-children')[0]);\r\n\t\t\t\twhile (tmp && tmp.offsetHeight === 0) {\r\n\t\t\t\t\ttmp = this._nextSibling(tmp);\r\n\t\t\t\t}\r\n\t\t\t\tif(tmp !== null) {\r\n\t\t\t\t\treturn $(tmp);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\ttmp = obj[0];\r\n\t\t\tdo {\r\n\t\t\t\ttmp = this._nextSibling(tmp);\r\n\t\t\t} while (tmp && tmp.offsetHeight === 0);\r\n\t\t\tif(tmp !== null) {\r\n\t\t\t\treturn $(tmp);\r\n\t\t\t}\r\n\t\t\treturn obj.parentsUntil(\".jstree\",\".jstree-node\").nextAll(\".jstree-node:visible\").first();\r\n\t\t},\r\n\t\t/**\r\n\t\t * get the previous visible node that is above the `obj` node. If `strict` is set to `true` only sibling nodes are returned.\r\n\t\t * @name get_prev_dom(obj [, strict])\r\n\t\t * @param  {mixed} obj\r\n\t\t * @param  {Boolean} strict\r\n\t\t * @return {jQuery}\r\n\t\t */\r\n\t\tget_prev_dom : function (obj, strict) {\r\n\t\t\tvar tmp;\r\n\t\t\tobj = this.get_node(obj, true);\r\n\t\t\tif(obj[0] === this.element[0]) {\r\n\t\t\t\ttmp = this.get_container_ul()[0].lastChild;\r\n\t\t\t\twhile (tmp && tmp.offsetHeight === 0) {\r\n\t\t\t\t\ttmp = this._previousSibling(tmp);\r\n\t\t\t\t}\r\n\t\t\t\treturn tmp ? $(tmp) : false;\r\n\t\t\t}\r\n\t\t\tif(!obj || !obj.length) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif(strict) {\r\n\t\t\t\ttmp = obj[0];\r\n\t\t\t\tdo {\r\n\t\t\t\t\ttmp = this._previousSibling(tmp);\r\n\t\t\t\t} while (tmp && tmp.offsetHeight === 0);\r\n\t\t\t\treturn tmp ? $(tmp) : false;\r\n\t\t\t}\r\n\t\t\ttmp = obj[0];\r\n\t\t\tdo {\r\n\t\t\t\ttmp = this._previousSibling(tmp);\r\n\t\t\t} while (tmp && tmp.offsetHeight === 0);\r\n\t\t\tif(tmp !== null) {\r\n\t\t\t\tobj = $(tmp);\r\n\t\t\t\twhile(obj.hasClass(\"jstree-open\")) {\r\n\t\t\t\t\tobj = obj.children(\".jstree-children\").first().children(\".jstree-node:visible:last\");\r\n\t\t\t\t}\r\n\t\t\t\treturn obj;\r\n\t\t\t}\r\n\t\t\ttmp = obj[0].parentNode.parentNode;\r\n\t\t\treturn tmp && tmp.className && tmp.className.indexOf('jstree-node') !== -1 ? $(tmp) : false;\r\n\t\t},\r\n\t\t/**\r\n\t\t * get the parent ID of a node\r\n\t\t * @name get_parent(obj)\r\n\t\t * @param  {mixed} obj\r\n\t\t * @return {String}\r\n\t\t */\r\n\t\tget_parent : function (obj) {\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\treturn obj.parent;\r\n\t\t},\r\n\t\t/**\r\n\t\t * get a jQuery collection of all the children of a node (node must be rendered), returns false on error\r\n\t\t * @name get_children_dom(obj)\r\n\t\t * @param  {mixed} obj\r\n\t\t * @return {jQuery}\r\n\t\t */\r\n\t\tget_children_dom : function (obj) {\r\n\t\t\tobj = this.get_node(obj, true);\r\n\t\t\tif(obj[0] === this.element[0]) {\r\n\t\t\t\treturn this.get_container_ul().children(\".jstree-node\");\r\n\t\t\t}\r\n\t\t\tif(!obj || !obj.length) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\treturn obj.children(\".jstree-children\").children(\".jstree-node\");\r\n\t\t},\r\n\t\t/**\r\n\t\t * checks if a node has children\r\n\t\t * @name is_parent(obj)\r\n\t\t * @param  {mixed} obj\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tis_parent : function (obj) {\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\treturn obj && (obj.state.loaded === false || obj.children.length > 0);\r\n\t\t},\r\n\t\t/**\r\n\t\t * checks if a node is loaded (its children are available)\r\n\t\t * @name is_loaded(obj)\r\n\t\t * @param  {mixed} obj\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tis_loaded : function (obj) {\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\treturn obj && obj.state.loaded;\r\n\t\t},\r\n\t\t/**\r\n\t\t * check if a node is currently loading (fetching children)\r\n\t\t * @name is_loading(obj)\r\n\t\t * @param  {mixed} obj\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tis_loading : function (obj) {\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\treturn obj && obj.state && obj.state.loading;\r\n\t\t},\r\n\t\t/**\r\n\t\t * check if a node is opened\r\n\t\t * @name is_open(obj)\r\n\t\t * @param  {mixed} obj\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tis_open : function (obj) {\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\treturn obj && obj.state.opened;\r\n\t\t},\r\n\t\t/**\r\n\t\t * check if a node is in a closed state\r\n\t\t * @name is_closed(obj)\r\n\t\t * @param  {mixed} obj\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tis_closed : function (obj) {\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\treturn obj && this.is_parent(obj) && !obj.state.opened;\r\n\t\t},\r\n\t\t/**\r\n\t\t * check if a node has no children\r\n\t\t * @name is_leaf(obj)\r\n\t\t * @param  {mixed} obj\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tis_leaf : function (obj) {\r\n\t\t\treturn !this.is_parent(obj);\r\n\t\t},\r\n\t\t/**\r\n\t\t * loads a node (fetches its children using the `core.data` setting). Multiple nodes can be passed to by using an array.\r\n\t\t * @name load_node(obj [, callback])\r\n\t\t * @param  {mixed} obj\r\n\t\t * @param  {function} callback a function to be executed once loading is complete, the function is executed in the instance's scope and receives two arguments - the node and a boolean status\r\n\t\t * @return {Boolean}\r\n\t\t * @trigger load_node.jstree\r\n\t\t */\r\n\t\tload_node : function (obj, callback) {\r\n\t\t\tvar k, l, i, j, c;\r\n\t\t\tif($.isArray(obj)) {\r\n\t\t\t\tthis._load_nodes(obj.slice(), callback);\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj) {\r\n\t\t\t\tif(callback) { callback.call(this, obj, false); }\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t// if(obj.state.loading) { } // the node is already loading - just wait for it to load and invoke callback? but if called implicitly it should be loaded again?\r\n\t\t\tif(obj.state.loaded) {\r\n\t\t\t\tobj.state.loaded = false;\r\n\t\t\t\tfor(i = 0, j = obj.parents.length; i < j; i++) {\r\n\t\t\t\t\tthis._model.data[obj.parents[i]].children_d = $.vakata.array_filter(this._model.data[obj.parents[i]].children_d, function (v) {\r\n\t\t\t\t\t\treturn $.inArray(v, obj.children_d) === -1;\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tfor(k = 0, l = obj.children_d.length; k < l; k++) {\r\n\t\t\t\t\tif(this._model.data[obj.children_d[k]].state.selected) {\r\n\t\t\t\t\t\tc = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdelete this._model.data[obj.children_d[k]];\r\n\t\t\t\t}\r\n\t\t\t\tif (c) {\r\n\t\t\t\t\tthis._data.core.selected = $.vakata.array_filter(this._data.core.selected, function (v) {\r\n\t\t\t\t\t\treturn $.inArray(v, obj.children_d) === -1;\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tobj.children = [];\r\n\t\t\t\tobj.children_d = [];\r\n\t\t\t\tif(c) {\r\n\t\t\t\t\tthis.trigger('changed', { 'action' : 'load_node', 'node' : obj, 'selected' : this._data.core.selected });\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tobj.state.failed = false;\r\n\t\t\tobj.state.loading = true;\r\n\t\t\tthis.get_node(obj, true).addClass(\"jstree-loading\").attr('aria-busy',true);\r\n\t\t\tthis._load_node(obj, $.proxy(function (status) {\r\n\t\t\t\tobj = this._model.data[obj.id];\r\n\t\t\t\tobj.state.loading = false;\r\n\t\t\t\tobj.state.loaded = status;\r\n\t\t\t\tobj.state.failed = !obj.state.loaded;\r\n\t\t\t\tvar dom = this.get_node(obj, true), i = 0, j = 0, m = this._model.data, has_children = false;\r\n\t\t\t\tfor(i = 0, j = obj.children.length; i < j; i++) {\r\n\t\t\t\t\tif(m[obj.children[i]] && !m[obj.children[i]].state.hidden) {\r\n\t\t\t\t\t\thas_children = true;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif(obj.state.loaded && dom && dom.length) {\r\n\t\t\t\t\tdom.removeClass('jstree-closed jstree-open jstree-leaf');\r\n\t\t\t\t\tif (!has_children) {\r\n\t\t\t\t\t\tdom.addClass('jstree-leaf');\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tif (obj.id !== '#') {\r\n\t\t\t\t\t\t\tdom.addClass(obj.state.opened ? 'jstree-open' : 'jstree-closed');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.removeClass(\"jstree-loading\").attr('aria-busy',false);\r\n\t\t\t\t/**\r\n\t\t\t\t * triggered after a node is loaded\r\n\t\t\t\t * @event\r\n\t\t\t\t * @name load_node.jstree\r\n\t\t\t\t * @param {Object} node the node that was loading\r\n\t\t\t\t * @param {Boolean} status was the node loaded successfully\r\n\t\t\t\t */\r\n\t\t\t\tthis.trigger('load_node', { \"node\" : obj, \"status\" : status });\r\n\t\t\t\tif(callback) {\r\n\t\t\t\t\tcallback.call(this, obj, status);\r\n\t\t\t\t}\r\n\t\t\t}, this));\r\n\t\t\treturn true;\r\n\t\t},\r\n\t\t/**\r\n\t\t * load an array of nodes (will also load unavailable nodes as soon as the appear in the structure). Used internally.\r\n\t\t * @private\r\n\t\t * @name _load_nodes(nodes [, callback])\r\n\t\t * @param  {array} nodes\r\n\t\t * @param  {function} callback a function to be executed once loading is complete, the function is executed in the instance's scope and receives one argument - the array passed to _load_nodes\r\n\t\t */\r\n\t\t_load_nodes : function (nodes, callback, is_callback, force_reload) {\r\n\t\t\tvar r = true,\r\n\t\t\t\tc = function () { this._load_nodes(nodes, callback, true); },\r\n\t\t\t\tm = this._model.data, i, j, tmp = [];\r\n\t\t\tfor(i = 0, j = nodes.length; i < j; i++) {\r\n\t\t\t\tif(m[nodes[i]] && ( (!m[nodes[i]].state.loaded && !m[nodes[i]].state.failed) || (!is_callback && force_reload) )) {\r\n\t\t\t\t\tif(!this.is_loading(nodes[i])) {\r\n\t\t\t\t\t\tthis.load_node(nodes[i], c);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tr = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(r) {\r\n\t\t\t\tfor(i = 0, j = nodes.length; i < j; i++) {\r\n\t\t\t\t\tif(m[nodes[i]] && m[nodes[i]].state.loaded) {\r\n\t\t\t\t\t\ttmp.push(nodes[i]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif(callback && !callback.done) {\r\n\t\t\t\t\tcallback.call(this, tmp);\r\n\t\t\t\t\tcallback.done = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\t/**\r\n\t\t * loads all unloaded nodes\r\n\t\t * @name load_all([obj, callback])\r\n\t\t * @param {mixed} obj the node to load recursively, omit to load all nodes in the tree\r\n\t\t * @param {function} callback a function to be executed once loading all the nodes is complete,\r\n\t\t * @trigger load_all.jstree\r\n\t\t */\r\n\t\tload_all : function (obj, callback) {\r\n\t\t\tif(!obj) { obj = $.jstree.root; }\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj) { return false; }\r\n\t\t\tvar to_load = [],\r\n\t\t\t\tm = this._model.data,\r\n\t\t\t\tc = m[obj.id].children_d,\r\n\t\t\t\ti, j;\r\n\t\t\tif(obj.state && !obj.state.loaded) {\r\n\t\t\t\tto_load.push(obj.id);\r\n\t\t\t}\r\n\t\t\tfor(i = 0, j = c.length; i < j; i++) {\r\n\t\t\t\tif(m[c[i]] && m[c[i]].state && !m[c[i]].state.loaded) {\r\n\t\t\t\t\tto_load.push(c[i]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(to_load.length) {\r\n\t\t\t\tthis._load_nodes(to_load, function () {\r\n\t\t\t\t\tthis.load_all(obj, callback);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t/**\r\n\t\t\t\t * triggered after a load_all call completes\r\n\t\t\t\t * @event\r\n\t\t\t\t * @name load_all.jstree\r\n\t\t\t\t * @param {Object} node the recursively loaded node\r\n\t\t\t\t */\r\n\t\t\t\tif(callback) { callback.call(this, obj); }\r\n\t\t\t\tthis.trigger('load_all', { \"node\" : obj });\r\n\t\t\t}\r\n\t\t},\r\n\t\t/**\r\n\t\t * handles the actual loading of a node. Used only internally.\r\n\t\t * @private\r\n\t\t * @name _load_node(obj [, callback])\r\n\t\t * @param  {mixed} obj\r\n\t\t * @param  {function} callback a function to be executed once loading is complete, the function is executed in the instance's scope and receives one argument - a boolean status\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\t_load_node : function (obj, callback) {\r\n\t\t\tvar s = this.settings.core.data, t;\r\n\t\t\tvar notTextOrCommentNode = function notTextOrCommentNode () {\r\n\t\t\t\treturn this.nodeType !== 3 && this.nodeType !== 8;\r\n\t\t\t};\r\n\t\t\t// use original HTML\r\n\t\t\tif(!s) {\r\n\t\t\t\tif(obj.id === $.jstree.root) {\r\n\t\t\t\t\treturn this._append_html_data(obj, this._data.core.original_container_html.clone(true), function (status) {\r\n\t\t\t\t\t\tcallback.call(this, status);\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\treturn callback.call(this, false);\r\n\t\t\t\t}\r\n\t\t\t\t// return callback.call(this, obj.id === $.jstree.root ? this._append_html_data(obj, this._data.core.original_container_html.clone(true)) : false);\r\n\t\t\t}\r\n\t\t\tif($.isFunction(s)) {\r\n\t\t\t\treturn s.call(this, obj, $.proxy(function (d) {\r\n\t\t\t\t\tif(d === false) {\r\n\t\t\t\t\t\tcallback.call(this, false);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tthis[typeof d === 'string' ? '_append_html_data' : '_append_json_data'](obj, typeof d === 'string' ? $($.parseHTML(d)).filter(notTextOrCommentNode) : d, function (status) {\r\n\t\t\t\t\t\t\tcallback.call(this, status);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// return d === false ? callback.call(this, false) : callback.call(this, this[typeof d === 'string' ? '_append_html_data' : '_append_json_data'](obj, typeof d === 'string' ? $(d) : d));\r\n\t\t\t\t}, this));\r\n\t\t\t}\r\n\t\t\tif(typeof s === 'object') {\r\n\t\t\t\tif(s.url) {\r\n\t\t\t\t\ts = $.extend(true, {}, s);\r\n\t\t\t\t\tif($.isFunction(s.url)) {\r\n\t\t\t\t\t\ts.url = s.url.call(this, obj);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif($.isFunction(s.data)) {\r\n\t\t\t\t\t\ts.data = s.data.call(this, obj);\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn $.ajax(s)\r\n\t\t\t\t\t\t.done($.proxy(function (d,t,x) {\r\n\t\t\t\t\t\t\t\tvar type = x.getResponseHeader('Content-Type');\r\n\t\t\t\t\t\t\t\tif((type && type.indexOf('json') !== -1) || typeof d === \"object\") {\r\n\t\t\t\t\t\t\t\t\treturn this._append_json_data(obj, d, function (status) { callback.call(this, status); });\r\n\t\t\t\t\t\t\t\t\t//return callback.call(this, this._append_json_data(obj, d));\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif((type && type.indexOf('html') !== -1) || typeof d === \"string\") {\r\n\t\t\t\t\t\t\t\t\treturn this._append_html_data(obj, $($.parseHTML(d)).filter(notTextOrCommentNode), function (status) { callback.call(this, status); });\r\n\t\t\t\t\t\t\t\t\t// return callback.call(this, this._append_html_data(obj, $(d)));\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tthis._data.core.last_error = { 'error' : 'ajax', 'plugin' : 'core', 'id' : 'core_04', 'reason' : 'Could not load node', 'data' : JSON.stringify({ 'id' : obj.id, 'xhr' : x }) };\r\n\t\t\t\t\t\t\t\tthis.settings.core.error.call(this, this._data.core.last_error);\r\n\t\t\t\t\t\t\t\treturn callback.call(this, false);\r\n\t\t\t\t\t\t\t}, this))\r\n\t\t\t\t\t\t.fail($.proxy(function (f) {\r\n\t\t\t\t\t\t\t\tthis._data.core.last_error = { 'error' : 'ajax', 'plugin' : 'core', 'id' : 'core_04', 'reason' : 'Could not load node', 'data' : JSON.stringify({ 'id' : obj.id, 'xhr' : f }) };\r\n\t\t\t\t\t\t\t\tcallback.call(this, false);\r\n\t\t\t\t\t\t\t\tthis.settings.core.error.call(this, this._data.core.last_error);\r\n\t\t\t\t\t\t\t}, this));\r\n\t\t\t\t}\r\n\t\t\t\tif ($.isArray(s)) {\r\n\t\t\t\t\tt = $.extend(true, [], s);\r\n\t\t\t\t} else if ($.isPlainObject(s)) {\r\n\t\t\t\t\tt = $.extend(true, {}, s);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tt = s;\r\n\t\t\t\t}\r\n\t\t\t\tif(obj.id === $.jstree.root) {\r\n\t\t\t\t\treturn this._append_json_data(obj, t, function (status) {\r\n\t\t\t\t\t\tcallback.call(this, status);\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis._data.core.last_error = { 'error' : 'nodata', 'plugin' : 'core', 'id' : 'core_05', 'reason' : 'Could not load node', 'data' : JSON.stringify({ 'id' : obj.id }) };\r\n\t\t\t\t\tthis.settings.core.error.call(this, this._data.core.last_error);\r\n\t\t\t\t\treturn callback.call(this, false);\r\n\t\t\t\t}\r\n\t\t\t\t//return callback.call(this, (obj.id === $.jstree.root ? this._append_json_data(obj, t) : false) );\r\n\t\t\t}\r\n\t\t\tif(typeof s === 'string') {\r\n\t\t\t\tif(obj.id === $.jstree.root) {\r\n\t\t\t\t\treturn this._append_html_data(obj, $($.parseHTML(s)).filter(notTextOrCommentNode), function (status) {\r\n\t\t\t\t\t\tcallback.call(this, status);\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis._data.core.last_error = { 'error' : 'nodata', 'plugin' : 'core', 'id' : 'core_06', 'reason' : 'Could not load node', 'data' : JSON.stringify({ 'id' : obj.id }) };\r\n\t\t\t\t\tthis.settings.core.error.call(this, this._data.core.last_error);\r\n\t\t\t\t\treturn callback.call(this, false);\r\n\t\t\t\t}\r\n\t\t\t\t//return callback.call(this, (obj.id === $.jstree.root ? this._append_html_data(obj, $(s)) : false) );\r\n\t\t\t}\r\n\t\t\treturn callback.call(this, false);\r\n\t\t},\r\n\t\t/**\r\n\t\t * adds a node to the list of nodes to redraw. Used only internally.\r\n\t\t * @private\r\n\t\t * @name _node_changed(obj [, callback])\r\n\t\t * @param  {mixed} obj\r\n\t\t */\r\n\t\t_node_changed : function (obj) {\r\n\t\t\tobj = this.get_node(obj);\r\n      if (obj && $.inArray(obj.id, this._model.changed) === -1) {\r\n\t\t\t\tthis._model.changed.push(obj.id);\r\n\t\t\t}\r\n\t\t},\r\n\t\t/**\r\n\t\t * appends HTML content to the tree. Used internally.\r\n\t\t * @private\r\n\t\t * @name _append_html_data(obj, data)\r\n\t\t * @param  {mixed} obj the node to append to\r\n\t\t * @param  {String} data the HTML string to parse and append\r\n\t\t * @trigger model.jstree, changed.jstree\r\n\t\t */\r\n\t\t_append_html_data : function (dom, data, cb) {\r\n\t\t\tdom = this.get_node(dom);\r\n\t\t\tdom.children = [];\r\n\t\t\tdom.children_d = [];\r\n\t\t\tvar dat = data.is('ul') ? data.children() : data,\r\n\t\t\t\tpar = dom.id,\r\n\t\t\t\tchd = [],\r\n\t\t\t\tdpc = [],\r\n\t\t\t\tm = this._model.data,\r\n\t\t\t\tp = m[par],\r\n\t\t\t\ts = this._data.core.selected.length,\r\n\t\t\t\ttmp, i, j;\r\n\t\t\tdat.each($.proxy(function (i, v) {\r\n\t\t\t\ttmp = this._parse_model_from_html($(v), par, p.parents.concat());\r\n\t\t\t\tif(tmp) {\r\n\t\t\t\t\tchd.push(tmp);\r\n\t\t\t\t\tdpc.push(tmp);\r\n\t\t\t\t\tif(m[tmp].children_d.length) {\r\n\t\t\t\t\t\tdpc = dpc.concat(m[tmp].children_d);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}, this));\r\n\t\t\tp.children = chd;\r\n\t\t\tp.children_d = dpc;\r\n\t\t\tfor(i = 0, j = p.parents.length; i < j; i++) {\r\n\t\t\t\tm[p.parents[i]].children_d = m[p.parents[i]].children_d.concat(dpc);\r\n\t\t\t}\r\n\t\t\t/**\r\n\t\t\t * triggered when new data is inserted to the tree model\r\n\t\t\t * @event\r\n\t\t\t * @name model.jstree\r\n\t\t\t * @param {Array} nodes an array of node IDs\r\n\t\t\t * @param {String} parent the parent ID of the nodes\r\n\t\t\t */\r\n\t\t\tthis.trigger('model', { \"nodes\" : dpc, 'parent' : par });\r\n\t\t\tif(par !== $.jstree.root) {\r\n\t\t\t\tthis._node_changed(par);\r\n\t\t\t\tthis.redraw();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.get_container_ul().children('.jstree-initial-node').remove();\r\n\t\t\t\tthis.redraw(true);\r\n\t\t\t}\r\n\t\t\tif(this._data.core.selected.length !== s) {\r\n\t\t\t\tthis.trigger('changed', { 'action' : 'model', 'selected' : this._data.core.selected });\r\n\t\t\t}\r\n\t\t\tcb.call(this, true);\r\n\t\t},\r\n\t\t/**\r\n\t\t * appends JSON content to the tree. Used internally.\r\n\t\t * @private\r\n\t\t * @name _append_json_data(obj, data)\r\n\t\t * @param  {mixed} obj the node to append to\r\n\t\t * @param  {String} data the JSON object to parse and append\r\n\t\t * @param  {Boolean} force_processing internal param - do not set\r\n\t\t * @trigger model.jstree, changed.jstree\r\n\t\t */\r\n\t\t_append_json_data : function (dom, data, cb, force_processing) {\r\n\t\t\tif(this.element === null) { return; }\r\n\t\t\tdom = this.get_node(dom);\r\n\t\t\tdom.children = [];\r\n\t\t\tdom.children_d = [];\r\n\t\t\t// *%$@!!!\r\n\t\t\tif(data.d) {\r\n\t\t\t\tdata = data.d;\r\n\t\t\t\tif(typeof data === \"string\") {\r\n\t\t\t\t\tdata = JSON.parse(data);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(!$.isArray(data)) { data = [data]; }\r\n\t\t\tvar w = null,\r\n\t\t\t\targs = {\r\n\t\t\t\t\t'df'\t: this._model.default_state,\r\n\t\t\t\t\t'dat'\t: data,\r\n\t\t\t\t\t'par'\t: dom.id,\r\n\t\t\t\t\t'm'\t\t: this._model.data,\r\n\t\t\t\t\t't_id'\t: this._id,\r\n\t\t\t\t\t't_cnt'\t: this._cnt,\r\n\t\t\t\t\t'sel'\t: this._data.core.selected\r\n\t\t\t\t},\r\n\t\t\t\tfunc = function (data, undefined) {\r\n\t\t\t\t\tif(data.data) { data = data.data; }\r\n\t\t\t\t\tvar dat = data.dat,\r\n\t\t\t\t\t\tpar = data.par,\r\n\t\t\t\t\t\tchd = [],\r\n\t\t\t\t\t\tdpc = [],\r\n\t\t\t\t\t\tadd = [],\r\n\t\t\t\t\t\tdf = data.df,\r\n\t\t\t\t\t\tt_id = data.t_id,\r\n\t\t\t\t\t\tt_cnt = data.t_cnt,\r\n\t\t\t\t\t\tm = data.m,\r\n\t\t\t\t\t\tp = m[par],\r\n\t\t\t\t\t\tsel = data.sel,\r\n\t\t\t\t\t\ttmp, i, j, rslt,\r\n\t\t\t\t\t\tparse_flat = function (d, p, ps) {\r\n\t\t\t\t\t\t\tif(!ps) { ps = []; }\r\n\t\t\t\t\t\t\telse { ps = ps.concat(); }\r\n\t\t\t\t\t\t\tif(p) { ps.unshift(p); }\r\n\t\t\t\t\t\t\tvar tid = d.id.toString(),\r\n\t\t\t\t\t\t\t\ti, j, c, e,\r\n\t\t\t\t\t\t\t\ttmp = {\r\n\t\t\t\t\t\t\t\t\tid\t\t\t: tid,\r\n\t\t\t\t\t\t\t\t\ttext\t\t: d.text || '',\r\n\t\t\t\t\t\t\t\t\ticon\t\t: d.icon !== undefined ? d.icon : true,\r\n\t\t\t\t\t\t\t\t\tparent\t\t: p,\r\n\t\t\t\t\t\t\t\t\tparents\t\t: ps,\r\n\t\t\t\t\t\t\t\t\tchildren\t: d.children || [],\r\n\t\t\t\t\t\t\t\t\tchildren_d\t: d.children_d || [],\r\n\t\t\t\t\t\t\t\t\tdata\t\t: d.data,\r\n\t\t\t\t\t\t\t\t\tstate\t\t: { },\r\n\t\t\t\t\t\t\t\t\tli_attr\t\t: { id : false },\r\n\t\t\t\t\t\t\t\t\ta_attr\t\t: { href : '#' },\r\n\t\t\t\t\t\t\t\t\toriginal\t: false\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\tfor(i in df) {\r\n\t\t\t\t\t\t\t\tif(df.hasOwnProperty(i)) {\r\n\t\t\t\t\t\t\t\t\ttmp.state[i] = df[i];\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(d && d.data && d.data.jstree && d.data.jstree.icon) {\r\n\t\t\t\t\t\t\t\ttmp.icon = d.data.jstree.icon;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(tmp.icon === undefined || tmp.icon === null || tmp.icon === \"\") {\r\n\t\t\t\t\t\t\t\ttmp.icon = true;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(d && d.data) {\r\n\t\t\t\t\t\t\t\ttmp.data = d.data;\r\n\t\t\t\t\t\t\t\tif(d.data.jstree) {\r\n\t\t\t\t\t\t\t\t\tfor(i in d.data.jstree) {\r\n\t\t\t\t\t\t\t\t\t\tif(d.data.jstree.hasOwnProperty(i)) {\r\n\t\t\t\t\t\t\t\t\t\t\ttmp.state[i] = d.data.jstree[i];\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(d && typeof d.state === 'object') {\r\n\t\t\t\t\t\t\t\tfor (i in d.state) {\r\n\t\t\t\t\t\t\t\t\tif(d.state.hasOwnProperty(i)) {\r\n\t\t\t\t\t\t\t\t\t\ttmp.state[i] = d.state[i];\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(d && typeof d.li_attr === 'object') {\r\n\t\t\t\t\t\t\t\tfor (i in d.li_attr) {\r\n\t\t\t\t\t\t\t\t\tif(d.li_attr.hasOwnProperty(i)) {\r\n\t\t\t\t\t\t\t\t\t\ttmp.li_attr[i] = d.li_attr[i];\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(!tmp.li_attr.id) {\r\n\t\t\t\t\t\t\t\ttmp.li_attr.id = tid;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(d && typeof d.a_attr === 'object') {\r\n\t\t\t\t\t\t\t\tfor (i in d.a_attr) {\r\n\t\t\t\t\t\t\t\t\tif(d.a_attr.hasOwnProperty(i)) {\r\n\t\t\t\t\t\t\t\t\t\ttmp.a_attr[i] = d.a_attr[i];\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(d && d.children && d.children === true) {\r\n\t\t\t\t\t\t\t\ttmp.state.loaded = false;\r\n\t\t\t\t\t\t\t\ttmp.children = [];\r\n\t\t\t\t\t\t\t\ttmp.children_d = [];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tm[tmp.id] = tmp;\r\n\t\t\t\t\t\t\tfor(i = 0, j = tmp.children.length; i < j; i++) {\r\n\t\t\t\t\t\t\t\tc = parse_flat(m[tmp.children[i]], tmp.id, ps);\r\n\t\t\t\t\t\t\t\te = m[c];\r\n\t\t\t\t\t\t\t\ttmp.children_d.push(c);\r\n\t\t\t\t\t\t\t\tif(e.children_d.length) {\r\n\t\t\t\t\t\t\t\t\ttmp.children_d = tmp.children_d.concat(e.children_d);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tdelete d.data;\r\n\t\t\t\t\t\t\tdelete d.children;\r\n\t\t\t\t\t\t\tm[tmp.id].original = d;\r\n\t\t\t\t\t\t\tif(tmp.state.selected) {\r\n\t\t\t\t\t\t\t\tadd.push(tmp.id);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\treturn tmp.id;\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tparse_nest = function (d, p, ps) {\r\n\t\t\t\t\t\t\tif(!ps) { ps = []; }\r\n\t\t\t\t\t\t\telse { ps = ps.concat(); }\r\n\t\t\t\t\t\t\tif(p) { ps.unshift(p); }\r\n\t\t\t\t\t\t\tvar tid = false, i, j, c, e, tmp;\r\n\t\t\t\t\t\t\tdo {\r\n\t\t\t\t\t\t\t\ttid = 'j' + t_id + '_' + (++t_cnt);\r\n\t\t\t\t\t\t\t} while(m[tid]);\r\n\r\n\t\t\t\t\t\t\ttmp = {\r\n\t\t\t\t\t\t\t\tid\t\t\t: false,\r\n\t\t\t\t\t\t\t\ttext\t\t: typeof d === 'string' ? d : '',\r\n\t\t\t\t\t\t\t\ticon\t\t: typeof d === 'object' && d.icon !== undefined ? d.icon : true,\r\n\t\t\t\t\t\t\t\tparent\t\t: p,\r\n\t\t\t\t\t\t\t\tparents\t\t: ps,\r\n\t\t\t\t\t\t\t\tchildren\t: [],\r\n\t\t\t\t\t\t\t\tchildren_d\t: [],\r\n\t\t\t\t\t\t\t\tdata\t\t: null,\r\n\t\t\t\t\t\t\t\tstate\t\t: { },\r\n\t\t\t\t\t\t\t\tli_attr\t\t: { id : false },\r\n\t\t\t\t\t\t\t\ta_attr\t\t: { href : '#' },\r\n\t\t\t\t\t\t\t\toriginal\t: false\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\tfor(i in df) {\r\n\t\t\t\t\t\t\t\tif(df.hasOwnProperty(i)) {\r\n\t\t\t\t\t\t\t\t\ttmp.state[i] = df[i];\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(d && d.id) { tmp.id = d.id.toString(); }\r\n\t\t\t\t\t\t\tif(d && d.text) { tmp.text = d.text; }\r\n\t\t\t\t\t\t\tif(d && d.data && d.data.jstree && d.data.jstree.icon) {\r\n\t\t\t\t\t\t\t\ttmp.icon = d.data.jstree.icon;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(tmp.icon === undefined || tmp.icon === null || tmp.icon === \"\") {\r\n\t\t\t\t\t\t\t\ttmp.icon = true;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(d && d.data) {\r\n\t\t\t\t\t\t\t\ttmp.data = d.data;\r\n\t\t\t\t\t\t\t\tif(d.data.jstree) {\r\n\t\t\t\t\t\t\t\t\tfor(i in d.data.jstree) {\r\n\t\t\t\t\t\t\t\t\t\tif(d.data.jstree.hasOwnProperty(i)) {\r\n\t\t\t\t\t\t\t\t\t\t\ttmp.state[i] = d.data.jstree[i];\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(d && typeof d.state === 'object') {\r\n\t\t\t\t\t\t\t\tfor (i in d.state) {\r\n\t\t\t\t\t\t\t\t\tif(d.state.hasOwnProperty(i)) {\r\n\t\t\t\t\t\t\t\t\t\ttmp.state[i] = d.state[i];\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(d && typeof d.li_attr === 'object') {\r\n\t\t\t\t\t\t\t\tfor (i in d.li_attr) {\r\n\t\t\t\t\t\t\t\t\tif(d.li_attr.hasOwnProperty(i)) {\r\n\t\t\t\t\t\t\t\t\t\ttmp.li_attr[i] = d.li_attr[i];\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(tmp.li_attr.id && !tmp.id) {\r\n\t\t\t\t\t\t\t\ttmp.id = tmp.li_attr.id.toString();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(!tmp.id) {\r\n\t\t\t\t\t\t\t\ttmp.id = tid;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(!tmp.li_attr.id) {\r\n\t\t\t\t\t\t\t\ttmp.li_attr.id = tmp.id;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(d && typeof d.a_attr === 'object') {\r\n\t\t\t\t\t\t\t\tfor (i in d.a_attr) {\r\n\t\t\t\t\t\t\t\t\tif(d.a_attr.hasOwnProperty(i)) {\r\n\t\t\t\t\t\t\t\t\t\ttmp.a_attr[i] = d.a_attr[i];\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(d && d.children && d.children.length) {\r\n\t\t\t\t\t\t\t\tfor(i = 0, j = d.children.length; i < j; i++) {\r\n\t\t\t\t\t\t\t\t\tc = parse_nest(d.children[i], tmp.id, ps);\r\n\t\t\t\t\t\t\t\t\te = m[c];\r\n\t\t\t\t\t\t\t\t\ttmp.children.push(c);\r\n\t\t\t\t\t\t\t\t\tif(e.children_d.length) {\r\n\t\t\t\t\t\t\t\t\t\ttmp.children_d = tmp.children_d.concat(e.children_d);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\ttmp.children_d = tmp.children_d.concat(tmp.children);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(d && d.children && d.children === true) {\r\n\t\t\t\t\t\t\t\ttmp.state.loaded = false;\r\n\t\t\t\t\t\t\t\ttmp.children = [];\r\n\t\t\t\t\t\t\t\ttmp.children_d = [];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tdelete d.data;\r\n\t\t\t\t\t\t\tdelete d.children;\r\n\t\t\t\t\t\t\ttmp.original = d;\r\n\t\t\t\t\t\t\tm[tmp.id] = tmp;\r\n\t\t\t\t\t\t\tif(tmp.state.selected) {\r\n\t\t\t\t\t\t\t\tadd.push(tmp.id);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\treturn tmp.id;\r\n\t\t\t\t\t\t};\r\n\r\n\t\t\t\t\tif(dat.length && dat[0].id !== undefined && dat[0].parent !== undefined) {\r\n\t\t\t\t\t\t// Flat JSON support (for easy import from DB):\r\n\t\t\t\t\t\t// 1) convert to object (foreach)\r\n\t\t\t\t\t\tfor(i = 0, j = dat.length; i < j; i++) {\r\n\t\t\t\t\t\t\tif(!dat[i].children) {\r\n\t\t\t\t\t\t\t\tdat[i].children = [];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(!dat[i].state) {\r\n\t\t\t\t\t\t\t\tdat[i].state = {};\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tm[dat[i].id.toString()] = dat[i];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// 2) populate children (foreach)\r\n\t\t\t\t\t\tfor(i = 0, j = dat.length; i < j; i++) {\r\n\t\t\t\t\t\t\tif (!m[dat[i].parent.toString()]) {\r\n\t\t\t\t\t\t\t\tthis._data.core.last_error = { 'error' : 'parse', 'plugin' : 'core', 'id' : 'core_07', 'reason' : 'Node with invalid parent', 'data' : JSON.stringify({ 'id' : dat[i].id.toString(), 'parent' : dat[i].parent.toString() }) };\r\n\t\t\t\t\t\t\t\tthis.settings.core.error.call(this, this._data.core.last_error);\r\n\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tm[dat[i].parent.toString()].children.push(dat[i].id.toString());\r\n\t\t\t\t\t\t\t// populate parent.children_d\r\n\t\t\t\t\t\t\tp.children_d.push(dat[i].id.toString());\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// 3) normalize && populate parents and children_d with recursion\r\n\t\t\t\t\t\tfor(i = 0, j = p.children.length; i < j; i++) {\r\n\t\t\t\t\t\t\ttmp = parse_flat(m[p.children[i]], par, p.parents.concat());\r\n\t\t\t\t\t\t\tdpc.push(tmp);\r\n\t\t\t\t\t\t\tif(m[tmp].children_d.length) {\r\n\t\t\t\t\t\t\t\tdpc = dpc.concat(m[tmp].children_d);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tfor(i = 0, j = p.parents.length; i < j; i++) {\r\n\t\t\t\t\t\t\tm[p.parents[i]].children_d = m[p.parents[i]].children_d.concat(dpc);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// ?) three_state selection - p.state.selected && t - (if three_state foreach(dat => ch) -> foreach(parents) if(parent.selected) child.selected = true;\r\n\t\t\t\t\t\trslt = {\r\n\t\t\t\t\t\t\t'cnt' : t_cnt,\r\n\t\t\t\t\t\t\t'mod' : m,\r\n\t\t\t\t\t\t\t'sel' : sel,\r\n\t\t\t\t\t\t\t'par' : par,\r\n\t\t\t\t\t\t\t'dpc' : dpc,\r\n\t\t\t\t\t\t\t'add' : add\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tfor(i = 0, j = dat.length; i < j; i++) {\r\n\t\t\t\t\t\t\ttmp = parse_nest(dat[i], par, p.parents.concat());\r\n\t\t\t\t\t\t\tif(tmp) {\r\n\t\t\t\t\t\t\t\tchd.push(tmp);\r\n\t\t\t\t\t\t\t\tdpc.push(tmp);\r\n\t\t\t\t\t\t\t\tif(m[tmp].children_d.length) {\r\n\t\t\t\t\t\t\t\t\tdpc = dpc.concat(m[tmp].children_d);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tp.children = chd;\r\n\t\t\t\t\t\tp.children_d = dpc;\r\n\t\t\t\t\t\tfor(i = 0, j = p.parents.length; i < j; i++) {\r\n\t\t\t\t\t\t\tm[p.parents[i]].children_d = m[p.parents[i]].children_d.concat(dpc);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\trslt = {\r\n\t\t\t\t\t\t\t'cnt' : t_cnt,\r\n\t\t\t\t\t\t\t'mod' : m,\r\n\t\t\t\t\t\t\t'sel' : sel,\r\n\t\t\t\t\t\t\t'par' : par,\r\n\t\t\t\t\t\t\t'dpc' : dpc,\r\n\t\t\t\t\t\t\t'add' : add\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(typeof window === 'undefined' || typeof window.document === 'undefined') {\r\n\t\t\t\t\t\tpostMessage(rslt);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\treturn rslt;\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\trslt = function (rslt, worker) {\r\n\t\t\t\t\tif(this.element === null) { return; }\r\n\t\t\t\t\tthis._cnt = rslt.cnt;\r\n\t\t\t\t\tvar i, m = this._model.data;\r\n\t\t\t\t\tfor (i in m) {\r\n\t\t\t\t\t\tif (m.hasOwnProperty(i) && m[i].state && m[i].state.loading && rslt.mod[i]) {\r\n\t\t\t\t\t\t\trslt.mod[i].state.loading = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis._model.data = rslt.mod; // breaks the reference in load_node - careful\r\n\r\n\t\t\t\t\tif(worker) {\r\n\t\t\t\t\t\tvar j, a = rslt.add, r = rslt.sel, s = this._data.core.selected.slice();\r\n\t\t\t\t\t\tm = this._model.data;\r\n\t\t\t\t\t\t// if selection was changed while calculating in worker\r\n\t\t\t\t\t\tif(r.length !== s.length || $.vakata.array_unique(r.concat(s)).length !== r.length) {\r\n\t\t\t\t\t\t\t// deselect nodes that are no longer selected\r\n\t\t\t\t\t\t\tfor(i = 0, j = r.length; i < j; i++) {\r\n\t\t\t\t\t\t\t\tif($.inArray(r[i], a) === -1 && $.inArray(r[i], s) === -1) {\r\n\t\t\t\t\t\t\t\t\tm[r[i]].state.selected = false;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t// select nodes that were selected in the mean time\r\n\t\t\t\t\t\t\tfor(i = 0, j = s.length; i < j; i++) {\r\n\t\t\t\t\t\t\t\tif($.inArray(s[i], r) === -1) {\r\n\t\t\t\t\t\t\t\t\tm[s[i]].state.selected = true;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(rslt.add.length) {\r\n\t\t\t\t\t\tthis._data.core.selected = this._data.core.selected.concat(rslt.add);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.trigger('model', { \"nodes\" : rslt.dpc, 'parent' : rslt.par });\r\n\r\n\t\t\t\t\tif(rslt.par !== $.jstree.root) {\r\n\t\t\t\t\t\tthis._node_changed(rslt.par);\r\n\t\t\t\t\t\tthis.redraw();\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\t// this.get_container_ul().children('.jstree-initial-node').remove();\r\n\t\t\t\t\t\tthis.redraw(true);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(rslt.add.length) {\r\n\t\t\t\t\t\tthis.trigger('changed', { 'action' : 'model', 'selected' : this._data.core.selected });\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcb.call(this, true);\r\n\t\t\t\t};\r\n\t\t\tif(this.settings.core.worker && window.Blob && window.URL && window.Worker) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tif(this._wrk === null) {\r\n\t\t\t\t\t\tthis._wrk = window.URL.createObjectURL(\r\n\t\t\t\t\t\t\tnew window.Blob(\r\n\t\t\t\t\t\t\t\t['self.onmessage = ' + func.toString()],\r\n\t\t\t\t\t\t\t\t{type:\"text/javascript\"}\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(!this._data.core.working || force_processing) {\r\n\t\t\t\t\t\tthis._data.core.working = true;\r\n\t\t\t\t\t\tw = new window.Worker(this._wrk);\r\n\t\t\t\t\t\tw.onmessage = $.proxy(function (e) {\r\n\t\t\t\t\t\t\trslt.call(this, e.data, true);\r\n\t\t\t\t\t\t\ttry { w.terminate(); w = null; } catch(ignore) { }\r\n\t\t\t\t\t\t\tif(this._data.core.worker_queue.length) {\r\n\t\t\t\t\t\t\t\tthis._append_json_data.apply(this, this._data.core.worker_queue.shift());\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\tthis._data.core.working = false;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}, this);\r\n\t\t\t\t\t\tif(!args.par) {\r\n\t\t\t\t\t\t\tif(this._data.core.worker_queue.length) {\r\n\t\t\t\t\t\t\t\tthis._append_json_data.apply(this, this._data.core.worker_queue.shift());\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\tthis._data.core.working = false;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tw.postMessage(args);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tthis._data.core.worker_queue.push([dom, data, cb, true]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tcatch(e) {\r\n\t\t\t\t\trslt.call(this, func(args), false);\r\n\t\t\t\t\tif(this._data.core.worker_queue.length) {\r\n\t\t\t\t\t\tthis._append_json_data.apply(this, this._data.core.worker_queue.shift());\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tthis._data.core.working = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\trslt.call(this, func(args), false);\r\n\t\t\t}\r\n\t\t},\r\n\t\t/**\r\n\t\t * parses a node from a jQuery object and appends them to the in memory tree model. Used internally.\r\n\t\t * @private\r\n\t\t * @name _parse_model_from_html(d [, p, ps])\r\n\t\t * @param  {jQuery} d the jQuery object to parse\r\n\t\t * @param  {String} p the parent ID\r\n\t\t * @param  {Array} ps list of all parents\r\n\t\t * @return {String} the ID of the object added to the model\r\n\t\t */\r\n\t\t_parse_model_from_html : function (d, p, ps) {\r\n\t\t\tif(!ps) { ps = []; }\r\n\t\t\telse { ps = [].concat(ps); }\r\n\t\t\tif(p) { ps.unshift(p); }\r\n\t\t\tvar c, e, m = this._model.data,\r\n\t\t\t\tdata = {\r\n\t\t\t\t\tid\t\t\t: false,\r\n\t\t\t\t\ttext\t\t: false,\r\n\t\t\t\t\ticon\t\t: true,\r\n\t\t\t\t\tparent\t\t: p,\r\n\t\t\t\t\tparents\t\t: ps,\r\n\t\t\t\t\tchildren\t: [],\r\n\t\t\t\t\tchildren_d\t: [],\r\n\t\t\t\t\tdata\t\t: null,\r\n\t\t\t\t\tstate\t\t: { },\r\n\t\t\t\t\tli_attr\t\t: { id : false },\r\n\t\t\t\t\ta_attr\t\t: { href : '#' },\r\n\t\t\t\t\toriginal\t: false\r\n\t\t\t\t}, i, tmp, tid;\r\n\t\t\tfor(i in this._model.default_state) {\r\n\t\t\t\tif(this._model.default_state.hasOwnProperty(i)) {\r\n\t\t\t\t\tdata.state[i] = this._model.default_state[i];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\ttmp = $.vakata.attributes(d, true);\r\n\t\t\t$.each(tmp, function (i, v) {\r\n\t\t\t\tv = $.trim(v);\r\n\t\t\t\tif(!v.length) { return true; }\r\n\t\t\t\tdata.li_attr[i] = v;\r\n\t\t\t\tif(i === 'id') {\r\n\t\t\t\t\tdata.id = v.toString();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\ttmp = d.children('a').first();\r\n\t\t\tif(tmp.length) {\r\n\t\t\t\ttmp = $.vakata.attributes(tmp, true);\r\n\t\t\t\t$.each(tmp, function (i, v) {\r\n\t\t\t\t\tv = $.trim(v);\r\n\t\t\t\t\tif(v.length) {\r\n\t\t\t\t\t\tdata.a_attr[i] = v;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\ttmp = d.children(\"a\").first().length ? d.children(\"a\").first().clone() : d.clone();\r\n\t\t\ttmp.children(\"ins, i, ul\").remove();\r\n\t\t\ttmp = tmp.html();\r\n\t\t\ttmp = $('<div />').html(tmp);\r\n\t\t\tdata.text = this.settings.core.force_text ? tmp.text() : tmp.html();\r\n\t\t\ttmp = d.data();\r\n\t\t\tdata.data = tmp ? $.extend(true, {}, tmp) : null;\r\n\t\t\tdata.state.opened = d.hasClass('jstree-open');\r\n\t\t\tdata.state.selected = d.children('a').hasClass('jstree-clicked');\r\n\t\t\tdata.state.disabled = d.children('a').hasClass('jstree-disabled');\r\n\t\t\tif(data.data && data.data.jstree) {\r\n\t\t\t\tfor(i in data.data.jstree) {\r\n\t\t\t\t\tif(data.data.jstree.hasOwnProperty(i)) {\r\n\t\t\t\t\t\tdata.state[i] = data.data.jstree[i];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\ttmp = d.children(\"a\").children(\".jstree-themeicon\");\r\n\t\t\tif(tmp.length) {\r\n\t\t\t\tdata.icon = tmp.hasClass('jstree-themeicon-hidden') ? false : tmp.attr('rel');\r\n\t\t\t}\r\n\t\t\tif(data.state.icon !== undefined) {\r\n\t\t\t\tdata.icon = data.state.icon;\r\n\t\t\t}\r\n\t\t\tif(data.icon === undefined || data.icon === null || data.icon === \"\") {\r\n\t\t\t\tdata.icon = true;\r\n\t\t\t}\r\n\t\t\ttmp = d.children(\"ul\").children(\"li\");\r\n\t\t\tdo {\r\n\t\t\t\ttid = 'j' + this._id + '_' + (++this._cnt);\r\n\t\t\t} while(m[tid]);\r\n\t\t\tdata.id = data.li_attr.id ? data.li_attr.id.toString() : tid;\r\n\t\t\tif(tmp.length) {\r\n\t\t\t\ttmp.each($.proxy(function (i, v) {\r\n\t\t\t\t\tc = this._parse_model_from_html($(v), data.id, ps);\r\n\t\t\t\t\te = this._model.data[c];\r\n\t\t\t\t\tdata.children.push(c);\r\n\t\t\t\t\tif(e.children_d.length) {\r\n\t\t\t\t\t\tdata.children_d = data.children_d.concat(e.children_d);\r\n\t\t\t\t\t}\r\n\t\t\t\t}, this));\r\n\t\t\t\tdata.children_d = data.children_d.concat(data.children);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif(d.hasClass('jstree-closed')) {\r\n\t\t\t\t\tdata.state.loaded = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(data.li_attr['class']) {\r\n\t\t\t\tdata.li_attr['class'] = data.li_attr['class'].replace('jstree-closed','').replace('jstree-open','');\r\n\t\t\t}\r\n\t\t\tif(data.a_attr['class']) {\r\n\t\t\t\tdata.a_attr['class'] = data.a_attr['class'].replace('jstree-clicked','').replace('jstree-disabled','');\r\n\t\t\t}\r\n\t\t\tm[data.id] = data;\r\n\t\t\tif(data.state.selected) {\r\n\t\t\t\tthis._data.core.selected.push(data.id);\r\n\t\t\t}\r\n\t\t\treturn data.id;\r\n\t\t},\r\n\t\t/**\r\n\t\t * parses a node from a JSON object (used when dealing with flat data, which has no nesting of children, but has id and parent properties) and appends it to the in memory tree model. Used internally.\r\n\t\t * @private\r\n\t\t * @name _parse_model_from_flat_json(d [, p, ps])\r\n\t\t * @param  {Object} d the JSON object to parse\r\n\t\t * @param  {String} p the parent ID\r\n\t\t * @param  {Array} ps list of all parents\r\n\t\t * @return {String} the ID of the object added to the model\r\n\t\t */\r\n\t\t_parse_model_from_flat_json : function (d, p, ps) {\r\n\t\t\tif(!ps) { ps = []; }\r\n\t\t\telse { ps = ps.concat(); }\r\n\t\t\tif(p) { ps.unshift(p); }\r\n\t\t\tvar tid = d.id.toString(),\r\n\t\t\t\tm = this._model.data,\r\n\t\t\t\tdf = this._model.default_state,\r\n\t\t\t\ti, j, c, e,\r\n\t\t\t\ttmp = {\r\n\t\t\t\t\tid\t\t\t: tid,\r\n\t\t\t\t\ttext\t\t: d.text || '',\r\n\t\t\t\t\ticon\t\t: d.icon !== undefined ? d.icon : true,\r\n\t\t\t\t\tparent\t\t: p,\r\n\t\t\t\t\tparents\t\t: ps,\r\n\t\t\t\t\tchildren\t: d.children || [],\r\n\t\t\t\t\tchildren_d\t: d.children_d || [],\r\n\t\t\t\t\tdata\t\t: d.data,\r\n\t\t\t\t\tstate\t\t: { },\r\n\t\t\t\t\tli_attr\t\t: { id : false },\r\n\t\t\t\t\ta_attr\t\t: { href : '#' },\r\n\t\t\t\t\toriginal\t: false\r\n\t\t\t\t};\r\n\t\t\tfor(i in df) {\r\n\t\t\t\tif(df.hasOwnProperty(i)) {\r\n\t\t\t\t\ttmp.state[i] = df[i];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(d && d.data && d.data.jstree && d.data.jstree.icon) {\r\n\t\t\t\ttmp.icon = d.data.jstree.icon;\r\n\t\t\t}\r\n\t\t\tif(tmp.icon === undefined || tmp.icon === null || tmp.icon === \"\") {\r\n\t\t\t\ttmp.icon = true;\r\n\t\t\t}\r\n\t\t\tif(d && d.data) {\r\n\t\t\t\ttmp.data = d.data;\r\n\t\t\t\tif(d.data.jstree) {\r\n\t\t\t\t\tfor(i in d.data.jstree) {\r\n\t\t\t\t\t\tif(d.data.jstree.hasOwnProperty(i)) {\r\n\t\t\t\t\t\t\ttmp.state[i] = d.data.jstree[i];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(d && typeof d.state === 'object') {\r\n\t\t\t\tfor (i in d.state) {\r\n\t\t\t\t\tif(d.state.hasOwnProperty(i)) {\r\n\t\t\t\t\t\ttmp.state[i] = d.state[i];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(d && typeof d.li_attr === 'object') {\r\n\t\t\t\tfor (i in d.li_attr) {\r\n\t\t\t\t\tif(d.li_attr.hasOwnProperty(i)) {\r\n\t\t\t\t\t\ttmp.li_attr[i] = d.li_attr[i];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(!tmp.li_attr.id) {\r\n\t\t\t\ttmp.li_attr.id = tid;\r\n\t\t\t}\r\n\t\t\tif(d && typeof d.a_attr === 'object') {\r\n\t\t\t\tfor (i in d.a_attr) {\r\n\t\t\t\t\tif(d.a_attr.hasOwnProperty(i)) {\r\n\t\t\t\t\t\ttmp.a_attr[i] = d.a_attr[i];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(d && d.children && d.children === true) {\r\n\t\t\t\ttmp.state.loaded = false;\r\n\t\t\t\ttmp.children = [];\r\n\t\t\t\ttmp.children_d = [];\r\n\t\t\t}\r\n\t\t\tm[tmp.id] = tmp;\r\n\t\t\tfor(i = 0, j = tmp.children.length; i < j; i++) {\r\n\t\t\t\tc = this._parse_model_from_flat_json(m[tmp.children[i]], tmp.id, ps);\r\n\t\t\t\te = m[c];\r\n\t\t\t\ttmp.children_d.push(c);\r\n\t\t\t\tif(e.children_d.length) {\r\n\t\t\t\t\ttmp.children_d = tmp.children_d.concat(e.children_d);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tdelete d.data;\r\n\t\t\tdelete d.children;\r\n\t\t\tm[tmp.id].original = d;\r\n\t\t\tif(tmp.state.selected) {\r\n\t\t\t\tthis._data.core.selected.push(tmp.id);\r\n\t\t\t}\r\n\t\t\treturn tmp.id;\r\n\t\t},\r\n\t\t/**\r\n\t\t * parses a node from a JSON object and appends it to the in memory tree model. Used internally.\r\n\t\t * @private\r\n\t\t * @name _parse_model_from_json(d [, p, ps])\r\n\t\t * @param  {Object} d the JSON object to parse\r\n\t\t * @param  {String} p the parent ID\r\n\t\t * @param  {Array} ps list of all parents\r\n\t\t * @return {String} the ID of the object added to the model\r\n\t\t */\r\n\t\t_parse_model_from_json : function (d, p, ps) {\r\n\t\t\tif(!ps) { ps = []; }\r\n\t\t\telse { ps = ps.concat(); }\r\n\t\t\tif(p) { ps.unshift(p); }\r\n\t\t\tvar tid = false, i, j, c, e, m = this._model.data, df = this._model.default_state, tmp;\r\n\t\t\tdo {\r\n\t\t\t\ttid = 'j' + this._id + '_' + (++this._cnt);\r\n\t\t\t} while(m[tid]);\r\n\r\n\t\t\ttmp = {\r\n\t\t\t\tid\t\t\t: false,\r\n\t\t\t\ttext\t\t: typeof d === 'string' ? d : '',\r\n\t\t\t\ticon\t\t: typeof d === 'object' && d.icon !== undefined ? d.icon : true,\r\n\t\t\t\tparent\t\t: p,\r\n\t\t\t\tparents\t\t: ps,\r\n\t\t\t\tchildren\t: [],\r\n\t\t\t\tchildren_d\t: [],\r\n\t\t\t\tdata\t\t: null,\r\n\t\t\t\tstate\t\t: { },\r\n\t\t\t\tli_attr\t\t: { id : false },\r\n\t\t\t\ta_attr\t\t: { href : '#' },\r\n\t\t\t\toriginal\t: false\r\n\t\t\t};\r\n\t\t\tfor(i in df) {\r\n\t\t\t\tif(df.hasOwnProperty(i)) {\r\n\t\t\t\t\ttmp.state[i] = df[i];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(d && d.id) { tmp.id = d.id.toString(); }\r\n\t\t\tif(d && d.text) { tmp.text = d.text; }\r\n\t\t\tif(d && d.data && d.data.jstree && d.data.jstree.icon) {\r\n\t\t\t\ttmp.icon = d.data.jstree.icon;\r\n\t\t\t}\r\n\t\t\tif(tmp.icon === undefined || tmp.icon === null || tmp.icon === \"\") {\r\n\t\t\t\ttmp.icon = true;\r\n\t\t\t}\r\n\t\t\tif(d && d.data) {\r\n\t\t\t\ttmp.data = d.data;\r\n\t\t\t\tif(d.data.jstree) {\r\n\t\t\t\t\tfor(i in d.data.jstree) {\r\n\t\t\t\t\t\tif(d.data.jstree.hasOwnProperty(i)) {\r\n\t\t\t\t\t\t\ttmp.state[i] = d.data.jstree[i];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(d && typeof d.state === 'object') {\r\n\t\t\t\tfor (i in d.state) {\r\n\t\t\t\t\tif(d.state.hasOwnProperty(i)) {\r\n\t\t\t\t\t\ttmp.state[i] = d.state[i];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(d && typeof d.li_attr === 'object') {\r\n\t\t\t\tfor (i in d.li_attr) {\r\n\t\t\t\t\tif(d.li_attr.hasOwnProperty(i)) {\r\n\t\t\t\t\t\ttmp.li_attr[i] = d.li_attr[i];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(tmp.li_attr.id && !tmp.id) {\r\n\t\t\t\ttmp.id = tmp.li_attr.id.toString();\r\n\t\t\t}\r\n\t\t\tif(!tmp.id) {\r\n\t\t\t\ttmp.id = tid;\r\n\t\t\t}\r\n\t\t\tif(!tmp.li_attr.id) {\r\n\t\t\t\ttmp.li_attr.id = tmp.id;\r\n\t\t\t}\r\n\t\t\tif(d && typeof d.a_attr === 'object') {\r\n\t\t\t\tfor (i in d.a_attr) {\r\n\t\t\t\t\tif(d.a_attr.hasOwnProperty(i)) {\r\n\t\t\t\t\t\ttmp.a_attr[i] = d.a_attr[i];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(d && d.children && d.children.length) {\r\n\t\t\t\tfor(i = 0, j = d.children.length; i < j; i++) {\r\n\t\t\t\t\tc = this._parse_model_from_json(d.children[i], tmp.id, ps);\r\n\t\t\t\t\te = m[c];\r\n\t\t\t\t\ttmp.children.push(c);\r\n\t\t\t\t\tif(e.children_d.length) {\r\n\t\t\t\t\t\ttmp.children_d = tmp.children_d.concat(e.children_d);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\ttmp.children_d = tmp.children_d.concat(tmp.children);\r\n\t\t\t}\r\n\t\t\tif(d && d.children && d.children === true) {\r\n\t\t\t\ttmp.state.loaded = false;\r\n\t\t\t\ttmp.children = [];\r\n\t\t\t\ttmp.children_d = [];\r\n\t\t\t}\r\n\t\t\tdelete d.data;\r\n\t\t\tdelete d.children;\r\n\t\t\ttmp.original = d;\r\n\t\t\tm[tmp.id] = tmp;\r\n\t\t\tif(tmp.state.selected) {\r\n\t\t\t\tthis._data.core.selected.push(tmp.id);\r\n\t\t\t}\r\n\t\t\treturn tmp.id;\r\n\t\t},\r\n\t\t/**\r\n\t\t * redraws all nodes that need to be redrawn. Used internally.\r\n\t\t * @private\r\n\t\t * @name _redraw()\r\n\t\t * @trigger redraw.jstree\r\n\t\t */\r\n\t\t_redraw : function () {\r\n\t\t\tvar nodes = this._model.force_full_redraw ? this._model.data[$.jstree.root].children.concat([]) : this._model.changed.concat([]),\r\n\t\t\t\tf = document.createElement('UL'), tmp, i, j, fe = this._data.core.focused;\r\n\t\t\tfor(i = 0, j = nodes.length; i < j; i++) {\r\n\t\t\t\ttmp = this.redraw_node(nodes[i], true, this._model.force_full_redraw);\r\n\t\t\t\tif(tmp && this._model.force_full_redraw) {\r\n\t\t\t\t\tf.appendChild(tmp);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(this._model.force_full_redraw) {\r\n\t\t\t\tf.className = this.get_container_ul()[0].className;\r\n\t\t\t\tf.setAttribute('role','group');\r\n\t\t\t\tthis.element.empty().append(f);\r\n\t\t\t\t//this.get_container_ul()[0].appendChild(f);\r\n\t\t\t}\r\n\t\t\tif(fe !== null) {\r\n\t\t\t\ttmp = this.get_node(fe, true);\r\n\t\t\t\tif(tmp && tmp.length && tmp.children('.jstree-anchor')[0] !== document.activeElement) {\r\n\t\t\t\t\ttmp.children('.jstree-anchor').focus();\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis._data.core.focused = null;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis._model.force_full_redraw = false;\r\n\t\t\tthis._model.changed = [];\r\n\t\t\t/**\r\n\t\t\t * triggered after nodes are redrawn\r\n\t\t\t * @event\r\n\t\t\t * @name redraw.jstree\r\n\t\t\t * @param {array} nodes the redrawn nodes\r\n\t\t\t */\r\n\t\t\tthis.trigger('redraw', { \"nodes\" : nodes });\r\n\t\t},\r\n\t\t/**\r\n\t\t * redraws all nodes that need to be redrawn or optionally - the whole tree\r\n\t\t * @name redraw([full])\r\n\t\t * @param {Boolean} full if set to `true` all nodes are redrawn.\r\n\t\t */\r\n\t\tredraw : function (full) {\r\n\t\t\tif(full) {\r\n\t\t\t\tthis._model.force_full_redraw = true;\r\n\t\t\t}\r\n\t\t\t//if(this._model.redraw_timeout) {\r\n\t\t\t//\tclearTimeout(this._model.redraw_timeout);\r\n\t\t\t//}\r\n\t\t\t//this._model.redraw_timeout = setTimeout($.proxy(this._redraw, this),0);\r\n\t\t\tthis._redraw();\r\n\t\t},\r\n\t\t/**\r\n\t\t * redraws a single node's children. Used internally.\r\n\t\t * @private\r\n\t\t * @name draw_children(node)\r\n\t\t * @param {mixed} node the node whose children will be redrawn\r\n\t\t */\r\n\t\tdraw_children : function (node) {\r\n\t\t\tvar obj = this.get_node(node),\r\n\t\t\t\ti = false,\r\n\t\t\t\tj = false,\r\n\t\t\t\tk = false,\r\n\t\t\t\td = document;\r\n\t\t\tif(!obj) { return false; }\r\n\t\t\tif(obj.id === $.jstree.root) { return this.redraw(true); }\r\n\t\t\tnode = this.get_node(node, true);\r\n\t\t\tif(!node || !node.length) { return false; } // TODO: quick toggle\r\n\r\n\t\t\tnode.children('.jstree-children').remove();\r\n\t\t\tnode = node[0];\r\n\t\t\tif(obj.children.length && obj.state.loaded) {\r\n\t\t\t\tk = d.createElement('UL');\r\n\t\t\t\tk.setAttribute('role', 'group');\r\n\t\t\t\tk.className = 'jstree-children';\r\n\t\t\t\tfor(i = 0, j = obj.children.length; i < j; i++) {\r\n\t\t\t\t\tk.appendChild(this.redraw_node(obj.children[i], true, true));\r\n\t\t\t\t}\r\n\t\t\t\tnode.appendChild(k);\r\n\t\t\t}\r\n\t\t},\r\n\t\t/**\r\n\t\t * redraws a single node. Used internally.\r\n\t\t * @private\r\n\t\t * @name redraw_node(node, deep, is_callback, force_render)\r\n\t\t * @param {mixed} node the node to redraw\r\n\t\t * @param {Boolean} deep should child nodes be redrawn too\r\n\t\t * @param {Boolean} is_callback is this a recursion call\r\n\t\t * @param {Boolean} force_render should children of closed parents be drawn anyway\r\n\t\t */\r\n\t\tredraw_node : function (node, deep, is_callback, force_render) {\r\n\t\t\tvar obj = this.get_node(node),\r\n\t\t\t\tpar = false,\r\n\t\t\t\tind = false,\r\n\t\t\t\told = false,\r\n\t\t\t\ti = false,\r\n\t\t\t\tj = false,\r\n\t\t\t\tk = false,\r\n\t\t\t\tc = '',\r\n\t\t\t\td = document,\r\n\t\t\t\tm = this._model.data,\r\n\t\t\t\tf = false,\r\n\t\t\t\ts = false,\r\n\t\t\t\ttmp = null,\r\n\t\t\t\tt = 0,\r\n\t\t\t\tl = 0,\r\n\t\t\t\thas_children = false,\r\n\t\t\t\tlast_sibling = false;\r\n\t\t\tif(!obj) { return false; }\r\n\t\t\tif(obj.id === $.jstree.root) {  return this.redraw(true); }\r\n\t\t\tdeep = deep || obj.children.length === 0;\r\n\t\t\tnode = !document.querySelector ? document.getElementById(obj.id) : this.element[0].querySelector('#' + (\"0123456789\".indexOf(obj.id[0]) !== -1 ? '\\\\3' + obj.id[0] + ' ' + obj.id.substr(1).replace($.jstree.idregex,'\\\\$&') : obj.id.replace($.jstree.idregex,'\\\\$&')) ); //, this.element);\r\n\t\t\tif(!node) {\r\n\t\t\t\tdeep = true;\r\n\t\t\t\t//node = d.createElement('LI');\r\n\t\t\t\tif(!is_callback) {\r\n\t\t\t\t\tpar = obj.parent !== $.jstree.root ? $('#' + obj.parent.replace($.jstree.idregex,'\\\\$&'), this.element)[0] : null;\r\n\t\t\t\t\tif(par !== null && (!par || !m[obj.parent].state.opened)) {\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tind = $.inArray(obj.id, par === null ? m[$.jstree.root].children : m[obj.parent].children);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tnode = $(node);\r\n\t\t\t\tif(!is_callback) {\r\n\t\t\t\t\tpar = node.parent().parent()[0];\r\n\t\t\t\t\tif(par === this.element[0]) {\r\n\t\t\t\t\t\tpar = null;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tind = node.index();\r\n\t\t\t\t}\r\n\t\t\t\t// m[obj.id].data = node.data(); // use only node's data, no need to touch jquery storage\r\n\t\t\t\tif(!deep && obj.children.length && !node.children('.jstree-children').length) {\r\n\t\t\t\t\tdeep = true;\r\n\t\t\t\t}\r\n\t\t\t\tif(!deep) {\r\n\t\t\t\t\told = node.children('.jstree-children')[0];\r\n\t\t\t\t}\r\n\t\t\t\tf = node.children('.jstree-anchor')[0] === document.activeElement;\r\n\t\t\t\tnode.remove();\r\n\t\t\t\t//node = d.createElement('LI');\r\n\t\t\t\t//node = node[0];\r\n\t\t\t}\r\n\t\t\tnode = this._data.core.node.cloneNode(true);\r\n\t\t\t// node is DOM, deep is boolean\r\n\r\n\t\t\tc = 'jstree-node ';\r\n\t\t\tfor(i in obj.li_attr) {\r\n\t\t\t\tif(obj.li_attr.hasOwnProperty(i)) {\r\n\t\t\t\t\tif(i === 'id') { continue; }\r\n\t\t\t\t\tif(i !== 'class') {\r\n\t\t\t\t\t\tnode.setAttribute(i, obj.li_attr[i]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tc += obj.li_attr[i];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(!obj.a_attr.id) {\r\n\t\t\t\tobj.a_attr.id = obj.id + '_anchor';\r\n\t\t\t}\r\n\t\t\tnode.setAttribute('aria-selected', !!obj.state.selected);\r\n\t\t\tnode.setAttribute('aria-level', obj.parents.length);\r\n\t\t\tnode.setAttribute('aria-labelledby', obj.a_attr.id);\r\n\t\t\tif(obj.state.disabled) {\r\n\t\t\t\tnode.setAttribute('aria-disabled', true);\r\n\t\t\t}\r\n\r\n\t\t\tfor(i = 0, j = obj.children.length; i < j; i++) {\r\n\t\t\t\tif(!m[obj.children[i]].state.hidden) {\r\n\t\t\t\t\thas_children = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(obj.parent !== null && m[obj.parent] && !obj.state.hidden) {\r\n\t\t\t\ti = $.inArray(obj.id, m[obj.parent].children);\r\n\t\t\t\tlast_sibling = obj.id;\r\n\t\t\t\tif(i !== -1) {\r\n\t\t\t\t\ti++;\r\n\t\t\t\t\tfor(j = m[obj.parent].children.length; i < j; i++) {\r\n\t\t\t\t\t\tif(!m[m[obj.parent].children[i]].state.hidden) {\r\n\t\t\t\t\t\t\tlast_sibling = m[obj.parent].children[i];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(last_sibling !== obj.id) {\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif(obj.state.hidden) {\r\n\t\t\t\tc += ' jstree-hidden';\r\n\t\t\t}\r\n\t\t\tif (obj.state.loading) {\r\n\t\t\t\tc += ' jstree-loading';\r\n\t\t\t}\r\n\t\t\tif(obj.state.loaded && !has_children) {\r\n\t\t\t\tc += ' jstree-leaf';\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tc += obj.state.opened && obj.state.loaded ? ' jstree-open' : ' jstree-closed';\r\n\t\t\t\tnode.setAttribute('aria-expanded', (obj.state.opened && obj.state.loaded) );\r\n\t\t\t}\r\n\t\t\tif(last_sibling === obj.id) {\r\n\t\t\t\tc += ' jstree-last';\r\n\t\t\t}\r\n\t\t\tnode.id = obj.id;\r\n\t\t\tnode.className = c;\r\n\t\t\tc = ( obj.state.selected ? ' jstree-clicked' : '') + ( obj.state.disabled ? ' jstree-disabled' : '');\r\n\t\t\tfor(j in obj.a_attr) {\r\n\t\t\t\tif(obj.a_attr.hasOwnProperty(j)) {\r\n\t\t\t\t\tif(j === 'href' && obj.a_attr[j] === '#') { continue; }\r\n\t\t\t\t\tif(j !== 'class') {\r\n\t\t\t\t\t\tnode.childNodes[1].setAttribute(j, obj.a_attr[j]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tc += ' ' + obj.a_attr[j];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(c.length) {\r\n\t\t\t\tnode.childNodes[1].className = 'jstree-anchor ' + c;\r\n\t\t\t}\r\n\t\t\tif((obj.icon && obj.icon !== true) || obj.icon === false) {\r\n\t\t\t\tif(obj.icon === false) {\r\n\t\t\t\t\tnode.childNodes[1].childNodes[0].className += ' jstree-themeicon-hidden';\r\n\t\t\t\t}\r\n\t\t\t\telse if(obj.icon.indexOf('/') === -1 && obj.icon.indexOf('.') === -1) {\r\n\t\t\t\t\tnode.childNodes[1].childNodes[0].className += ' ' + obj.icon + ' jstree-themeicon-custom';\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tnode.childNodes[1].childNodes[0].style.backgroundImage = 'url(\"'+obj.icon+'\")';\r\n\t\t\t\t\tnode.childNodes[1].childNodes[0].style.backgroundPosition = 'center center';\r\n\t\t\t\t\tnode.childNodes[1].childNodes[0].style.backgroundSize = 'auto';\r\n\t\t\t\t\tnode.childNodes[1].childNodes[0].className += ' jstree-themeicon-custom';\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif(this.settings.core.force_text) {\r\n\t\t\t\tnode.childNodes[1].appendChild(d.createTextNode(obj.text));\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tnode.childNodes[1].innerHTML += obj.text;\r\n\t\t\t}\r\n\r\n\r\n\t\t\tif(deep && obj.children.length && (obj.state.opened || force_render) && obj.state.loaded) {\r\n\t\t\t\tk = d.createElement('UL');\r\n\t\t\t\tk.setAttribute('role', 'group');\r\n\t\t\t\tk.className = 'jstree-children';\r\n\t\t\t\tfor(i = 0, j = obj.children.length; i < j; i++) {\r\n\t\t\t\t\tk.appendChild(this.redraw_node(obj.children[i], deep, true));\r\n\t\t\t\t}\r\n\t\t\t\tnode.appendChild(k);\r\n\t\t\t}\r\n\t\t\tif(old) {\r\n\t\t\t\tnode.appendChild(old);\r\n\t\t\t}\r\n\t\t\tif(!is_callback) {\r\n\t\t\t\t// append back using par / ind\r\n\t\t\t\tif(!par) {\r\n\t\t\t\t\tpar = this.element[0];\r\n\t\t\t\t}\r\n\t\t\t\tfor(i = 0, j = par.childNodes.length; i < j; i++) {\r\n\t\t\t\t\tif(par.childNodes[i] && par.childNodes[i].className && par.childNodes[i].className.indexOf('jstree-children') !== -1) {\r\n\t\t\t\t\t\ttmp = par.childNodes[i];\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif(!tmp) {\r\n\t\t\t\t\ttmp = d.createElement('UL');\r\n\t\t\t\t\ttmp.setAttribute('role', 'group');\r\n\t\t\t\t\ttmp.className = 'jstree-children';\r\n\t\t\t\t\tpar.appendChild(tmp);\r\n\t\t\t\t}\r\n\t\t\t\tpar = tmp;\r\n\r\n\t\t\t\tif(ind < par.childNodes.length) {\r\n\t\t\t\t\tpar.insertBefore(node, par.childNodes[ind]);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tpar.appendChild(node);\r\n\t\t\t\t}\r\n\t\t\t\tif(f) {\r\n\t\t\t\t\tt = this.element[0].scrollTop;\r\n\t\t\t\t\tl = this.element[0].scrollLeft;\r\n\t\t\t\t\tnode.childNodes[1].focus();\r\n\t\t\t\t\tthis.element[0].scrollTop = t;\r\n\t\t\t\t\tthis.element[0].scrollLeft = l;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(obj.state.opened && !obj.state.loaded) {\r\n\t\t\t\tobj.state.opened = false;\r\n\t\t\t\tsetTimeout($.proxy(function () {\r\n\t\t\t\t\tthis.open_node(obj.id, false, 0);\r\n\t\t\t\t}, this), 0);\r\n\t\t\t}\r\n\t\t\treturn node;\r\n\t\t},\r\n\t\t/**\r\n\t\t * opens a node, revaling its children. If the node is not loaded it will be loaded and opened once ready.\r\n\t\t * @name open_node(obj [, callback, animation])\r\n\t\t * @param {mixed} obj the node to open\r\n\t\t * @param {Function} callback a function to execute once the node is opened\r\n\t\t * @param {Number} animation the animation duration in milliseconds when opening the node (overrides the `core.animation` setting). Use `false` for no animation.\r\n\t\t * @trigger open_node.jstree, after_open.jstree, before_open.jstree\r\n\t\t */\r\n\t\topen_node : function (obj, callback, animation) {\r\n\t\t\tvar t1, t2, d, t;\r\n\t\t\tif($.isArray(obj)) {\r\n\t\t\t\tobj = obj.slice();\r\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\r\n\t\t\t\t\tthis.open_node(obj[t1], callback, animation);\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tanimation = animation === undefined ? this.settings.core.animation : animation;\r\n\t\t\tif(!this.is_closed(obj)) {\r\n\t\t\t\tif(callback) {\r\n\t\t\t\t\tcallback.call(this, obj, false);\r\n\t\t\t\t}\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif(!this.is_loaded(obj)) {\r\n\t\t\t\tif(this.is_loading(obj)) {\r\n\t\t\t\t\treturn setTimeout($.proxy(function () {\r\n\t\t\t\t\t\tthis.open_node(obj, callback, animation);\r\n\t\t\t\t\t}, this), 500);\r\n\t\t\t\t}\r\n\t\t\t\tthis.load_node(obj, function (o, ok) {\r\n\t\t\t\t\treturn ok ? this.open_node(o, callback, animation) : (callback ? callback.call(this, o, false) : false);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\td = this.get_node(obj, true);\r\n\t\t\t\tt = this;\r\n\t\t\t\tif(d.length) {\r\n\t\t\t\t\tif(animation && d.children(\".jstree-children\").length) {\r\n\t\t\t\t\t\td.children(\".jstree-children\").stop(true, true);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(obj.children.length && !this._firstChild(d.children('.jstree-children')[0])) {\r\n\t\t\t\t\t\tthis.draw_children(obj);\r\n\t\t\t\t\t\t//d = this.get_node(obj, true);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(!animation) {\r\n\t\t\t\t\t\tthis.trigger('before_open', { \"node\" : obj });\r\n\t\t\t\t\t\td[0].className = d[0].className.replace('jstree-closed', 'jstree-open');\r\n\t\t\t\t\t\td[0].setAttribute(\"aria-expanded\", true);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tthis.trigger('before_open', { \"node\" : obj });\r\n\t\t\t\t\t\td\r\n\t\t\t\t\t\t\t.children(\".jstree-children\").css(\"display\",\"none\").end()\r\n\t\t\t\t\t\t\t.removeClass(\"jstree-closed\").addClass(\"jstree-open\").attr(\"aria-expanded\", true)\r\n\t\t\t\t\t\t\t.children(\".jstree-children\").stop(true, true)\r\n\t\t\t\t\t\t\t\t.slideDown(animation, function () {\r\n\t\t\t\t\t\t\t\t\tthis.style.display = \"\";\r\n\t\t\t\t\t\t\t\t\tif (t.element) {\r\n\t\t\t\t\t\t\t\t\t\tt.trigger(\"after_open\", { \"node\" : obj });\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tobj.state.opened = true;\r\n\t\t\t\tif(callback) {\r\n\t\t\t\t\tcallback.call(this, obj, true);\r\n\t\t\t\t}\r\n\t\t\t\tif(!d.length) {\r\n\t\t\t\t\t/**\r\n\t\t\t\t\t * triggered when a node is about to be opened (if the node is supposed to be in the DOM, it will be, but it won't be visible yet)\r\n\t\t\t\t\t * @event\r\n\t\t\t\t\t * @name before_open.jstree\r\n\t\t\t\t\t * @param {Object} node the opened node\r\n\t\t\t\t\t */\r\n\t\t\t\t\tthis.trigger('before_open', { \"node\" : obj });\r\n\t\t\t\t}\r\n\t\t\t\t/**\r\n\t\t\t\t * triggered when a node is opened (if there is an animation it will not be completed yet)\r\n\t\t\t\t * @event\r\n\t\t\t\t * @name open_node.jstree\r\n\t\t\t\t * @param {Object} node the opened node\r\n\t\t\t\t */\r\n\t\t\t\tthis.trigger('open_node', { \"node\" : obj });\r\n\t\t\t\tif(!animation || !d.length) {\r\n\t\t\t\t\t/**\r\n\t\t\t\t\t * triggered when a node is opened and the animation is complete\r\n\t\t\t\t\t * @event\r\n\t\t\t\t\t * @name after_open.jstree\r\n\t\t\t\t\t * @param {Object} node the opened node\r\n\t\t\t\t\t */\r\n\t\t\t\t\tthis.trigger(\"after_open\", { \"node\" : obj });\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t},\r\n\t\t/**\r\n\t\t * opens every parent of a node (node should be loaded)\r\n\t\t * @name _open_to(obj)\r\n\t\t * @param {mixed} obj the node to reveal\r\n\t\t * @private\r\n\t\t */\r\n\t\t_open_to : function (obj) {\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tvar i, j, p = obj.parents;\r\n\t\t\tfor(i = 0, j = p.length; i < j; i+=1) {\r\n\t\t\t\tif(i !== $.jstree.root) {\r\n\t\t\t\t\tthis.open_node(p[i], false, 0);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn $('#' + obj.id.replace($.jstree.idregex,'\\\\$&'), this.element);\r\n\t\t},\r\n\t\t/**\r\n\t\t * closes a node, hiding its children\r\n\t\t * @name close_node(obj [, animation])\r\n\t\t * @param {mixed} obj the node to close\r\n\t\t * @param {Number} animation the animation duration in milliseconds when closing the node (overrides the `core.animation` setting). Use `false` for no animation.\r\n\t\t * @trigger close_node.jstree, after_close.jstree\r\n\t\t */\r\n\t\tclose_node : function (obj, animation) {\r\n\t\t\tvar t1, t2, t, d;\r\n\t\t\tif($.isArray(obj)) {\r\n\t\t\t\tobj = obj.slice();\r\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\r\n\t\t\t\t\tthis.close_node(obj[t1], animation);\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif(this.is_closed(obj)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tanimation = animation === undefined ? this.settings.core.animation : animation;\r\n\t\t\tt = this;\r\n\t\t\td = this.get_node(obj, true);\r\n\r\n\t\t\tobj.state.opened = false;\r\n\t\t\t/**\r\n\t\t\t * triggered when a node is closed (if there is an animation it will not be complete yet)\r\n\t\t\t * @event\r\n\t\t\t * @name close_node.jstree\r\n\t\t\t * @param {Object} node the closed node\r\n\t\t\t */\r\n\t\t\tthis.trigger('close_node',{ \"node\" : obj });\r\n\t\t\tif(!d.length) {\r\n\t\t\t\t/**\r\n\t\t\t\t * triggered when a node is closed and the animation is complete\r\n\t\t\t\t * @event\r\n\t\t\t\t * @name after_close.jstree\r\n\t\t\t\t * @param {Object} node the closed node\r\n\t\t\t\t */\r\n\t\t\t\tthis.trigger(\"after_close\", { \"node\" : obj });\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif(!animation) {\r\n\t\t\t\t\td[0].className = d[0].className.replace('jstree-open', 'jstree-closed');\r\n\t\t\t\t\td.attr(\"aria-expanded\", false).children('.jstree-children').remove();\r\n\t\t\t\t\tthis.trigger(\"after_close\", { \"node\" : obj });\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\td\r\n\t\t\t\t\t\t.children(\".jstree-children\").attr(\"style\",\"display:block !important\").end()\r\n\t\t\t\t\t\t.removeClass(\"jstree-open\").addClass(\"jstree-closed\").attr(\"aria-expanded\", false)\r\n\t\t\t\t\t\t.children(\".jstree-children\").stop(true, true).slideUp(animation, function () {\r\n\t\t\t\t\t\t\tthis.style.display = \"\";\r\n\t\t\t\t\t\t\td.children('.jstree-children').remove();\r\n\t\t\t\t\t\t\tif (t.element) {\r\n\t\t\t\t\t\t\t\tt.trigger(\"after_close\", { \"node\" : obj });\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\t/**\r\n\t\t * toggles a node - closing it if it is open, opening it if it is closed\r\n\t\t * @name toggle_node(obj)\r\n\t\t * @param {mixed} obj the node to toggle\r\n\t\t */\r\n\t\ttoggle_node : function (obj) {\r\n\t\t\tvar t1, t2;\r\n\t\t\tif($.isArray(obj)) {\r\n\t\t\t\tobj = obj.slice();\r\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\r\n\t\t\t\t\tthis.toggle_node(obj[t1]);\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tif(this.is_closed(obj)) {\r\n\t\t\t\treturn this.open_node(obj);\r\n\t\t\t}\r\n\t\t\tif(this.is_open(obj)) {\r\n\t\t\t\treturn this.close_node(obj);\r\n\t\t\t}\r\n\t\t},\r\n\t\t/**\r\n\t\t * opens all nodes within a node (or the tree), revaling their children. If the node is not loaded it will be loaded and opened once ready.\r\n\t\t * @name open_all([obj, animation, original_obj])\r\n\t\t * @param {mixed} obj the node to open recursively, omit to open all nodes in the tree\r\n\t\t * @param {Number} animation the animation duration in milliseconds when opening the nodes, the default is no animation\r\n\t\t * @param {jQuery} reference to the node that started the process (internal use)\r\n\t\t * @trigger open_all.jstree\r\n\t\t */\r\n\t\topen_all : function (obj, animation, original_obj) {\r\n\t\t\tif(!obj) { obj = $.jstree.root; }\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj) { return false; }\r\n\t\t\tvar dom = obj.id === $.jstree.root ? this.get_container_ul() : this.get_node(obj, true), i, j, _this;\r\n\t\t\tif(!dom.length) {\r\n\t\t\t\tfor(i = 0, j = obj.children_d.length; i < j; i++) {\r\n\t\t\t\t\tif(this.is_closed(this._model.data[obj.children_d[i]])) {\r\n\t\t\t\t\t\tthis._model.data[obj.children_d[i]].state.opened = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn this.trigger('open_all', { \"node\" : obj });\r\n\t\t\t}\r\n\t\t\toriginal_obj = original_obj || dom;\r\n\t\t\t_this = this;\r\n\t\t\tdom = this.is_closed(obj) ? dom.find('.jstree-closed').addBack() : dom.find('.jstree-closed');\r\n\t\t\tdom.each(function () {\r\n\t\t\t\t_this.open_node(\r\n\t\t\t\t\tthis,\r\n\t\t\t\t\tfunction(node, status) { if(status && this.is_parent(node)) { this.open_all(node, animation, original_obj); } },\r\n\t\t\t\t\tanimation || 0\r\n\t\t\t\t);\r\n\t\t\t});\r\n\t\t\tif(original_obj.find('.jstree-closed').length === 0) {\r\n\t\t\t\t/**\r\n\t\t\t\t * triggered when an `open_all` call completes\r\n\t\t\t\t * @event\r\n\t\t\t\t * @name open_all.jstree\r\n\t\t\t\t * @param {Object} node the opened node\r\n\t\t\t\t */\r\n\t\t\t\tthis.trigger('open_all', { \"node\" : this.get_node(original_obj) });\r\n\t\t\t}\r\n\t\t},\r\n\t\t/**\r\n\t\t * closes all nodes within a node (or the tree), revaling their children\r\n\t\t * @name close_all([obj, animation])\r\n\t\t * @param {mixed} obj the node to close recursively, omit to close all nodes in the tree\r\n\t\t * @param {Number} animation the animation duration in milliseconds when closing the nodes, the default is no animation\r\n\t\t * @trigger close_all.jstree\r\n\t\t */\r\n\t\tclose_all : function (obj, animation) {\r\n\t\t\tif(!obj) { obj = $.jstree.root; }\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj) { return false; }\r\n\t\t\tvar dom = obj.id === $.jstree.root ? this.get_container_ul() : this.get_node(obj, true),\r\n\t\t\t\t_this = this, i, j;\r\n\t\t\tif(dom.length) {\r\n\t\t\t\tdom = this.is_open(obj) ? dom.find('.jstree-open').addBack() : dom.find('.jstree-open');\r\n\t\t\t\t$(dom.get().reverse()).each(function () { _this.close_node(this, animation || 0); });\r\n\t\t\t}\r\n\t\t\tfor(i = 0, j = obj.children_d.length; i < j; i++) {\r\n\t\t\t\tthis._model.data[obj.children_d[i]].state.opened = false;\r\n\t\t\t}\r\n\t\t\t/**\r\n\t\t\t * triggered when an `close_all` call completes\r\n\t\t\t * @event\r\n\t\t\t * @name close_all.jstree\r\n\t\t\t * @param {Object} node the closed node\r\n\t\t\t */\r\n\t\t\tthis.trigger('close_all', { \"node\" : obj });\r\n\t\t},\r\n\t\t/**\r\n\t\t * checks if a node is disabled (not selectable)\r\n\t\t * @name is_disabled(obj)\r\n\t\t * @param  {mixed} obj\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tis_disabled : function (obj) {\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\treturn obj && obj.state && obj.state.disabled;\r\n\t\t},\r\n\t\t/**\r\n\t\t * enables a node - so that it can be selected\r\n\t\t * @name enable_node(obj)\r\n\t\t * @param {mixed} obj the node to enable\r\n\t\t * @trigger enable_node.jstree\r\n\t\t */\r\n\t\tenable_node : function (obj) {\r\n\t\t\tvar t1, t2;\r\n\t\t\tif($.isArray(obj)) {\r\n\t\t\t\tobj = obj.slice();\r\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\r\n\t\t\t\t\tthis.enable_node(obj[t1]);\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tobj.state.disabled = false;\r\n\t\t\tthis.get_node(obj,true).children('.jstree-anchor').removeClass('jstree-disabled').attr('aria-disabled', false);\r\n\t\t\t/**\r\n\t\t\t * triggered when an node is enabled\r\n\t\t\t * @event\r\n\t\t\t * @name enable_node.jstree\r\n\t\t\t * @param {Object} node the enabled node\r\n\t\t\t */\r\n\t\t\tthis.trigger('enable_node', { 'node' : obj });\r\n\t\t},\r\n\t\t/**\r\n\t\t * disables a node - so that it can not be selected\r\n\t\t * @name disable_node(obj)\r\n\t\t * @param {mixed} obj the node to disable\r\n\t\t * @trigger disable_node.jstree\r\n\t\t */\r\n\t\tdisable_node : function (obj) {\r\n\t\t\tvar t1, t2;\r\n\t\t\tif($.isArray(obj)) {\r\n\t\t\t\tobj = obj.slice();\r\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\r\n\t\t\t\t\tthis.disable_node(obj[t1]);\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tobj.state.disabled = true;\r\n\t\t\tthis.get_node(obj,true).children('.jstree-anchor').addClass('jstree-disabled').attr('aria-disabled', true);\r\n\t\t\t/**\r\n\t\t\t * triggered when an node is disabled\r\n\t\t\t * @event\r\n\t\t\t * @name disable_node.jstree\r\n\t\t\t * @param {Object} node the disabled node\r\n\t\t\t */\r\n\t\t\tthis.trigger('disable_node', { 'node' : obj });\r\n\t\t},\r\n\t\t/**\r\n\t\t * determines if a node is hidden\r\n\t\t * @name is_hidden(obj)\r\n\t\t * @param {mixed} obj the node\r\n\t\t */\r\n\t\tis_hidden : function (obj) {\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\treturn obj.state.hidden === true;\r\n\t\t},\r\n\t\t/**\r\n\t\t * hides a node - it is still in the structure but will not be visible\r\n\t\t * @name hide_node(obj)\r\n\t\t * @param {mixed} obj the node to hide\r\n\t\t * @param {Boolean} skip_redraw internal parameter controlling if redraw is called\r\n\t\t * @trigger hide_node.jstree\r\n\t\t */\r\n\t\thide_node : function (obj, skip_redraw) {\r\n\t\t\tvar t1, t2;\r\n\t\t\tif($.isArray(obj)) {\r\n\t\t\t\tobj = obj.slice();\r\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\r\n\t\t\t\t\tthis.hide_node(obj[t1], true);\r\n\t\t\t\t}\r\n\t\t\t\tif (!skip_redraw) {\r\n\t\t\t\t\tthis.redraw();\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif(!obj.state.hidden) {\r\n\t\t\t\tobj.state.hidden = true;\r\n\t\t\t\tthis._node_changed(obj.parent);\r\n\t\t\t\tif(!skip_redraw) {\r\n\t\t\t\t\tthis.redraw();\r\n\t\t\t\t}\r\n\t\t\t\t/**\r\n\t\t\t\t * triggered when an node is hidden\r\n\t\t\t\t * @event\r\n\t\t\t\t * @name hide_node.jstree\r\n\t\t\t\t * @param {Object} node the hidden node\r\n\t\t\t\t */\r\n\t\t\t\tthis.trigger('hide_node', { 'node' : obj });\r\n\t\t\t}\r\n\t\t},\r\n\t\t/**\r\n\t\t * shows a node\r\n\t\t * @name show_node(obj)\r\n\t\t * @param {mixed} obj the node to show\r\n\t\t * @param {Boolean} skip_redraw internal parameter controlling if redraw is called\r\n\t\t * @trigger show_node.jstree\r\n\t\t */\r\n\t\tshow_node : function (obj, skip_redraw) {\r\n\t\t\tvar t1, t2;\r\n\t\t\tif($.isArray(obj)) {\r\n\t\t\t\tobj = obj.slice();\r\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\r\n\t\t\t\t\tthis.show_node(obj[t1], true);\r\n\t\t\t\t}\r\n\t\t\t\tif (!skip_redraw) {\r\n\t\t\t\t\tthis.redraw();\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif(obj.state.hidden) {\r\n\t\t\t\tobj.state.hidden = false;\r\n\t\t\t\tthis._node_changed(obj.parent);\r\n\t\t\t\tif(!skip_redraw) {\r\n\t\t\t\t\tthis.redraw();\r\n\t\t\t\t}\r\n\t\t\t\t/**\r\n\t\t\t\t * triggered when an node is shown\r\n\t\t\t\t * @event\r\n\t\t\t\t * @name show_node.jstree\r\n\t\t\t\t * @param {Object} node the shown node\r\n\t\t\t\t */\r\n\t\t\t\tthis.trigger('show_node', { 'node' : obj });\r\n\t\t\t}\r\n\t\t},\r\n\t\t/**\r\n\t\t * hides all nodes\r\n\t\t * @name hide_all()\r\n\t\t * @trigger hide_all.jstree\r\n\t\t */\r\n\t\thide_all : function (skip_redraw) {\r\n\t\t\tvar i, m = this._model.data, ids = [];\r\n\t\t\tfor(i in m) {\r\n\t\t\t\tif(m.hasOwnProperty(i) && i !== $.jstree.root && !m[i].state.hidden) {\r\n\t\t\t\t\tm[i].state.hidden = true;\r\n\t\t\t\t\tids.push(i);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis._model.force_full_redraw = true;\r\n\t\t\tif(!skip_redraw) {\r\n\t\t\t\tthis.redraw();\r\n\t\t\t}\r\n\t\t\t/**\r\n\t\t\t * triggered when all nodes are hidden\r\n\t\t\t * @event\r\n\t\t\t * @name hide_all.jstree\r\n\t\t\t * @param {Array} nodes the IDs of all hidden nodes\r\n\t\t\t */\r\n\t\t\tthis.trigger('hide_all', { 'nodes' : ids });\r\n\t\t\treturn ids;\r\n\t\t},\r\n\t\t/**\r\n\t\t * shows all nodes\r\n\t\t * @name show_all()\r\n\t\t * @trigger show_all.jstree\r\n\t\t */\r\n\t\tshow_all : function (skip_redraw) {\r\n\t\t\tvar i, m = this._model.data, ids = [];\r\n\t\t\tfor(i in m) {\r\n\t\t\t\tif(m.hasOwnProperty(i) && i !== $.jstree.root && m[i].state.hidden) {\r\n\t\t\t\t\tm[i].state.hidden = false;\r\n\t\t\t\t\tids.push(i);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis._model.force_full_redraw = true;\r\n\t\t\tif(!skip_redraw) {\r\n\t\t\t\tthis.redraw();\r\n\t\t\t}\r\n\t\t\t/**\r\n\t\t\t * triggered when all nodes are shown\r\n\t\t\t * @event\r\n\t\t\t * @name show_all.jstree\r\n\t\t\t * @param {Array} nodes the IDs of all shown nodes\r\n\t\t\t */\r\n\t\t\tthis.trigger('show_all', { 'nodes' : ids });\r\n\t\t\treturn ids;\r\n\t\t},\r\n\t\t/**\r\n\t\t * called when a node is selected by the user. Used internally.\r\n\t\t * @private\r\n\t\t * @name activate_node(obj, e)\r\n\t\t * @param {mixed} obj the node\r\n\t\t * @param {Object} e the related event\r\n\t\t * @trigger activate_node.jstree, changed.jstree\r\n\t\t */\r\n\t\tactivate_node : function (obj, e) {\r\n\t\t\tif(this.is_disabled(obj)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif(!e || typeof e !== 'object') {\r\n\t\t\t\te = {};\r\n\t\t\t}\r\n\r\n\t\t\t// ensure last_clicked is still in the DOM, make it fresh (maybe it was moved?) and make sure it is still selected, if not - make last_clicked the last selected node\r\n\t\t\tthis._data.core.last_clicked = this._data.core.last_clicked && this._data.core.last_clicked.id !== undefined ? this.get_node(this._data.core.last_clicked.id) : null;\r\n\t\t\tif(this._data.core.last_clicked && !this._data.core.last_clicked.state.selected) { this._data.core.last_clicked = null; }\r\n\t\t\tif(!this._data.core.last_clicked && this._data.core.selected.length) { this._data.core.last_clicked = this.get_node(this._data.core.selected[this._data.core.selected.length - 1]); }\r\n\r\n\t\t\tif(!this.settings.core.multiple || (!e.metaKey && !e.ctrlKey && !e.shiftKey) || (e.shiftKey && (!this._data.core.last_clicked || !this.get_parent(obj) || this.get_parent(obj) !== this._data.core.last_clicked.parent ) )) {\r\n\t\t\t\tif(!this.settings.core.multiple && (e.metaKey || e.ctrlKey || e.shiftKey) && this.is_selected(obj)) {\r\n\t\t\t\t\tthis.deselect_node(obj, false, e);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.deselect_all(true);\r\n\t\t\t\t\tthis.select_node(obj, false, false, e);\r\n\t\t\t\t\tthis._data.core.last_clicked = this.get_node(obj);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif(e.shiftKey) {\r\n\t\t\t\t\tvar o = this.get_node(obj).id,\r\n\t\t\t\t\t\tl = this._data.core.last_clicked.id,\r\n\t\t\t\t\t\tp = this.get_node(this._data.core.last_clicked.parent).children,\r\n\t\t\t\t\t\tc = false,\r\n\t\t\t\t\t\ti, j;\r\n\t\t\t\t\tfor(i = 0, j = p.length; i < j; i += 1) {\r\n\t\t\t\t\t\t// separate IFs work whem o and l are the same\r\n\t\t\t\t\t\tif(p[i] === o) {\r\n\t\t\t\t\t\t\tc = !c;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(p[i] === l) {\r\n\t\t\t\t\t\t\tc = !c;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(!this.is_disabled(p[i]) && (c || p[i] === o || p[i] === l)) {\r\n\t\t\t\t\t\t\tif (!this.is_hidden(p[i])) {\r\n\t\t\t\t\t\t\t\tthis.select_node(p[i], true, false, e);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tthis.deselect_node(p[i], true, e);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.trigger('changed', { 'action' : 'select_node', 'node' : this.get_node(obj), 'selected' : this._data.core.selected, 'event' : e });\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tif(!this.is_selected(obj)) {\r\n\t\t\t\t\t\tthis.select_node(obj, false, false, e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tthis.deselect_node(obj, false, e);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t/**\r\n\t\t\t * triggered when an node is clicked or intercated with by the user\r\n\t\t\t * @event\r\n\t\t\t * @name activate_node.jstree\r\n\t\t\t * @param {Object} node\r\n\t\t\t * @param {Object} event the ooriginal event (if any) which triggered the call (may be an empty object)\r\n\t\t\t */\r\n\t\t\tthis.trigger('activate_node', { 'node' : this.get_node(obj), 'event' : e });\r\n\t\t},\r\n\t\t/**\r\n\t\t * applies the hover state on a node, called when a node is hovered by the user. Used internally.\r\n\t\t * @private\r\n\t\t * @name hover_node(obj)\r\n\t\t * @param {mixed} obj\r\n\t\t * @trigger hover_node.jstree\r\n\t\t */\r\n\t\thover_node : function (obj) {\r\n\t\t\tobj = this.get_node(obj, true);\r\n\t\t\tif(!obj || !obj.length || obj.children('.jstree-hovered').length) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tvar o = this.element.find('.jstree-hovered'), t = this.element;\r\n\t\t\tif(o && o.length) { this.dehover_node(o); }\r\n\r\n\t\t\tobj.children('.jstree-anchor').addClass('jstree-hovered');\r\n\t\t\t/**\r\n\t\t\t * triggered when an node is hovered\r\n\t\t\t * @event\r\n\t\t\t * @name hover_node.jstree\r\n\t\t\t * @param {Object} node\r\n\t\t\t */\r\n\t\t\tthis.trigger('hover_node', { 'node' : this.get_node(obj) });\r\n\t\t\tsetTimeout(function () { t.attr('aria-activedescendant', obj[0].id); }, 0);\r\n\t\t},\r\n\t\t/**\r\n\t\t * removes the hover state from a nodecalled when a node is no longer hovered by the user. Used internally.\r\n\t\t * @private\r\n\t\t * @name dehover_node(obj)\r\n\t\t * @param {mixed} obj\r\n\t\t * @trigger dehover_node.jstree\r\n\t\t */\r\n\t\tdehover_node : function (obj) {\r\n\t\t\tobj = this.get_node(obj, true);\r\n\t\t\tif(!obj || !obj.length || !obj.children('.jstree-hovered').length) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tobj.children('.jstree-anchor').removeClass('jstree-hovered');\r\n\t\t\t/**\r\n\t\t\t * triggered when an node is no longer hovered\r\n\t\t\t * @event\r\n\t\t\t * @name dehover_node.jstree\r\n\t\t\t * @param {Object} node\r\n\t\t\t */\r\n\t\t\tthis.trigger('dehover_node', { 'node' : this.get_node(obj) });\r\n\t\t},\r\n\t\t/**\r\n\t\t * select a node\r\n\t\t * @name select_node(obj [, supress_event, prevent_open])\r\n\t\t * @param {mixed} obj an array can be used to select multiple nodes\r\n\t\t * @param {Boolean} supress_event if set to `true` the `changed.jstree` event won't be triggered\r\n\t\t * @param {Boolean} prevent_open if set to `true` parents of the selected node won't be opened\r\n\t\t * @trigger select_node.jstree, changed.jstree\r\n\t\t */\r\n\t\tselect_node : function (obj, supress_event, prevent_open, e) {\r\n\t\t\tvar dom, t1, t2, th;\r\n\t\t\tif($.isArray(obj)) {\r\n\t\t\t\tobj = obj.slice();\r\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\r\n\t\t\t\t\tthis.select_node(obj[t1], supress_event, prevent_open, e);\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tdom = this.get_node(obj, true);\r\n\t\t\tif(!obj.state.selected) {\r\n\t\t\t\tobj.state.selected = true;\r\n\t\t\t\tthis._data.core.selected.push(obj.id);\r\n\t\t\t\tif(!prevent_open) {\r\n\t\t\t\t\tdom = this._open_to(obj);\r\n\t\t\t\t}\r\n\t\t\t\tif(dom && dom.length) {\r\n\t\t\t\t\tdom.attr('aria-selected', true).children('.jstree-anchor').addClass('jstree-clicked');\r\n\t\t\t\t}\r\n\t\t\t\t/**\r\n\t\t\t\t * triggered when an node is selected\r\n\t\t\t\t * @event\r\n\t\t\t\t * @name select_node.jstree\r\n\t\t\t\t * @param {Object} node\r\n\t\t\t\t * @param {Array} selected the current selection\r\n\t\t\t\t * @param {Object} event the event (if any) that triggered this select_node\r\n\t\t\t\t */\r\n\t\t\t\tthis.trigger('select_node', { 'node' : obj, 'selected' : this._data.core.selected, 'event' : e });\r\n\t\t\t\tif(!supress_event) {\r\n\t\t\t\t\t/**\r\n\t\t\t\t\t * triggered when selection changes\r\n\t\t\t\t\t * @event\r\n\t\t\t\t\t * @name changed.jstree\r\n\t\t\t\t\t * @param {Object} node\r\n\t\t\t\t\t * @param {Object} action the action that caused the selection to change\r\n\t\t\t\t\t * @param {Array} selected the current selection\r\n\t\t\t\t\t * @param {Object} event the event (if any) that triggered this changed event\r\n\t\t\t\t\t */\r\n\t\t\t\t\tthis.trigger('changed', { 'action' : 'select_node', 'node' : obj, 'selected' : this._data.core.selected, 'event' : e });\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\t/**\r\n\t\t * deselect a node\r\n\t\t * @name deselect_node(obj [, supress_event])\r\n\t\t * @param {mixed} obj an array can be used to deselect multiple nodes\r\n\t\t * @param {Boolean} supress_event if set to `true` the `changed.jstree` event won't be triggered\r\n\t\t * @trigger deselect_node.jstree, changed.jstree\r\n\t\t */\r\n\t\tdeselect_node : function (obj, supress_event, e) {\r\n\t\t\tvar t1, t2, dom;\r\n\t\t\tif($.isArray(obj)) {\r\n\t\t\t\tobj = obj.slice();\r\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\r\n\t\t\t\t\tthis.deselect_node(obj[t1], supress_event, e);\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tdom = this.get_node(obj, true);\r\n\t\t\tif(obj.state.selected) {\r\n\t\t\t\tobj.state.selected = false;\r\n\t\t\t\tthis._data.core.selected = $.vakata.array_remove_item(this._data.core.selected, obj.id);\r\n\t\t\t\tif(dom.length) {\r\n\t\t\t\t\tdom.attr('aria-selected', false).children('.jstree-anchor').removeClass('jstree-clicked');\r\n\t\t\t\t}\r\n\t\t\t\t/**\r\n\t\t\t\t * triggered when an node is deselected\r\n\t\t\t\t * @event\r\n\t\t\t\t * @name deselect_node.jstree\r\n\t\t\t\t * @param {Object} node\r\n\t\t\t\t * @param {Array} selected the current selection\r\n\t\t\t\t * @param {Object} event the event (if any) that triggered this deselect_node\r\n\t\t\t\t */\r\n\t\t\t\tthis.trigger('deselect_node', { 'node' : obj, 'selected' : this._data.core.selected, 'event' : e });\r\n\t\t\t\tif(!supress_event) {\r\n\t\t\t\t\tthis.trigger('changed', { 'action' : 'deselect_node', 'node' : obj, 'selected' : this._data.core.selected, 'event' : e });\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\t/**\r\n\t\t * select all nodes in the tree\r\n\t\t * @name select_all([supress_event])\r\n\t\t * @param {Boolean} supress_event if set to `true` the `changed.jstree` event won't be triggered\r\n\t\t * @trigger select_all.jstree, changed.jstree\r\n\t\t */\r\n\t\tselect_all : function (supress_event) {\r\n\t\t\tvar tmp = this._data.core.selected.concat([]), i, j;\r\n\t\t\tthis._data.core.selected = this._model.data[$.jstree.root].children_d.concat();\r\n\t\t\tfor(i = 0, j = this._data.core.selected.length; i < j; i++) {\r\n\t\t\t\tif(this._model.data[this._data.core.selected[i]]) {\r\n\t\t\t\t\tthis._model.data[this._data.core.selected[i]].state.selected = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.redraw(true);\r\n\t\t\t/**\r\n\t\t\t * triggered when all nodes are selected\r\n\t\t\t * @event\r\n\t\t\t * @name select_all.jstree\r\n\t\t\t * @param {Array} selected the current selection\r\n\t\t\t */\r\n\t\t\tthis.trigger('select_all', { 'selected' : this._data.core.selected });\r\n\t\t\tif(!supress_event) {\r\n\t\t\t\tthis.trigger('changed', { 'action' : 'select_all', 'selected' : this._data.core.selected, 'old_selection' : tmp });\r\n\t\t\t}\r\n\t\t},\r\n\t\t/**\r\n\t\t * deselect all selected nodes\r\n\t\t * @name deselect_all([supress_event])\r\n\t\t * @param {Boolean} supress_event if set to `true` the `changed.jstree` event won't be triggered\r\n\t\t * @trigger deselect_all.jstree, changed.jstree\r\n\t\t */\r\n\t\tdeselect_all : function (supress_event) {\r\n\t\t\tvar tmp = this._data.core.selected.concat([]), i, j;\r\n\t\t\tfor(i = 0, j = this._data.core.selected.length; i < j; i++) {\r\n\t\t\t\tif(this._model.data[this._data.core.selected[i]]) {\r\n\t\t\t\t\tthis._model.data[this._data.core.selected[i]].state.selected = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis._data.core.selected = [];\r\n\t\t\tthis.element.find('.jstree-clicked').removeClass('jstree-clicked').parent().attr('aria-selected', false);\r\n\t\t\t/**\r\n\t\t\t * triggered when all nodes are deselected\r\n\t\t\t * @event\r\n\t\t\t * @name deselect_all.jstree\r\n\t\t\t * @param {Object} node the previous selection\r\n\t\t\t * @param {Array} selected the current selection\r\n\t\t\t */\r\n\t\t\tthis.trigger('deselect_all', { 'selected' : this._data.core.selected, 'node' : tmp });\r\n\t\t\tif(!supress_event) {\r\n\t\t\t\tthis.trigger('changed', { 'action' : 'deselect_all', 'selected' : this._data.core.selected, 'old_selection' : tmp });\r\n\t\t\t}\r\n\t\t},\r\n\t\t/**\r\n\t\t * checks if a node is selected\r\n\t\t * @name is_selected(obj)\r\n\t\t * @param  {mixed}  obj\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tis_selected : function (obj) {\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\treturn obj.state.selected;\r\n\t\t},\r\n\t\t/**\r\n\t\t * get an array of all selected nodes\r\n\t\t * @name get_selected([full])\r\n\t\t * @param  {mixed}  full if set to `true` the returned array will consist of the full node objects, otherwise - only IDs will be returned\r\n\t\t * @return {Array}\r\n\t\t */\r\n\t\tget_selected : function (full) {\r\n\t\t\treturn full ? $.map(this._data.core.selected, $.proxy(function (i) { return this.get_node(i); }, this)) : this._data.core.selected.slice();\r\n\t\t},\r\n\t\t/**\r\n\t\t * get an array of all top level selected nodes (ignoring children of selected nodes)\r\n\t\t * @name get_top_selected([full])\r\n\t\t * @param  {mixed}  full if set to `true` the returned array will consist of the full node objects, otherwise - only IDs will be returned\r\n\t\t * @return {Array}\r\n\t\t */\r\n\t\tget_top_selected : function (full) {\r\n\t\t\tvar tmp = this.get_selected(true),\r\n\t\t\t\tobj = {}, i, j, k, l;\r\n\t\t\tfor(i = 0, j = tmp.length; i < j; i++) {\r\n\t\t\t\tobj[tmp[i].id] = tmp[i];\r\n\t\t\t}\r\n\t\t\tfor(i = 0, j = tmp.length; i < j; i++) {\r\n\t\t\t\tfor(k = 0, l = tmp[i].children_d.length; k < l; k++) {\r\n\t\t\t\t\tif(obj[tmp[i].children_d[k]]) {\r\n\t\t\t\t\t\tdelete obj[tmp[i].children_d[k]];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\ttmp = [];\r\n\t\t\tfor(i in obj) {\r\n\t\t\t\tif(obj.hasOwnProperty(i)) {\r\n\t\t\t\t\ttmp.push(i);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn full ? $.map(tmp, $.proxy(function (i) { return this.get_node(i); }, this)) : tmp;\r\n\t\t},\r\n\t\t/**\r\n\t\t * get an array of all bottom level selected nodes (ignoring selected parents)\r\n\t\t * @name get_bottom_selected([full])\r\n\t\t * @param  {mixed}  full if set to `true` the returned array will consist of the full node objects, otherwise - only IDs will be returned\r\n\t\t * @return {Array}\r\n\t\t */\r\n\t\tget_bottom_selected : function (full) {\r\n\t\t\tvar tmp = this.get_selected(true),\r\n\t\t\t\tobj = [], i, j;\r\n\t\t\tfor(i = 0, j = tmp.length; i < j; i++) {\r\n\t\t\t\tif(!tmp[i].children.length) {\r\n\t\t\t\t\tobj.push(tmp[i].id);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn full ? $.map(obj, $.proxy(function (i) { return this.get_node(i); }, this)) : obj;\r\n\t\t},\r\n\t\t/**\r\n\t\t * gets the current state of the tree so that it can be restored later with `set_state(state)`. Used internally.\r\n\t\t * @name get_state()\r\n\t\t * @private\r\n\t\t * @return {Object}\r\n\t\t */\r\n\t\tget_state : function () {\r\n\t\t\tvar state\t= {\r\n\t\t\t\t'core' : {\r\n\t\t\t\t\t'open' : [],\r\n\t\t\t\t\t'loaded' : [],\r\n\t\t\t\t\t'scroll' : {\r\n\t\t\t\t\t\t'left' : this.element.scrollLeft(),\r\n\t\t\t\t\t\t'top' : this.element.scrollTop()\r\n\t\t\t\t\t},\r\n\t\t\t\t\t/*!\r\n\t\t\t\t\t'themes' : {\r\n\t\t\t\t\t\t'name' : this.get_theme(),\r\n\t\t\t\t\t\t'icons' : this._data.core.themes.icons,\r\n\t\t\t\t\t\t'dots' : this._data.core.themes.dots\r\n\t\t\t\t\t},\r\n\t\t\t\t\t*/\r\n\t\t\t\t\t'selected' : []\r\n\t\t\t\t}\r\n\t\t\t}, i;\r\n\t\t\tfor(i in this._model.data) {\r\n\t\t\t\tif(this._model.data.hasOwnProperty(i)) {\r\n\t\t\t\t\tif(i !== $.jstree.root) {\r\n\t\t\t\t\t\tif(this._model.data[i].state.loaded && this.settings.core.loaded_state) {\r\n\t\t\t\t\t\t\tstate.core.loaded.push(i);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(this._model.data[i].state.opened) {\r\n\t\t\t\t\t\t\tstate.core.open.push(i);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(this._model.data[i].state.selected) {\r\n\t\t\t\t\t\t\tstate.core.selected.push(i);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn state;\r\n\t\t},\r\n\t\t/**\r\n\t\t * sets the state of the tree. Used internally.\r\n\t\t * @name set_state(state [, callback])\r\n\t\t * @private\r\n\t\t * @param {Object} state the state to restore. Keep in mind this object is passed by reference and jstree will modify it.\r\n\t\t * @param {Function} callback an optional function to execute once the state is restored.\r\n\t\t * @trigger set_state.jstree\r\n\t\t */\r\n\t\tset_state : function (state, callback) {\r\n\t\t\tif(state) {\r\n\t\t\t\tif(state.core && state.core.selected && state.core.initial_selection === undefined) {\r\n\t\t\t\t\tstate.core.initial_selection = this._data.core.selected.concat([]).sort().join(',');\r\n\t\t\t\t}\r\n\t\t\t\tif(state.core) {\r\n\t\t\t\t\tvar res, n, t, _this, i;\r\n\t\t\t\t\tif(state.core.loaded) {\r\n\t\t\t\t\t\tif(!this.settings.core.loaded_state || !$.isArray(state.core.loaded) || !state.core.loaded.length) {\r\n\t\t\t\t\t\t\tdelete state.core.loaded;\r\n\t\t\t\t\t\t\tthis.set_state(state, callback);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tthis._load_nodes(state.core.loaded, function (nodes) {\r\n\t\t\t\t\t\t\t\tdelete state.core.loaded;\r\n\t\t\t\t\t\t\t\tthis.set_state(state, callback);\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(state.core.open) {\r\n\t\t\t\t\t\tif(!$.isArray(state.core.open) || !state.core.open.length) {\r\n\t\t\t\t\t\t\tdelete state.core.open;\r\n\t\t\t\t\t\t\tthis.set_state(state, callback);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tthis._load_nodes(state.core.open, function (nodes) {\r\n\t\t\t\t\t\t\t\tthis.open_node(nodes, false, 0);\r\n\t\t\t\t\t\t\t\tdelete state.core.open;\r\n\t\t\t\t\t\t\t\tthis.set_state(state, callback);\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(state.core.scroll) {\r\n\t\t\t\t\t\tif(state.core.scroll && state.core.scroll.left !== undefined) {\r\n\t\t\t\t\t\t\tthis.element.scrollLeft(state.core.scroll.left);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(state.core.scroll && state.core.scroll.top !== undefined) {\r\n\t\t\t\t\t\t\tthis.element.scrollTop(state.core.scroll.top);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tdelete state.core.scroll;\r\n\t\t\t\t\t\tthis.set_state(state, callback);\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(state.core.selected) {\r\n\t\t\t\t\t\t_this = this;\r\n\t\t\t\t\t\tif (state.core.initial_selection === undefined ||\r\n\t\t\t\t\t\t\tstate.core.initial_selection === this._data.core.selected.concat([]).sort().join(',')\r\n\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\tthis.deselect_all();\r\n\t\t\t\t\t\t\t$.each(state.core.selected, function (i, v) {\r\n\t\t\t\t\t\t\t\t_this.select_node(v, false, true);\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tdelete state.core.initial_selection;\r\n\t\t\t\t\t\tdelete state.core.selected;\r\n\t\t\t\t\t\tthis.set_state(state, callback);\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tfor(i in state) {\r\n\t\t\t\t\t\tif(state.hasOwnProperty(i) && i !== \"core\" && $.inArray(i, this.settings.plugins) === -1) {\r\n\t\t\t\t\t\t\tdelete state[i];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif($.isEmptyObject(state.core)) {\r\n\t\t\t\t\t\tdelete state.core;\r\n\t\t\t\t\t\tthis.set_state(state, callback);\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif($.isEmptyObject(state)) {\r\n\t\t\t\t\tstate = null;\r\n\t\t\t\t\tif(callback) { callback.call(this); }\r\n\t\t\t\t\t/**\r\n\t\t\t\t\t * triggered when a `set_state` call completes\r\n\t\t\t\t\t * @event\r\n\t\t\t\t\t * @name set_state.jstree\r\n\t\t\t\t\t */\r\n\t\t\t\t\tthis.trigger('set_state');\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t},\r\n\t\t/**\r\n\t\t * refreshes the tree - all nodes are reloaded with calls to `load_node`.\r\n\t\t * @name refresh()\r\n\t\t * @param {Boolean} skip_loading an option to skip showing the loading indicator\r\n\t\t * @param {Mixed} forget_state if set to `true` state will not be reapplied, if set to a function (receiving the current state as argument) the result of that function will be used as state\r\n\t\t * @trigger refresh.jstree\r\n\t\t */\r\n\t\trefresh : function (skip_loading, forget_state) {\r\n\t\t\tthis._data.core.state = forget_state === true ? {} : this.get_state();\r\n\t\t\tif(forget_state && $.isFunction(forget_state)) { this._data.core.state = forget_state.call(this, this._data.core.state); }\r\n\t\t\tthis._cnt = 0;\r\n\t\t\tthis._model.data = {};\r\n\t\t\tthis._model.data[$.jstree.root] = {\r\n\t\t\t\tid : $.jstree.root,\r\n\t\t\t\tparent : null,\r\n\t\t\t\tparents : [],\r\n\t\t\t\tchildren : [],\r\n\t\t\t\tchildren_d : [],\r\n\t\t\t\tstate : { loaded : false }\r\n\t\t\t};\r\n\t\t\tthis._data.core.selected = [];\r\n\t\t\tthis._data.core.last_clicked = null;\r\n\t\t\tthis._data.core.focused = null;\r\n\r\n\t\t\tvar c = this.get_container_ul()[0].className;\r\n\t\t\tif(!skip_loading) {\r\n\t\t\t\tthis.element.html(\"<\"+\"ul class='\"+c+\"' role='group'><\"+\"li class='jstree-initial-node jstree-loading jstree-leaf jstree-last' role='treeitem' id='j\"+this._id+\"_loading'><i class='jstree-icon jstree-ocl'></i><\"+\"a class='jstree-anchor' href='#'><i class='jstree-icon jstree-themeicon-hidden'></i>\" + this.get_string(\"Loading ...\") + \"</a></li></ul>\");\r\n\t\t\t\tthis.element.attr('aria-activedescendant','j'+this._id+'_loading');\r\n\t\t\t}\r\n\t\t\tthis.load_node($.jstree.root, function (o, s) {\r\n\t\t\t\tif(s) {\r\n\t\t\t\t\tthis.get_container_ul()[0].className = c;\r\n\t\t\t\t\tif(this._firstChild(this.get_container_ul()[0])) {\r\n\t\t\t\t\t\tthis.element.attr('aria-activedescendant',this._firstChild(this.get_container_ul()[0]).id);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.set_state($.extend(true, {}, this._data.core.state), function () {\r\n\t\t\t\t\t\t/**\r\n\t\t\t\t\t\t * triggered when a `refresh` call completes\r\n\t\t\t\t\t\t * @event\r\n\t\t\t\t\t\t * @name refresh.jstree\r\n\t\t\t\t\t\t */\r\n\t\t\t\t\t\tthis.trigger('refresh');\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tthis._data.core.state = null;\r\n\t\t\t});\r\n\t\t},\r\n\t\t/**\r\n\t\t * refreshes a node in the tree (reload its children) all opened nodes inside that node are reloaded with calls to `load_node`.\r\n\t\t * @name refresh_node(obj)\r\n\t\t * @param  {mixed} obj the node\r\n\t\t * @trigger refresh_node.jstree\r\n\t\t */\r\n\t\trefresh_node : function (obj) {\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root) { return false; }\r\n\t\t\tvar opened = [], to_load = [], s = this._data.core.selected.concat([]);\r\n\t\t\tto_load.push(obj.id);\r\n\t\t\tif(obj.state.opened === true) { opened.push(obj.id); }\r\n\t\t\tthis.get_node(obj, true).find('.jstree-open').each(function() { to_load.push(this.id); opened.push(this.id); });\r\n\t\t\tthis._load_nodes(to_load, $.proxy(function (nodes) {\r\n\t\t\t\tthis.open_node(opened, false, 0);\r\n\t\t\t\tthis.select_node(s);\r\n\t\t\t\t/**\r\n\t\t\t\t * triggered when a node is refreshed\r\n\t\t\t\t * @event\r\n\t\t\t\t * @name refresh_node.jstree\r\n\t\t\t\t * @param {Object} node - the refreshed node\r\n\t\t\t\t * @param {Array} nodes - an array of the IDs of the nodes that were reloaded\r\n\t\t\t\t */\r\n\t\t\t\tthis.trigger('refresh_node', { 'node' : obj, 'nodes' : nodes });\r\n\t\t\t}, this), false, true);\r\n\t\t},\r\n\t\t/**\r\n\t\t * set (change) the ID of a node\r\n\t\t * @name set_id(obj, id)\r\n\t\t * @param  {mixed} obj the node\r\n\t\t * @param  {String} id the new ID\r\n\t\t * @return {Boolean}\r\n\t\t * @trigger set_id.jstree\r\n\t\t */\r\n\t\tset_id : function (obj, id) {\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root) { return false; }\r\n\t\t\tvar i, j, m = this._model.data, old = obj.id;\r\n\t\t\tid = id.toString();\r\n\t\t\t// update parents (replace current ID with new one in children and children_d)\r\n\t\t\tm[obj.parent].children[$.inArray(obj.id, m[obj.parent].children)] = id;\r\n\t\t\tfor(i = 0, j = obj.parents.length; i < j; i++) {\r\n\t\t\t\tm[obj.parents[i]].children_d[$.inArray(obj.id, m[obj.parents[i]].children_d)] = id;\r\n\t\t\t}\r\n\t\t\t// update children (replace current ID with new one in parent and parents)\r\n\t\t\tfor(i = 0, j = obj.children.length; i < j; i++) {\r\n\t\t\t\tm[obj.children[i]].parent = id;\r\n\t\t\t}\r\n\t\t\tfor(i = 0, j = obj.children_d.length; i < j; i++) {\r\n\t\t\t\tm[obj.children_d[i]].parents[$.inArray(obj.id, m[obj.children_d[i]].parents)] = id;\r\n\t\t\t}\r\n\t\t\ti = $.inArray(obj.id, this._data.core.selected);\r\n\t\t\tif(i !== -1) { this._data.core.selected[i] = id; }\r\n\t\t\t// update model and obj itself (obj.id, this._model.data[KEY])\r\n\t\t\ti = this.get_node(obj.id, true);\r\n\t\t\tif(i) {\r\n\t\t\t\ti.attr('id', id); //.children('.jstree-anchor').attr('id', id + '_anchor').end().attr('aria-labelledby', id + '_anchor');\r\n\t\t\t\tif(this.element.attr('aria-activedescendant') === obj.id) {\r\n\t\t\t\t\tthis.element.attr('aria-activedescendant', id);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tdelete m[obj.id];\r\n\t\t\tobj.id = id;\r\n\t\t\tobj.li_attr.id = id;\r\n\t\t\tm[id] = obj;\r\n\t\t\t/**\r\n\t\t\t * triggered when a node id value is changed\r\n\t\t\t * @event\r\n\t\t\t * @name set_id.jstree\r\n\t\t\t * @param {Object} node\r\n\t\t\t * @param {String} old the old id\r\n\t\t\t */\r\n\t\t\tthis.trigger('set_id',{ \"node\" : obj, \"new\" : obj.id, \"old\" : old });\r\n\t\t\treturn true;\r\n\t\t},\r\n\t\t/**\r\n\t\t * get the text value of a node\r\n\t\t * @name get_text(obj)\r\n\t\t * @param  {mixed} obj the node\r\n\t\t * @return {String}\r\n\t\t */\r\n\t\tget_text : function (obj) {\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\treturn (!obj || obj.id === $.jstree.root) ? false : obj.text;\r\n\t\t},\r\n\t\t/**\r\n\t\t * set the text value of a node. Used internally, please use `rename_node(obj, val)`.\r\n\t\t * @private\r\n\t\t * @name set_text(obj, val)\r\n\t\t * @param  {mixed} obj the node, you can pass an array to set the text on multiple nodes\r\n\t\t * @param  {String} val the new text value\r\n\t\t * @return {Boolean}\r\n\t\t * @trigger set_text.jstree\r\n\t\t */\r\n\t\tset_text : function (obj, val) {\r\n\t\t\tvar t1, t2;\r\n\t\t\tif($.isArray(obj)) {\r\n\t\t\t\tobj = obj.slice();\r\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\r\n\t\t\t\t\tthis.set_text(obj[t1], val);\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root) { return false; }\r\n\t\t\tobj.text = val;\r\n\t\t\tif(this.get_node(obj, true).length) {\r\n\t\t\t\tthis.redraw_node(obj.id);\r\n\t\t\t}\r\n\t\t\t/**\r\n\t\t\t * triggered when a node text value is changed\r\n\t\t\t * @event\r\n\t\t\t * @name set_text.jstree\r\n\t\t\t * @param {Object} obj\r\n\t\t\t * @param {String} text the new value\r\n\t\t\t */\r\n\t\t\tthis.trigger('set_text',{ \"obj\" : obj, \"text\" : val });\r\n\t\t\treturn true;\r\n\t\t},\r\n\t\t/**\r\n\t\t * gets a JSON representation of a node (or the whole tree)\r\n\t\t * @name get_json([obj, options])\r\n\t\t * @param  {mixed} obj\r\n\t\t * @param  {Object} options\r\n\t\t * @param  {Boolean} options.no_state do not return state information\r\n\t\t * @param  {Boolean} options.no_id do not return ID\r\n\t\t * @param  {Boolean} options.no_children do not include children\r\n\t\t * @param  {Boolean} options.no_data do not include node data\r\n\t\t * @param  {Boolean} options.no_li_attr do not include LI attributes\r\n\t\t * @param  {Boolean} options.no_a_attr do not include A attributes\r\n\t\t * @param  {Boolean} options.flat return flat JSON instead of nested\r\n\t\t * @return {Object}\r\n\t\t */\r\n\t\tget_json : function (obj, options, flat) {\r\n\t\t\tobj = this.get_node(obj || $.jstree.root);\r\n\t\t\tif(!obj) { return false; }\r\n\t\t\tif(options && options.flat && !flat) { flat = []; }\r\n\t\t\tvar tmp = {\r\n\t\t\t\t'id' : obj.id,\r\n\t\t\t\t'text' : obj.text,\r\n\t\t\t\t'icon' : this.get_icon(obj),\r\n\t\t\t\t'li_attr' : $.extend(true, {}, obj.li_attr),\r\n\t\t\t\t'a_attr' : $.extend(true, {}, obj.a_attr),\r\n\t\t\t\t'state' : {},\r\n\t\t\t\t'data' : options && options.no_data ? false : $.extend(true, $.isArray(obj.data)?[]:{}, obj.data)\r\n\t\t\t\t//( this.get_node(obj, true).length ? this.get_node(obj, true).data() : obj.data ),\r\n\t\t\t}, i, j;\r\n\t\t\tif(options && options.flat) {\r\n\t\t\t\ttmp.parent = obj.parent;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ttmp.children = [];\r\n\t\t\t}\r\n\t\t\tif(!options || !options.no_state) {\r\n\t\t\t\tfor(i in obj.state) {\r\n\t\t\t\t\tif(obj.state.hasOwnProperty(i)) {\r\n\t\t\t\t\t\ttmp.state[i] = obj.state[i];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tdelete tmp.state;\r\n\t\t\t}\r\n\t\t\tif(options && options.no_li_attr) {\r\n\t\t\t\tdelete tmp.li_attr;\r\n\t\t\t}\r\n\t\t\tif(options && options.no_a_attr) {\r\n\t\t\t\tdelete tmp.a_attr;\r\n\t\t\t}\r\n\t\t\tif(options && options.no_id) {\r\n\t\t\t\tdelete tmp.id;\r\n\t\t\t\tif(tmp.li_attr && tmp.li_attr.id) {\r\n\t\t\t\t\tdelete tmp.li_attr.id;\r\n\t\t\t\t}\r\n\t\t\t\tif(tmp.a_attr && tmp.a_attr.id) {\r\n\t\t\t\t\tdelete tmp.a_attr.id;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(options && options.flat && obj.id !== $.jstree.root) {\r\n\t\t\t\tflat.push(tmp);\r\n\t\t\t}\r\n\t\t\tif(!options || !options.no_children) {\r\n\t\t\t\tfor(i = 0, j = obj.children.length; i < j; i++) {\r\n\t\t\t\t\tif(options && options.flat) {\r\n\t\t\t\t\t\tthis.get_json(obj.children[i], options, flat);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\ttmp.children.push(this.get_json(obj.children[i], options));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn options && options.flat ? flat : (obj.id === $.jstree.root ? tmp.children : tmp);\r\n\t\t},\r\n\t\t/**\r\n\t\t * create a new node (do not confuse with load_node)\r\n\t\t * @name create_node([par, node, pos, callback, is_loaded])\r\n\t\t * @param  {mixed}   par       the parent node (to create a root node use either \"#\" (string) or `null`)\r\n\t\t * @param  {mixed}   node      the data for the new node (a valid JSON object, or a simple string with the name)\r\n\t\t * @param  {mixed}   pos       the index at which to insert the node, \"first\" and \"last\" are also supported, default is \"last\"\r\n\t\t * @param  {Function} callback a function to be called once the node is created\r\n\t\t * @param  {Boolean} is_loaded internal argument indicating if the parent node was succesfully loaded\r\n\t\t * @return {String}            the ID of the newly create node\r\n\t\t * @trigger model.jstree, create_node.jstree\r\n\t\t */\r\n\t\tcreate_node : function (par, node, pos, callback, is_loaded) {\r\n\t\t\tif(par === null) { par = $.jstree.root; }\r\n\t\t\tpar = this.get_node(par);\r\n\t\t\tif(!par) { return false; }\r\n\t\t\tpos = pos === undefined ? \"last\" : pos;\r\n\t\t\tif(!pos.toString().match(/^(before|after)$/) && !is_loaded && !this.is_loaded(par)) {\r\n\t\t\t\treturn this.load_node(par, function () { this.create_node(par, node, pos, callback, true); });\r\n\t\t\t}\r\n\t\t\tif(!node) { node = { \"text\" : this.get_string('New node') }; }\r\n\t\t\tif(typeof node === \"string\") {\r\n\t\t\t\tnode = { \"text\" : node };\r\n\t\t\t} else {\r\n\t\t\t\tnode = $.extend(true, {}, node);\r\n\t\t\t}\r\n\t\t\tif(node.text === undefined) { node.text = this.get_string('New node'); }\r\n\t\t\tvar tmp, dpc, i, j;\r\n\r\n\t\t\tif(par.id === $.jstree.root) {\r\n\t\t\t\tif(pos === \"before\") { pos = \"first\"; }\r\n\t\t\t\tif(pos === \"after\") { pos = \"last\"; }\r\n\t\t\t}\r\n\t\t\tswitch(pos) {\r\n\t\t\t\tcase \"before\":\r\n\t\t\t\t\ttmp = this.get_node(par.parent);\r\n\t\t\t\t\tpos = $.inArray(par.id, tmp.children);\r\n\t\t\t\t\tpar = tmp;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"after\" :\r\n\t\t\t\t\ttmp = this.get_node(par.parent);\r\n\t\t\t\t\tpos = $.inArray(par.id, tmp.children) + 1;\r\n\t\t\t\t\tpar = tmp;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"inside\":\r\n\t\t\t\tcase \"first\":\r\n\t\t\t\t\tpos = 0;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"last\":\r\n\t\t\t\t\tpos = par.children.length;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tif(!pos) { pos = 0; }\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tif(pos > par.children.length) { pos = par.children.length; }\r\n\t\t\tif(!node.id) { node.id = true; }\r\n\t\t\tif(!this.check(\"create_node\", node, par, pos)) {\r\n\t\t\t\tthis.settings.core.error.call(this, this._data.core.last_error);\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif(node.id === true) { delete node.id; }\r\n\t\t\tnode = this._parse_model_from_json(node, par.id, par.parents.concat());\r\n\t\t\tif(!node) { return false; }\r\n\t\t\ttmp = this.get_node(node);\r\n\t\t\tdpc = [];\r\n\t\t\tdpc.push(node);\r\n\t\t\tdpc = dpc.concat(tmp.children_d);\r\n\t\t\tthis.trigger('model', { \"nodes\" : dpc, \"parent\" : par.id });\r\n\r\n\t\t\tpar.children_d = par.children_d.concat(dpc);\r\n\t\t\tfor(i = 0, j = par.parents.length; i < j; i++) {\r\n\t\t\t\tthis._model.data[par.parents[i]].children_d = this._model.data[par.parents[i]].children_d.concat(dpc);\r\n\t\t\t}\r\n\t\t\tnode = tmp;\r\n\t\t\ttmp = [];\r\n\t\t\tfor(i = 0, j = par.children.length; i < j; i++) {\r\n\t\t\t\ttmp[i >= pos ? i+1 : i] = par.children[i];\r\n\t\t\t}\r\n\t\t\ttmp[pos] = node.id;\r\n\t\t\tpar.children = tmp;\r\n\r\n\t\t\tthis.redraw_node(par, true);\r\n\t\t\t/**\r\n\t\t\t * triggered when a node is created\r\n\t\t\t * @event\r\n\t\t\t * @name create_node.jstree\r\n\t\t\t * @param {Object} node\r\n\t\t\t * @param {String} parent the parent's ID\r\n\t\t\t * @param {Number} position the position of the new node among the parent's children\r\n\t\t\t */\r\n\t\t\tthis.trigger('create_node', { \"node\" : this.get_node(node), \"parent\" : par.id, \"position\" : pos });\r\n\t\t\tif(callback) { callback.call(this, this.get_node(node)); }\r\n\t\t\treturn node.id;\r\n\t\t},\r\n\t\t/**\r\n\t\t * set the text value of a node\r\n\t\t * @name rename_node(obj, val)\r\n\t\t * @param  {mixed} obj the node, you can pass an array to rename multiple nodes to the same name\r\n\t\t * @param  {String} val the new text value\r\n\t\t * @return {Boolean}\r\n\t\t * @trigger rename_node.jstree\r\n\t\t */\r\n\t\trename_node : function (obj, val) {\r\n\t\t\tvar t1, t2, old;\r\n\t\t\tif($.isArray(obj)) {\r\n\t\t\t\tobj = obj.slice();\r\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\r\n\t\t\t\t\tthis.rename_node(obj[t1], val);\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root) { return false; }\r\n\t\t\told = obj.text;\r\n\t\t\tif(!this.check(\"rename_node\", obj, this.get_parent(obj), val)) {\r\n\t\t\t\tthis.settings.core.error.call(this, this._data.core.last_error);\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tthis.set_text(obj, val); // .apply(this, Array.prototype.slice.call(arguments))\r\n\t\t\t/**\r\n\t\t\t * triggered when a node is renamed\r\n\t\t\t * @event\r\n\t\t\t * @name rename_node.jstree\r\n\t\t\t * @param {Object} node\r\n\t\t\t * @param {String} text the new value\r\n\t\t\t * @param {String} old the old value\r\n\t\t\t */\r\n\t\t\tthis.trigger('rename_node', { \"node\" : obj, \"text\" : val, \"old\" : old });\r\n\t\t\treturn true;\r\n\t\t},\r\n\t\t/**\r\n\t\t * remove a node\r\n\t\t * @name delete_node(obj)\r\n\t\t * @param  {mixed} obj the node, you can pass an array to delete multiple nodes\r\n\t\t * @return {Boolean}\r\n\t\t * @trigger delete_node.jstree, changed.jstree\r\n\t\t */\r\n\t\tdelete_node : function (obj) {\r\n\t\t\tvar t1, t2, par, pos, tmp, i, j, k, l, c, top, lft;\r\n\t\t\tif($.isArray(obj)) {\r\n\t\t\t\tobj = obj.slice();\r\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\r\n\t\t\t\t\tthis.delete_node(obj[t1]);\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root) { return false; }\r\n\t\t\tpar = this.get_node(obj.parent);\r\n\t\t\tpos = $.inArray(obj.id, par.children);\r\n\t\t\tc = false;\r\n\t\t\tif(!this.check(\"delete_node\", obj, par, pos)) {\r\n\t\t\t\tthis.settings.core.error.call(this, this._data.core.last_error);\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif(pos !== -1) {\r\n\t\t\t\tpar.children = $.vakata.array_remove(par.children, pos);\r\n\t\t\t}\r\n\t\t\ttmp = obj.children_d.concat([]);\r\n\t\t\ttmp.push(obj.id);\r\n\t\t\tfor(i = 0, j = obj.parents.length; i < j; i++) {\r\n\t\t\t\tthis._model.data[obj.parents[i]].children_d = $.vakata.array_filter(this._model.data[obj.parents[i]].children_d, function (v) {\r\n\t\t\t\t\treturn $.inArray(v, tmp) === -1;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tfor(k = 0, l = tmp.length; k < l; k++) {\r\n\t\t\t\tif(this._model.data[tmp[k]].state.selected) {\r\n\t\t\t\t\tc = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (c) {\r\n\t\t\t\tthis._data.core.selected = $.vakata.array_filter(this._data.core.selected, function (v) {\r\n\t\t\t\t\treturn $.inArray(v, tmp) === -1;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\t/**\r\n\t\t\t * triggered when a node is deleted\r\n\t\t\t * @event\r\n\t\t\t * @name delete_node.jstree\r\n\t\t\t * @param {Object} node\r\n\t\t\t * @param {String} parent the parent's ID\r\n\t\t\t */\r\n\t\t\tthis.trigger('delete_node', { \"node\" : obj, \"parent\" : par.id });\r\n\t\t\tif(c) {\r\n\t\t\t\tthis.trigger('changed', { 'action' : 'delete_node', 'node' : obj, 'selected' : this._data.core.selected, 'parent' : par.id });\r\n\t\t\t}\r\n\t\t\tfor(k = 0, l = tmp.length; k < l; k++) {\r\n\t\t\t\tdelete this._model.data[tmp[k]];\r\n\t\t\t}\r\n\t\t\tif($.inArray(this._data.core.focused, tmp) !== -1) {\r\n\t\t\t\tthis._data.core.focused = null;\r\n\t\t\t\ttop = this.element[0].scrollTop;\r\n\t\t\t\tlft = this.element[0].scrollLeft;\r\n\t\t\t\tif(par.id === $.jstree.root) {\r\n\t\t\t\t\tif (this._model.data[$.jstree.root].children[0]) {\r\n\t\t\t\t\t\tthis.get_node(this._model.data[$.jstree.root].children[0], true).children('.jstree-anchor').focus();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.get_node(par, true).children('.jstree-anchor').focus();\r\n\t\t\t\t}\r\n\t\t\t\tthis.element[0].scrollTop  = top;\r\n\t\t\t\tthis.element[0].scrollLeft = lft;\r\n\t\t\t}\r\n\t\t\tthis.redraw_node(par, true);\r\n\t\t\treturn true;\r\n\t\t},\r\n\t\t/**\r\n\t\t * check if an operation is premitted on the tree. Used internally.\r\n\t\t * @private\r\n\t\t * @name check(chk, obj, par, pos)\r\n\t\t * @param  {String} chk the operation to check, can be \"create_node\", \"rename_node\", \"delete_node\", \"copy_node\" or \"move_node\"\r\n\t\t * @param  {mixed} obj the node\r\n\t\t * @param  {mixed} par the parent\r\n\t\t * @param  {mixed} pos the position to insert at, or if \"rename_node\" - the new name\r\n\t\t * @param  {mixed} more some various additional information, for example if a \"move_node\" operations is triggered by DND this will be the hovered node\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tcheck : function (chk, obj, par, pos, more) {\r\n\t\t\tobj = obj && obj.id ? obj : this.get_node(obj);\r\n\t\t\tpar = par && par.id ? par : this.get_node(par);\r\n\t\t\tvar tmp = chk.match(/^move_node|copy_node|create_node$/i) ? par : obj,\r\n\t\t\t\tchc = this.settings.core.check_callback;\r\n\t\t\tif(chk === \"move_node\" || chk === \"copy_node\") {\r\n\t\t\t\tif((!more || !more.is_multi) && (obj.id === par.id || (chk === \"move_node\" && $.inArray(obj.id, par.children) === pos) || $.inArray(par.id, obj.children_d) !== -1)) {\r\n\t\t\t\t\tthis._data.core.last_error = { 'error' : 'check', 'plugin' : 'core', 'id' : 'core_01', 'reason' : 'Moving parent inside child', 'data' : JSON.stringify({ 'chk' : chk, 'pos' : pos, 'obj' : obj && obj.id ? obj.id : false, 'par' : par && par.id ? par.id : false }) };\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(tmp && tmp.data) { tmp = tmp.data; }\r\n\t\t\tif(tmp && tmp.functions && (tmp.functions[chk] === false || tmp.functions[chk] === true)) {\r\n\t\t\t\tif(tmp.functions[chk] === false) {\r\n\t\t\t\t\tthis._data.core.last_error = { 'error' : 'check', 'plugin' : 'core', 'id' : 'core_02', 'reason' : 'Node data prevents function: ' + chk, 'data' : JSON.stringify({ 'chk' : chk, 'pos' : pos, 'obj' : obj && obj.id ? obj.id : false, 'par' : par && par.id ? par.id : false }) };\r\n\t\t\t\t}\r\n\t\t\t\treturn tmp.functions[chk];\r\n\t\t\t}\r\n\t\t\tif(chc === false || ($.isFunction(chc) && chc.call(this, chk, obj, par, pos, more) === false) || (chc && chc[chk] === false)) {\r\n\t\t\t\tthis._data.core.last_error = { 'error' : 'check', 'plugin' : 'core', 'id' : 'core_03', 'reason' : 'User config for core.check_callback prevents function: ' + chk, 'data' : JSON.stringify({ 'chk' : chk, 'pos' : pos, 'obj' : obj && obj.id ? obj.id : false, 'par' : par && par.id ? par.id : false }) };\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t},\r\n\t\t/**\r\n\t\t * get the last error\r\n\t\t * @name last_error()\r\n\t\t * @return {Object}\r\n\t\t */\r\n\t\tlast_error : function () {\r\n\t\t\treturn this._data.core.last_error;\r\n\t\t},\r\n\t\t/**\r\n\t\t * move a node to a new parent\r\n\t\t * @name move_node(obj, par [, pos, callback, is_loaded])\r\n\t\t * @param  {mixed} obj the node to move, pass an array to move multiple nodes\r\n\t\t * @param  {mixed} par the new parent\r\n\t\t * @param  {mixed} pos the position to insert at (besides integer values, \"first\" and \"last\" are supported, as well as \"before\" and \"after\"), defaults to integer `0`\r\n\t\t * @param  {function} callback a function to call once the move is completed, receives 3 arguments - the node, the new parent and the position\r\n\t\t * @param  {Boolean} is_loaded internal parameter indicating if the parent node has been loaded\r\n\t\t * @param  {Boolean} skip_redraw internal parameter indicating if the tree should be redrawn\r\n\t\t * @param  {Boolean} instance internal parameter indicating if the node comes from another instance\r\n\t\t * @trigger move_node.jstree\r\n\t\t */\r\n\t\tmove_node : function (obj, par, pos, callback, is_loaded, skip_redraw, origin) {\r\n\t\t\tvar t1, t2, old_par, old_pos, new_par, old_ins, is_multi, dpc, tmp, i, j, k, l, p;\r\n\r\n\t\t\tpar = this.get_node(par);\r\n\t\t\tpos = pos === undefined ? 0 : pos;\r\n\t\t\tif(!par) { return false; }\r\n\t\t\tif(!pos.toString().match(/^(before|after)$/) && !is_loaded && !this.is_loaded(par)) {\r\n\t\t\t\treturn this.load_node(par, function () { this.move_node(obj, par, pos, callback, true, false, origin); });\r\n\t\t\t}\r\n\r\n\t\t\tif($.isArray(obj)) {\r\n\t\t\t\tif(obj.length === 1) {\r\n\t\t\t\t\tobj = obj[0];\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t//obj = obj.slice();\r\n\t\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\r\n\t\t\t\t\t\tif((tmp = this.move_node(obj[t1], par, pos, callback, is_loaded, false, origin))) {\r\n\t\t\t\t\t\t\tpar = tmp;\r\n\t\t\t\t\t\t\tpos = \"after\";\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.redraw();\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tobj = obj && obj.id ? obj : this.get_node(obj);\r\n\r\n\t\t\tif(!obj || obj.id === $.jstree.root) { return false; }\r\n\r\n\t\t\told_par = (obj.parent || $.jstree.root).toString();\r\n\t\t\tnew_par = (!pos.toString().match(/^(before|after)$/) || par.id === $.jstree.root) ? par : this.get_node(par.parent);\r\n\t\t\told_ins = origin ? origin : (this._model.data[obj.id] ? this : $.jstree.reference(obj.id));\r\n\t\t\tis_multi = !old_ins || !old_ins._id || (this._id !== old_ins._id);\r\n\t\t\told_pos = old_ins && old_ins._id && old_par && old_ins._model.data[old_par] && old_ins._model.data[old_par].children ? $.inArray(obj.id, old_ins._model.data[old_par].children) : -1;\r\n\t\t\tif(old_ins && old_ins._id) {\r\n\t\t\t\tobj = old_ins._model.data[obj.id];\r\n\t\t\t}\r\n\r\n\t\t\tif(is_multi) {\r\n\t\t\t\tif((tmp = this.copy_node(obj, par, pos, callback, is_loaded, false, origin))) {\r\n\t\t\t\t\tif(old_ins) { old_ins.delete_node(obj); }\r\n\t\t\t\t\treturn tmp;\r\n\t\t\t\t}\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t//var m = this._model.data;\r\n\t\t\tif(par.id === $.jstree.root) {\r\n\t\t\t\tif(pos === \"before\") { pos = \"first\"; }\r\n\t\t\t\tif(pos === \"after\") { pos = \"last\"; }\r\n\t\t\t}\r\n\t\t\tswitch(pos) {\r\n\t\t\t\tcase \"before\":\r\n\t\t\t\t\tpos = $.inArray(par.id, new_par.children);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"after\" :\r\n\t\t\t\t\tpos = $.inArray(par.id, new_par.children) + 1;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"inside\":\r\n\t\t\t\tcase \"first\":\r\n\t\t\t\t\tpos = 0;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"last\":\r\n\t\t\t\t\tpos = new_par.children.length;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tif(!pos) { pos = 0; }\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tif(pos > new_par.children.length) { pos = new_par.children.length; }\r\n\t\t\tif(!this.check(\"move_node\", obj, new_par, pos, { 'core' : true, 'origin' : origin, 'is_multi' : (old_ins && old_ins._id && old_ins._id !== this._id), 'is_foreign' : (!old_ins || !old_ins._id) })) {\r\n\t\t\t\tthis.settings.core.error.call(this, this._data.core.last_error);\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif(obj.parent === new_par.id) {\r\n\t\t\t\tdpc = new_par.children.concat();\r\n\t\t\t\ttmp = $.inArray(obj.id, dpc);\r\n\t\t\t\tif(tmp !== -1) {\r\n\t\t\t\t\tdpc = $.vakata.array_remove(dpc, tmp);\r\n\t\t\t\t\tif(pos > tmp) { pos--; }\r\n\t\t\t\t}\r\n\t\t\t\ttmp = [];\r\n\t\t\t\tfor(i = 0, j = dpc.length; i < j; i++) {\r\n\t\t\t\t\ttmp[i >= pos ? i+1 : i] = dpc[i];\r\n\t\t\t\t}\r\n\t\t\t\ttmp[pos] = obj.id;\r\n\t\t\t\tnew_par.children = tmp;\r\n\t\t\t\tthis._node_changed(new_par.id);\r\n\t\t\t\tthis.redraw(new_par.id === $.jstree.root);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// clean old parent and up\r\n\t\t\t\ttmp = obj.children_d.concat();\r\n\t\t\t\ttmp.push(obj.id);\r\n\t\t\t\tfor(i = 0, j = obj.parents.length; i < j; i++) {\r\n\t\t\t\t\tdpc = [];\r\n\t\t\t\t\tp = old_ins._model.data[obj.parents[i]].children_d;\r\n\t\t\t\t\tfor(k = 0, l = p.length; k < l; k++) {\r\n\t\t\t\t\t\tif($.inArray(p[k], tmp) === -1) {\r\n\t\t\t\t\t\t\tdpc.push(p[k]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\told_ins._model.data[obj.parents[i]].children_d = dpc;\r\n\t\t\t\t}\r\n\t\t\t\told_ins._model.data[old_par].children = $.vakata.array_remove_item(old_ins._model.data[old_par].children, obj.id);\r\n\r\n\t\t\t\t// insert into new parent and up\r\n\t\t\t\tfor(i = 0, j = new_par.parents.length; i < j; i++) {\r\n\t\t\t\t\tthis._model.data[new_par.parents[i]].children_d = this._model.data[new_par.parents[i]].children_d.concat(tmp);\r\n\t\t\t\t}\r\n\t\t\t\tdpc = [];\r\n\t\t\t\tfor(i = 0, j = new_par.children.length; i < j; i++) {\r\n\t\t\t\t\tdpc[i >= pos ? i+1 : i] = new_par.children[i];\r\n\t\t\t\t}\r\n\t\t\t\tdpc[pos] = obj.id;\r\n\t\t\t\tnew_par.children = dpc;\r\n\t\t\t\tnew_par.children_d.push(obj.id);\r\n\t\t\t\tnew_par.children_d = new_par.children_d.concat(obj.children_d);\r\n\r\n\t\t\t\t// update object\r\n\t\t\t\tobj.parent = new_par.id;\r\n\t\t\t\ttmp = new_par.parents.concat();\r\n\t\t\t\ttmp.unshift(new_par.id);\r\n\t\t\t\tp = obj.parents.length;\r\n\t\t\t\tobj.parents = tmp;\r\n\r\n\t\t\t\t// update object children\r\n\t\t\t\ttmp = tmp.concat();\r\n\t\t\t\tfor(i = 0, j = obj.children_d.length; i < j; i++) {\r\n\t\t\t\t\tthis._model.data[obj.children_d[i]].parents = this._model.data[obj.children_d[i]].parents.slice(0,p*-1);\r\n\t\t\t\t\tArray.prototype.push.apply(this._model.data[obj.children_d[i]].parents, tmp);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(old_par === $.jstree.root || new_par.id === $.jstree.root) {\r\n\t\t\t\t\tthis._model.force_full_redraw = true;\r\n\t\t\t\t}\r\n\t\t\t\tif(!this._model.force_full_redraw) {\r\n\t\t\t\t\tthis._node_changed(old_par);\r\n\t\t\t\t\tthis._node_changed(new_par.id);\r\n\t\t\t\t}\r\n\t\t\t\tif(!skip_redraw) {\r\n\t\t\t\t\tthis.redraw();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(callback) { callback.call(this, obj, new_par, pos); }\r\n\t\t\t/**\r\n\t\t\t * triggered when a node is moved\r\n\t\t\t * @event\r\n\t\t\t * @name move_node.jstree\r\n\t\t\t * @param {Object} node\r\n\t\t\t * @param {String} parent the parent's ID\r\n\t\t\t * @param {Number} position the position of the node among the parent's children\r\n\t\t\t * @param {String} old_parent the old parent of the node\r\n\t\t\t * @param {Number} old_position the old position of the node\r\n\t\t\t * @param {Boolean} is_multi do the node and new parent belong to different instances\r\n\t\t\t * @param {jsTree} old_instance the instance the node came from\r\n\t\t\t * @param {jsTree} new_instance the instance of the new parent\r\n\t\t\t */\r\n\t\t\tthis.trigger('move_node', { \"node\" : obj, \"parent\" : new_par.id, \"position\" : pos, \"old_parent\" : old_par, \"old_position\" : old_pos, 'is_multi' : (old_ins && old_ins._id && old_ins._id !== this._id), 'is_foreign' : (!old_ins || !old_ins._id), 'old_instance' : old_ins, 'new_instance' : this });\r\n\t\t\treturn obj.id;\r\n\t\t},\r\n\t\t/**\r\n\t\t * copy a node to a new parent\r\n\t\t * @name copy_node(obj, par [, pos, callback, is_loaded])\r\n\t\t * @param  {mixed} obj the node to copy, pass an array to copy multiple nodes\r\n\t\t * @param  {mixed} par the new parent\r\n\t\t * @param  {mixed} pos the position to insert at (besides integer values, \"first\" and \"last\" are supported, as well as \"before\" and \"after\"), defaults to integer `0`\r\n\t\t * @param  {function} callback a function to call once the move is completed, receives 3 arguments - the node, the new parent and the position\r\n\t\t * @param  {Boolean} is_loaded internal parameter indicating if the parent node has been loaded\r\n\t\t * @param  {Boolean} skip_redraw internal parameter indicating if the tree should be redrawn\r\n\t\t * @param  {Boolean} instance internal parameter indicating if the node comes from another instance\r\n\t\t * @trigger model.jstree copy_node.jstree\r\n\t\t */\r\n\t\tcopy_node : function (obj, par, pos, callback, is_loaded, skip_redraw, origin) {\r\n\t\t\tvar t1, t2, dpc, tmp, i, j, node, old_par, new_par, old_ins, is_multi;\r\n\r\n\t\t\tpar = this.get_node(par);\r\n\t\t\tpos = pos === undefined ? 0 : pos;\r\n\t\t\tif(!par) { return false; }\r\n\t\t\tif(!pos.toString().match(/^(before|after)$/) && !is_loaded && !this.is_loaded(par)) {\r\n\t\t\t\treturn this.load_node(par, function () { this.copy_node(obj, par, pos, callback, true, false, origin); });\r\n\t\t\t}\r\n\r\n\t\t\tif($.isArray(obj)) {\r\n\t\t\t\tif(obj.length === 1) {\r\n\t\t\t\t\tobj = obj[0];\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t//obj = obj.slice();\r\n\t\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\r\n\t\t\t\t\t\tif((tmp = this.copy_node(obj[t1], par, pos, callback, is_loaded, true, origin))) {\r\n\t\t\t\t\t\t\tpar = tmp;\r\n\t\t\t\t\t\t\tpos = \"after\";\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.redraw();\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tobj = obj && obj.id ? obj : this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root) { return false; }\r\n\r\n\t\t\told_par = (obj.parent || $.jstree.root).toString();\r\n\t\t\tnew_par = (!pos.toString().match(/^(before|after)$/) || par.id === $.jstree.root) ? par : this.get_node(par.parent);\r\n\t\t\told_ins = origin ? origin : (this._model.data[obj.id] ? this : $.jstree.reference(obj.id));\r\n\t\t\tis_multi = !old_ins || !old_ins._id || (this._id !== old_ins._id);\r\n\r\n\t\t\tif(old_ins && old_ins._id) {\r\n\t\t\t\tobj = old_ins._model.data[obj.id];\r\n\t\t\t}\r\n\r\n\t\t\tif(par.id === $.jstree.root) {\r\n\t\t\t\tif(pos === \"before\") { pos = \"first\"; }\r\n\t\t\t\tif(pos === \"after\") { pos = \"last\"; }\r\n\t\t\t}\r\n\t\t\tswitch(pos) {\r\n\t\t\t\tcase \"before\":\r\n\t\t\t\t\tpos = $.inArray(par.id, new_par.children);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"after\" :\r\n\t\t\t\t\tpos = $.inArray(par.id, new_par.children) + 1;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"inside\":\r\n\t\t\t\tcase \"first\":\r\n\t\t\t\t\tpos = 0;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"last\":\r\n\t\t\t\t\tpos = new_par.children.length;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tif(!pos) { pos = 0; }\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tif(pos > new_par.children.length) { pos = new_par.children.length; }\r\n\t\t\tif(!this.check(\"copy_node\", obj, new_par, pos, { 'core' : true, 'origin' : origin, 'is_multi' : (old_ins && old_ins._id && old_ins._id !== this._id), 'is_foreign' : (!old_ins || !old_ins._id) })) {\r\n\t\t\t\tthis.settings.core.error.call(this, this._data.core.last_error);\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tnode = old_ins ? old_ins.get_json(obj, { no_id : true, no_data : true, no_state : true }) : obj;\r\n\t\t\tif(!node) { return false; }\r\n\t\t\tif(node.id === true) { delete node.id; }\r\n\t\t\tnode = this._parse_model_from_json(node, new_par.id, new_par.parents.concat());\r\n\t\t\tif(!node) { return false; }\r\n\t\t\ttmp = this.get_node(node);\r\n\t\t\tif(obj && obj.state && obj.state.loaded === false) { tmp.state.loaded = false; }\r\n\t\t\tdpc = [];\r\n\t\t\tdpc.push(node);\r\n\t\t\tdpc = dpc.concat(tmp.children_d);\r\n\t\t\tthis.trigger('model', { \"nodes\" : dpc, \"parent\" : new_par.id });\r\n\r\n\t\t\t// insert into new parent and up\r\n\t\t\tfor(i = 0, j = new_par.parents.length; i < j; i++) {\r\n\t\t\t\tthis._model.data[new_par.parents[i]].children_d = this._model.data[new_par.parents[i]].children_d.concat(dpc);\r\n\t\t\t}\r\n\t\t\tdpc = [];\r\n\t\t\tfor(i = 0, j = new_par.children.length; i < j; i++) {\r\n\t\t\t\tdpc[i >= pos ? i+1 : i] = new_par.children[i];\r\n\t\t\t}\r\n\t\t\tdpc[pos] = tmp.id;\r\n\t\t\tnew_par.children = dpc;\r\n\t\t\tnew_par.children_d.push(tmp.id);\r\n\t\t\tnew_par.children_d = new_par.children_d.concat(tmp.children_d);\r\n\r\n\t\t\tif(new_par.id === $.jstree.root) {\r\n\t\t\t\tthis._model.force_full_redraw = true;\r\n\t\t\t}\r\n\t\t\tif(!this._model.force_full_redraw) {\r\n\t\t\t\tthis._node_changed(new_par.id);\r\n\t\t\t}\r\n\t\t\tif(!skip_redraw) {\r\n\t\t\t\tthis.redraw(new_par.id === $.jstree.root);\r\n\t\t\t}\r\n\t\t\tif(callback) { callback.call(this, tmp, new_par, pos); }\r\n\t\t\t/**\r\n\t\t\t * triggered when a node is copied\r\n\t\t\t * @event\r\n\t\t\t * @name copy_node.jstree\r\n\t\t\t * @param {Object} node the copied node\r\n\t\t\t * @param {Object} original the original node\r\n\t\t\t * @param {String} parent the parent's ID\r\n\t\t\t * @param {Number} position the position of the node among the parent's children\r\n\t\t\t * @param {String} old_parent the old parent of the node\r\n\t\t\t * @param {Number} old_position the position of the original node\r\n\t\t\t * @param {Boolean} is_multi do the node and new parent belong to different instances\r\n\t\t\t * @param {jsTree} old_instance the instance the node came from\r\n\t\t\t * @param {jsTree} new_instance the instance of the new parent\r\n\t\t\t */\r\n\t\t\tthis.trigger('copy_node', { \"node\" : tmp, \"original\" : obj, \"parent\" : new_par.id, \"position\" : pos, \"old_parent\" : old_par, \"old_position\" : old_ins && old_ins._id && old_par && old_ins._model.data[old_par] && old_ins._model.data[old_par].children ? $.inArray(obj.id, old_ins._model.data[old_par].children) : -1,'is_multi' : (old_ins && old_ins._id && old_ins._id !== this._id), 'is_foreign' : (!old_ins || !old_ins._id), 'old_instance' : old_ins, 'new_instance' : this });\r\n\t\t\treturn tmp.id;\r\n\t\t},\r\n\t\t/**\r\n\t\t * cut a node (a later call to `paste(obj)` would move the node)\r\n\t\t * @name cut(obj)\r\n\t\t * @param  {mixed} obj multiple objects can be passed using an array\r\n\t\t * @trigger cut.jstree\r\n\t\t */\r\n\t\tcut : function (obj) {\r\n\t\t\tif(!obj) { obj = this._data.core.selected.concat(); }\r\n\t\t\tif(!$.isArray(obj)) { obj = [obj]; }\r\n\t\t\tif(!obj.length) { return false; }\r\n\t\t\tvar tmp = [], o, t1, t2;\r\n\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\r\n\t\t\t\to = this.get_node(obj[t1]);\r\n\t\t\t\tif(o && o.id && o.id !== $.jstree.root) { tmp.push(o); }\r\n\t\t\t}\r\n\t\t\tif(!tmp.length) { return false; }\r\n\t\t\tccp_node = tmp;\r\n\t\t\tccp_inst = this;\r\n\t\t\tccp_mode = 'move_node';\r\n\t\t\t/**\r\n\t\t\t * triggered when nodes are added to the buffer for moving\r\n\t\t\t * @event\r\n\t\t\t * @name cut.jstree\r\n\t\t\t * @param {Array} node\r\n\t\t\t */\r\n\t\t\tthis.trigger('cut', { \"node\" : obj });\r\n\t\t},\r\n\t\t/**\r\n\t\t * copy a node (a later call to `paste(obj)` would copy the node)\r\n\t\t * @name copy(obj)\r\n\t\t * @param  {mixed} obj multiple objects can be passed using an array\r\n\t\t * @trigger copy.jstree\r\n\t\t */\r\n\t\tcopy : function (obj) {\r\n\t\t\tif(!obj) { obj = this._data.core.selected.concat(); }\r\n\t\t\tif(!$.isArray(obj)) { obj = [obj]; }\r\n\t\t\tif(!obj.length) { return false; }\r\n\t\t\tvar tmp = [], o, t1, t2;\r\n\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\r\n\t\t\t\to = this.get_node(obj[t1]);\r\n\t\t\t\tif(o && o.id && o.id !== $.jstree.root) { tmp.push(o); }\r\n\t\t\t}\r\n\t\t\tif(!tmp.length) { return false; }\r\n\t\t\tccp_node = tmp;\r\n\t\t\tccp_inst = this;\r\n\t\t\tccp_mode = 'copy_node';\r\n\t\t\t/**\r\n\t\t\t * triggered when nodes are added to the buffer for copying\r\n\t\t\t * @event\r\n\t\t\t * @name copy.jstree\r\n\t\t\t * @param {Array} node\r\n\t\t\t */\r\n\t\t\tthis.trigger('copy', { \"node\" : obj });\r\n\t\t},\r\n\t\t/**\r\n\t\t * get the current buffer (any nodes that are waiting for a paste operation)\r\n\t\t * @name get_buffer()\r\n\t\t * @return {Object} an object consisting of `mode` (\"copy_node\" or \"move_node\"), `node` (an array of objects) and `inst` (the instance)\r\n\t\t */\r\n\t\tget_buffer : function () {\r\n\t\t\treturn { 'mode' : ccp_mode, 'node' : ccp_node, 'inst' : ccp_inst };\r\n\t\t},\r\n\t\t/**\r\n\t\t * check if there is something in the buffer to paste\r\n\t\t * @name can_paste()\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tcan_paste : function () {\r\n\t\t\treturn ccp_mode !== false && ccp_node !== false; // && ccp_inst._model.data[ccp_node];\r\n\t\t},\r\n\t\t/**\r\n\t\t * copy or move the previously cut or copied nodes to a new parent\r\n\t\t * @name paste(obj [, pos])\r\n\t\t * @param  {mixed} obj the new parent\r\n\t\t * @param  {mixed} pos the position to insert at (besides integer, \"first\" and \"last\" are supported), defaults to integer `0`\r\n\t\t * @trigger paste.jstree\r\n\t\t */\r\n\t\tpaste : function (obj, pos) {\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || !ccp_mode || !ccp_mode.match(/^(copy_node|move_node)$/) || !ccp_node) { return false; }\r\n\t\t\tif(this[ccp_mode](ccp_node, obj, pos, false, false, false, ccp_inst)) {\r\n\t\t\t\t/**\r\n\t\t\t\t * triggered when paste is invoked\r\n\t\t\t\t * @event\r\n\t\t\t\t * @name paste.jstree\r\n\t\t\t\t * @param {String} parent the ID of the receiving node\r\n\t\t\t\t * @param {Array} node the nodes in the buffer\r\n\t\t\t\t * @param {String} mode the performed operation - \"copy_node\" or \"move_node\"\r\n\t\t\t\t */\r\n\t\t\t\tthis.trigger('paste', { \"parent\" : obj.id, \"node\" : ccp_node, \"mode\" : ccp_mode });\r\n\t\t\t}\r\n\t\t\tccp_node = false;\r\n\t\t\tccp_mode = false;\r\n\t\t\tccp_inst = false;\r\n\t\t},\r\n\t\t/**\r\n\t\t * clear the buffer of previously copied or cut nodes\r\n\t\t * @name clear_buffer()\r\n\t\t * @trigger clear_buffer.jstree\r\n\t\t */\r\n\t\tclear_buffer : function () {\r\n\t\t\tccp_node = false;\r\n\t\t\tccp_mode = false;\r\n\t\t\tccp_inst = false;\r\n\t\t\t/**\r\n\t\t\t * triggered when the copy / cut buffer is cleared\r\n\t\t\t * @event\r\n\t\t\t * @name clear_buffer.jstree\r\n\t\t\t */\r\n\t\t\tthis.trigger('clear_buffer');\r\n\t\t},\r\n\t\t/**\r\n\t\t * put a node in edit mode (input field to rename the node)\r\n\t\t * @name edit(obj [, default_text, callback])\r\n\t\t * @param  {mixed} obj\r\n\t\t * @param  {String} default_text the text to populate the input with (if omitted or set to a non-string value the node's text value is used)\r\n\t\t * @param  {Function} callback a function to be called once the text box is blurred, it is called in the instance's scope and receives the node, a status parameter (true if the rename is successful, false otherwise) and a boolean indicating if the user cancelled the edit. You can access the node's title using .text\r\n\t\t */\r\n\t\tedit : function (obj, default_text, callback) {\r\n\t\t\tvar rtl, w, a, s, t, h1, h2, fn, tmp, cancel = false;\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj) { return false; }\r\n\t\t\tif(!this.check(\"edit\", obj, this.get_parent(obj))) {\r\n\t\t\t\tthis.settings.core.error.call(this, this._data.core.last_error);\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\ttmp = obj;\r\n\t\t\tdefault_text = typeof default_text === 'string' ? default_text : obj.text;\r\n\t\t\tthis.set_text(obj, \"\");\r\n\t\t\tobj = this._open_to(obj);\r\n\t\t\ttmp.text = default_text;\r\n\r\n\t\t\trtl = this._data.core.rtl;\r\n\t\t\tw  = this.element.width();\r\n\t\t\tthis._data.core.focused = tmp.id;\r\n\t\t\ta  = obj.children('.jstree-anchor').focus();\r\n\t\t\ts  = $('<span>');\r\n\t\t\t/*!\r\n\t\t\toi = obj.children(\"i:visible\"),\r\n\t\t\tai = a.children(\"i:visible\"),\r\n\t\t\tw1 = oi.width() * oi.length,\r\n\t\t\tw2 = ai.width() * ai.length,\r\n\t\t\t*/\r\n\t\t\tt  = default_text;\r\n\t\t\th1 = $(\"<\"+\"div />\", { css : { \"position\" : \"absolute\", \"top\" : \"-200px\", \"left\" : (rtl ? \"0px\" : \"-1000px\"), \"visibility\" : \"hidden\" } }).appendTo(document.body);\r\n\t\t\th2 = $(\"<\"+\"input />\", {\r\n\t\t\t\t\t\t\"value\" : t,\r\n\t\t\t\t\t\t\"class\" : \"jstree-rename-input\",\r\n\t\t\t\t\t\t// \"size\" : t.length,\r\n\t\t\t\t\t\t\"css\" : {\r\n\t\t\t\t\t\t\t\"padding\" : \"0\",\r\n\t\t\t\t\t\t\t\"border\" : \"1px solid silver\",\r\n\t\t\t\t\t\t\t\"box-sizing\" : \"border-box\",\r\n\t\t\t\t\t\t\t\"display\" : \"inline-block\",\r\n\t\t\t\t\t\t\t\"height\" : (this._data.core.li_height) + \"px\",\r\n\t\t\t\t\t\t\t\"lineHeight\" : (this._data.core.li_height) + \"px\",\r\n\t\t\t\t\t\t\t\"width\" : \"150px\" // will be set a bit further down\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"blur\" : $.proxy(function (e) {\r\n\t\t\t\t\t\t\te.stopImmediatePropagation();\r\n\t\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\t\tvar i = s.children(\".jstree-rename-input\"),\r\n\t\t\t\t\t\t\t\tv = i.val(),\r\n\t\t\t\t\t\t\t\tf = this.settings.core.force_text,\r\n\t\t\t\t\t\t\t\tnv;\r\n\t\t\t\t\t\t\tif(v === \"\") { v = t; }\r\n\t\t\t\t\t\t\th1.remove();\r\n\t\t\t\t\t\t\ts.replaceWith(a);\r\n\t\t\t\t\t\t\ts.remove();\r\n\t\t\t\t\t\t\tt = f ? t : $('<div></div>').append($.parseHTML(t)).html();\r\n\t\t\t\t\t\t\tthis.set_text(obj, t);\r\n\t\t\t\t\t\t\tnv = !!this.rename_node(obj, f ? $('<div></div>').text(v).text() : $('<div></div>').append($.parseHTML(v)).html());\r\n\t\t\t\t\t\t\tif(!nv) {\r\n\t\t\t\t\t\t\t\tthis.set_text(obj, t); // move this up? and fix #483\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tthis._data.core.focused = tmp.id;\r\n\t\t\t\t\t\t\tsetTimeout($.proxy(function () {\r\n\t\t\t\t\t\t\t\tvar node = this.get_node(tmp.id, true);\r\n\t\t\t\t\t\t\t\tif(node.length) {\r\n\t\t\t\t\t\t\t\t\tthis._data.core.focused = tmp.id;\r\n\t\t\t\t\t\t\t\t\tnode.children('.jstree-anchor').focus();\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}, this), 0);\r\n\t\t\t\t\t\t\tif(callback) {\r\n\t\t\t\t\t\t\t\tcallback.call(this, tmp, nv, cancel);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\th2 = null;\r\n\t\t\t\t\t\t}, this),\r\n\t\t\t\t\t\t\"keydown\" : function (e) {\r\n\t\t\t\t\t\t\tvar key = e.which;\r\n\t\t\t\t\t\t\tif(key === 27) {\r\n\t\t\t\t\t\t\t\tcancel = true;\r\n\t\t\t\t\t\t\t\tthis.value = t;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(key === 27 || key === 13 || key === 37 || key === 38 || key === 39 || key === 40 || key === 32) {\r\n\t\t\t\t\t\t\t\te.stopImmediatePropagation();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(key === 27 || key === 13) {\r\n\t\t\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\t\t\tthis.blur();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"click\" : function (e) { e.stopImmediatePropagation(); },\r\n\t\t\t\t\t\t\"mousedown\" : function (e) { e.stopImmediatePropagation(); },\r\n\t\t\t\t\t\t\"keyup\" : function (e) {\r\n\t\t\t\t\t\t\th2.width(Math.min(h1.text(\"pW\" + this.value).width(),w));\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"keypress\" : function(e) {\r\n\t\t\t\t\t\t\tif(e.which === 13) { return false; }\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\tfn = {\r\n\t\t\t\t\t\tfontFamily\t\t: a.css('fontFamily')\t\t|| '',\r\n\t\t\t\t\t\tfontSize\t\t: a.css('fontSize')\t\t\t|| '',\r\n\t\t\t\t\t\tfontWeight\t\t: a.css('fontWeight')\t\t|| '',\r\n\t\t\t\t\t\tfontStyle\t\t: a.css('fontStyle')\t\t|| '',\r\n\t\t\t\t\t\tfontStretch\t\t: a.css('fontStretch')\t\t|| '',\r\n\t\t\t\t\t\tfontVariant\t\t: a.css('fontVariant')\t\t|| '',\r\n\t\t\t\t\t\tletterSpacing\t: a.css('letterSpacing')\t|| '',\r\n\t\t\t\t\t\twordSpacing\t\t: a.css('wordSpacing')\t\t|| ''\r\n\t\t\t\t};\r\n\t\t\ts.attr('class', a.attr('class')).append(a.contents().clone()).append(h2);\r\n\t\t\ta.replaceWith(s);\r\n\t\t\th1.css(fn);\r\n\t\t\th2.css(fn).width(Math.min(h1.text(\"pW\" + h2[0].value).width(),w))[0].select();\r\n\t\t\t$(document).one('mousedown.jstree touchstart.jstree dnd_start.vakata', function (e) {\r\n\t\t\t\tif (h2 && e.target !== h2) {\r\n\t\t\t\t\t$(h2).blur();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t},\r\n\r\n\r\n\t\t/**\r\n\t\t * changes the theme\r\n\t\t * @name set_theme(theme_name [, theme_url])\r\n\t\t * @param {String} theme_name the name of the new theme to apply\r\n\t\t * @param {mixed} theme_url  the location of the CSS file for this theme. Omit or set to `false` if you manually included the file. Set to `true` to autoload from the `core.themes.dir` directory.\r\n\t\t * @trigger set_theme.jstree\r\n\t\t */\r\n\t\tset_theme : function (theme_name, theme_url) {\r\n\t\t\tif(!theme_name) { return false; }\r\n\t\t\tif(theme_url === true) {\r\n\t\t\t\tvar dir = this.settings.core.themes.dir;\r\n\t\t\t\tif(!dir) { dir = $.jstree.path + '/themes'; }\r\n\t\t\t\ttheme_url = dir + '/' + theme_name + '/style.css';\r\n\t\t\t}\r\n\t\t\tif(theme_url && $.inArray(theme_url, themes_loaded) === -1) {\r\n\t\t\t\t$('head').append('<'+'link rel=\"stylesheet\" href=\"' + theme_url + '\" type=\"text/css\" />');\r\n\t\t\t\tthemes_loaded.push(theme_url);\r\n\t\t\t}\r\n\t\t\tif(this._data.core.themes.name) {\r\n\t\t\t\tthis.element.removeClass('jstree-' + this._data.core.themes.name);\r\n\t\t\t}\r\n\t\t\tthis._data.core.themes.name = theme_name;\r\n\t\t\tthis.element.addClass('jstree-' + theme_name);\r\n\t\t\tthis.element[this.settings.core.themes.responsive ? 'addClass' : 'removeClass' ]('jstree-' + theme_name + '-responsive');\r\n\t\t\t/**\r\n\t\t\t * triggered when a theme is set\r\n\t\t\t * @event\r\n\t\t\t * @name set_theme.jstree\r\n\t\t\t * @param {String} theme the new theme\r\n\t\t\t */\r\n\t\t\tthis.trigger('set_theme', { 'theme' : theme_name });\r\n\t\t},\r\n\t\t/**\r\n\t\t * gets the name of the currently applied theme name\r\n\t\t * @name get_theme()\r\n\t\t * @return {String}\r\n\t\t */\r\n\t\tget_theme : function () { return this._data.core.themes.name; },\r\n\t\t/**\r\n\t\t * changes the theme variant (if the theme has variants)\r\n\t\t * @name set_theme_variant(variant_name)\r\n\t\t * @param {String|Boolean} variant_name the variant to apply (if `false` is used the current variant is removed)\r\n\t\t */\r\n\t\tset_theme_variant : function (variant_name) {\r\n\t\t\tif(this._data.core.themes.variant) {\r\n\t\t\t\tthis.element.removeClass('jstree-' + this._data.core.themes.name + '-' + this._data.core.themes.variant);\r\n\t\t\t}\r\n\t\t\tthis._data.core.themes.variant = variant_name;\r\n\t\t\tif(variant_name) {\r\n\t\t\t\tthis.element.addClass('jstree-' + this._data.core.themes.name + '-' + this._data.core.themes.variant);\r\n\t\t\t}\r\n\t\t},\r\n\t\t/**\r\n\t\t * gets the name of the currently applied theme variant\r\n\t\t * @name get_theme()\r\n\t\t * @return {String}\r\n\t\t */\r\n\t\tget_theme_variant : function () { return this._data.core.themes.variant; },\r\n\t\t/**\r\n\t\t * shows a striped background on the container (if the theme supports it)\r\n\t\t * @name show_stripes()\r\n\t\t */\r\n\t\tshow_stripes : function () {\r\n\t\t\tthis._data.core.themes.stripes = true;\r\n\t\t\tthis.get_container_ul().addClass(\"jstree-striped\");\r\n\t\t\t/**\r\n\t\t\t * triggered when stripes are shown\r\n\t\t\t * @event\r\n\t\t\t * @name show_stripes.jstree\r\n\t\t\t */\r\n\t\t\tthis.trigger('show_stripes');\r\n\t\t},\r\n\t\t/**\r\n\t\t * hides the striped background on the container\r\n\t\t * @name hide_stripes()\r\n\t\t */\r\n\t\thide_stripes : function () {\r\n\t\t\tthis._data.core.themes.stripes = false;\r\n\t\t\tthis.get_container_ul().removeClass(\"jstree-striped\");\r\n\t\t\t/**\r\n\t\t\t * triggered when stripes are hidden\r\n\t\t\t * @event\r\n\t\t\t * @name hide_stripes.jstree\r\n\t\t\t */\r\n\t\t\tthis.trigger('hide_stripes');\r\n\t\t},\r\n\t\t/**\r\n\t\t * toggles the striped background on the container\r\n\t\t * @name toggle_stripes()\r\n\t\t */\r\n\t\ttoggle_stripes : function () { if(this._data.core.themes.stripes) { this.hide_stripes(); } else { this.show_stripes(); } },\r\n\t\t/**\r\n\t\t * shows the connecting dots (if the theme supports it)\r\n\t\t * @name show_dots()\r\n\t\t */\r\n\t\tshow_dots : function () {\r\n\t\t\tthis._data.core.themes.dots = true;\r\n\t\t\tthis.get_container_ul().removeClass(\"jstree-no-dots\");\r\n\t\t\t/**\r\n\t\t\t * triggered when dots are shown\r\n\t\t\t * @event\r\n\t\t\t * @name show_dots.jstree\r\n\t\t\t */\r\n\t\t\tthis.trigger('show_dots');\r\n\t\t},\r\n\t\t/**\r\n\t\t * hides the connecting dots\r\n\t\t * @name hide_dots()\r\n\t\t */\r\n\t\thide_dots : function () {\r\n\t\t\tthis._data.core.themes.dots = false;\r\n\t\t\tthis.get_container_ul().addClass(\"jstree-no-dots\");\r\n\t\t\t/**\r\n\t\t\t * triggered when dots are hidden\r\n\t\t\t * @event\r\n\t\t\t * @name hide_dots.jstree\r\n\t\t\t */\r\n\t\t\tthis.trigger('hide_dots');\r\n\t\t},\r\n\t\t/**\r\n\t\t * toggles the connecting dots\r\n\t\t * @name toggle_dots()\r\n\t\t */\r\n\t\ttoggle_dots : function () { if(this._data.core.themes.dots) { this.hide_dots(); } else { this.show_dots(); } },\r\n\t\t/**\r\n\t\t * show the node icons\r\n\t\t * @name show_icons()\r\n\t\t */\r\n\t\tshow_icons : function () {\r\n\t\t\tthis._data.core.themes.icons = true;\r\n\t\t\tthis.get_container_ul().removeClass(\"jstree-no-icons\");\r\n\t\t\t/**\r\n\t\t\t * triggered when icons are shown\r\n\t\t\t * @event\r\n\t\t\t * @name show_icons.jstree\r\n\t\t\t */\r\n\t\t\tthis.trigger('show_icons');\r\n\t\t},\r\n\t\t/**\r\n\t\t * hide the node icons\r\n\t\t * @name hide_icons()\r\n\t\t */\r\n\t\thide_icons : function () {\r\n\t\t\tthis._data.core.themes.icons = false;\r\n\t\t\tthis.get_container_ul().addClass(\"jstree-no-icons\");\r\n\t\t\t/**\r\n\t\t\t * triggered when icons are hidden\r\n\t\t\t * @event\r\n\t\t\t * @name hide_icons.jstree\r\n\t\t\t */\r\n\t\t\tthis.trigger('hide_icons');\r\n\t\t},\r\n\t\t/**\r\n\t\t * toggle the node icons\r\n\t\t * @name toggle_icons()\r\n\t\t */\r\n\t\ttoggle_icons : function () { if(this._data.core.themes.icons) { this.hide_icons(); } else { this.show_icons(); } },\r\n\t\t/**\r\n\t\t * show the node ellipsis\r\n\t\t * @name show_icons()\r\n\t\t */\r\n\t\tshow_ellipsis : function () {\r\n\t\t\tthis._data.core.themes.ellipsis = true;\r\n\t\t\tthis.get_container_ul().addClass(\"jstree-ellipsis\");\r\n\t\t\t/**\r\n\t\t\t * triggered when ellisis is shown\r\n\t\t\t * @event\r\n\t\t\t * @name show_ellipsis.jstree\r\n\t\t\t */\r\n\t\t\tthis.trigger('show_ellipsis');\r\n\t\t},\r\n\t\t/**\r\n\t\t * hide the node ellipsis\r\n\t\t * @name hide_ellipsis()\r\n\t\t */\r\n\t\thide_ellipsis : function () {\r\n\t\t\tthis._data.core.themes.ellipsis = false;\r\n\t\t\tthis.get_container_ul().removeClass(\"jstree-ellipsis\");\r\n\t\t\t/**\r\n\t\t\t * triggered when ellisis is hidden\r\n\t\t\t * @event\r\n\t\t\t * @name hide_ellipsis.jstree\r\n\t\t\t */\r\n\t\t\tthis.trigger('hide_ellipsis');\r\n\t\t},\r\n\t\t/**\r\n\t\t * toggle the node ellipsis\r\n\t\t * @name toggle_icons()\r\n\t\t */\r\n\t\ttoggle_ellipsis : function () { if(this._data.core.themes.ellipsis) { this.hide_ellipsis(); } else { this.show_ellipsis(); } },\r\n\t\t/**\r\n\t\t * set the node icon for a node\r\n\t\t * @name set_icon(obj, icon)\r\n\t\t * @param {mixed} obj\r\n\t\t * @param {String} icon the new icon - can be a path to an icon or a className, if using an image that is in the current directory use a `./` prefix, otherwise it will be detected as a class\r\n\t\t */\r\n\t\tset_icon : function (obj, icon) {\r\n\t\t\tvar t1, t2, dom, old;\r\n\t\t\tif($.isArray(obj)) {\r\n\t\t\t\tobj = obj.slice();\r\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\r\n\t\t\t\t\tthis.set_icon(obj[t1], icon);\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root) { return false; }\r\n\t\t\told = obj.icon;\r\n\t\t\tobj.icon = icon === true || icon === null || icon === undefined || icon === '' ? true : icon;\r\n\t\t\tdom = this.get_node(obj, true).children(\".jstree-anchor\").children(\".jstree-themeicon\");\r\n\t\t\tif(icon === false) {\r\n\t\t\t\tdom.removeClass('jstree-themeicon-custom ' + old).css(\"background\",\"\").removeAttr(\"rel\");\r\n\t\t\t\tthis.hide_icon(obj);\r\n\t\t\t}\r\n\t\t\telse if(icon === true || icon === null || icon === undefined || icon === '') {\r\n\t\t\t\tdom.removeClass('jstree-themeicon-custom ' + old).css(\"background\",\"\").removeAttr(\"rel\");\r\n\t\t\t\tif(old === false) { this.show_icon(obj); }\r\n\t\t\t}\r\n\t\t\telse if(icon.indexOf(\"/\") === -1 && icon.indexOf(\".\") === -1) {\r\n\t\t\t\tdom.removeClass(old).css(\"background\",\"\");\r\n\t\t\t\tdom.addClass(icon + ' jstree-themeicon-custom').attr(\"rel\",icon);\r\n\t\t\t\tif(old === false) { this.show_icon(obj); }\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdom.removeClass(old).css(\"background\",\"\");\r\n\t\t\t\tdom.addClass('jstree-themeicon-custom').css(\"background\", \"url('\" + icon + \"') center center no-repeat\").attr(\"rel\",icon);\r\n\t\t\t\tif(old === false) { this.show_icon(obj); }\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t},\r\n\t\t/**\r\n\t\t * get the node icon for a node\r\n\t\t * @name get_icon(obj)\r\n\t\t * @param {mixed} obj\r\n\t\t * @return {String}\r\n\t\t */\r\n\t\tget_icon : function (obj) {\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\treturn (!obj || obj.id === $.jstree.root) ? false : obj.icon;\r\n\t\t},\r\n\t\t/**\r\n\t\t * hide the icon on an individual node\r\n\t\t * @name hide_icon(obj)\r\n\t\t * @param {mixed} obj\r\n\t\t */\r\n\t\thide_icon : function (obj) {\r\n\t\t\tvar t1, t2;\r\n\t\t\tif($.isArray(obj)) {\r\n\t\t\t\tobj = obj.slice();\r\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\r\n\t\t\t\t\tthis.hide_icon(obj[t1]);\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj === $.jstree.root) { return false; }\r\n\t\t\tobj.icon = false;\r\n\t\t\tthis.get_node(obj, true).children(\".jstree-anchor\").children(\".jstree-themeicon\").addClass('jstree-themeicon-hidden');\r\n\t\t\treturn true;\r\n\t\t},\r\n\t\t/**\r\n\t\t * show the icon on an individual node\r\n\t\t * @name show_icon(obj)\r\n\t\t * @param {mixed} obj\r\n\t\t */\r\n\t\tshow_icon : function (obj) {\r\n\t\t\tvar t1, t2, dom;\r\n\t\t\tif($.isArray(obj)) {\r\n\t\t\t\tobj = obj.slice();\r\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\r\n\t\t\t\t\tthis.show_icon(obj[t1]);\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj === $.jstree.root) { return false; }\r\n\t\t\tdom = this.get_node(obj, true);\r\n\t\t\tobj.icon = dom.length ? dom.children(\".jstree-anchor\").children(\".jstree-themeicon\").attr('rel') : true;\r\n\t\t\tif(!obj.icon) { obj.icon = true; }\r\n\t\t\tdom.children(\".jstree-anchor\").children(\".jstree-themeicon\").removeClass('jstree-themeicon-hidden');\r\n\t\t\treturn true;\r\n\t\t}\r\n\t});\r\n\r\n\t// helpers\r\n\t$.vakata = {};\r\n\r\n\t$.vakata.search = function(pattern, txt, options) {\r\n\t\toptions = options || {};\r\n\t\tif(options.fuzzy !== false) {\r\n\t\t\toptions.fuzzy = true;\r\n\t\t}\r\n\t\tpattern = options.caseSensitive ? pattern : pattern.toLowerCase();\r\n\t\tvar MATCH_LOCATION\t= options.location || 0,\r\n\t\t\tMATCH_DISTANCE\t= options.distance || 100,\r\n\t\t\tMATCH_THRESHOLD\t= options.threshold || 0.6,\r\n\t\t\tpatternLen = pattern.length;\r\n\t\tif(patternLen > 32) {\r\n\t\t\toptions.fuzzy = false;\r\n\t\t}\r\n\t\tif(options.fuzzy) {\r\n\t\t\tvar matchmask = 1 << (patternLen - 1);\r\n\t\t\tvar pattern_alphabet = (function () {\r\n\t\t\t\tvar mask = {},\r\n\t\t\t\t\ti = 0;\r\n\t\t\t\tfor (i = 0; i < patternLen; i++) {\r\n\t\t\t\t\tmask[pattern.charAt(i)] = 0;\r\n\t\t\t\t}\r\n\t\t\t\tfor (i = 0; i < patternLen; i++) {\r\n\t\t\t\t\tmask[pattern.charAt(i)] |= 1 << (patternLen - i - 1);\r\n\t\t\t\t}\r\n\t\t\t\treturn mask;\r\n\t\t\t})();\r\n\t\t\tvar match_bitapScore = function (e, x) {\r\n\t\t\t\tvar accuracy = e / patternLen,\r\n\t\t\t\t\tproximity = Math.abs(MATCH_LOCATION - x);\r\n\t\t\t\tif(!MATCH_DISTANCE) {\r\n\t\t\t\t\treturn proximity ? 1.0 : accuracy;\r\n\t\t\t\t}\r\n\t\t\t\treturn accuracy + (proximity / MATCH_DISTANCE);\r\n\t\t\t};\r\n\t\t}\r\n\t\tvar search = function (text) {\r\n\t\t\ttext = options.caseSensitive ? text : text.toLowerCase();\r\n\t\t\tif(pattern === text || text.indexOf(pattern) !== -1) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tisMatch: true,\r\n\t\t\t\t\tscore: 0\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\tif(!options.fuzzy) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tisMatch: false,\r\n\t\t\t\t\tscore: 1\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\tvar i, j,\r\n\t\t\t\ttextLen = text.length,\r\n\t\t\t\tscoreThreshold = MATCH_THRESHOLD,\r\n\t\t\t\tbestLoc = text.indexOf(pattern, MATCH_LOCATION),\r\n\t\t\t\tbinMin, binMid,\r\n\t\t\t\tbinMax = patternLen + textLen,\r\n\t\t\t\tlastRd, start, finish, rd, charMatch,\r\n\t\t\t\tscore = 1,\r\n\t\t\t\tlocations = [];\r\n\t\t\tif (bestLoc != -1) {\r\n\t\t\t\tscoreThreshold = Math.min(match_bitapScore(0, bestLoc), scoreThreshold);\r\n\t\t\t\tbestLoc = text.lastIndexOf(pattern, MATCH_LOCATION + patternLen);\r\n\t\t\t\tif (bestLoc != -1) {\r\n\t\t\t\t\tscoreThreshold = Math.min(match_bitapScore(0, bestLoc), scoreThreshold);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tbestLoc = -1;\r\n\t\t\tfor (i = 0; i < patternLen; i++) {\r\n\t\t\t\tbinMin = 0;\r\n\t\t\t\tbinMid = binMax;\r\n\t\t\t\twhile (binMin < binMid) {\r\n\t\t\t\t\tif (match_bitapScore(i, MATCH_LOCATION + binMid) <= scoreThreshold) {\r\n\t\t\t\t\t\tbinMin = binMid;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tbinMax = binMid;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbinMid = Math.floor((binMax - binMin) / 2 + binMin);\r\n\t\t\t\t}\r\n\t\t\t\tbinMax = binMid;\r\n\t\t\t\tstart = Math.max(1, MATCH_LOCATION - binMid + 1);\r\n\t\t\t\tfinish = Math.min(MATCH_LOCATION + binMid, textLen) + patternLen;\r\n\t\t\t\trd = Array(finish + 2);\r\n\t\t\t\trd[finish + 1] = (1 << i) - 1;\r\n\t\t\t\tfor (j = finish; j >= start; j--) {\r\n\t\t\t\t\tcharMatch = pattern_alphabet[text.charAt(j - 1)];\r\n\t\t\t\t\tif (i === 0) {\r\n\t\t\t\t\t\trd[j] = ((rd[j + 1] << 1) | 1) & charMatch;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\trd[j] = ((rd[j + 1] << 1) | 1) & charMatch | (((lastRd[j + 1] | lastRd[j]) << 1) | 1) | lastRd[j + 1];\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (rd[j] & matchmask) {\r\n\t\t\t\t\t\tscore = match_bitapScore(i, j - 1);\r\n\t\t\t\t\t\tif (score <= scoreThreshold) {\r\n\t\t\t\t\t\t\tscoreThreshold = score;\r\n\t\t\t\t\t\t\tbestLoc = j - 1;\r\n\t\t\t\t\t\t\tlocations.push(bestLoc);\r\n\t\t\t\t\t\t\tif (bestLoc > MATCH_LOCATION) {\r\n\t\t\t\t\t\t\t\tstart = Math.max(1, 2 * MATCH_LOCATION - bestLoc);\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (match_bitapScore(i + 1, MATCH_LOCATION) > scoreThreshold) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tlastRd = rd;\r\n\t\t\t}\r\n\t\t\treturn {\r\n\t\t\t\tisMatch: bestLoc >= 0,\r\n\t\t\t\tscore: score\r\n\t\t\t};\r\n\t\t};\r\n\t\treturn txt === true ? { 'search' : search } : search(txt);\r\n\t};\r\n\r\n\t// collect attributes\r\n\t$.vakata.attributes = function(node, with_values) {\r\n\t\tnode = $(node)[0];\r\n\t\tvar attr = with_values ? {} : [];\r\n\t\tif(node && node.attributes) {\r\n\t\t\t$.each(node.attributes, function (i, v) {\r\n\t\t\t\tif($.inArray(v.name.toLowerCase(),['style','contenteditable','hasfocus','tabindex']) !== -1) { return; }\r\n\t\t\t\tif(v.value !== null && $.trim(v.value) !== '') {\r\n\t\t\t\t\tif(with_values) { attr[v.name] = v.value; }\r\n\t\t\t\t\telse { attr.push(v.name); }\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn attr;\r\n\t};\r\n\t$.vakata.array_unique = function(array) {\r\n\t\tvar a = [], i, j, l, o = {};\r\n\t\tfor(i = 0, l = array.length; i < l; i++) {\r\n\t\t\tif(o[array[i]] === undefined) {\r\n\t\t\t\ta.push(array[i]);\r\n\t\t\t\to[array[i]] = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn a;\r\n\t};\r\n\t// remove item from array\r\n\t$.vakata.array_remove = function(array, from) {\r\n\t\tarray.splice(from, 1);\r\n\t\treturn array;\r\n\t\t//var rest = array.slice((to || from) + 1 || array.length);\r\n\t\t//array.length = from < 0 ? array.length + from : from;\r\n\t\t//array.push.apply(array, rest);\r\n\t\t//return array;\r\n\t};\r\n\t// remove item from array\r\n\t$.vakata.array_remove_item = function(array, item) {\r\n\t\tvar tmp = $.inArray(item, array);\r\n\t\treturn tmp !== -1 ? $.vakata.array_remove(array, tmp) : array;\r\n\t};\r\n\t$.vakata.array_filter = function(c,a,b,d,e) {\r\n\t\tif (c.filter) {\r\n\t\t\treturn c.filter(a, b);\r\n\t\t}\r\n\t\td=[];\r\n\t\tfor (e in c) {\r\n\t\t\tif (~~e+''===e+'' && e>=0 && a.call(b,c[e],+e,c)) {\r\n\t\t\t\td.push(c[e]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn d;\r\n\t};\r\n\r\n\r\n\treturn Tree;\r\n\r\n});\r\n\ndefine('skylark-widgets-hierarchy/addons/changed',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-browser\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-geom\",\r\n  \"skylark-domx-query\",\r\n  \"../Hierarchy\"\r\n],function(langx,browser,eventer,noder,geom,$,jstree){\r\n\t\"use strict\";\r\n\r\n\tif($.jstree.plugins.changed) { return; }\r\n\r\n\t$.jstree.plugins.changed = function (options, parent) {\r\n\t\tvar last = [];\r\n\t\tthis.trigger = function (ev, data) {\r\n\t\t\tvar i, j;\r\n\t\t\tif(!data) {\r\n\t\t\t\tdata = {};\r\n\t\t\t}\r\n\t\t\tif(ev.replace('.jstree','') === 'changed') {\r\n\t\t\t\tdata.changed = { selected : [], deselected : [] };\r\n\t\t\t\tvar tmp = {};\r\n\t\t\t\tfor(i = 0, j = last.length; i < j; i++) {\r\n\t\t\t\t\ttmp[last[i]] = 1;\r\n\t\t\t\t}\r\n\t\t\t\tfor(i = 0, j = data.selected.length; i < j; i++) {\r\n\t\t\t\t\tif(!tmp[data.selected[i]]) {\r\n\t\t\t\t\t\tdata.changed.selected.push(data.selected[i]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\ttmp[data.selected[i]] = 2;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tfor(i = 0, j = last.length; i < j; i++) {\r\n\t\t\t\t\tif(tmp[last[i]] === 1) {\r\n\t\t\t\t\t\tdata.changed.deselected.push(last[i]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tlast = data.selected.slice();\r\n\t\t\t}\r\n\t\t\t/**\r\n\t\t\t * triggered when selection changes (the \"changed\" plugin enhances the original event with more data)\r\n\t\t\t * @event\r\n\t\t\t * @name changed.jstree\r\n\t\t\t * @param {Object} node\r\n\t\t\t * @param {Object} action the action that caused the selection to change\r\n\t\t\t * @param {Array} selected the current selection\r\n\t\t\t * @param {Object} changed an object containing two properties `selected` and `deselected` - both arrays of node IDs, which were selected or deselected since the last changed event\r\n\t\t\t * @param {Object} event the event (if any) that triggered this changed event\r\n\t\t\t * @plugin changed\r\n\t\t\t */\r\n\t\t\tparent.trigger.call(this, ev, data);\r\n\t\t};\r\n\t\tthis.refresh = function (skip_loading, forget_state) {\r\n\t\t\tlast = [];\r\n\t\t\treturn parent.refresh.apply(this, arguments);\r\n\t\t};\r\n\t};\r\n\r\n\treturn $;\r\n});\ndefine('skylark-widgets-hierarchy/addons/checkbox',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-browser\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-geom\",\r\n  \"skylark-domx-query\",\r\n  \"../Hierarchy\"\r\n],function(langx,browser,eventer,noder,geom,$,jstree){\r\n\t\"use strict\";\r\n\r\n\tif($.jstree.plugins.checkbox) { return; }\r\n\r\n\tvar _i = document.createElement('I');\r\n\t_i.className = 'jstree-icon jstree-checkbox';\r\n\t_i.setAttribute('role', 'presentation');\r\n\t/**\r\n\t * stores all defaults for the checkbox plugin\r\n\t * @name $.jstree.defaults.checkbox\r\n\t * @plugin checkbox\r\n\t */\r\n\t$.jstree.defaults.checkbox = {\r\n\t\t/**\r\n\t\t * a boolean indicating if checkboxes should be visible (can be changed at a later time using `show_checkboxes()` and `hide_checkboxes`). Defaults to `true`.\r\n\t\t * @name $.jstree.defaults.checkbox.visible\r\n\t\t * @plugin checkbox\r\n\t\t */\r\n\t\tvisible\t\t\t\t: true,\r\n\t\t/**\r\n\t\t * a boolean indicating if checkboxes should cascade down and have an undetermined state. Defaults to `true`.\r\n\t\t * @name $.jstree.defaults.checkbox.three_state\r\n\t\t * @plugin checkbox\r\n\t\t */\r\n\t\tthree_state\t\t\t: true,\r\n\t\t/**\r\n\t\t * a boolean indicating if clicking anywhere on the node should act as clicking on the checkbox. Defaults to `true`.\r\n\t\t * @name $.jstree.defaults.checkbox.whole_node\r\n\t\t * @plugin checkbox\r\n\t\t */\r\n\t\twhole_node\t\t\t: true,\r\n\t\t/**\r\n\t\t * a boolean indicating if the selected style of a node should be kept, or removed. Defaults to `true`.\r\n\t\t * @name $.jstree.defaults.checkbox.keep_selected_style\r\n\t\t * @plugin checkbox\r\n\t\t */\r\n\t\tkeep_selected_style\t: true,\r\n\t\t/**\r\n\t\t * This setting controls how cascading and undetermined nodes are applied.\r\n\t\t * If 'up' is in the string - cascading up is enabled, if 'down' is in the string - cascading down is enabled, if 'undetermined' is in the string - undetermined nodes will be used.\r\n\t\t * If `three_state` is set to `true` this setting is automatically set to 'up+down+undetermined'. Defaults to ''.\r\n\t\t * @name $.jstree.defaults.checkbox.cascade\r\n\t\t * @plugin checkbox\r\n\t\t */\r\n\t\tcascade\t\t\t\t: '',\r\n\t\t/**\r\n\t\t * This setting controls if checkbox are bound to the general tree selection or to an internal array maintained by the checkbox plugin. Defaults to `true`, only set to `false` if you know exactly what you are doing.\r\n\t\t * @name $.jstree.defaults.checkbox.tie_selection\r\n\t\t * @plugin checkbox\r\n\t\t */\r\n\t\ttie_selection\t\t: true,\r\n\r\n\t\t/**\r\n\t\t * This setting controls if cascading down affects disabled checkboxes\r\n\t\t * @name $.jstree.defaults.checkbox.cascade_to_disabled\r\n\t\t * @plugin checkbox\r\n\t\t */\r\n\t\tcascade_to_disabled : true,\r\n\r\n\t\t/**\r\n\t\t * This setting controls if cascading down affects hidden checkboxes\r\n\t\t * @name $.jstree.defaults.checkbox.cascade_to_hidden\r\n\t\t * @plugin checkbox\r\n\t\t */\r\n\t\tcascade_to_hidden : true\r\n\t};\r\n\t$.jstree.plugins.checkbox = function (options, parent) {\r\n\t\tthis.bind = function () {\r\n\t\t\tparent.bind.call(this);\r\n\t\t\tthis._data.checkbox.uto = false;\r\n\t\t\tthis._data.checkbox.selected = [];\r\n\t\t\tif(this.settings.checkbox.three_state) {\r\n\t\t\t\tthis.settings.checkbox.cascade = 'up+down+undetermined';\r\n\t\t\t}\r\n\t\t\tthis.element\r\n\t\t\t\t.on(\"init.jstree\", $.proxy(function () {\r\n\t\t\t\t\t\tthis._data.checkbox.visible = this.settings.checkbox.visible;\r\n\t\t\t\t\t\tif(!this.settings.checkbox.keep_selected_style) {\r\n\t\t\t\t\t\t\tthis.element.addClass('jstree-checkbox-no-clicked');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(this.settings.checkbox.tie_selection) {\r\n\t\t\t\t\t\t\tthis.element.addClass('jstree-checkbox-selection');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on(\"loading.jstree\", $.proxy(function () {\r\n\t\t\t\t\t\tthis[ this._data.checkbox.visible ? 'show_checkboxes' : 'hide_checkboxes' ]();\r\n\t\t\t\t\t}, this));\r\n\t\t\tif(this.settings.checkbox.cascade.indexOf('undetermined') !== -1) {\r\n\t\t\t\tthis.element\r\n\t\t\t\t\t.on('changed.jstree uncheck_node.jstree check_node.jstree uncheck_all.jstree check_all.jstree move_node.jstree copy_node.jstree redraw.jstree open_node.jstree', $.proxy(function () {\r\n\t\t\t\t\t\t\t// only if undetermined is in setting\r\n\t\t\t\t\t\t\tif(this._data.checkbox.uto) { clearTimeout(this._data.checkbox.uto); }\r\n\t\t\t\t\t\t\tthis._data.checkbox.uto = setTimeout($.proxy(this._undetermined, this), 50);\r\n\t\t\t\t\t\t}, this));\r\n\t\t\t}\r\n\t\t\tif(!this.settings.checkbox.tie_selection) {\r\n\t\t\t\tthis.element\r\n\t\t\t\t\t.on('model.jstree', $.proxy(function (e, data) {\r\n\t\t\t\t\t\tvar m = this._model.data,\r\n\t\t\t\t\t\t\tp = m[data.parent],\r\n\t\t\t\t\t\t\tdpc = data.nodes,\r\n\t\t\t\t\t\t\ti, j;\r\n\t\t\t\t\t\tfor(i = 0, j = dpc.length; i < j; i++) {\r\n\t\t\t\t\t\t\tm[dpc[i]].state.checked = m[dpc[i]].state.checked || (m[dpc[i]].original && m[dpc[i]].original.state && m[dpc[i]].original.state.checked);\r\n\t\t\t\t\t\t\tif(m[dpc[i]].state.checked) {\r\n\t\t\t\t\t\t\t\tthis._data.checkbox.selected.push(dpc[i]);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, this));\r\n\t\t\t}\r\n\t\t\tif(this.settings.checkbox.cascade.indexOf('up') !== -1 || this.settings.checkbox.cascade.indexOf('down') !== -1) {\r\n\t\t\t\tthis.element\r\n\t\t\t\t\t.on('model.jstree', $.proxy(function (e, data) {\r\n\t\t\t\t\t\t\tvar m = this._model.data,\r\n\t\t\t\t\t\t\t\tp = m[data.parent],\r\n\t\t\t\t\t\t\t\tdpc = data.nodes,\r\n\t\t\t\t\t\t\t\tchd = [],\r\n\t\t\t\t\t\t\t\tc, i, j, k, l, tmp, s = this.settings.checkbox.cascade, t = this.settings.checkbox.tie_selection;\r\n\r\n\t\t\t\t\t\t\tif(s.indexOf('down') !== -1) {\r\n\t\t\t\t\t\t\t\t// apply down\r\n\t\t\t\t\t\t\t\tif(p.state[ t ? 'selected' : 'checked' ]) {\r\n\t\t\t\t\t\t\t\t\tfor(i = 0, j = dpc.length; i < j; i++) {\r\n\t\t\t\t\t\t\t\t\t\tm[dpc[i]].state[ t ? 'selected' : 'checked' ] = true;\r\n\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\tthis._data[ t ? 'core' : 'checkbox' ].selected = this._data[ t ? 'core' : 'checkbox' ].selected.concat(dpc);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tfor(i = 0, j = dpc.length; i < j; i++) {\r\n\t\t\t\t\t\t\t\t\t\tif(m[dpc[i]].state[ t ? 'selected' : 'checked' ]) {\r\n\t\t\t\t\t\t\t\t\t\t\tfor(k = 0, l = m[dpc[i]].children_d.length; k < l; k++) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tm[m[dpc[i]].children_d[k]].state[ t ? 'selected' : 'checked' ] = true;\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\tthis._data[ t ? 'core' : 'checkbox' ].selected = this._data[ t ? 'core' : 'checkbox' ].selected.concat(m[dpc[i]].children_d);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif(s.indexOf('up') !== -1) {\r\n\t\t\t\t\t\t\t\t// apply up\r\n\t\t\t\t\t\t\t\tfor(i = 0, j = p.children_d.length; i < j; i++) {\r\n\t\t\t\t\t\t\t\t\tif(!m[p.children_d[i]].children.length) {\r\n\t\t\t\t\t\t\t\t\t\tchd.push(m[p.children_d[i]].parent);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tchd = $.vakata.array_unique(chd);\r\n\t\t\t\t\t\t\t\tfor(k = 0, l = chd.length; k < l; k++) {\r\n\t\t\t\t\t\t\t\t\tp = m[chd[k]];\r\n\t\t\t\t\t\t\t\t\twhile(p && p.id !== $.jstree.root) {\r\n\t\t\t\t\t\t\t\t\t\tc = 0;\r\n\t\t\t\t\t\t\t\t\t\tfor(i = 0, j = p.children.length; i < j; i++) {\r\n\t\t\t\t\t\t\t\t\t\t\tc += m[p.children[i]].state[ t ? 'selected' : 'checked' ];\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\tif(c === j) {\r\n\t\t\t\t\t\t\t\t\t\t\tp.state[ t ? 'selected' : 'checked' ] = true;\r\n\t\t\t\t\t\t\t\t\t\t\tthis._data[ t ? 'core' : 'checkbox' ].selected.push(p.id);\r\n\t\t\t\t\t\t\t\t\t\t\ttmp = this.get_node(p, true);\r\n\t\t\t\t\t\t\t\t\t\t\tif(tmp && tmp.length) {\r\n\t\t\t\t\t\t\t\t\t\t\t\ttmp.attr('aria-selected', true).children('.jstree-anchor').addClass( t ? 'jstree-clicked' : 'jstree-checked');\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\tp = this.get_node(p.parent);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tthis._data[ t ? 'core' : 'checkbox' ].selected = $.vakata.array_unique(this._data[ t ? 'core' : 'checkbox' ].selected);\r\n\t\t\t\t\t\t}, this))\r\n\t\t\t\t\t.on(this.settings.checkbox.tie_selection ? 'select_node.jstree' : 'check_node.jstree', $.proxy(function (e, data) {\r\n\t\t\t\t\t\t\tvar self = this,\r\n\t\t\t\t\t\t\t\tobj = data.node,\r\n\t\t\t\t\t\t\t\tm = this._model.data,\r\n\t\t\t\t\t\t\t\tpar = this.get_node(obj.parent),\r\n\t\t\t\t\t\t\t\ti, j, c, tmp, s = this.settings.checkbox.cascade, t = this.settings.checkbox.tie_selection,\r\n\t\t\t\t\t\t\t\tsel = {}, cur = this._data[ t ? 'core' : 'checkbox' ].selected;\r\n\r\n\t\t\t\t\t\t\tfor (i = 0, j = cur.length; i < j; i++) {\r\n\t\t\t\t\t\t\t\tsel[cur[i]] = true;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t// apply down\r\n\t\t\t\t\t\t\tif(s.indexOf('down') !== -1) {\r\n\t\t\t\t\t\t\t\t//this._data[ t ? 'core' : 'checkbox' ].selected = $.vakata.array_unique(this._data[ t ? 'core' : 'checkbox' ].selected.concat(obj.children_d));\r\n\t\t\t\t\t\t\t\tvar selectedIds = this._cascade_new_checked_state(obj.id, true);\r\n\t\t\t\t\t\t\t\tvar temp = obj.children_d.concat(obj.id);\r\n\t\t\t\t\t\t\t\tfor (i = 0, j = temp.length; i < j; i++) {\r\n\t\t\t\t\t\t\t\t\tif (selectedIds.indexOf(temp[i]) > -1) {\r\n\t\t\t\t\t\t\t\t\t\tsel[temp[i]] = true;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\tdelete sel[temp[i]];\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t// apply up\r\n\t\t\t\t\t\t\tif(s.indexOf('up') !== -1) {\r\n\t\t\t\t\t\t\t\twhile(par && par.id !== $.jstree.root) {\r\n\t\t\t\t\t\t\t\t\tc = 0;\r\n\t\t\t\t\t\t\t\t\tfor(i = 0, j = par.children.length; i < j; i++) {\r\n\t\t\t\t\t\t\t\t\t\tc += m[par.children[i]].state[ t ? 'selected' : 'checked' ];\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tif(c === j) {\r\n\t\t\t\t\t\t\t\t\t\tpar.state[ t ? 'selected' : 'checked' ] = true;\r\n\t\t\t\t\t\t\t\t\t\tsel[par.id] = true;\r\n\t\t\t\t\t\t\t\t\t\t//this._data[ t ? 'core' : 'checkbox' ].selected.push(par.id);\r\n\t\t\t\t\t\t\t\t\t\ttmp = this.get_node(par, true);\r\n\t\t\t\t\t\t\t\t\t\tif(tmp && tmp.length) {\r\n\t\t\t\t\t\t\t\t\t\t\ttmp.attr('aria-selected', true).children('.jstree-anchor').addClass(t ? 'jstree-clicked' : 'jstree-checked');\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tpar = this.get_node(par.parent);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tcur = [];\r\n\t\t\t\t\t\t\tfor (i in sel) {\r\n\t\t\t\t\t\t\t\tif (sel.hasOwnProperty(i)) {\r\n\t\t\t\t\t\t\t\t\tcur.push(i);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tthis._data[ t ? 'core' : 'checkbox' ].selected = cur;\r\n\t\t\t\t\t\t}, this))\r\n\t\t\t\t\t.on(this.settings.checkbox.tie_selection ? 'deselect_all.jstree' : 'uncheck_all.jstree', $.proxy(function (e, data) {\r\n\t\t\t\t\t\t\tvar obj = this.get_node($.jstree.root),\r\n\t\t\t\t\t\t\t\tm = this._model.data,\r\n\t\t\t\t\t\t\t\ti, j, tmp;\r\n\t\t\t\t\t\t\tfor(i = 0, j = obj.children_d.length; i < j; i++) {\r\n\t\t\t\t\t\t\t\ttmp = m[obj.children_d[i]];\r\n\t\t\t\t\t\t\t\tif(tmp && tmp.original && tmp.original.state && tmp.original.state.undetermined) {\r\n\t\t\t\t\t\t\t\t\ttmp.original.state.undetermined = false;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}, this))\r\n\t\t\t\t\t.on(this.settings.checkbox.tie_selection ? 'deselect_node.jstree' : 'uncheck_node.jstree', $.proxy(function (e, data) {\r\n\t\t\t\t\t\t\tvar self = this,\r\n\t\t\t\t\t\t\t\tobj = data.node,\r\n\t\t\t\t\t\t\t\tdom = this.get_node(obj, true),\r\n\t\t\t\t\t\t\t\ti, j, tmp, s = this.settings.checkbox.cascade, t = this.settings.checkbox.tie_selection,\r\n\t\t\t\t\t\t\t\tcur = this._data[ t ? 'core' : 'checkbox' ].selected, sel = {},\r\n\t\t\t\t\t\t\t\tstillSelectedIds = [],\r\n\t\t\t\t\t\t\t\tallIds = obj.children_d.concat(obj.id);\r\n\r\n\t\t\t\t\t\t\t// apply down\r\n\t\t\t\t\t\t\tif(s.indexOf('down') !== -1) {\r\n\t\t\t\t\t\t\t\tvar selectedIds = this._cascade_new_checked_state(obj.id, false);\r\n\r\n\t\t\t\t\t\t\t\tcur = cur.filter(function(id) {\r\n\t\t\t\t\t\t\t\t\treturn allIds.indexOf(id) === -1 || selectedIds.indexOf(id) > -1;\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t// only apply up if cascade up is enabled and if this node is not selected\r\n\t\t\t\t\t\t\t// (if all child nodes are disabled and cascade_to_disabled === false then this node will till be selected).\r\n\t\t\t\t\t\t\tif(s.indexOf('up') !== -1 && cur.indexOf(obj.id) === -1) {\r\n\t\t\t\t\t\t\t\tfor(i = 0, j = obj.parents.length; i < j; i++) {\r\n\t\t\t\t\t\t\t\t\ttmp = this._model.data[obj.parents[i]];\r\n\t\t\t\t\t\t\t\t\ttmp.state[ t ? 'selected' : 'checked' ] = false;\r\n\t\t\t\t\t\t\t\t\tif(tmp && tmp.original && tmp.original.state && tmp.original.state.undetermined) {\r\n\t\t\t\t\t\t\t\t\t\ttmp.original.state.undetermined = false;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\ttmp = this.get_node(obj.parents[i], true);\r\n\t\t\t\t\t\t\t\t\tif(tmp && tmp.length) {\r\n\t\t\t\t\t\t\t\t\t\ttmp.attr('aria-selected', false).children('.jstree-anchor').removeClass(t ? 'jstree-clicked' : 'jstree-checked');\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tcur = cur.filter(function(id) {\r\n\t\t\t\t\t\t\t\t\treturn obj.parents.indexOf(id) === -1;\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tthis._data[ t ? 'core' : 'checkbox' ].selected = cur;\r\n\t\t\t\t\t\t}, this));\r\n\t\t\t}\r\n\t\t\tif(this.settings.checkbox.cascade.indexOf('up') !== -1) {\r\n\t\t\t\tthis.element\r\n\t\t\t\t\t.on('delete_node.jstree', $.proxy(function (e, data) {\r\n\t\t\t\t\t\t\t// apply up (whole handler)\r\n\t\t\t\t\t\t\tvar p = this.get_node(data.parent),\r\n\t\t\t\t\t\t\t\tm = this._model.data,\r\n\t\t\t\t\t\t\t\ti, j, c, tmp, t = this.settings.checkbox.tie_selection;\r\n\t\t\t\t\t\t\twhile(p && p.id !== $.jstree.root && !p.state[ t ? 'selected' : 'checked' ]) {\r\n\t\t\t\t\t\t\t\tc = 0;\r\n\t\t\t\t\t\t\t\tfor(i = 0, j = p.children.length; i < j; i++) {\r\n\t\t\t\t\t\t\t\t\tc += m[p.children[i]].state[ t ? 'selected' : 'checked' ];\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif(j > 0 && c === j) {\r\n\t\t\t\t\t\t\t\t\tp.state[ t ? 'selected' : 'checked' ] = true;\r\n\t\t\t\t\t\t\t\t\tthis._data[ t ? 'core' : 'checkbox' ].selected.push(p.id);\r\n\t\t\t\t\t\t\t\t\ttmp = this.get_node(p, true);\r\n\t\t\t\t\t\t\t\t\tif(tmp && tmp.length) {\r\n\t\t\t\t\t\t\t\t\t\ttmp.attr('aria-selected', true).children('.jstree-anchor').addClass(t ? 'jstree-clicked' : 'jstree-checked');\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tp = this.get_node(p.parent);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}, this))\r\n\t\t\t\t\t.on('move_node.jstree', $.proxy(function (e, data) {\r\n\t\t\t\t\t\t\t// apply up (whole handler)\r\n\t\t\t\t\t\t\tvar is_multi = data.is_multi,\r\n\t\t\t\t\t\t\t\told_par = data.old_parent,\r\n\t\t\t\t\t\t\t\tnew_par = this.get_node(data.parent),\r\n\t\t\t\t\t\t\t\tm = this._model.data,\r\n\t\t\t\t\t\t\t\tp, c, i, j, tmp, t = this.settings.checkbox.tie_selection;\r\n\t\t\t\t\t\t\tif(!is_multi) {\r\n\t\t\t\t\t\t\t\tp = this.get_node(old_par);\r\n\t\t\t\t\t\t\t\twhile(p && p.id !== $.jstree.root && !p.state[ t ? 'selected' : 'checked' ]) {\r\n\t\t\t\t\t\t\t\t\tc = 0;\r\n\t\t\t\t\t\t\t\t\tfor(i = 0, j = p.children.length; i < j; i++) {\r\n\t\t\t\t\t\t\t\t\t\tc += m[p.children[i]].state[ t ? 'selected' : 'checked' ];\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tif(j > 0 && c === j) {\r\n\t\t\t\t\t\t\t\t\t\tp.state[ t ? 'selected' : 'checked' ] = true;\r\n\t\t\t\t\t\t\t\t\t\tthis._data[ t ? 'core' : 'checkbox' ].selected.push(p.id);\r\n\t\t\t\t\t\t\t\t\t\ttmp = this.get_node(p, true);\r\n\t\t\t\t\t\t\t\t\t\tif(tmp && tmp.length) {\r\n\t\t\t\t\t\t\t\t\t\t\ttmp.attr('aria-selected', true).children('.jstree-anchor').addClass(t ? 'jstree-clicked' : 'jstree-checked');\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tp = this.get_node(p.parent);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tp = new_par;\r\n\t\t\t\t\t\t\twhile(p && p.id !== $.jstree.root) {\r\n\t\t\t\t\t\t\t\tc = 0;\r\n\t\t\t\t\t\t\t\tfor(i = 0, j = p.children.length; i < j; i++) {\r\n\t\t\t\t\t\t\t\t\tc += m[p.children[i]].state[ t ? 'selected' : 'checked' ];\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif(c === j) {\r\n\t\t\t\t\t\t\t\t\tif(!p.state[ t ? 'selected' : 'checked' ]) {\r\n\t\t\t\t\t\t\t\t\t\tp.state[ t ? 'selected' : 'checked' ] = true;\r\n\t\t\t\t\t\t\t\t\t\tthis._data[ t ? 'core' : 'checkbox' ].selected.push(p.id);\r\n\t\t\t\t\t\t\t\t\t\ttmp = this.get_node(p, true);\r\n\t\t\t\t\t\t\t\t\t\tif(tmp && tmp.length) {\r\n\t\t\t\t\t\t\t\t\t\t\ttmp.attr('aria-selected', true).children('.jstree-anchor').addClass(t ? 'jstree-clicked' : 'jstree-checked');\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tif(p.state[ t ? 'selected' : 'checked' ]) {\r\n\t\t\t\t\t\t\t\t\t\tp.state[ t ? 'selected' : 'checked' ] = false;\r\n\t\t\t\t\t\t\t\t\t\tthis._data[ t ? 'core' : 'checkbox' ].selected = $.vakata.array_remove_item(this._data[ t ? 'core' : 'checkbox' ].selected, p.id);\r\n\t\t\t\t\t\t\t\t\t\ttmp = this.get_node(p, true);\r\n\t\t\t\t\t\t\t\t\t\tif(tmp && tmp.length) {\r\n\t\t\t\t\t\t\t\t\t\t\ttmp.attr('aria-selected', false).children('.jstree-anchor').removeClass(t ? 'jstree-clicked' : 'jstree-checked');\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tp = this.get_node(p.parent);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}, this));\r\n\t\t\t}\r\n\t\t};\r\n\t\t/**\r\n\t\t * get an array of all nodes whose state is \"undetermined\"\r\n\t\t * @name get_undetermined([full])\r\n\t\t * @param  {boolean} full: if set to `true` the returned array will consist of the full node objects, otherwise - only IDs will be returned\r\n\t\t * @return {Array}\r\n\t\t * @plugin checkbox\r\n\t\t */\r\n\t\tthis.get_undetermined = function (full) {\r\n\t\t\tif (this.settings.checkbox.cascade.indexOf('undetermined') === -1) {\r\n\t\t\t\treturn [];\r\n\t\t\t}\r\n\t\t\tvar i, j, k, l, o = {}, m = this._model.data, t = this.settings.checkbox.tie_selection, s = this._data[ t ? 'core' : 'checkbox' ].selected, p = [], tt = this, r = [];\r\n\t\t\tfor(i = 0, j = s.length; i < j; i++) {\r\n\t\t\t\tif(m[s[i]] && m[s[i]].parents) {\r\n\t\t\t\t\tfor(k = 0, l = m[s[i]].parents.length; k < l; k++) {\r\n\t\t\t\t\t\tif(o[m[s[i]].parents[k]] !== undefined) {\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(m[s[i]].parents[k] !== $.jstree.root) {\r\n\t\t\t\t\t\t\to[m[s[i]].parents[k]] = true;\r\n\t\t\t\t\t\t\tp.push(m[s[i]].parents[k]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// attempt for server side undetermined state\r\n\t\t\tthis.element.find('.jstree-closed').not(':has(.jstree-children)')\r\n\t\t\t\t.each(function () {\r\n\t\t\t\t\tvar tmp = tt.get_node(this), tmp2;\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(!tmp) { return; }\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(!tmp.state.loaded) {\r\n\t\t\t\t\t\tif(tmp.original && tmp.original.state && tmp.original.state.undetermined && tmp.original.state.undetermined === true) {\r\n\t\t\t\t\t\t\tif(o[tmp.id] === undefined && tmp.id !== $.jstree.root) {\r\n\t\t\t\t\t\t\t\to[tmp.id] = true;\r\n\t\t\t\t\t\t\t\tp.push(tmp.id);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tfor(k = 0, l = tmp.parents.length; k < l; k++) {\r\n\t\t\t\t\t\t\t\tif(o[tmp.parents[k]] === undefined && tmp.parents[k] !== $.jstree.root) {\r\n\t\t\t\t\t\t\t\t\to[tmp.parents[k]] = true;\r\n\t\t\t\t\t\t\t\t\tp.push(tmp.parents[k]);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tfor(i = 0, j = tmp.children_d.length; i < j; i++) {\r\n\t\t\t\t\t\t\ttmp2 = m[tmp.children_d[i]];\r\n\t\t\t\t\t\t\tif(!tmp2.state.loaded && tmp2.original && tmp2.original.state && tmp2.original.state.undetermined && tmp2.original.state.undetermined === true) {\r\n\t\t\t\t\t\t\t\tif(o[tmp2.id] === undefined && tmp2.id !== $.jstree.root) {\r\n\t\t\t\t\t\t\t\t\to[tmp2.id] = true;\r\n\t\t\t\t\t\t\t\t\tp.push(tmp2.id);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tfor(k = 0, l = tmp2.parents.length; k < l; k++) {\r\n\t\t\t\t\t\t\t\t\tif(o[tmp2.parents[k]] === undefined && tmp2.parents[k] !== $.jstree.root) {\r\n\t\t\t\t\t\t\t\t\t\to[tmp2.parents[k]] = true;\r\n\t\t\t\t\t\t\t\t\t\tp.push(tmp2.parents[k]);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\tfor (i = 0, j = p.length; i < j; i++) {\r\n\t\t\t\tif(!m[p[i]].state[ t ? 'selected' : 'checked' ]) {\r\n\t\t\t\t\tr.push(full ? m[p[i]] : p[i]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn r;\r\n\t\t};\r\n\t\t/**\r\n\t\t * set the undetermined state where and if necessary. Used internally.\r\n\t\t * @private\r\n\t\t * @name _undetermined()\r\n\t\t * @plugin checkbox\r\n\t\t */\r\n\t\tthis._undetermined = function () {\r\n\t\t\tif(this.element === null) { return; }\r\n\t\t\tvar p = this.get_undetermined(false), i, j, s;\r\n\r\n\t\t\tthis.element.find('.jstree-undetermined').removeClass('jstree-undetermined');\r\n\t\t\tfor (i = 0, j = p.length; i < j; i++) {\r\n\t\t\t\ts = this.get_node(p[i], true);\r\n\t\t\t\tif(s && s.length) {\r\n\t\t\t\t\ts.children('.jstree-anchor').children('.jstree-checkbox').addClass('jstree-undetermined');\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\tthis.redraw_node = function(obj, deep, is_callback, force_render) {\r\n\t\t\tobj = parent.redraw_node.apply(this, arguments);\r\n\t\t\tif(obj) {\r\n\t\t\t\tvar i, j, tmp = null, icon = null;\r\n\t\t\t\tfor(i = 0, j = obj.childNodes.length; i < j; i++) {\r\n\t\t\t\t\tif(obj.childNodes[i] && obj.childNodes[i].className && obj.childNodes[i].className.indexOf(\"jstree-anchor\") !== -1) {\r\n\t\t\t\t\t\ttmp = obj.childNodes[i];\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif(tmp) {\r\n\t\t\t\t\tif(!this.settings.checkbox.tie_selection && this._model.data[obj.id].state.checked) { tmp.className += ' jstree-checked'; }\r\n\t\t\t\t\ticon = _i.cloneNode(false);\r\n\t\t\t\t\tif(this._model.data[obj.id].state.checkbox_disabled) { icon.className += ' jstree-checkbox-disabled'; }\r\n\t\t\t\t\ttmp.insertBefore(icon, tmp.childNodes[0]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(!is_callback && this.settings.checkbox.cascade.indexOf('undetermined') !== -1) {\r\n\t\t\t\tif(this._data.checkbox.uto) { clearTimeout(this._data.checkbox.uto); }\r\n\t\t\t\tthis._data.checkbox.uto = setTimeout($.proxy(this._undetermined, this), 50);\r\n\t\t\t}\r\n\t\t\treturn obj;\r\n\t\t};\r\n\t\t/**\r\n\t\t * show the node checkbox icons\r\n\t\t * @name show_checkboxes()\r\n\t\t * @plugin checkbox\r\n\t\t */\r\n\t\tthis.show_checkboxes = function () { this._data.core.themes.checkboxes = true; this.get_container_ul().removeClass(\"jstree-no-checkboxes\"); };\r\n\t\t/**\r\n\t\t * hide the node checkbox icons\r\n\t\t * @name hide_checkboxes()\r\n\t\t * @plugin checkbox\r\n\t\t */\r\n\t\tthis.hide_checkboxes = function () { this._data.core.themes.checkboxes = false; this.get_container_ul().addClass(\"jstree-no-checkboxes\"); };\r\n\t\t/**\r\n\t\t * toggle the node icons\r\n\t\t * @name toggle_checkboxes()\r\n\t\t * @plugin checkbox\r\n\t\t */\r\n\t\tthis.toggle_checkboxes = function () { if(this._data.core.themes.checkboxes) { this.hide_checkboxes(); } else { this.show_checkboxes(); } };\r\n\t\t/**\r\n\t\t * checks if a node is in an undetermined state\r\n\t\t * @name is_undetermined(obj)\r\n\t\t * @param  {mixed} obj\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tthis.is_undetermined = function (obj) {\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tvar s = this.settings.checkbox.cascade, i, j, t = this.settings.checkbox.tie_selection, d = this._data[ t ? 'core' : 'checkbox' ].selected, m = this._model.data;\r\n\t\t\tif(!obj || obj.state[ t ? 'selected' : 'checked' ] === true || s.indexOf('undetermined') === -1 || (s.indexOf('down') === -1 && s.indexOf('up') === -1)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif(!obj.state.loaded && obj.original.state.undetermined === true) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tfor(i = 0, j = obj.children_d.length; i < j; i++) {\r\n\t\t\t\tif($.inArray(obj.children_d[i], d) !== -1 || (!m[obj.children_d[i]].state.loaded && m[obj.children_d[i]].original.state.undetermined)) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t};\r\n\t\t/**\r\n\t\t * disable a node's checkbox\r\n\t\t * @name disable_checkbox(obj)\r\n\t\t * @param {mixed} obj an array can be used too\r\n\t\t * @trigger disable_checkbox.jstree\r\n\t\t * @plugin checkbox\r\n\t\t */\r\n\t\tthis.disable_checkbox = function (obj) {\r\n\t\t\tvar t1, t2, dom;\r\n\t\t\tif($.isArray(obj)) {\r\n\t\t\t\tobj = obj.slice();\r\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\r\n\t\t\t\t\tthis.disable_checkbox(obj[t1]);\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tdom = this.get_node(obj, true);\r\n\t\t\tif(!obj.state.checkbox_disabled) {\r\n\t\t\t\tobj.state.checkbox_disabled = true;\r\n\t\t\t\tif(dom && dom.length) {\r\n\t\t\t\t\tdom.children('.jstree-anchor').children('.jstree-checkbox').addClass('jstree-checkbox-disabled');\r\n\t\t\t\t}\r\n\t\t\t\t/**\r\n\t\t\t\t * triggered when an node's checkbox is disabled\r\n\t\t\t\t * @event\r\n\t\t\t\t * @name disable_checkbox.jstree\r\n\t\t\t\t * @param {Object} node\r\n\t\t\t\t * @plugin checkbox\r\n\t\t\t\t */\r\n\t\t\t\tthis.trigger('disable_checkbox', { 'node' : obj });\r\n\t\t\t}\r\n\t\t};\r\n\t\t/**\r\n\t\t * enable a node's checkbox\r\n\t\t * @name disable_checkbox(obj)\r\n\t\t * @param {mixed} obj an array can be used too\r\n\t\t * @trigger enable_checkbox.jstree\r\n\t\t * @plugin checkbox\r\n\t\t */\r\n\t\tthis.enable_checkbox = function (obj) {\r\n\t\t\tvar t1, t2, dom;\r\n\t\t\tif($.isArray(obj)) {\r\n\t\t\t\tobj = obj.slice();\r\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\r\n\t\t\t\t\tthis.enable_checkbox(obj[t1]);\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tdom = this.get_node(obj, true);\r\n\t\t\tif(obj.state.checkbox_disabled) {\r\n\t\t\t\tobj.state.checkbox_disabled = false;\r\n\t\t\t\tif(dom && dom.length) {\r\n\t\t\t\t\tdom.children('.jstree-anchor').children('.jstree-checkbox').removeClass('jstree-checkbox-disabled');\r\n\t\t\t\t}\r\n\t\t\t\t/**\r\n\t\t\t\t * triggered when an node's checkbox is enabled\r\n\t\t\t\t * @event\r\n\t\t\t\t * @name enable_checkbox.jstree\r\n\t\t\t\t * @param {Object} node\r\n\t\t\t\t * @plugin checkbox\r\n\t\t\t\t */\r\n\t\t\t\tthis.trigger('enable_checkbox', { 'node' : obj });\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tthis.activate_node = function (obj, e) {\r\n\t\t\tif($(e.target).hasClass('jstree-checkbox-disabled')) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif(this.settings.checkbox.tie_selection && (this.settings.checkbox.whole_node || $(e.target).hasClass('jstree-checkbox'))) {\r\n\t\t\t\te.ctrlKey = true;\r\n\t\t\t}\r\n\t\t\tif(this.settings.checkbox.tie_selection || (!this.settings.checkbox.whole_node && !$(e.target).hasClass('jstree-checkbox'))) {\r\n\t\t\t\treturn parent.activate_node.call(this, obj, e);\r\n\t\t\t}\r\n\t\t\tif(this.is_disabled(obj)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif(this.is_checked(obj)) {\r\n\t\t\t\tthis.uncheck_node(obj, e);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.check_node(obj, e);\r\n\t\t\t}\r\n\t\t\tthis.trigger('activate_node', { 'node' : this.get_node(obj) });\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Cascades checked state to a node and all its descendants. This function does NOT affect hidden and disabled nodes (or their descendants).\r\n\t\t * However if these unaffected nodes are already selected their ids will be included in the returned array.\r\n\t\t * @private\r\n\t\t * @param {string} id the node ID\r\n\t\t * @param {bool} checkedState should the nodes be checked or not\r\n\t\t * @returns {Array} Array of all node id's (in this tree branch) that are checked.\r\n\t\t */\r\n\t\tthis._cascade_new_checked_state = function (id, checkedState) {\r\n\t\t\tvar self = this;\r\n\t\t\tvar t = this.settings.checkbox.tie_selection;\r\n\t\t\tvar node = this._model.data[id];\r\n\t\t\tvar selectedNodeIds = [];\r\n\t\t\tvar selectedChildrenIds = [], i, j, selectedChildIds;\r\n\r\n\t\t\tif (\r\n\t\t\t\t(this.settings.checkbox.cascade_to_disabled || !node.state.disabled) &&\r\n\t\t\t\t(this.settings.checkbox.cascade_to_hidden || !node.state.hidden)\r\n\t\t\t) {\r\n\t\t\t\t//First try and check/uncheck the children\r\n\t\t\t\tif (node.children) {\r\n\t\t\t\t\tfor (i = 0, j = node.children.length; i < j; i++) {\r\n\t\t\t\t\t\tvar childId = node.children[i];\r\n\t\t\t\t\t\tselectedChildIds = self._cascade_new_checked_state(childId, checkedState);\r\n\t\t\t\t\t\tselectedNodeIds = selectedNodeIds.concat(selectedChildIds);\r\n\t\t\t\t\t\tif (selectedChildIds.indexOf(childId) > -1) {\r\n\t\t\t\t\t\t\tselectedChildrenIds.push(childId);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar dom = self.get_node(node, true);\r\n\r\n\t\t\t\t//A node's state is undetermined if some but not all of it's children are checked/selected .\r\n\t\t\t\tvar undetermined = selectedChildrenIds.length > 0 && selectedChildrenIds.length < node.children.length;\r\n\r\n\t\t\t\tif(node.original && node.original.state && node.original.state.undetermined) {\r\n\t\t\t\t\tnode.original.state.undetermined = undetermined;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//If a node is undetermined then remove selected class\r\n\t\t\t\tif (undetermined) {\r\n\t\t\t\t\tnode.state[ t ? 'selected' : 'checked' ] = false;\r\n\t\t\t\t\tdom.attr('aria-selected', false).children('.jstree-anchor').removeClass(t ? 'jstree-clicked' : 'jstree-checked');\r\n\t\t\t\t}\r\n\t\t\t\t//Otherwise, if the checkedState === true (i.e. the node is being checked now) and all of the node's children are checked (if it has any children),\r\n\t\t\t\t//check the node and style it correctly.\r\n\t\t\t\telse if (checkedState && selectedChildrenIds.length === node.children.length) {\r\n\t\t\t\t\tnode.state[ t ? 'selected' : 'checked' ] = checkedState;\r\n\t\t\t\t\tselectedNodeIds.push(node.id);\r\n\r\n\t\t\t\t\tdom.attr('aria-selected', true).children('.jstree-anchor').addClass(t ? 'jstree-clicked' : 'jstree-checked');\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tnode.state[ t ? 'selected' : 'checked' ] = false;\r\n\t\t\t\t\tdom.attr('aria-selected', false).children('.jstree-anchor').removeClass(t ? 'jstree-clicked' : 'jstree-checked');\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tselectedChildIds = this.get_checked_descendants(id);\r\n\r\n\t\t\t\tif (node.state[ t ? 'selected' : 'checked' ]) {\r\n\t\t\t\t\tselectedChildIds.push(node.id);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tselectedNodeIds = selectedNodeIds.concat(selectedChildIds);\r\n\t\t\t}\r\n\r\n\t\t\treturn selectedNodeIds;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Gets ids of nodes selected in branch (of tree) specified by id (does not include the node specified by id)\r\n\t\t * @name get_checked_descendants(obj)\r\n\t\t * @param {string} id the node ID\r\n\t\t * @return {Array} array of IDs\r\n\t\t * @plugin checkbox\r\n\t\t */\r\n\t\tthis.get_checked_descendants = function (id) {\r\n\t\t\tvar self = this;\r\n\t\t\tvar t = self.settings.checkbox.tie_selection;\r\n\t\t\tvar node = self._model.data[id];\r\n\r\n\t\t\treturn node.children_d.filter(function(_id) {\r\n\t\t\t\treturn self._model.data[_id].state[ t ? 'selected' : 'checked' ];\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * check a node (only if tie_selection in checkbox settings is false, otherwise select_node will be called internally)\r\n\t\t * @name check_node(obj)\r\n\t\t * @param {mixed} obj an array can be used to check multiple nodes\r\n\t\t * @trigger check_node.jstree\r\n\t\t * @plugin checkbox\r\n\t\t */\r\n\t\tthis.check_node = function (obj, e) {\r\n\t\t\tif(this.settings.checkbox.tie_selection) { return this.select_node(obj, false, true, e); }\r\n\t\t\tvar dom, t1, t2, th;\r\n\t\t\tif($.isArray(obj)) {\r\n\t\t\t\tobj = obj.slice();\r\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\r\n\t\t\t\t\tthis.check_node(obj[t1], e);\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tdom = this.get_node(obj, true);\r\n\t\t\tif(!obj.state.checked) {\r\n\t\t\t\tobj.state.checked = true;\r\n\t\t\t\tthis._data.checkbox.selected.push(obj.id);\r\n\t\t\t\tif(dom && dom.length) {\r\n\t\t\t\t\tdom.children('.jstree-anchor').addClass('jstree-checked');\r\n\t\t\t\t}\r\n\t\t\t\t/**\r\n\t\t\t\t * triggered when an node is checked (only if tie_selection in checkbox settings is false)\r\n\t\t\t\t * @event\r\n\t\t\t\t * @name check_node.jstree\r\n\t\t\t\t * @param {Object} node\r\n\t\t\t\t * @param {Array} selected the current selection\r\n\t\t\t\t * @param {Object} event the event (if any) that triggered this check_node\r\n\t\t\t\t * @plugin checkbox\r\n\t\t\t\t */\r\n\t\t\t\tthis.trigger('check_node', { 'node' : obj, 'selected' : this._data.checkbox.selected, 'event' : e });\r\n\t\t\t}\r\n\t\t};\r\n\t\t/**\r\n\t\t * uncheck a node (only if tie_selection in checkbox settings is false, otherwise deselect_node will be called internally)\r\n\t\t * @name uncheck_node(obj)\r\n\t\t * @param {mixed} obj an array can be used to uncheck multiple nodes\r\n\t\t * @trigger uncheck_node.jstree\r\n\t\t * @plugin checkbox\r\n\t\t */\r\n\t\tthis.uncheck_node = function (obj, e) {\r\n\t\t\tif(this.settings.checkbox.tie_selection) { return this.deselect_node(obj, false, e); }\r\n\t\t\tvar t1, t2, dom;\r\n\t\t\tif($.isArray(obj)) {\r\n\t\t\t\tobj = obj.slice();\r\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\r\n\t\t\t\t\tthis.uncheck_node(obj[t1], e);\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tdom = this.get_node(obj, true);\r\n\t\t\tif(obj.state.checked) {\r\n\t\t\t\tobj.state.checked = false;\r\n\t\t\t\tthis._data.checkbox.selected = $.vakata.array_remove_item(this._data.checkbox.selected, obj.id);\r\n\t\t\t\tif(dom.length) {\r\n\t\t\t\t\tdom.children('.jstree-anchor').removeClass('jstree-checked');\r\n\t\t\t\t}\r\n\t\t\t\t/**\r\n\t\t\t\t * triggered when an node is unchecked (only if tie_selection in checkbox settings is false)\r\n\t\t\t\t * @event\r\n\t\t\t\t * @name uncheck_node.jstree\r\n\t\t\t\t * @param {Object} node\r\n\t\t\t\t * @param {Array} selected the current selection\r\n\t\t\t\t * @param {Object} event the event (if any) that triggered this uncheck_node\r\n\t\t\t\t * @plugin checkbox\r\n\t\t\t\t */\r\n\t\t\t\tthis.trigger('uncheck_node', { 'node' : obj, 'selected' : this._data.checkbox.selected, 'event' : e });\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\t/**\r\n\t\t * checks all nodes in the tree (only if tie_selection in checkbox settings is false, otherwise select_all will be called internally)\r\n\t\t * @name check_all()\r\n\t\t * @trigger check_all.jstree, changed.jstree\r\n\t\t * @plugin checkbox\r\n\t\t */\r\n\t\tthis.check_all = function () {\r\n\t\t\tif(this.settings.checkbox.tie_selection) { return this.select_all(); }\r\n\t\t\tvar tmp = this._data.checkbox.selected.concat([]), i, j;\r\n\t\t\tthis._data.checkbox.selected = this._model.data[$.jstree.root].children_d.concat();\r\n\t\t\tfor(i = 0, j = this._data.checkbox.selected.length; i < j; i++) {\r\n\t\t\t\tif(this._model.data[this._data.checkbox.selected[i]]) {\r\n\t\t\t\t\tthis._model.data[this._data.checkbox.selected[i]].state.checked = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.redraw(true);\r\n\t\t\t/**\r\n\t\t\t * triggered when all nodes are checked (only if tie_selection in checkbox settings is false)\r\n\t\t\t * @event\r\n\t\t\t * @name check_all.jstree\r\n\t\t\t * @param {Array} selected the current selection\r\n\t\t\t * @plugin checkbox\r\n\t\t\t */\r\n\t\t\tthis.trigger('check_all', { 'selected' : this._data.checkbox.selected });\r\n\t\t};\r\n\t\t/**\r\n\t\t * uncheck all checked nodes (only if tie_selection in checkbox settings is false, otherwise deselect_all will be called internally)\r\n\t\t * @name uncheck_all()\r\n\t\t * @trigger uncheck_all.jstree\r\n\t\t * @plugin checkbox\r\n\t\t */\r\n\t\tthis.uncheck_all = function () {\r\n\t\t\tif(this.settings.checkbox.tie_selection) { return this.deselect_all(); }\r\n\t\t\tvar tmp = this._data.checkbox.selected.concat([]), i, j;\r\n\t\t\tfor(i = 0, j = this._data.checkbox.selected.length; i < j; i++) {\r\n\t\t\t\tif(this._model.data[this._data.checkbox.selected[i]]) {\r\n\t\t\t\t\tthis._model.data[this._data.checkbox.selected[i]].state.checked = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis._data.checkbox.selected = [];\r\n\t\t\tthis.element.find('.jstree-checked').removeClass('jstree-checked');\r\n\t\t\t/**\r\n\t\t\t * triggered when all nodes are unchecked (only if tie_selection in checkbox settings is false)\r\n\t\t\t * @event\r\n\t\t\t * @name uncheck_all.jstree\r\n\t\t\t * @param {Object} node the previous selection\r\n\t\t\t * @param {Array} selected the current selection\r\n\t\t\t * @plugin checkbox\r\n\t\t\t */\r\n\t\t\tthis.trigger('uncheck_all', { 'selected' : this._data.checkbox.selected, 'node' : tmp });\r\n\t\t};\r\n\t\t/**\r\n\t\t * checks if a node is checked (if tie_selection is on in the settings this function will return the same as is_selected)\r\n\t\t * @name is_checked(obj)\r\n\t\t * @param  {mixed}  obj\r\n\t\t * @return {Boolean}\r\n\t\t * @plugin checkbox\r\n\t\t */\r\n\t\tthis.is_checked = function (obj) {\r\n\t\t\tif(this.settings.checkbox.tie_selection) { return this.is_selected(obj); }\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root) { return false; }\r\n\t\t\treturn obj.state.checked;\r\n\t\t};\r\n\t\t/**\r\n\t\t * get an array of all checked nodes (if tie_selection is on in the settings this function will return the same as get_selected)\r\n\t\t * @name get_checked([full])\r\n\t\t * @param  {mixed}  full if set to `true` the returned array will consist of the full node objects, otherwise - only IDs will be returned\r\n\t\t * @return {Array}\r\n\t\t * @plugin checkbox\r\n\t\t */\r\n\t\tthis.get_checked = function (full) {\r\n\t\t\tif(this.settings.checkbox.tie_selection) { return this.get_selected(full); }\r\n\t\t\treturn full ? $.map(this._data.checkbox.selected, $.proxy(function (i) { return this.get_node(i); }, this)) : this._data.checkbox.selected;\r\n\t\t};\r\n\t\t/**\r\n\t\t * get an array of all top level checked nodes (ignoring children of checked nodes) (if tie_selection is on in the settings this function will return the same as get_top_selected)\r\n\t\t * @name get_top_checked([full])\r\n\t\t * @param  {mixed}  full if set to `true` the returned array will consist of the full node objects, otherwise - only IDs will be returned\r\n\t\t * @return {Array}\r\n\t\t * @plugin checkbox\r\n\t\t */\r\n\t\tthis.get_top_checked = function (full) {\r\n\t\t\tif(this.settings.checkbox.tie_selection) { return this.get_top_selected(full); }\r\n\t\t\tvar tmp = this.get_checked(true),\r\n\t\t\t\tobj = {}, i, j, k, l;\r\n\t\t\tfor(i = 0, j = tmp.length; i < j; i++) {\r\n\t\t\t\tobj[tmp[i].id] = tmp[i];\r\n\t\t\t}\r\n\t\t\tfor(i = 0, j = tmp.length; i < j; i++) {\r\n\t\t\t\tfor(k = 0, l = tmp[i].children_d.length; k < l; k++) {\r\n\t\t\t\t\tif(obj[tmp[i].children_d[k]]) {\r\n\t\t\t\t\t\tdelete obj[tmp[i].children_d[k]];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\ttmp = [];\r\n\t\t\tfor(i in obj) {\r\n\t\t\t\tif(obj.hasOwnProperty(i)) {\r\n\t\t\t\t\ttmp.push(i);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn full ? $.map(tmp, $.proxy(function (i) { return this.get_node(i); }, this)) : tmp;\r\n\t\t};\r\n\t\t/**\r\n\t\t * get an array of all bottom level checked nodes (ignoring selected parents) (if tie_selection is on in the settings this function will return the same as get_bottom_selected)\r\n\t\t * @name get_bottom_checked([full])\r\n\t\t * @param  {mixed}  full if set to `true` the returned array will consist of the full node objects, otherwise - only IDs will be returned\r\n\t\t * @return {Array}\r\n\t\t * @plugin checkbox\r\n\t\t */\r\n\t\tthis.get_bottom_checked = function (full) {\r\n\t\t\tif(this.settings.checkbox.tie_selection) { return this.get_bottom_selected(full); }\r\n\t\t\tvar tmp = this.get_checked(true),\r\n\t\t\t\tobj = [], i, j;\r\n\t\t\tfor(i = 0, j = tmp.length; i < j; i++) {\r\n\t\t\t\tif(!tmp[i].children.length) {\r\n\t\t\t\t\tobj.push(tmp[i].id);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn full ? $.map(obj, $.proxy(function (i) { return this.get_node(i); }, this)) : obj;\r\n\t\t};\r\n\t\tthis.load_node = function (obj, callback) {\r\n\t\t\tvar k, l, i, j, c, tmp;\r\n\t\t\tif(!$.isArray(obj) && !this.settings.checkbox.tie_selection) {\r\n\t\t\t\ttmp = this.get_node(obj);\r\n\t\t\t\tif(tmp && tmp.state.loaded) {\r\n\t\t\t\t\tfor(k = 0, l = tmp.children_d.length; k < l; k++) {\r\n\t\t\t\t\t\tif(this._model.data[tmp.children_d[k]].state.checked) {\r\n\t\t\t\t\t\t\tc = true;\r\n\t\t\t\t\t\t\tthis._data.checkbox.selected = $.vakata.array_remove_item(this._data.checkbox.selected, tmp.children_d[k]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn parent.load_node.apply(this, arguments);\r\n\t\t};\r\n\t\tthis.get_state = function () {\r\n\t\t\tvar state = parent.get_state.apply(this, arguments);\r\n\t\t\tif(this.settings.checkbox.tie_selection) { return state; }\r\n\t\t\tstate.checkbox = this._data.checkbox.selected.slice();\r\n\t\t\treturn state;\r\n\t\t};\r\n\t\tthis.set_state = function (state, callback) {\r\n\t\t\tvar res = parent.set_state.apply(this, arguments);\r\n\t\t\tif(res && state.checkbox) {\r\n\t\t\t\tif(!this.settings.checkbox.tie_selection) {\r\n\t\t\t\t\tthis.uncheck_all();\r\n\t\t\t\t\tvar _this = this;\r\n\t\t\t\t\t$.each(state.checkbox, function (i, v) {\r\n\t\t\t\t\t\t_this.check_node(v);\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tdelete state.checkbox;\r\n\t\t\t\tthis.set_state(state, callback);\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\treturn res;\r\n\t\t};\r\n\t\tthis.refresh = function (skip_loading, forget_state) {\r\n\t\t\tif(!this.settings.checkbox.tie_selection) {\r\n\t\t\t\tthis._data.checkbox.selected = [];\r\n\t\t\t}\r\n\t\t\treturn parent.refresh.apply(this, arguments);\r\n\t\t};\r\n\t};\r\n\r\n\t// include the checkbox plugin by default\r\n\t// $.jstree.defaults.plugins.push(\"checkbox\");\r\n\r\n\treturn $;\r\n});\r\n\ndefine('skylark-widgets-hierarchy/addons/conditionalselect',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-browser\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-geom\",\r\n  \"skylark-domx-query\",\r\n  \"../Hierarchy\"\r\n],function(langx,browser,eventer,noder,geom,$,jstree){\r\n\t\"use strict\";\r\n\r\n\tif($.jstree.plugins.conditionalselect) { return; }\r\n\r\n\t/**\r\n\t * a callback (function) which is invoked in the instance's scope and receives two arguments - the node and the event that triggered the `activate_node` call. Returning false prevents working with the node, returning true allows invoking activate_node. Defaults to returning `true`.\r\n\t * @name $.jstree.defaults.checkbox.visible\r\n\t * @plugin checkbox\r\n\t */\r\n\t$.jstree.defaults.conditionalselect = function () { return true; };\r\n\t$.jstree.plugins.conditionalselect = function (options, parent) {\r\n\t\t// own function\r\n\t\tthis.activate_node = function (obj, e) {\r\n\t\t\tif(this.settings.conditionalselect.call(this, this.get_node(obj), e)) {\r\n\t\t\t\treturn parent.activate_node.call(this, obj, e);\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\treturn $;\r\n});\ndefine('skylark-widgets-hierarchy/addons/menu',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-browser\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-geom\",\r\n  \"skylark-domx-query\"\r\n],function(langx,browser,eventer,noder,geom,$){\r\n\r\n\tvar popup = null;\r\n\tvar right_to_left ;\r\n\r\n\tvar Menu = langx.Evented.inherit({\r\n        klassName: \"Menu\",\r\n\r\n        init : function(elm,options) {\r\n        \tif (!options) {\r\n        \t\toptions = elm;\r\n        \t\telm = null;\r\n        \t}\r\n\t\t\tvar self = this,$el;\r\n\r\n\t\t\tthis._options = langx.mixin({\r\n\t\t\t\t\thide_onmouseleave\t: 0,\r\n\t\t\t\t\ticons\t\t\t\t: true\r\n\r\n\t\t\t},options);\r\n\r\n\t\t\tif (!elm) {\r\n\t\t\t\t$el = this.$el = $(\"<ul class='vakata-context'></ul>\");\r\n\t\t\t} else {\r\n\t\t\t\t$el = this.$el = $(elm);\r\n\t\t\t}\r\n\r\n\t\t\tvar to = false;\r\n\t\t\t$el.on(\"mouseenter\", \"li\", function (e) {\r\n\t\t\t\t\te.stopImmediatePropagation();\r\n\r\n\t\t\t\t\tif(noder.contains(this, e.relatedTarget)) {\r\n\t\t\t\t\t\t// премахнато заради delegate mouseleave по-долу\r\n\t\t\t\t\t\t// $(this).find(\".vakata-context-hover\").removeClass(\"vakata-context-hover\");\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif(to) { clearTimeout(to); }\r\n\t\t\t\t\t$el.find(\".vakata-context-hover\").removeClass(\"vakata-context-hover\").end();\r\n\r\n\t\t\t\t\t$(this)\r\n\t\t\t\t\t\t.siblings().find(\"ul\").hide().end().end()\r\n\t\t\t\t\t\t.parentsUntil(\".vakata-context\", \"li\").addBack().addClass(\"vakata-context-hover\");\r\n\t\t\t\t\tself._show_submenu(this);\r\n\t\t\t\t})\r\n\t\t\t\t// тестово - дали не натоварва?\r\n\t\t\t\t.on(\"mouseleave\", \"li\", function (e) {\r\n\t\t\t\t\tif(noder.contains(this, e.relatedTarget)) { return; }\r\n\t\t\t\t\t$(this).find(\".vakata-context-hover\").addBack().removeClass(\"vakata-context-hover\");\r\n\t\t\t\t})\r\n\t\t\t\t.on(\"mouseleave\", function (e) {\r\n\t\t\t\t\t$(this).find(\".vakata-context-hover\").removeClass(\"vakata-context-hover\");\r\n\t\t\t\t\tif(self._options.hide_onmouseleave) {\r\n\t\t\t\t\t\tto = setTimeout(\r\n\t\t\t\t\t\t\t(function (t) {\r\n\t\t\t\t\t\t\t\treturn function () { self.hide(); };\r\n\t\t\t\t\t\t\t}(this)), self._options.hide_onmouseleave);\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t\t.on(\"click\", \"a\", function (e) {\r\n\t\t\t\t\te.preventDefault();\r\n\t\t\t\t//})\r\n\t\t\t\t//.on(\"mouseup\", \"a\", function (e) {\r\n\t\t\t\t\tif(!$(this).blur().parent().hasClass(\"vakata-context-disabled\") && self._execute($(this).attr(\"rel\")) !== false) {\r\n\t\t\t\t\t\tself.hide();\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t\t.on('keydown', 'a', function (e) {\r\n\t\t\t\t\t\tvar o = null;\r\n\t\t\t\t\t\tswitch(e.which) {\r\n\t\t\t\t\t\t\tcase 13:\r\n\t\t\t\t\t\t\tcase 32:\r\n\t\t\t\t\t\t\t\te.type = \"click\";\r\n\t\t\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\t\t\t$(e.currentTarget).trigger(e);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase 37:\r\n\t\t\t\t\t\t\t\tself.$el.find(\".vakata-context-hover\").last().closest(\"li\").first().find(\"ul\").hide().find(\".vakata-context-hover\").removeClass(\"vakata-context-hover\").end().end().children('a').focus();\r\n\t\t\t\t\t\t\t\te.stopImmediatePropagation();\r\n\t\t\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase 38:\r\n\t\t\t\t\t\t\t\to = self.$el.find(\"ul:visible\").addBack().last().children(\".vakata-context-hover\").removeClass(\"vakata-context-hover\").prevAll(\"li:not(.vakata-context-separator)\").first();\r\n\t\t\t\t\t\t\t\tif(!o.length) { o = self.$el.find(\"ul:visible\").addBack().last().children(\"li:not(.vakata-context-separator)\").last(); }\r\n\t\t\t\t\t\t\t\to.addClass(\"vakata-context-hover\").children('a').focus();\r\n\t\t\t\t\t\t\t\te.stopImmediatePropagation();\r\n\t\t\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase 39:\r\n\t\t\t\t\t\t\t\tself.$el.find(\".vakata-context-hover\").last().children(\"ul\").show().children(\"li:not(.vakata-context-separator)\").removeClass(\"vakata-context-hover\").first().addClass(\"vakata-context-hover\").children('a').focus();\r\n\t\t\t\t\t\t\t\te.stopImmediatePropagation();\r\n\t\t\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase 40:\r\n\t\t\t\t\t\t\t\to = self.$el.find(\"ul:visible\").addBack().last().children(\".vakata-context-hover\").removeClass(\"vakata-context-hover\").nextAll(\"li:not(.vakata-context-separator)\").first();\r\n\t\t\t\t\t\t\t\tif(!o.length) { o = self.$el.find(\"ul:visible\").addBack().last().children(\"li:not(.vakata-context-separator)\").first(); }\r\n\t\t\t\t\t\t\t\to.addClass(\"vakata-context-hover\").children('a').focus();\r\n\t\t\t\t\t\t\t\te.stopImmediatePropagation();\r\n\t\t\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase 27:\r\n\t\t\t\t\t\t\t\tself.hide();\r\n\t\t\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\t//console.log(e.which);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t\t.on('keydown', function (e) {\r\n\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\tvar a = self.$el.find('.vakata-contextmenu-shortcut-' + e.which).parent();\r\n\t\t\t\t\tif(a.parent().not('.vakata-context-disabled')) {\r\n\t\t\t\t\t\ta.click();\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\tthis.render();\r\n        },\r\n\r\n        render : function() {\r\n        \tvar items = this._options.items;\r\n\t\t\tif(this._parse(items)) {\r\n\t\t\t\tthis.$el.html(this.html);\r\n\t\t\t}\r\n\t\t\tthis.$el.width('');\r\n        },\r\n\r\n\t\t_trigger : function (event_name) {\r\n\t\t\t$(document).trigger(\"context_\" + event_name + \".sbswt\", {\r\n\t\t\t\t\"reference\"\t: this.reference,\r\n\t\t\t\t\"element\"\t: this.$el,\r\n\t\t\t\t\"position\"\t: {\r\n\t\t\t\t\t\"x\" : this.position_x,\r\n\t\t\t\t\t\"y\" : this.position_y\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t},        \r\n\r\n\t\t_execute : function (i) {\r\n\t\t\ti = this.items[i];\r\n\t\t\treturn i && (!i._disabled || (langx.isFunction(i._disabled) && !i._disabled({ \"item\" : i, \"reference\" : this.reference, \"element\" : this.$el }))) && i.action ? i.action.call(null, {\r\n\t\t\t\t\t\t\"item\"\t\t: i,\r\n\t\t\t\t\t\t\"reference\"\t: this.reference,\r\n\t\t\t\t\t\t\"element\"\t: this.$el,\r\n\t\t\t\t\t\t\"position\"\t: {\r\n\t\t\t\t\t\t\t\"x\" : this.position_x,\r\n\t\t\t\t\t\t\t\"y\" : this.position_y\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}) : false;\r\n\t\t},\r\n\t\t_parse : function (o, is_callback) {\r\n\t\t\tvar self = this,\r\n\t\t\t\treference = self._options.reference;\r\n\r\n\t\t\tif(!o) { return false; }\r\n\t\t\tif(!is_callback) {\r\n\t\t\t\tself.html\t\t= \"\";\r\n\t\t\t\tself.items\t= [];\r\n\t\t\t}\r\n\t\t\tvar str = \"\",\r\n\t\t\t\tsep = false,\r\n\t\t\t\ttmp;\r\n\r\n\t\t\tif(is_callback) { str += \"<\"+\"ul>\"; }\r\n\t\t\tlangx.each(o, function (i, val) {\r\n\t\t\t\tif(!val) { return true; }\r\n\t\t\t\tself.items.push(val);\r\n\t\t\t\tif(!sep && val.separator_before) {\r\n\t\t\t\t\tstr += \"<\"+\"li class='vakata-context-separator'><\"+\"a href='#' \" + (self._options.icons ? '' : 'style=\"margin-left:0px;\"') + \">&#160;<\"+\"/a><\"+\"/li>\";\r\n\t\t\t\t}\r\n\t\t\t\tsep = false;\r\n\t\t\t\tstr += \"<\"+\"li class='\" + (val._class || \"\") + (val._disabled === true || (langx.isFunction(val._disabled) && val._disabled({ \"item\" : val, \"reference\" : reference, \"element\" : self.$el })) ? \" vakata-contextmenu-disabled \" : \"\") + \"' \"+(val.shortcut?\" data-shortcut='\"+val.shortcut+\"' \":'')+\">\";\r\n\t\t\t\tstr += \"<\"+\"a href='#' rel='\" + (self.items.length - 1) + \"' \" + (val.title ? \"title='\" + val.title + \"'\" : \"\") + \">\";\r\n\t\t\t\tif(self._options.icons) {\r\n\t\t\t\t\tstr += \"<\"+\"i \";\r\n\t\t\t\t\tif(val.icon) {\r\n\t\t\t\t\t\tif(val.icon.indexOf(\"/\") !== -1 || val.icon.indexOf(\".\") !== -1) { str += \" style='background:url(\\\"\" + val.icon + \"\\\") center center no-repeat' \"; }\r\n\t\t\t\t\t\telse { str += \" class='\" + val.icon + \"' \"; }\r\n\t\t\t\t\t}\r\n\t\t\t\t\tstr += \"><\"+\"/i><\"+\"span class='vakata-contextmenu-sep'>&#160;<\"+\"/span>\";\r\n\t\t\t\t}\r\n\t\t\t\tstr += (langx.isFunction(val.label) ? val.label({ \"item\" : i, \"reference\" : reference, \"element\" : self.$el }) : val.label) + (val.shortcut?' <span class=\"vakata-contextmenu-shortcut vakata-contextmenu-shortcut-'+val.shortcut+'\">'+ (val.shortcut_label || '') +'</span>':'') + \"<\"+\"/a>\";\r\n\t\t\t\tif(val.submenu) {\r\n\t\t\t\t\ttmp = self._parse(val.submenu, true);\r\n\t\t\t\t\tif(tmp) { str += tmp; }\r\n\t\t\t\t}\r\n\t\t\t\tstr += \"<\"+\"/li>\";\r\n\t\t\t\tif(val.separator_after) {\r\n\t\t\t\t\tstr += \"<\"+\"li class='vakata-context-separator'><\"+\"a href='#' \" + (self._options.icons ? '' : 'style=\"margin-left:0px;\"') + \">&#160;<\"+\"/a><\"+\"/li>\";\r\n\t\t\t\t\tsep = true;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tstr  = str.replace(/<li class\\='vakata-context-separator'\\><\\/li\\>$/,\"\");\r\n\t\t\tif(is_callback) { str += \"</ul>\"; }\r\n\t\t\t/**\r\n\t\t\t * triggered on the document when the contextmenu is parsed (HTML is built)\r\n\t\t\t * @event\r\n\t\t\t * @plugin contextmenu\r\n\t\t\t * @name context_parse.vakata\r\n\t\t\t * @param {jQuery} reference the element that was right clicked\r\n\t\t\t * @param {jQuery} element the DOM element of the menu itself\r\n\t\t\t * @param {Object} position the x & y coordinates of the menu\r\n\t\t\t */\r\n\t\t\tif(!is_callback) { self.html = str; self._trigger(\"parse\"); }\r\n\t\t\treturn str.length > 10 ? str : false;\r\n\t\t},\r\n\t\t_show_submenu : function (o) {\r\n\t\t\to = $(o);\r\n\t\t\tif(!o.length || !o.children(\"ul\").length) { return; }\r\n\t\t\tvar e = o.children(\"ul\"),\r\n\t\t\t\txl = o.offset().left,\r\n\t\t\t\tx = xl + o.outerWidth(),\r\n\t\t\t\ty = o.offset().top,\r\n\t\t\t\tw = e.width(),\r\n\t\t\t\th = e.height(),\r\n\t\t\t\tdw = $(window).width() + $(window).scrollLeft(),\r\n\t\t\t\tdh = $(window).height() + $(window).scrollTop();\r\n\t\t\t// може да се спести е една проверка - дали няма някой от класовете вече нагоре\r\n\t\t\tif(right_to_left) {\r\n\t\t\t\to[x - (w + 10 + o.outerWidth()) < 0 ? \"addClass\" : \"removeClass\"](\"vakata-context-left\");\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\to[x + w > dw  && xl > dw - x ? \"addClass\" : \"removeClass\"](\"vakata-context-right\");\r\n\t\t\t}\r\n\t\t\tif(y + h + 10 > dh) {\r\n\t\t\t\te.css(\"bottom\",\"-1px\");\r\n\t\t\t}\r\n\r\n\t\t\t//if does not fit - stick it to the side\r\n\t\t\tif (o.hasClass('vakata-context-right')) {\r\n\t\t\t\tif (xl < w) {\r\n\t\t\t\t\te.css(\"margin-right\", xl - w);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tif (dw - x < w) {\r\n\t\t\t\t\te.css(\"margin-left\", dw - x - w);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\te.show();\r\n\t\t},\r\n\t\tshow : function (reference, position, data) {\r\n\t\t\tvar o, e, x, y, w, h, dw, dh, cond = true;\r\n\t\t\tswitch(cond) {\r\n\t\t\t\tcase (!position && !reference):\r\n\t\t\t\t\treturn false;\r\n\t\t\t\tcase (!!position && !!reference):\r\n\t\t\t\t\tthis.reference\t= reference;\r\n\t\t\t\t\tthis.position_x\t= position.x;\r\n\t\t\t\t\tthis.position_y\t= position.y;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase (!position && !!reference):\r\n\t\t\t\t\tthis.reference\t= reference;\r\n\t\t\t\t\to = reference.offset();\r\n\t\t\t\t\tthis.position_x\t= o.left + reference.outerHeight();\r\n\t\t\t\t\tthis.position_y\t= o.top;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase (!!position && !reference):\r\n\t\t\t\t\tthis.position_x\t= position.x;\r\n\t\t\t\t\tthis.position_y\t= position.y;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tif(!!reference && !data && $(reference).data('vakata_contextmenu')) {\r\n\t\t\t\tdata = $(reference).data('vakata_contextmenu');\r\n\t\t\t}\r\n\r\n\t\t\tif(this.items.length) {\r\n\t\t\t\tthis.$el.appendTo(document.body);\r\n\t\t\t\te = this.$el;\r\n\t\t\t\tx = this.position_x;\r\n\t\t\t\ty = this.position_y;\r\n\t\t\t\tw = e.width();\r\n\t\t\t\th = e.height();\r\n\t\t\t\tdw = $(window).width() + $(window).scrollLeft();\r\n\t\t\t\tdh = $(window).height() + $(window).scrollTop();\r\n\t\t\t\tif(right_to_left) {\r\n\t\t\t\t\tx -= (e.outerWidth() - $(reference).outerWidth());\r\n\t\t\t\t\tif(x < $(window).scrollLeft() + 20) {\r\n\t\t\t\t\t\tx = $(window).scrollLeft() + 20;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif(x + w + 20 > dw) {\r\n\t\t\t\t\tx = dw - (w + 20);\r\n\t\t\t\t}\r\n\t\t\t\tif(y + h + 20 > dh) {\r\n\t\t\t\t\ty = dh - (h + 20);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.$el\r\n\t\t\t\t\t.css({ \"left\" : x, \"top\" : y })\r\n\t\t\t\t\t.show()\r\n\t\t\t\t\t.find('a').first().focus().parent().addClass(\"vakata-context-hover\");\r\n\t\t\t\tthis.is_visible = true;\r\n\r\n\t\t\t\tpopup = this;\r\n\r\n\t\t\t\t/**\r\n\t\t\t\t * triggered on the document when the contextmenu is shown\r\n\t\t\t\t * @event\r\n\t\t\t\t * @plugin contextmenu\r\n\t\t\t\t * @name context_show.vakata\r\n\t\t\t\t * @param {jQuery} reference the element that was right clicked\r\n\t\t\t\t * @param {jQuery} element the DOM element of the menu itself\r\n\t\t\t\t * @param {Object} position the x & y coordinates of the menu\r\n\t\t\t\t */\r\n\t\t\t\tthis._trigger(\"show\");\r\n\t\t\t}\r\n\t\t},\r\n\t\thide : function () {\r\n\t\t\tif(this.is_visible) {\r\n\t\t\t\tthis.$el.hide().find(\"ul\").hide().end().find(':focus').blur().end().detach();\r\n\t\t\t\tthis.is_visible = false;\r\n\t\t\t\tpopup = null;\r\n\t\t\t\t/**\r\n\t\t\t\t * triggered on the document when the contextmenu is hidden\r\n\t\t\t\t * @event\r\n\t\t\t\t * @plugin contextmenu\r\n\t\t\t\t * @name context_hide.vakata\r\n\t\t\t\t * @param {jQuery} reference the element that was right clicked\r\n\t\t\t\t * @param {jQuery} element the DOM element of the menu itself\r\n\t\t\t\t * @param {Object} position the x & y coordinates of the menu\r\n\t\t\t\t */\r\n\t\t\t\tthis._trigger(\"hide\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n    });\t\r\n\r\n\t$(function () {\r\n\t\tright_to_left = $(document.body).css(\"direction\") === \"rtl\";\r\n\r\n\t\t$(document)\r\n\t\t\t.on(\"mousedown.sbswt.popup\", function (e) {\r\n\t\t\t\tif(popup && popup.$el[0] !== e.target  && !noder.contains(popup.$el[0], e.target)) {\r\n\t\t\t\t\tpopup.hide();\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.on(\"context_show.sbswt.popup\", function (e, data) {\r\n\t\t\t\tpopup.$el.find(\"li:has(ul)\").children(\"a\").addClass(\"vakata-context-parent\");\r\n\t\t\t\tif(right_to_left) {\r\n\t\t\t\t\tpopup.$el.addClass(\"vakata-context-rtl\").css(\"direction\", \"rtl\");\r\n\t\t\t\t}\r\n\t\t\t\t// also apply a RTL class?\r\n\t\t\t\tpopup.$el.find(\"ul\").hide().end();\r\n\t\t\t});\r\n\t});\r\n\r\n\tMenu.popup = function (reference, position, data) {\r\n\t\tvar m = new Menu({\r\n\t\t\treference : reference,\r\n\t\t\titems : data\r\n\t\t});\r\n\t\tm.show(reference,position);\r\n\t};\r\n\r\n\tMenu.hide = function() {\r\n\t\tif (popup) {\r\n\t\t\tpopup.hide();\r\n\t\t}\r\n\t}\r\n\r\n\treturn Menu;\r\n\r\n});\ndefine('skylark-widgets-hierarchy/addons/contextmenu',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-browser\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-geom\",\r\n  \"skylark-domx-query\",\r\n  \"./menu\",\r\n  \"../Hierarchy\"\r\n],function(langx,browser,eventer,noder,geom,$, menu,jstree){\r\n\r\n\t\"use strict\";\r\n\r\n\tif($.jstree.plugins.contextmenu) { return; }\r\n\r\n\t/**\r\n\t * stores all defaults for the contextmenu plugin\r\n\t * @name $.jstree.defaults.contextmenu\r\n\t * @plugin contextmenu\r\n\t */\r\n\t$.jstree.defaults.contextmenu = {\r\n\t\t/**\r\n\t\t * a boolean indicating if the node should be selected when the context menu is invoked on it. Defaults to `true`.\r\n\t\t * @name $.jstree.defaults.contextmenu.select_node\r\n\t\t * @plugin contextmenu\r\n\t\t */\r\n\t\tselect_node : true,\r\n\t\t/**\r\n\t\t * a boolean indicating if the menu should be shown aligned with the node. Defaults to `true`, otherwise the mouse coordinates are used.\r\n\t\t * @name $.jstree.defaults.contextmenu.show_at_node\r\n\t\t * @plugin contextmenu\r\n\t\t */\r\n\t\tshow_at_node : true,\r\n\t\t/**\r\n\t\t * an object of actions, or a function that accepts a node and a callback function and calls the callback function with an object of actions available for that node (you can also return the items too).\r\n\t\t *\r\n\t\t * Each action consists of a key (a unique name) and a value which is an object with the following properties (only label and action are required). Once a menu item is activated the `action` function will be invoked with an object containing the following keys: item - the contextmenu item definition as seen below, reference - the DOM node that was used (the tree node), element - the contextmenu DOM element, position - an object with x/y properties indicating the position of the menu.\r\n\t\t *\r\n\t\t * * `separator_before` - a boolean indicating if there should be a separator before this item\r\n\t\t * * `separator_after` - a boolean indicating if there should be a separator after this item\r\n\t\t * * `_disabled` - a boolean indicating if this action should be disabled\r\n\t\t * * `label` - a string - the name of the action (could be a function returning a string)\r\n\t\t * * `title` - a string - an optional tooltip for the item\r\n\t\t * * `action` - a function to be executed if this item is chosen, the function will receive \r\n\t\t * * `icon` - a string, can be a path to an icon or a className, if using an image that is in the current directory use a `./` prefix, otherwise it will be detected as a class\r\n\t\t * * `shortcut` - keyCode which will trigger the action if the menu is open (for example `113` for rename, which equals F2)\r\n\t\t * * `shortcut_label` - shortcut label (like for example `F2` for rename)\r\n\t\t * * `submenu` - an object with the same structure as $.jstree.defaults.contextmenu.items which can be used to create a submenu - each key will be rendered as a separate option in a submenu that will appear once the current item is hovered\r\n\t\t *\r\n\t\t * @name $.jstree.defaults.contextmenu.items\r\n\t\t * @plugin contextmenu\r\n\t\t */\r\n\t\titems : function (o, cb) { // Could be an object directly\r\n\t\t\treturn {\r\n\t\t\t\t\"create\" : {\r\n\t\t\t\t\t\"separator_before\"\t: false,\r\n\t\t\t\t\t\"separator_after\"\t: true,\r\n\t\t\t\t\t\"_disabled\"\t\t\t: false, //(this.check(\"create_node\", data.reference, {}, \"last\")),\r\n\t\t\t\t\t\"label\"\t\t\t\t: \"Create\",\r\n\t\t\t\t\t\"action\"\t\t\t: function (data) {\r\n\t\t\t\t\t\tvar inst = $.jstree.reference(data.reference),\r\n\t\t\t\t\t\t\tobj = inst.get_node(data.reference);\r\n\t\t\t\t\t\tinst.create_node(obj, {}, \"last\", function (new_node) {\r\n\t\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\t\tinst.edit(new_node);\r\n\t\t\t\t\t\t\t} catch (ex) {\r\n\t\t\t\t\t\t\t\tsetTimeout(function () { inst.edit(new_node); },0);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\t\"rename\" : {\r\n\t\t\t\t\t\"separator_before\"\t: false,\r\n\t\t\t\t\t\"separator_after\"\t: false,\r\n\t\t\t\t\t\"_disabled\"\t\t\t: false, //(this.check(\"rename_node\", data.reference, this.get_parent(data.reference), \"\")),\r\n\t\t\t\t\t\"label\"\t\t\t\t: \"Rename\",\r\n\t\t\t\t\t/*!\r\n\t\t\t\t\t\"shortcut\"\t\t\t: 113,\r\n\t\t\t\t\t\"shortcut_label\"\t: 'F2',\r\n\t\t\t\t\t\"icon\"\t\t\t\t: \"glyphicon glyphicon-leaf\",\r\n\t\t\t\t\t*/\r\n\t\t\t\t\t\"action\"\t\t\t: function (data) {\r\n\t\t\t\t\t\tvar inst = $.jstree.reference(data.reference),\r\n\t\t\t\t\t\t\tobj = inst.get_node(data.reference);\r\n\t\t\t\t\t\tinst.edit(obj);\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\t\"remove\" : {\r\n\t\t\t\t\t\"separator_before\"\t: false,\r\n\t\t\t\t\t\"icon\"\t\t\t\t: false,\r\n\t\t\t\t\t\"separator_after\"\t: false,\r\n\t\t\t\t\t\"_disabled\"\t\t\t: false, //(this.check(\"delete_node\", data.reference, this.get_parent(data.reference), \"\")),\r\n\t\t\t\t\t\"label\"\t\t\t\t: \"Delete\",\r\n\t\t\t\t\t\"action\"\t\t\t: function (data) {\r\n\t\t\t\t\t\tvar inst = $.jstree.reference(data.reference),\r\n\t\t\t\t\t\t\tobj = inst.get_node(data.reference);\r\n\t\t\t\t\t\tif(inst.is_selected(obj)) {\r\n\t\t\t\t\t\t\tinst.delete_node(inst.get_selected());\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tinst.delete_node(obj);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\t\"ccp\" : {\r\n\t\t\t\t\t\"separator_before\"\t: true,\r\n\t\t\t\t\t\"icon\"\t\t\t\t: false,\r\n\t\t\t\t\t\"separator_after\"\t: false,\r\n\t\t\t\t\t\"label\"\t\t\t\t: \"Edit\",\r\n\t\t\t\t\t\"action\"\t\t\t: false,\r\n\t\t\t\t\t\"submenu\" : {\r\n\t\t\t\t\t\t\"cut\" : {\r\n\t\t\t\t\t\t\t\"separator_before\"\t: false,\r\n\t\t\t\t\t\t\t\"separator_after\"\t: false,\r\n\t\t\t\t\t\t\t\"label\"\t\t\t\t: \"Cut\",\r\n\t\t\t\t\t\t\t\"action\"\t\t\t: function (data) {\r\n\t\t\t\t\t\t\t\tvar inst = $.jstree.reference(data.reference),\r\n\t\t\t\t\t\t\t\t\tobj = inst.get_node(data.reference);\r\n\t\t\t\t\t\t\t\tif(inst.is_selected(obj)) {\r\n\t\t\t\t\t\t\t\t\tinst.cut(inst.get_top_selected());\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tinst.cut(obj);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"copy\" : {\r\n\t\t\t\t\t\t\t\"separator_before\"\t: false,\r\n\t\t\t\t\t\t\t\"icon\"\t\t\t\t: false,\r\n\t\t\t\t\t\t\t\"separator_after\"\t: false,\r\n\t\t\t\t\t\t\t\"label\"\t\t\t\t: \"Copy\",\r\n\t\t\t\t\t\t\t\"action\"\t\t\t: function (data) {\r\n\t\t\t\t\t\t\t\tvar inst = $.jstree.reference(data.reference),\r\n\t\t\t\t\t\t\t\t\tobj = inst.get_node(data.reference);\r\n\t\t\t\t\t\t\t\tif(inst.is_selected(obj)) {\r\n\t\t\t\t\t\t\t\t\tinst.copy(inst.get_top_selected());\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tinst.copy(obj);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"paste\" : {\r\n\t\t\t\t\t\t\t\"separator_before\"\t: false,\r\n\t\t\t\t\t\t\t\"icon\"\t\t\t\t: false,\r\n\t\t\t\t\t\t\t\"_disabled\"\t\t\t: function (data) {\r\n\t\t\t\t\t\t\t\treturn !$.jstree.reference(data.reference).can_paste();\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\"separator_after\"\t: false,\r\n\t\t\t\t\t\t\t\"label\"\t\t\t\t: \"Paste\",\r\n\t\t\t\t\t\t\t\"action\"\t\t\t: function (data) {\r\n\t\t\t\t\t\t\t\tvar inst = $.jstree.reference(data.reference),\r\n\t\t\t\t\t\t\t\t\tobj = inst.get_node(data.reference);\r\n\t\t\t\t\t\t\t\tinst.paste(obj);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t}\r\n\t};\r\n\r\n\t$.jstree.plugins.contextmenu = function (options, parent) {\r\n\t\tthis.bind = function () {\r\n\t\t\tparent.bind.call(this);\r\n\r\n\t\t\tvar last_ts = 0, cto = null, ex, ey;\r\n\t\t\tthis.element\r\n\t\t\t\t.on(\"init.jstree loading.jstree ready.jstree\", $.proxy(function () {\r\n\t\t\t\t\t\tthis.get_container_ul().addClass('jstree-contextmenu');\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on(\"contextmenu.jstree\", \".jstree-anchor\", $.proxy(function (e, data) {\r\n\t\t\t\t\t\tif (e.target.tagName.toLowerCase() === 'input') {\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\tlast_ts = e.ctrlKey ? +new Date() : 0;\r\n\t\t\t\t\t\tif(data || cto) {\r\n\t\t\t\t\t\t\tlast_ts = (+new Date()) + 10000;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(cto) {\r\n\t\t\t\t\t\t\tclearTimeout(cto);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(!this.is_loading(e.currentTarget)) {\r\n\t\t\t\t\t\t\tthis.show_contextmenu(e.currentTarget, e.pageX, e.pageY, e);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on(\"click.jstree\", \".jstree-anchor\", $.proxy(function (e) {\r\n\t\t\t\t\t\tif(this._data.contextmenu.visible && (!last_ts || (+new Date()) - last_ts > 250)) { // work around safari & macOS ctrl+click\r\n\t\t\t\t\t\t\tmenu.hide();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tlast_ts = 0;\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on(\"touchstart.jstree\", \".jstree-anchor\", function (e) {\r\n\t\t\t\t\t\tif(!e.originalEvent || !e.originalEvent.changedTouches || !e.originalEvent.changedTouches[0]) {\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tex = e.originalEvent.changedTouches[0].clientX;\r\n\t\t\t\t\t\tey = e.originalEvent.changedTouches[0].clientY;\r\n\t\t\t\t\t\tcto = setTimeout(function () {\r\n\t\t\t\t\t\t\t$(e.currentTarget).trigger('contextmenu', true);\r\n\t\t\t\t\t\t}, 750);\r\n\t\t\t\t\t})\r\n\t\t\t\t.on('touchmove.vakata.jstree', function (e) {\r\n\t\t\t\t\t\tif(cto && e.originalEvent && e.originalEvent.changedTouches && e.originalEvent.changedTouches[0] && (Math.abs(ex - e.originalEvent.changedTouches[0].clientX) > 10 || Math.abs(ey - e.originalEvent.changedTouches[0].clientY) > 10)) {\r\n\t\t\t\t\t\t\tclearTimeout(cto);\r\n\t\t\t\t\t\t\tmenu.hide();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t\t.on('touchend.vakata.jstree', function (e) {\r\n\t\t\t\t\t\tif(cto) {\r\n\t\t\t\t\t\t\tclearTimeout(cto);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\r\n\t\t\t/*!\r\n\t\t\tif(!('oncontextmenu' in document.body) && ('ontouchstart' in document.body)) {\r\n\t\t\t\tvar el = null, tm = null;\r\n\t\t\t\tthis.element\r\n\t\t\t\t\t.on(\"touchstart\", \".jstree-anchor\", function (e) {\r\n\t\t\t\t\t\tel = e.currentTarget;\r\n\t\t\t\t\t\ttm = +new Date();\r\n\t\t\t\t\t\t$(document).one(\"touchend\", function (e) {\r\n\t\t\t\t\t\t\te.target = document.elementFromPoint(e.originalEvent.targetTouches[0].pageX - window.pageXOffset, e.originalEvent.targetTouches[0].pageY - window.pageYOffset);\r\n\t\t\t\t\t\t\te.currentTarget = e.target;\r\n\t\t\t\t\t\t\ttm = ((+(new Date())) - tm);\r\n\t\t\t\t\t\t\tif(e.target === el && tm > 600 && tm < 1000) {\r\n\t\t\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\t\t\t$(el).trigger('contextmenu', e);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tel = null;\r\n\t\t\t\t\t\t\ttm = null;\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t});\r\n\t\t\t}\r\n\t\t\t*/\r\n\t\t\t$(document).on(\"context_hide.sbswt.popup\", $.proxy(function (e, data) {\r\n\t\t\t\tthis._data.contextmenu.visible = false;\r\n\t\t\t\t$(data.reference).removeClass('jstree-context');\r\n\t\t\t}, this));\r\n\t\t};\r\n\t\tthis.teardown = function () {\r\n\t\t\tif(this._data.contextmenu.visible) {\r\n\t\t\t\tmenu.hide();\r\n\t\t\t}\r\n\t\t\tparent.teardown.call(this);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * prepare and show the context menu for a node\r\n\t\t * @name show_contextmenu(obj [, x, y])\r\n\t\t * @param {mixed} obj the node\r\n\t\t * @param {Number} x the x-coordinate relative to the document to show the menu at\r\n\t\t * @param {Number} y the y-coordinate relative to the document to show the menu at\r\n\t\t * @param {Object} e the event if available that triggered the contextmenu\r\n\t\t * @plugin contextmenu\r\n\t\t * @trigger show_contextmenu.jstree\r\n\t\t */\r\n\t\tthis.show_contextmenu = function (obj, x, y, e) {\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root) { return false; }\r\n\t\t\tvar s = this.settings.contextmenu,\r\n\t\t\t\td = this.get_node(obj, true),\r\n\t\t\t\ta = d.children(\".jstree-anchor\"),\r\n\t\t\t\to = false,\r\n\t\t\t\ti = false;\r\n\t\t\tif(s.show_at_node || x === undefined || y === undefined) {\r\n\t\t\t\to = a.offset();\r\n\t\t\t\tx = o.left;\r\n\t\t\t\ty = o.top + this._data.core.li_height;\r\n\t\t\t}\r\n\t\t\tif(this.settings.contextmenu.select_node && !this.is_selected(obj)) {\r\n\t\t\t\tthis.activate_node(obj, e);\r\n\t\t\t}\r\n\r\n\t\t\ti = s.items;\r\n\t\t\tif($.isFunction(i)) {\r\n\t\t\t\ti = i.call(this, obj, $.proxy(function (i) {\r\n\t\t\t\t\tthis._show_contextmenu(obj, x, y, i);\r\n\t\t\t\t}, this));\r\n\t\t\t}\r\n\t\t\tif($.isPlainObject(i)) {\r\n\t\t\t\tthis._show_contextmenu(obj, x, y, i);\r\n\t\t\t}\r\n\t\t};\r\n\t\t/**\r\n\t\t * show the prepared context menu for a node\r\n\t\t * @name _show_contextmenu(obj, x, y, i)\r\n\t\t * @param {mixed} obj the node\r\n\t\t * @param {Number} x the x-coordinate relative to the document to show the menu at\r\n\t\t * @param {Number} y the y-coordinate relative to the document to show the menu at\r\n\t\t * @param {Number} i the object of items to show\r\n\t\t * @plugin contextmenu\r\n\t\t * @trigger show_contextmenu.jstree\r\n\t\t * @private\r\n\t\t */\r\n\t\tthis._show_contextmenu = function (obj, x, y, i) {\r\n\t\t\tvar d = this.get_node(obj, true),\r\n\t\t\t\ta = d.children(\".jstree-anchor\");\r\n\t\t\t$(document).one(\"context_show.sbswt.popup\", $.proxy(function (e, data) {\r\n\t\t\t\tvar cls = 'jstree-contextmenu jstree-' + this.get_theme() + '-contextmenu';\r\n\t\t\t\t$(data.element).addClass(cls);\r\n\t\t\t\ta.addClass('jstree-context');\r\n\t\t\t}, this));\r\n\t\t\tthis._data.contextmenu.visible = true;\r\n\t\t\tmenu.popup(a, { 'x' : x, 'y' : y }, i);\r\n\t\t\t/**\r\n\t\t\t * triggered when the contextmenu is shown for a node\r\n\t\t\t * @event\r\n\t\t\t * @name show_contextmenu.jstree\r\n\t\t\t * @param {Object} node the node\r\n\t\t\t * @param {Number} x the x-coordinate of the menu relative to the document\r\n\t\t\t * @param {Number} y the y-coordinate of the menu relative to the document\r\n\t\t\t * @plugin contextmenu\r\n\t\t\t */\r\n\t\t\tthis.trigger('show_contextmenu', { \"node\" : obj, \"x\" : x, \"y\" : y });\r\n\t\t};\r\n\t};\r\n\r\n\t// $.jstree.defaults.plugins.push(\"contextmenu\");\r\n\r\n\treturn $;\r\n\t\r\n});\r\n\ndefine('skylark-widgets-hierarchy/addons/dnd',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-browser\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-geom\",\r\n  \"skylark-domx-query\",\r\n  \"../Hierarchy\"\r\n],function(langx,browser,eventer,noder,geom,$,jstree){\r\n\r\n\t\"use strict\";\r\n\r\n\tif($.jstree.plugins.dnd) { return; }\r\n\r\n\t/**\r\n\t * stores all defaults for the drag'n'drop plugin\r\n\t * @name $.jstree.defaults.dnd\r\n\t * @plugin dnd\r\n\t */\r\n\t$.jstree.defaults.dnd = {\r\n\t\t/**\r\n\t\t * a boolean indicating if a copy should be possible while dragging (by pressint the meta key or Ctrl). Defaults to `true`.\r\n\t\t * @name $.jstree.defaults.dnd.copy\r\n\t\t * @plugin dnd\r\n\t\t */\r\n\t\tcopy : true,\r\n\t\t/**\r\n\t\t * a number indicating how long a node should remain hovered while dragging to be opened. Defaults to `500`.\r\n\t\t * @name $.jstree.defaults.dnd.open_timeout\r\n\t\t * @plugin dnd\r\n\t\t */\r\n\t\topen_timeout : 500,\r\n\t\t/**\r\n\t\t * a function invoked each time a node is about to be dragged, invoked in the tree's scope and receives the nodes about to be dragged as an argument (array) and the event that started the drag - return `false` to prevent dragging\r\n\t\t * @name $.jstree.defaults.dnd.is_draggable\r\n\t\t * @plugin dnd\r\n\t\t */\r\n\t\tis_draggable : true,\r\n\t\t/**\r\n\t\t * a boolean indicating if checks should constantly be made while the user is dragging the node (as opposed to checking only on drop), default is `true`\r\n\t\t * @name $.jstree.defaults.dnd.check_while_dragging\r\n\t\t * @plugin dnd\r\n\t\t */\r\n\t\tcheck_while_dragging : true,\r\n\t\t/**\r\n\t\t * a boolean indicating if nodes from this tree should only be copied with dnd (as opposed to moved), default is `false`\r\n\t\t * @name $.jstree.defaults.dnd.always_copy\r\n\t\t * @plugin dnd\r\n\t\t */\r\n\t\talways_copy : false,\r\n\t\t/**\r\n\t\t * when dropping a node \"inside\", this setting indicates the position the node should go to - it can be an integer or a string: \"first\" (same as 0) or \"last\", default is `0`\r\n\t\t * @name $.jstree.defaults.dnd.inside_pos\r\n\t\t * @plugin dnd\r\n\t\t */\r\n\t\tinside_pos : 0,\r\n\t\t/**\r\n\t\t * when starting the drag on a node that is selected this setting controls if all selected nodes are dragged or only the single node, default is `true`, which means all selected nodes are dragged when the drag is started on a selected node\r\n\t\t * @name $.jstree.defaults.dnd.drag_selection\r\n\t\t * @plugin dnd\r\n\t\t */\r\n\t\tdrag_selection : true,\r\n\t\t/**\r\n\t\t * controls whether dnd works on touch devices. If left as boolean true dnd will work the same as in desktop browsers, which in some cases may impair scrolling. If set to boolean false dnd will not work on touch devices. There is a special third option - string \"selected\" which means only selected nodes can be dragged on touch devices.\r\n\t\t * @name $.jstree.defaults.dnd.touch\r\n\t\t * @plugin dnd\r\n\t\t */\r\n\t\ttouch : true,\r\n\t\t/**\r\n\t\t * controls whether items can be dropped anywhere on the node, not just on the anchor, by default only the node anchor is a valid drop target. Works best with the wholerow plugin. If enabled on mobile depending on the interface it might be hard for the user to cancel the drop, since the whole tree container will be a valid drop target.\r\n\t\t * @name $.jstree.defaults.dnd.large_drop_target\r\n\t\t * @plugin dnd\r\n\t\t */\r\n\t\tlarge_drop_target : false,\r\n\t\t/**\r\n\t\t * controls whether a drag can be initiated from any part of the node and not just the text/icon part, works best with the wholerow plugin. Keep in mind it can cause problems with tree scrolling on mobile depending on the interface - in that case set the touch option to \"selected\".\r\n\t\t * @name $.jstree.defaults.dnd.large_drag_target\r\n\t\t * @plugin dnd\r\n\t\t */\r\n\t\tlarge_drag_target : false,\r\n\t\t/**\r\n\t\t * controls whether use HTML5 dnd api instead of classical. That will allow better integration of dnd events with other HTML5 controls.\r\n\t\t * @reference http://caniuse.com/#feat=dragndrop\r\n\t\t * @name $.jstree.defaults.dnd.use_html5\r\n\t\t * @plugin dnd\r\n\t\t */\r\n\t\tuse_html5: false\r\n\t};\r\n\tvar drg, elm;\r\n\t// TODO: now check works by checking for each node individually, how about max_children, unique, etc?\r\n\t$.jstree.plugins.dnd = function (options, parent) {\r\n\t\tthis.init = function (el, options) {\r\n\t\t\tparent.init.call(this, el, options);\r\n\t\t\tthis.settings.dnd.use_html5 = this.settings.dnd.use_html5 && ('draggable' in document.createElement('span'));\r\n\t\t};\r\n\t\tthis.bind = function () {\r\n\t\t\tparent.bind.call(this);\r\n\r\n\t\t\tthis.element\r\n\t\t\t\t.on(this.settings.dnd.use_html5 ? 'dragstart.jstree' : 'mousedown.jstree touchstart.jstree', this.settings.dnd.large_drag_target ? '.jstree-node' : '.jstree-anchor', $.proxy(function (e) {\r\n\t\t\t\t\t\tif(this.settings.dnd.large_drag_target && $(e.target).closest('.jstree-node')[0] !== e.currentTarget) {\r\n\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(e.type === \"touchstart\" && (!this.settings.dnd.touch || (this.settings.dnd.touch === 'selected' && !$(e.currentTarget).closest('.jstree-node').children('.jstree-anchor').hasClass('jstree-clicked')))) {\r\n\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tvar obj = this.get_node(e.target),\r\n\t\t\t\t\t\t\tmlt = this.is_selected(obj) && this.settings.dnd.drag_selection ? this.get_top_selected().length : 1,\r\n\t\t\t\t\t\t\ttxt = (mlt > 1 ? mlt + ' ' + this.get_string('nodes') : this.get_text(e.currentTarget));\r\n\t\t\t\t\t\tif(this.settings.core.force_text) {\r\n\t\t\t\t\t\t\ttxt = $.vakata.html.escape(txt);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(obj && obj.id && obj.id !== $.jstree.root && (e.which === 1 || e.type === \"touchstart\" || e.type === \"dragstart\") &&\r\n\t\t\t\t\t\t\t(this.settings.dnd.is_draggable === true || ($.isFunction(this.settings.dnd.is_draggable) && this.settings.dnd.is_draggable.call(this, (mlt > 1 ? this.get_top_selected(true) : [obj]), e)))\r\n\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\tdrg = { 'jstree' : true, 'origin' : this, 'obj' : this.get_node(obj,true), 'nodes' : mlt > 1 ? this.get_top_selected() : [obj.id] };\r\n\t\t\t\t\t\t\telm = e.currentTarget;\r\n\t\t\t\t\t\t\tif (this.settings.dnd.use_html5) {\r\n\t\t\t\t\t\t\t\t$.vakata.dnd._trigger('start', e, { 'helper': $(), 'element': elm, 'data': drg });\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tthis.element.trigger('mousedown.jstree');\r\n\t\t\t\t\t\t\t\treturn $.vakata.dnd.start(e, drg, '<div id=\"jstree-dnd\" class=\"jstree-' + this.get_theme() + ' jstree-' + this.get_theme() + '-' + this.get_theme_variant() + ' ' + ( this.settings.core.themes.responsive ? ' jstree-dnd-responsive' : '' ) + '\"><i class=\"jstree-icon jstree-er\"></i>' + txt + '<ins class=\"jstree-copy\" style=\"display:none;\">+</ins></div>');\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, this));\r\n\t\t\tif (this.settings.dnd.use_html5) {\r\n\t\t\t\tthis.element\r\n\t\t\t\t\t.on('dragover.jstree', function (e) {\r\n\t\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\t\t$.vakata.dnd._trigger('move', e, { 'helper': $(), 'element': elm, 'data': drg });\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t//.on('dragenter.jstree', this.settings.dnd.large_drop_target ? '.jstree-node' : '.jstree-anchor', $.proxy(function (e) {\r\n\t\t\t\t\t//\t\te.preventDefault();\r\n\t\t\t\t\t//\t\t$.vakata.dnd._trigger('move', e, { 'helper': $(), 'element': elm, 'data': drg });\r\n\t\t\t\t\t//\t\treturn false;\r\n\t\t\t\t\t//\t}, this))\r\n\t\t\t\t\t.on('drop.jstree', $.proxy(function (e) {\r\n\t\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\t\t$.vakata.dnd._trigger('stop', e, { 'helper': $(), 'element': elm, 'data': drg });\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}, this));\r\n\t\t\t}\r\n\t\t};\r\n\t\tthis.redraw_node = function(obj, deep, callback, force_render) {\r\n\t\t\tobj = parent.redraw_node.apply(this, arguments);\r\n\t\t\tif (obj && this.settings.dnd.use_html5) {\r\n\t\t\t\tif (this.settings.dnd.large_drag_target) {\r\n\t\t\t\t\tobj.setAttribute('draggable', true);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tvar i, j, tmp = null;\r\n\t\t\t\t\tfor(i = 0, j = obj.childNodes.length; i < j; i++) {\r\n\t\t\t\t\t\tif(obj.childNodes[i] && obj.childNodes[i].className && obj.childNodes[i].className.indexOf(\"jstree-anchor\") !== -1) {\r\n\t\t\t\t\t\t\ttmp = obj.childNodes[i];\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(tmp) {\r\n\t\t\t\t\t\ttmp.setAttribute('draggable', true);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn obj;\r\n\t\t};\r\n\t};\r\n\r\n\t$(function() {\r\n\t\t// bind only once for all instances\r\n\t\tvar lastmv = false,\r\n\t\t\tlaster = false,\r\n\t\t\tlastev = false,\r\n\t\t\topento = false,\r\n\t\t\tmarker = $('<div id=\"jstree-marker\">&#160;</div>').hide(); //.appendTo('body');\r\n\r\n\t\t$(document)\r\n\t\t\t.on('dnd_start.vakata.jstree', function (e, data) {\r\n\t\t\t\tlastmv = false;\r\n\t\t\t\tlastev = false;\r\n\t\t\t\tif(!data || !data.data || !data.data.jstree) { return; }\r\n\t\t\t\tmarker.appendTo(document.body); //.show();\r\n\t\t\t})\r\n\t\t\t.on('dnd_move.vakata.jstree', function (e, data) {\r\n\t\t\t\tvar isDifferentNode = data.event.target !== lastev.target;\r\n\t\t\t\tif(opento) {\r\n\t\t\t\t\tif (!data.event || data.event.type !== 'dragover' || isDifferentNode) {\r\n\t\t\t\t\t\tclearTimeout(opento);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif(!data || !data.data || !data.data.jstree) { return; }\r\n\r\n\t\t\t\t// if we are hovering the marker image do nothing (can happen on \"inside\" drags)\r\n\t\t\t\tif(data.event.target.id && data.event.target.id === 'jstree-marker') {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tlastev = data.event;\r\n\r\n\t\t\t\tvar ins = $.jstree.reference(data.event.target),\r\n\t\t\t\t\tref = false,\r\n\t\t\t\t\toff = false,\r\n\t\t\t\t\trel = false,\r\n\t\t\t\t\ttmp, l, t, h, p, i, o, ok, t1, t2, op, ps, pr, ip, tm, is_copy, pn;\r\n\t\t\t\t// if we are over an instance\r\n\t\t\t\tif(ins && ins._data && ins._data.dnd) {\r\n\t\t\t\t\tmarker.attr('class', 'jstree-' + ins.get_theme() + ( ins.settings.core.themes.responsive ? ' jstree-dnd-responsive' : '' ));\r\n\t\t\t\t\tis_copy = data.data.origin && (data.data.origin.settings.dnd.always_copy || (data.data.origin.settings.dnd.copy && (data.event.metaKey || data.event.ctrlKey)));\r\n\t\t\t\t\tdata.helper\r\n\t\t\t\t\t\t.children().attr('class', 'jstree-' + ins.get_theme() + ' jstree-' + ins.get_theme() + '-' + ins.get_theme_variant() + ' ' + ( ins.settings.core.themes.responsive ? ' jstree-dnd-responsive' : '' ))\r\n\t\t\t\t\t\t.find('.jstree-copy').first()[ is_copy ? 'show' : 'hide' ]();\r\n\r\n\t\t\t\t\t// if are hovering the container itself add a new root node\r\n\t\t\t\t\t//console.log(data.event);\r\n\t\t\t\t\tif( (data.event.target === ins.element[0] || data.event.target === ins.get_container_ul()[0]) && ins.get_container_ul().children().length === 0) {\r\n\t\t\t\t\t\tok = true;\r\n\t\t\t\t\t\tfor(t1 = 0, t2 = data.data.nodes.length; t1 < t2; t1++) {\r\n\t\t\t\t\t\t\tok = ok && ins.check( (data.data.origin && (data.data.origin.settings.dnd.always_copy || (data.data.origin.settings.dnd.copy && (data.event.metaKey || data.event.ctrlKey)) ) ? \"copy_node\" : \"move_node\"), (data.data.origin && data.data.origin !== ins ? data.data.origin.get_node(data.data.nodes[t1]) : data.data.nodes[t1]), $.jstree.root, 'last', { 'dnd' : true, 'ref' : ins.get_node($.jstree.root), 'pos' : 'i', 'origin' : data.data.origin, 'is_multi' : (data.data.origin && data.data.origin !== ins), 'is_foreign' : (!data.data.origin) });\r\n\t\t\t\t\t\t\tif(!ok) { break; }\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(ok) {\r\n\t\t\t\t\t\t\tlastmv = { 'ins' : ins, 'par' : $.jstree.root, 'pos' : 'last' };\r\n\t\t\t\t\t\t\tmarker.hide();\r\n\t\t\t\t\t\t\tdata.helper.find('.jstree-icon').first().removeClass('jstree-er').addClass('jstree-ok');\r\n\t\t\t\t\t\t\tif (data.event.originalEvent && data.event.originalEvent.dataTransfer) {\r\n\t\t\t\t\t\t\t\tdata.event.originalEvent.dataTransfer.dropEffect = is_copy ? 'copy' : 'move';\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\t// if we are hovering a tree node\r\n\t\t\t\t\t\tref = ins.settings.dnd.large_drop_target ? $(data.event.target).closest('.jstree-node').children('.jstree-anchor') : $(data.event.target).closest('.jstree-anchor');\r\n\t\t\t\t\t\tif(ref && ref.length && ref.parent().is('.jstree-closed, .jstree-open, .jstree-leaf')) {\r\n\t\t\t\t\t\t\toff = ref.offset();\r\n\t\t\t\t\t\t\trel = (data.event.pageY !== undefined ? data.event.pageY : data.event.originalEvent.pageY) - off.top;\r\n\t\t\t\t\t\t\th = ref.outerHeight();\r\n\t\t\t\t\t\t\tif(rel < h / 3) {\r\n\t\t\t\t\t\t\t\to = ['b', 'i', 'a'];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse if(rel > h - h / 3) {\r\n\t\t\t\t\t\t\t\to = ['a', 'i', 'b'];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\to = rel > h / 2 ? ['i', 'a', 'b'] : ['i', 'b', 'a'];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t$.each(o, function (j, v) {\r\n\t\t\t\t\t\t\t\tswitch(v) {\r\n\t\t\t\t\t\t\t\t\tcase 'b':\r\n\t\t\t\t\t\t\t\t\t\tl = off.left - 6;\r\n\t\t\t\t\t\t\t\t\t\tt = off.top;\r\n\t\t\t\t\t\t\t\t\t\tp = ins.get_parent(ref);\r\n\t\t\t\t\t\t\t\t\t\ti = ref.parent().index();\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\tcase 'i':\r\n\t\t\t\t\t\t\t\t\t\tip = ins.settings.dnd.inside_pos;\r\n\t\t\t\t\t\t\t\t\t\ttm = ins.get_node(ref.parent());\r\n\t\t\t\t\t\t\t\t\t\tl = off.left - 2;\r\n\t\t\t\t\t\t\t\t\t\tt = off.top + h / 2 + 1;\r\n\t\t\t\t\t\t\t\t\t\tp = tm.id;\r\n\t\t\t\t\t\t\t\t\t\ti = ip === 'first' ? 0 : (ip === 'last' ? tm.children.length : Math.min(ip, tm.children.length));\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\tcase 'a':\r\n\t\t\t\t\t\t\t\t\t\tl = off.left - 6;\r\n\t\t\t\t\t\t\t\t\t\tt = off.top + h;\r\n\t\t\t\t\t\t\t\t\t\tp = ins.get_parent(ref);\r\n\t\t\t\t\t\t\t\t\t\ti = ref.parent().index() + 1;\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tok = true;\r\n\t\t\t\t\t\t\t\tfor(t1 = 0, t2 = data.data.nodes.length; t1 < t2; t1++) {\r\n\t\t\t\t\t\t\t\t\top = data.data.origin && (data.data.origin.settings.dnd.always_copy || (data.data.origin.settings.dnd.copy && (data.event.metaKey || data.event.ctrlKey))) ? \"copy_node\" : \"move_node\";\r\n\t\t\t\t\t\t\t\t\tps = i;\r\n\t\t\t\t\t\t\t\t\tif(op === \"move_node\" && v === 'a' && (data.data.origin && data.data.origin === ins) && p === ins.get_parent(data.data.nodes[t1])) {\r\n\t\t\t\t\t\t\t\t\t\tpr = ins.get_node(p);\r\n\t\t\t\t\t\t\t\t\t\tif(ps > $.inArray(data.data.nodes[t1], pr.children)) {\r\n\t\t\t\t\t\t\t\t\t\t\tps -= 1;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tok = ok && ( (ins && ins.settings && ins.settings.dnd && ins.settings.dnd.check_while_dragging === false) || ins.check(op, (data.data.origin && data.data.origin !== ins ? data.data.origin.get_node(data.data.nodes[t1]) : data.data.nodes[t1]), p, ps, { 'dnd' : true, 'ref' : ins.get_node(ref.parent()), 'pos' : v, 'origin' : data.data.origin, 'is_multi' : (data.data.origin && data.data.origin !== ins), 'is_foreign' : (!data.data.origin) }) );\r\n\t\t\t\t\t\t\t\t\tif(!ok) {\r\n\t\t\t\t\t\t\t\t\t\tif(ins && ins.last_error) { laster = ins.last_error(); }\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif(v === 'i' && ref.parent().is('.jstree-closed') && ins.settings.dnd.open_timeout) {\r\n\t\t\t\t\t\t\t\t\tif (!data.event || data.event.type !== 'dragover' || isDifferentNode) {\r\n\t\t\t\t\t\t\t\t\t\tif (opento) { clearTimeout(opento); }\r\n\t\t\t\t\t\t\t\t\t\topento = setTimeout((function (x, z) { return function () { x.open_node(z); }; }(ins, ref)), ins.settings.dnd.open_timeout);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif(ok) {\r\n\t\t\t\t\t\t\t\t\tpn = ins.get_node(p, true);\r\n\t\t\t\t\t\t\t\t\tif (!pn.hasClass('.jstree-dnd-parent')) {\r\n\t\t\t\t\t\t\t\t\t\t$('.jstree-dnd-parent').removeClass('jstree-dnd-parent');\r\n\t\t\t\t\t\t\t\t\t\tpn.addClass('jstree-dnd-parent');\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tlastmv = { 'ins' : ins, 'par' : p, 'pos' : v === 'i' && ip === 'last' && i === 0 && !ins.is_loaded(tm) ? 'last' : i };\r\n\t\t\t\t\t\t\t\t\tmarker.css({ 'left' : l + 'px', 'top' : t + 'px' }).show();\r\n\t\t\t\t\t\t\t\t\tdata.helper.find('.jstree-icon').first().removeClass('jstree-er').addClass('jstree-ok');\r\n\t\t\t\t\t\t\t\t\tif (data.event.originalEvent && data.event.originalEvent.dataTransfer) {\r\n\t\t\t\t\t\t\t\t\t\tdata.event.originalEvent.dataTransfer.dropEffect = is_copy ? 'copy' : 'move';\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tlaster = {};\r\n\t\t\t\t\t\t\t\t\to = true;\r\n\t\t\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\tif(o === true) { return; }\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t$('.jstree-dnd-parent').removeClass('jstree-dnd-parent');\r\n\t\t\t\tlastmv = false;\r\n\t\t\t\tdata.helper.find('.jstree-icon').removeClass('jstree-ok').addClass('jstree-er');\r\n\t\t\t\tif (data.event.originalEvent && data.event.originalEvent.dataTransfer) {\r\n\t\t\t\t\tdata.event.originalEvent.dataTransfer.dropEffect = 'none';\r\n\t\t\t\t}\r\n\t\t\t\tmarker.hide();\r\n\t\t\t})\r\n\t\t\t.on('dnd_scroll.vakata.jstree', function (e, data) {\r\n\t\t\t\tif(!data || !data.data || !data.data.jstree) { return; }\r\n\t\t\t\tmarker.hide();\r\n\t\t\t\tlastmv = false;\r\n\t\t\t\tlastev = false;\r\n\t\t\t\tdata.helper.find('.jstree-icon').first().removeClass('jstree-ok').addClass('jstree-er');\r\n\t\t\t})\r\n\t\t\t.on('dnd_stop.vakata.jstree', function (e, data) {\r\n\t\t\t\t$('.jstree-dnd-parent').removeClass('jstree-dnd-parent');\r\n\t\t\t\tif(opento) { clearTimeout(opento); }\r\n\t\t\t\tif(!data || !data.data || !data.data.jstree) { return; }\r\n\t\t\t\tmarker.hide().detach();\r\n\t\t\t\tvar i, j, nodes = [];\r\n\t\t\t\tif(lastmv) {\r\n\t\t\t\t\tfor(i = 0, j = data.data.nodes.length; i < j; i++) {\r\n\t\t\t\t\t\tnodes[i] = data.data.origin ? data.data.origin.get_node(data.data.nodes[i]) : data.data.nodes[i];\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlastmv.ins[ data.data.origin && (data.data.origin.settings.dnd.always_copy || (data.data.origin.settings.dnd.copy && (data.event.metaKey || data.event.ctrlKey))) ? 'copy_node' : 'move_node' ](nodes, lastmv.par, lastmv.pos, false, false, false, data.data.origin);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\ti = $(data.event.target).closest('.jstree');\r\n\t\t\t\t\tif(i.length && laster && laster.error && laster.error === 'check') {\r\n\t\t\t\t\t\ti = i.jstree(true);\r\n\t\t\t\t\t\tif(i) {\r\n\t\t\t\t\t\t\ti.settings.core.error.call(this, laster);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tlastev = false;\r\n\t\t\t\tlastmv = false;\r\n\t\t\t})\r\n\t\t\t.on('keyup.jstree keydown.jstree', function (e, data) {\r\n\t\t\t\tdata = $.vakata.dnd._get();\r\n\t\t\t\tif(data && data.data && data.data.jstree) {\r\n\t\t\t\t\tif (e.type === \"keyup\" && e.which === 27) {\r\n\t\t\t\t\t\tif (opento) { clearTimeout(opento); }\r\n\t\t\t\t\t\tlastmv = false;\r\n\t\t\t\t\t\tlaster = false;\r\n\t\t\t\t\t\tlastev = false;\r\n\t\t\t\t\t\topento = false;\r\n\t\t\t\t\t\tmarker.hide().detach();\r\n\t\t\t\t\t\t$.vakata.dnd._clean();\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tdata.helper.find('.jstree-copy').first()[ data.data.origin && (data.data.origin.settings.dnd.always_copy || (data.data.origin.settings.dnd.copy && (e.metaKey || e.ctrlKey))) ? 'show' : 'hide' ]();\r\n\t\t\t\t\t\tif(lastev) {\r\n\t\t\t\t\t\t\tlastev.metaKey = e.metaKey;\r\n\t\t\t\t\t\t\tlastev.ctrlKey = e.ctrlKey;\r\n\t\t\t\t\t\t\t$.vakata.dnd._trigger('move', lastev);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t});\r\n\r\n\t// helpers\r\n\t(function ($) {\r\n\t\t$.vakata.html = {\r\n\t\t\tdiv : $('<div />'),\r\n\t\t\tescape : function (str) {\r\n\t\t\t\treturn $.vakata.html.div.text(str).html();\r\n\t\t\t},\r\n\t\t\tstrip : function (str) {\r\n\t\t\t\treturn $.vakata.html.div.empty().append($.parseHTML(str)).text();\r\n\t\t\t}\r\n\t\t};\r\n\t\t// private variable\r\n\t\tvar vakata_dnd = {\r\n\t\t\telement\t: false,\r\n\t\t\ttarget\t: false,\r\n\t\t\tis_down\t: false,\r\n\t\t\tis_drag\t: false,\r\n\t\t\thelper\t: false,\r\n\t\t\thelper_w: 0,\r\n\t\t\tdata\t: false,\r\n\t\t\tinit_x\t: 0,\r\n\t\t\tinit_y\t: 0,\r\n\t\t\tscroll_l: 0,\r\n\t\t\tscroll_t: 0,\r\n\t\t\tscroll_e: false,\r\n\t\t\tscroll_i: false,\r\n\t\t\tis_touch: false\r\n\t\t};\r\n\t\t$.vakata.dnd = {\r\n\t\t\tsettings : {\r\n\t\t\t\tscroll_speed\t\t: 10,\r\n\t\t\t\tscroll_proximity\t: 20,\r\n\t\t\t\thelper_left\t\t\t: 5,\r\n\t\t\t\thelper_top\t\t\t: 10,\r\n\t\t\t\tthreshold\t\t\t: 5,\r\n\t\t\t\tthreshold_touch\t\t: 10\r\n\t\t\t},\r\n\t\t\t_trigger : function (event_name, e, data) {\r\n\t\t\t\tif (data === undefined) {\r\n\t\t\t\t\tdata = $.vakata.dnd._get();\r\n\t\t\t\t}\r\n\t\t\t\tdata.event = e;\r\n\t\t\t\t$(document).trigger(\"dnd_\" + event_name + \".vakata\", data);\r\n\t\t\t},\r\n\t\t\t_get : function () {\r\n\t\t\t\treturn {\r\n\t\t\t\t\t\"data\"\t\t: vakata_dnd.data,\r\n\t\t\t\t\t\"element\"\t: vakata_dnd.element,\r\n\t\t\t\t\t\"helper\"\t: vakata_dnd.helper\r\n\t\t\t\t};\r\n\t\t\t},\r\n\t\t\t_clean : function () {\r\n\t\t\t\tif(vakata_dnd.helper) { vakata_dnd.helper.remove(); }\r\n\t\t\t\tif(vakata_dnd.scroll_i) { clearInterval(vakata_dnd.scroll_i); vakata_dnd.scroll_i = false; }\r\n\t\t\t\tvakata_dnd = {\r\n\t\t\t\t\telement\t: false,\r\n\t\t\t\t\ttarget\t: false,\r\n\t\t\t\t\tis_down\t: false,\r\n\t\t\t\t\tis_drag\t: false,\r\n\t\t\t\t\thelper\t: false,\r\n\t\t\t\t\thelper_w: 0,\r\n\t\t\t\t\tdata\t: false,\r\n\t\t\t\t\tinit_x\t: 0,\r\n\t\t\t\t\tinit_y\t: 0,\r\n\t\t\t\t\tscroll_l: 0,\r\n\t\t\t\t\tscroll_t: 0,\r\n\t\t\t\t\tscroll_e: false,\r\n\t\t\t\t\tscroll_i: false,\r\n\t\t\t\t\tis_touch: false\r\n\t\t\t\t};\r\n\t\t\t\t$(document).off(\"mousemove.vakata.jstree touchmove.vakata.jstree\", $.vakata.dnd.drag);\r\n\t\t\t\t$(document).off(\"mouseup.vakata.jstree touchend.vakata.jstree\", $.vakata.dnd.stop);\r\n\t\t\t},\r\n\t\t\t_scroll : function (init_only) {\r\n\t\t\t\tif(!vakata_dnd.scroll_e || (!vakata_dnd.scroll_l && !vakata_dnd.scroll_t)) {\r\n\t\t\t\t\tif(vakata_dnd.scroll_i) { clearInterval(vakata_dnd.scroll_i); vakata_dnd.scroll_i = false; }\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\tif(!vakata_dnd.scroll_i) {\r\n\t\t\t\t\tvakata_dnd.scroll_i = setInterval($.vakata.dnd._scroll, 100);\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\tif(init_only === true) { return false; }\r\n\r\n\t\t\t\tvar i = vakata_dnd.scroll_e.scrollTop(),\r\n\t\t\t\t\tj = vakata_dnd.scroll_e.scrollLeft();\r\n\t\t\t\tvakata_dnd.scroll_e.scrollTop(i + vakata_dnd.scroll_t * $.vakata.dnd.settings.scroll_speed);\r\n\t\t\t\tvakata_dnd.scroll_e.scrollLeft(j + vakata_dnd.scroll_l * $.vakata.dnd.settings.scroll_speed);\r\n\t\t\t\tif(i !== vakata_dnd.scroll_e.scrollTop() || j !== vakata_dnd.scroll_e.scrollLeft()) {\r\n\t\t\t\t\t/**\r\n\t\t\t\t\t * triggered on the document when a drag causes an element to scroll\r\n\t\t\t\t\t * @event\r\n\t\t\t\t\t * @plugin dnd\r\n\t\t\t\t\t * @name dnd_scroll.vakata\r\n\t\t\t\t\t * @param {Mixed} data any data supplied with the call to $.vakata.dnd.start\r\n\t\t\t\t\t * @param {DOM} element the DOM element being dragged\r\n\t\t\t\t\t * @param {jQuery} helper the helper shown next to the mouse\r\n\t\t\t\t\t * @param {jQuery} event the element that is scrolling\r\n\t\t\t\t\t */\r\n\t\t\t\t\t$.vakata.dnd._trigger(\"scroll\", vakata_dnd.scroll_e);\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tstart : function (e, data, html) {\r\n\t\t\t\tif(e.type === \"touchstart\" && e.originalEvent && e.originalEvent.changedTouches && e.originalEvent.changedTouches[0]) {\r\n\t\t\t\t\te.pageX = e.originalEvent.changedTouches[0].pageX;\r\n\t\t\t\t\te.pageY = e.originalEvent.changedTouches[0].pageY;\r\n\t\t\t\t\te.target = document.elementFromPoint(e.originalEvent.changedTouches[0].pageX - window.pageXOffset, e.originalEvent.changedTouches[0].pageY - window.pageYOffset);\r\n\t\t\t\t}\r\n\t\t\t\tif(vakata_dnd.is_drag) { $.vakata.dnd.stop({}); }\r\n\t\t\t\ttry {\r\n\t\t\t\t\te.currentTarget.unselectable = \"on\";\r\n\t\t\t\t\te.currentTarget.onselectstart = function() { return false; };\r\n\t\t\t\t\tif(e.currentTarget.style) {\r\n\t\t\t\t\t\te.currentTarget.style.touchAction = \"none\";\r\n\t\t\t\t\t\te.currentTarget.style.msTouchAction = \"none\";\r\n\t\t\t\t\t\te.currentTarget.style.MozUserSelect = \"none\";\r\n\t\t\t\t\t}\r\n\t\t\t\t} catch(ignore) { }\r\n\t\t\t\tvakata_dnd.init_x\t= e.pageX;\r\n\t\t\t\tvakata_dnd.init_y\t= e.pageY;\r\n\t\t\t\tvakata_dnd.data\t\t= data;\r\n\t\t\t\tvakata_dnd.is_down\t= true;\r\n\t\t\t\tvakata_dnd.element\t= e.currentTarget;\r\n\t\t\t\tvakata_dnd.target\t= e.target;\r\n\t\t\t\tvakata_dnd.is_touch\t= e.type === \"touchstart\";\r\n\t\t\t\tif(html !== false) {\r\n\t\t\t\t\tvakata_dnd.helper = $(\"<div id='vakata-dnd'></div>\").html(html).css({\r\n\t\t\t\t\t\t\"display\"\t\t: \"block\",\r\n\t\t\t\t\t\t\"margin\"\t\t: \"0\",\r\n\t\t\t\t\t\t\"padding\"\t\t: \"0\",\r\n\t\t\t\t\t\t\"position\"\t\t: \"absolute\",\r\n\t\t\t\t\t\t\"top\"\t\t\t: \"-2000px\",\r\n\t\t\t\t\t\t\"lineHeight\"\t: \"16px\",\r\n\t\t\t\t\t\t\"zIndex\"\t\t: \"10000\"\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\t$(document).on(\"mousemove.vakata.jstree touchmove.vakata.jstree\", $.vakata.dnd.drag);\r\n\t\t\t\t$(document).on(\"mouseup.vakata.jstree touchend.vakata.jstree\", $.vakata.dnd.stop);\r\n\t\t\t\treturn false;\r\n\t\t\t},\r\n\t\t\tdrag : function (e) {\r\n\t\t\t\tif(e.type === \"touchmove\" && e.originalEvent && e.originalEvent.changedTouches && e.originalEvent.changedTouches[0]) {\r\n\t\t\t\t\te.pageX = e.originalEvent.changedTouches[0].pageX;\r\n\t\t\t\t\te.pageY = e.originalEvent.changedTouches[0].pageY;\r\n\t\t\t\t\te.target = document.elementFromPoint(e.originalEvent.changedTouches[0].pageX - window.pageXOffset, e.originalEvent.changedTouches[0].pageY - window.pageYOffset);\r\n\t\t\t\t}\r\n\t\t\t\tif(!vakata_dnd.is_down) { return; }\r\n\t\t\t\tif(!vakata_dnd.is_drag) {\r\n\t\t\t\t\tif(\r\n\t\t\t\t\t\tMath.abs(e.pageX - vakata_dnd.init_x) > (vakata_dnd.is_touch ? $.vakata.dnd.settings.threshold_touch : $.vakata.dnd.settings.threshold) ||\r\n\t\t\t\t\t\tMath.abs(e.pageY - vakata_dnd.init_y) > (vakata_dnd.is_touch ? $.vakata.dnd.settings.threshold_touch : $.vakata.dnd.settings.threshold)\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\tif(vakata_dnd.helper) {\r\n\t\t\t\t\t\t\tvakata_dnd.helper.appendTo(document.body);\r\n\t\t\t\t\t\t\tvakata_dnd.helper_w = vakata_dnd.helper.outerWidth();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tvakata_dnd.is_drag = true;\r\n\t\t\t\t\t\t$(vakata_dnd.target).one('click.vakata', false);\r\n\t\t\t\t\t\t/**\r\n\t\t\t\t\t\t * triggered on the document when a drag starts\r\n\t\t\t\t\t\t * @event\r\n\t\t\t\t\t\t * @plugin dnd\r\n\t\t\t\t\t\t * @name dnd_start.vakata\r\n\t\t\t\t\t\t * @param {Mixed} data any data supplied with the call to $.vakata.dnd.start\r\n\t\t\t\t\t\t * @param {DOM} element the DOM element being dragged\r\n\t\t\t\t\t\t * @param {jQuery} helper the helper shown next to the mouse\r\n\t\t\t\t\t\t * @param {Object} event the event that caused the start (probably mousemove)\r\n\t\t\t\t\t\t */\r\n\t\t\t\t\t\t$.vakata.dnd._trigger(\"start\", e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse { return; }\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar d  = false, w  = false,\r\n\t\t\t\t\tdh = false, wh = false,\r\n\t\t\t\t\tdw = false, ww = false,\r\n\t\t\t\t\tdt = false, dl = false,\r\n\t\t\t\t\tht = false, hl = false;\r\n\r\n\t\t\t\tvakata_dnd.scroll_t = 0;\r\n\t\t\t\tvakata_dnd.scroll_l = 0;\r\n\t\t\t\tvakata_dnd.scroll_e = false;\r\n\t\t\t\t$($(e.target).parentsUntil(\"body\").addBack().get().reverse())\r\n\t\t\t\t\t.filter(function () {\r\n\t\t\t\t\t\treturn\t(/^auto|scroll$/).test($(this).css(\"overflow\")) &&\r\n\t\t\t\t\t\t\t\t(this.scrollHeight > this.offsetHeight || this.scrollWidth > this.offsetWidth);\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.each(function () {\r\n\t\t\t\t\t\tvar t = $(this), o = t.offset();\r\n\t\t\t\t\t\tif(this.scrollHeight > this.offsetHeight) {\r\n\t\t\t\t\t\t\tif(o.top + t.height() - e.pageY < $.vakata.dnd.settings.scroll_proximity)\t{ vakata_dnd.scroll_t = 1; }\r\n\t\t\t\t\t\t\tif(e.pageY - o.top < $.vakata.dnd.settings.scroll_proximity)\t\t\t\t{ vakata_dnd.scroll_t = -1; }\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(this.scrollWidth > this.offsetWidth) {\r\n\t\t\t\t\t\t\tif(o.left + t.width() - e.pageX < $.vakata.dnd.settings.scroll_proximity)\t{ vakata_dnd.scroll_l = 1; }\r\n\t\t\t\t\t\t\tif(e.pageX - o.left < $.vakata.dnd.settings.scroll_proximity)\t\t\t\t{ vakata_dnd.scroll_l = -1; }\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(vakata_dnd.scroll_t || vakata_dnd.scroll_l) {\r\n\t\t\t\t\t\t\tvakata_dnd.scroll_e = $(this);\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\tif(!vakata_dnd.scroll_e) {\r\n\t\t\t\t\td  = $(document); w = $(window);\r\n\t\t\t\t\tdh = d.height(); wh = w.height();\r\n\t\t\t\t\tdw = d.width(); ww = w.width();\r\n\t\t\t\t\tdt = d.scrollTop(); dl = d.scrollLeft();\r\n\t\t\t\t\tif(dh > wh && e.pageY - dt < $.vakata.dnd.settings.scroll_proximity)\t\t{ vakata_dnd.scroll_t = -1;  }\r\n\t\t\t\t\tif(dh > wh && wh - (e.pageY - dt) < $.vakata.dnd.settings.scroll_proximity)\t{ vakata_dnd.scroll_t = 1; }\r\n\t\t\t\t\tif(dw > ww && e.pageX - dl < $.vakata.dnd.settings.scroll_proximity)\t\t{ vakata_dnd.scroll_l = -1; }\r\n\t\t\t\t\tif(dw > ww && ww - (e.pageX - dl) < $.vakata.dnd.settings.scroll_proximity)\t{ vakata_dnd.scroll_l = 1; }\r\n\t\t\t\t\tif(vakata_dnd.scroll_t || vakata_dnd.scroll_l) {\r\n\t\t\t\t\t\tvakata_dnd.scroll_e = d;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif(vakata_dnd.scroll_e) { $.vakata.dnd._scroll(true); }\r\n\r\n\t\t\t\tif(vakata_dnd.helper) {\r\n\t\t\t\t\tht = parseInt(e.pageY + $.vakata.dnd.settings.helper_top, 10);\r\n\t\t\t\t\thl = parseInt(e.pageX + $.vakata.dnd.settings.helper_left, 10);\r\n\t\t\t\t\tif(dh && ht + 25 > dh) { ht = dh - 50; }\r\n\t\t\t\t\tif(dw && hl + vakata_dnd.helper_w > dw) { hl = dw - (vakata_dnd.helper_w + 2); }\r\n\t\t\t\t\tvakata_dnd.helper.css({\r\n\t\t\t\t\t\tleft\t: hl + \"px\",\r\n\t\t\t\t\t\ttop\t\t: ht + \"px\"\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\t/**\r\n\t\t\t\t * triggered on the document when a drag is in progress\r\n\t\t\t\t * @event\r\n\t\t\t\t * @plugin dnd\r\n\t\t\t\t * @name dnd_move.vakata\r\n\t\t\t\t * @param {Mixed} data any data supplied with the call to $.vakata.dnd.start\r\n\t\t\t\t * @param {DOM} element the DOM element being dragged\r\n\t\t\t\t * @param {jQuery} helper the helper shown next to the mouse\r\n\t\t\t\t * @param {Object} event the event that caused this to trigger (most likely mousemove)\r\n\t\t\t\t */\r\n\t\t\t\t$.vakata.dnd._trigger(\"move\", e);\r\n\t\t\t\treturn false;\r\n\t\t\t},\r\n\t\t\tstop : function (e) {\r\n\t\t\t\tif(e.type === \"touchend\" && e.originalEvent && e.originalEvent.changedTouches && e.originalEvent.changedTouches[0]) {\r\n\t\t\t\t\te.pageX = e.originalEvent.changedTouches[0].pageX;\r\n\t\t\t\t\te.pageY = e.originalEvent.changedTouches[0].pageY;\r\n\t\t\t\t\te.target = document.elementFromPoint(e.originalEvent.changedTouches[0].pageX - window.pageXOffset, e.originalEvent.changedTouches[0].pageY - window.pageYOffset);\r\n\t\t\t\t}\r\n\t\t\t\tif(vakata_dnd.is_drag) {\r\n\t\t\t\t\t/**\r\n\t\t\t\t\t * triggered on the document when a drag stops (the dragged element is dropped)\r\n\t\t\t\t\t * @event\r\n\t\t\t\t\t * @plugin dnd\r\n\t\t\t\t\t * @name dnd_stop.vakata\r\n\t\t\t\t\t * @param {Mixed} data any data supplied with the call to $.vakata.dnd.start\r\n\t\t\t\t\t * @param {DOM} element the DOM element being dragged\r\n\t\t\t\t\t * @param {jQuery} helper the helper shown next to the mouse\r\n\t\t\t\t\t * @param {Object} event the event that caused the stop\r\n\t\t\t\t\t */\r\n\t\t\t\t\tif (e.target !== vakata_dnd.target) {\r\n\t\t\t\t\t\t$(vakata_dnd.target).off('click.vakata');\r\n\t\t\t\t\t}\r\n\t\t\t\t\t$.vakata.dnd._trigger(\"stop\", e);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tif(e.type === \"touchend\" && e.target === vakata_dnd.target) {\r\n\t\t\t\t\t\tvar to = setTimeout(function () { $(e.target).click(); }, 100);\r\n\t\t\t\t\t\t$(e.target).one('click', function() { if(to) { clearTimeout(to); } });\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t$.vakata.dnd._clean();\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t};\r\n\t}($));\r\n\r\n\t// include the dnd plugin by default\r\n\t// $.jstree.defaults.plugins.push(\"dnd\");\r\n\r\n\treturn $;\r\n\t\r\n});\r\n\ndefine('skylark-widgets-hierarchy/addons/massload',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-browser\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-geom\",\r\n  \"skylark-domx-query\",\r\n  \"../Hierarchy\"\r\n],function(langx,browser,eventer,noder,geom,$,jstree){\r\n\r\n\t\"use strict\";\r\n\r\n\tif($.jstree.plugins.massload) { return; }\r\n\r\n\t/**\r\n\t * massload configuration\r\n\t *\r\n\t * It is possible to set this to a standard jQuery-like AJAX config.\r\n\t * In addition to the standard jQuery ajax options here you can supply functions for `data` and `url`, the functions will be run in the current instance's scope and a param will be passed indicating which node IDs need to be loaded, the return value of those functions will be used.\r\n\t *\r\n\t * You can also set this to a function, that function will receive the node IDs being loaded as argument and a second param which is a function (callback) which should be called with the result.\r\n\t *\r\n\t * Both the AJAX and the function approach rely on the same return value - an object where the keys are the node IDs, and the value is the children of that node as an array.\r\n\t *\r\n\t *\t{\r\n\t *\t\t\"id1\" : [{ \"text\" : \"Child of ID1\", \"id\" : \"c1\" }, { \"text\" : \"Another child of ID1\", \"id\" : \"c2\" }],\r\n\t *\t\t\"id2\" : [{ \"text\" : \"Child of ID2\", \"id\" : \"c3\" }]\r\n\t *\t}\r\n\t * \r\n\t * @name $.jstree.defaults.massload\r\n\t * @plugin massload\r\n\t */\r\n\t$.jstree.defaults.massload = null;\r\n\t$.jstree.plugins.massload = function (options, parent) {\r\n\t\tthis.init = function (el, options) {\r\n\t\t\tthis._data.massload = {};\r\n\t\t\tparent.init.call(this, el, options);\r\n\t\t};\r\n\t\tthis._load_nodes = function (nodes, callback, is_callback, force_reload) {\r\n\t\t\tvar s = this.settings.massload,\r\n\t\t\t\tnodesString = JSON.stringify(nodes),\r\n\t\t\t\ttoLoad = [],\r\n\t\t\t\tm = this._model.data,\r\n\t\t\t\ti, j, dom;\r\n\t\t\tif (!is_callback) {\r\n\t\t\t\tfor(i = 0, j = nodes.length; i < j; i++) {\r\n\t\t\t\t\tif(!m[nodes[i]] || ( (!m[nodes[i]].state.loaded && !m[nodes[i]].state.failed) || force_reload) ) {\r\n\t\t\t\t\t\ttoLoad.push(nodes[i]);\r\n\t\t\t\t\t\tdom = this.get_node(nodes[i], true);\r\n\t\t\t\t\t\tif (dom && dom.length) {\r\n\t\t\t\t\t\t\tdom.addClass(\"jstree-loading\").attr('aria-busy',true);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tthis._data.massload = {};\r\n\t\t\t\tif (toLoad.length) {\r\n\t\t\t\t\tif($.isFunction(s)) {\r\n\t\t\t\t\t\treturn s.call(this, toLoad, $.proxy(function (data) {\r\n\t\t\t\t\t\t\tvar i, j;\r\n\t\t\t\t\t\t\tif(data) {\r\n\t\t\t\t\t\t\t\tfor(i in data) {\r\n\t\t\t\t\t\t\t\t\tif(data.hasOwnProperty(i)) {\r\n\t\t\t\t\t\t\t\t\t\tthis._data.massload[i] = data[i];\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tfor(i = 0, j = nodes.length; i < j; i++) {\r\n\t\t\t\t\t\t\t\tdom = this.get_node(nodes[i], true);\r\n\t\t\t\t\t\t\t\tif (dom && dom.length) {\r\n\t\t\t\t\t\t\t\t\tdom.removeClass(\"jstree-loading\").attr('aria-busy',false);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tparent._load_nodes.call(this, nodes, callback, is_callback, force_reload);\r\n\t\t\t\t\t\t}, this));\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(typeof s === 'object' && s && s.url) {\r\n\t\t\t\t\t\ts = $.extend(true, {}, s);\r\n\t\t\t\t\t\tif($.isFunction(s.url)) {\r\n\t\t\t\t\t\t\ts.url = s.url.call(this, toLoad);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif($.isFunction(s.data)) {\r\n\t\t\t\t\t\t\ts.data = s.data.call(this, toLoad);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn $.ajax(s)\r\n\t\t\t\t\t\t\t.done($.proxy(function (data,t,x) {\r\n\t\t\t\t\t\t\t\t\tvar i, j;\r\n\t\t\t\t\t\t\t\t\tif(data) {\r\n\t\t\t\t\t\t\t\t\t\tfor(i in data) {\r\n\t\t\t\t\t\t\t\t\t\t\tif(data.hasOwnProperty(i)) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tthis._data.massload[i] = data[i];\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tfor(i = 0, j = nodes.length; i < j; i++) {\r\n\t\t\t\t\t\t\t\t\t\tdom = this.get_node(nodes[i], true);\r\n\t\t\t\t\t\t\t\t\t\tif (dom && dom.length) {\r\n\t\t\t\t\t\t\t\t\t\t\tdom.removeClass(\"jstree-loading\").attr('aria-busy',false);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tparent._load_nodes.call(this, nodes, callback, is_callback, force_reload);\r\n\t\t\t\t\t\t\t\t}, this))\r\n\t\t\t\t\t\t\t.fail($.proxy(function (f) {\r\n\t\t\t\t\t\t\t\t\tparent._load_nodes.call(this, nodes, callback, is_callback, force_reload);\r\n\t\t\t\t\t\t\t\t}, this));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn parent._load_nodes.call(this, nodes, callback, is_callback, force_reload);\r\n\t\t};\r\n\t\tthis._load_node = function (obj, callback) {\r\n\t\t\tvar data = this._data.massload[obj.id],\r\n\t\t\t\trslt = null, dom;\r\n\t\t\tif(data) {\r\n\t\t\t\trslt = this[typeof data === 'string' ? '_append_html_data' : '_append_json_data'](\r\n\t\t\t\t\tobj,\r\n\t\t\t\t\ttypeof data === 'string' ? $($.parseHTML(data)).filter(function () { return this.nodeType !== 3; }) : data,\r\n\t\t\t\t\tfunction (status) { callback.call(this, status); }\r\n\t\t\t\t);\r\n\t\t\t\tdom = this.get_node(obj.id, true);\r\n\t\t\t\tif (dom && dom.length) {\r\n\t\t\t\t\tdom.removeClass(\"jstree-loading\").attr('aria-busy',false);\r\n\t\t\t\t}\r\n\t\t\t\tdelete this._data.massload[obj.id];\r\n\t\t\t\treturn rslt;\r\n\t\t\t}\r\n\t\t\treturn parent._load_node.call(this, obj, callback);\r\n\t\t};\r\n\t};\r\n\r\n\treturn $;\r\n\t\r\n});\ndefine('skylark-widgets-hierarchy/addons/search',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-browser\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-geom\",\r\n  \"skylark-domx-query\",\r\n  \"../Hierarchy\"\r\n],function(langx,browser,eventer,noder,geom,$,jstree){\r\n\r\n\t\"use strict\";\r\n\r\n\tif($.jstree.plugins.search) { return; }\r\n\r\n\t/**\r\n\t * stores all defaults for the search plugin\r\n\t * @name $.jstree.defaults.search\r\n\t * @plugin search\r\n\t */\r\n\t$.jstree.defaults.search = {\r\n\t\t/**\r\n\t\t * a jQuery-like AJAX config, which jstree uses if a server should be queried for results.\r\n\t\t *\r\n\t\t * A `str` (which is the search string) parameter will be added with the request, an optional `inside` parameter will be added if the search is limited to a node id. The expected result is a JSON array with nodes that need to be opened so that matching nodes will be revealed.\r\n\t\t * Leave this setting as `false` to not query the server. You can also set this to a function, which will be invoked in the instance's scope and receive 3 parameters - the search string, the callback to call with the array of nodes to load, and the optional node ID to limit the search to\r\n\t\t * @name $.jstree.defaults.search.ajax\r\n\t\t * @plugin search\r\n\t\t */\r\n\t\tajax : false,\r\n\t\t/**\r\n\t\t * Indicates if the search should be fuzzy or not (should `chnd3` match `child node 3`). Default is `false`.\r\n\t\t * @name $.jstree.defaults.search.fuzzy\r\n\t\t * @plugin search\r\n\t\t */\r\n\t\tfuzzy : false,\r\n\t\t/**\r\n\t\t * Indicates if the search should be case sensitive. Default is `false`.\r\n\t\t * @name $.jstree.defaults.search.case_sensitive\r\n\t\t * @plugin search\r\n\t\t */\r\n\t\tcase_sensitive : false,\r\n\t\t/**\r\n\t\t * Indicates if the tree should be filtered (by default) to show only matching nodes (keep in mind this can be a heavy on large trees in old browsers).\r\n\t\t * This setting can be changed at runtime when calling the search method. Default is `false`.\r\n\t\t * @name $.jstree.defaults.search.show_only_matches\r\n\t\t * @plugin search\r\n\t\t */\r\n\t\tshow_only_matches : false,\r\n\t\t/**\r\n\t\t * Indicates if the children of matched element are shown (when show_only_matches is true)\r\n\t\t * This setting can be changed at runtime when calling the search method. Default is `false`.\r\n\t\t * @name $.jstree.defaults.search.show_only_matches_children\r\n\t\t * @plugin search\r\n\t\t */\r\n\t\tshow_only_matches_children : false,\r\n\t\t/**\r\n\t\t * Indicates if all nodes opened to reveal the search result, should be closed when the search is cleared or a new search is performed. Default is `true`.\r\n\t\t * @name $.jstree.defaults.search.close_opened_onclear\r\n\t\t * @plugin search\r\n\t\t */\r\n\t\tclose_opened_onclear : true,\r\n\t\t/**\r\n\t\t * Indicates if only leaf nodes should be included in search results. Default is `false`.\r\n\t\t * @name $.jstree.defaults.search.search_leaves_only\r\n\t\t * @plugin search\r\n\t\t */\r\n\t\tsearch_leaves_only : false,\r\n\t\t/**\r\n\t\t * If set to a function it wil be called in the instance's scope with two arguments - search string and node (where node will be every node in the structure, so use with caution).\r\n\t\t * If the function returns a truthy value the node will be considered a match (it might not be displayed if search_only_leaves is set to true and the node is not a leaf). Default is `false`.\r\n\t\t * @name $.jstree.defaults.search.search_callback\r\n\t\t * @plugin search\r\n\t\t */\r\n\t\tsearch_callback : false\r\n\t};\r\n\r\n\t$.jstree.plugins.search = function (options, parent) {\r\n\t\tthis.bind = function () {\r\n\t\t\tparent.bind.call(this);\r\n\r\n\t\t\tthis._data.search.str = \"\";\r\n\t\t\tthis._data.search.dom = $();\r\n\t\t\tthis._data.search.res = [];\r\n\t\t\tthis._data.search.opn = [];\r\n\t\t\tthis._data.search.som = false;\r\n\t\t\tthis._data.search.smc = false;\r\n\t\t\tthis._data.search.hdn = [];\r\n\r\n\t\t\tthis.element\r\n\t\t\t\t.on(\"search.jstree\", $.proxy(function (e, data) {\r\n\t\t\t\t\t\tif(this._data.search.som && data.res.length) {\r\n\t\t\t\t\t\t\tvar m = this._model.data, i, j, p = [], k, l;\r\n\t\t\t\t\t\t\tfor(i = 0, j = data.res.length; i < j; i++) {\r\n\t\t\t\t\t\t\t\tif(m[data.res[i]] && !m[data.res[i]].state.hidden) {\r\n\t\t\t\t\t\t\t\t\tp.push(data.res[i]);\r\n\t\t\t\t\t\t\t\t\tp = p.concat(m[data.res[i]].parents);\r\n\t\t\t\t\t\t\t\t\tif(this._data.search.smc) {\r\n\t\t\t\t\t\t\t\t\t\tfor (k = 0, l = m[data.res[i]].children_d.length; k < l; k++) {\r\n\t\t\t\t\t\t\t\t\t\t\tif (m[m[data.res[i]].children_d[k]] && !m[m[data.res[i]].children_d[k]].state.hidden) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tp.push(m[data.res[i]].children_d[k]);\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tp = $.vakata.array_remove_item($.vakata.array_unique(p), $.jstree.root);\r\n\t\t\t\t\t\t\tthis._data.search.hdn = this.hide_all(true);\r\n\t\t\t\t\t\t\tthis.show_node(p, true);\r\n\t\t\t\t\t\t\tthis.redraw(true);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on(\"clear_search.jstree\", $.proxy(function (e, data) {\r\n\t\t\t\t\t\tif(this._data.search.som && data.res.length) {\r\n\t\t\t\t\t\t\tthis.show_node(this._data.search.hdn, true);\r\n\t\t\t\t\t\t\tthis.redraw(true);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, this));\r\n\t\t};\r\n\t\t/**\r\n\t\t * used to search the tree nodes for a given string\r\n\t\t * @name search(str [, skip_async])\r\n\t\t * @param {String} str the search string\r\n\t\t * @param {Boolean} skip_async if set to true server will not be queried even if configured\r\n\t\t * @param {Boolean} show_only_matches if set to true only matching nodes will be shown (keep in mind this can be very slow on large trees or old browsers)\r\n\t\t * @param {mixed} inside an optional node to whose children to limit the search\r\n\t\t * @param {Boolean} append if set to true the results of this search are appended to the previous search\r\n\t\t * @plugin search\r\n\t\t * @trigger search.jstree\r\n\t\t */\r\n\t\tthis.search = function (str, skip_async, show_only_matches, inside, append, show_only_matches_children) {\r\n\t\t\tif(str === false || $.trim(str.toString()) === \"\") {\r\n\t\t\t\treturn this.clear_search();\r\n\t\t\t}\r\n\t\t\tinside = this.get_node(inside);\r\n\t\t\tinside = inside && inside.id ? inside.id : null;\r\n\t\t\tstr = str.toString();\r\n\t\t\tvar s = this.settings.search,\r\n\t\t\t\ta = s.ajax ? s.ajax : false,\r\n\t\t\t\tm = this._model.data,\r\n\t\t\t\tf = null,\r\n\t\t\t\tr = [],\r\n\t\t\t\tp = [], i, j;\r\n\t\t\tif(this._data.search.res.length && !append) {\r\n\t\t\t\tthis.clear_search();\r\n\t\t\t}\r\n\t\t\tif(show_only_matches === undefined) {\r\n\t\t\t\tshow_only_matches = s.show_only_matches;\r\n\t\t\t}\r\n\t\t\tif(show_only_matches_children === undefined) {\r\n\t\t\t\tshow_only_matches_children = s.show_only_matches_children;\r\n\t\t\t}\r\n\t\t\tif(!skip_async && a !== false) {\r\n\t\t\t\tif($.isFunction(a)) {\r\n\t\t\t\t\treturn a.call(this, str, $.proxy(function (d) {\r\n\t\t\t\t\t\t\tif(d && d.d) { d = d.d; }\r\n\t\t\t\t\t\t\tthis._load_nodes(!$.isArray(d) ? [] : $.vakata.array_unique(d), function () {\r\n\t\t\t\t\t\t\t\tthis.search(str, true, show_only_matches, inside, append, show_only_matches_children);\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}, this), inside);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\ta = $.extend({}, a);\r\n\t\t\t\t\tif(!a.data) { a.data = {}; }\r\n\t\t\t\t\ta.data.str = str;\r\n\t\t\t\t\tif(inside) {\r\n\t\t\t\t\t\ta.data.inside = inside;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (this._data.search.lastRequest) {\r\n\t\t\t\t\t\tthis._data.search.lastRequest.abort();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis._data.search.lastRequest = $.ajax(a)\r\n\t\t\t\t\t\t.fail($.proxy(function () {\r\n\t\t\t\t\t\t\tthis._data.core.last_error = { 'error' : 'ajax', 'plugin' : 'search', 'id' : 'search_01', 'reason' : 'Could not load search parents', 'data' : JSON.stringify(a) };\r\n\t\t\t\t\t\t\tthis.settings.core.error.call(this, this._data.core.last_error);\r\n\t\t\t\t\t\t}, this))\r\n\t\t\t\t\t\t.done($.proxy(function (d) {\r\n\t\t\t\t\t\t\tif(d && d.d) { d = d.d; }\r\n\t\t\t\t\t\t\tthis._load_nodes(!$.isArray(d) ? [] : $.vakata.array_unique(d), function () {\r\n\t\t\t\t\t\t\t\tthis.search(str, true, show_only_matches, inside, append, show_only_matches_children);\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}, this));\r\n\t\t\t\t\treturn this._data.search.lastRequest;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(!append) {\r\n\t\t\t\tthis._data.search.str = str;\r\n\t\t\t\tthis._data.search.dom = $();\r\n\t\t\t\tthis._data.search.res = [];\r\n\t\t\t\tthis._data.search.opn = [];\r\n\t\t\t\tthis._data.search.som = show_only_matches;\r\n\t\t\t\tthis._data.search.smc = show_only_matches_children;\r\n\t\t\t}\r\n\r\n\t\t\tf = new $.vakata.search(str, true, { caseSensitive : s.case_sensitive, fuzzy : s.fuzzy });\r\n\t\t\t$.each(m[inside ? inside : $.jstree.root].children_d, function (ii, i) {\r\n\t\t\t\tvar v = m[i];\r\n\t\t\t\tif(v.text && !v.state.hidden && (!s.search_leaves_only || (v.state.loaded && v.children.length === 0)) && ( (s.search_callback && s.search_callback.call(this, str, v)) || (!s.search_callback && f.search(v.text).isMatch) ) ) {\r\n\t\t\t\t\tr.push(i);\r\n\t\t\t\t\tp = p.concat(v.parents);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tif(r.length) {\r\n\t\t\t\tp = $.vakata.array_unique(p);\r\n\t\t\t\tfor(i = 0, j = p.length; i < j; i++) {\r\n\t\t\t\t\tif(p[i] !== $.jstree.root && m[p[i]] && this.open_node(p[i], null, 0) === true) {\r\n\t\t\t\t\t\tthis._data.search.opn.push(p[i]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif(!append) {\r\n\t\t\t\t\tthis._data.search.dom = $(this.element[0].querySelectorAll('#' + $.map(r, function (v) { return \"0123456789\".indexOf(v[0]) !== -1 ? '\\\\3' + v[0] + ' ' + v.substr(1).replace($.jstree.idregex,'\\\\$&') : v.replace($.jstree.idregex,'\\\\$&'); }).join(', #')));\r\n\t\t\t\t\tthis._data.search.res = r;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis._data.search.dom = this._data.search.dom.add($(this.element[0].querySelectorAll('#' + $.map(r, function (v) { return \"0123456789\".indexOf(v[0]) !== -1 ? '\\\\3' + v[0] + ' ' + v.substr(1).replace($.jstree.idregex,'\\\\$&') : v.replace($.jstree.idregex,'\\\\$&'); }).join(', #'))));\r\n\t\t\t\t\tthis._data.search.res = $.vakata.array_unique(this._data.search.res.concat(r));\r\n\t\t\t\t}\r\n\t\t\t\tthis._data.search.dom.children(\".jstree-anchor\").addClass('jstree-search');\r\n\t\t\t}\r\n\t\t\t/**\r\n\t\t\t * triggered after search is complete\r\n\t\t\t * @event\r\n\t\t\t * @name search.jstree\r\n\t\t\t * @param {jQuery} nodes a jQuery collection of matching nodes\r\n\t\t\t * @param {String} str the search string\r\n\t\t\t * @param {Array} res a collection of objects represeing the matching nodes\r\n\t\t\t * @plugin search\r\n\t\t\t */\r\n\t\t\tthis.trigger('search', { nodes : this._data.search.dom, str : str, res : this._data.search.res, show_only_matches : show_only_matches });\r\n\t\t};\r\n\t\t/**\r\n\t\t * used to clear the last search (removes classes and shows all nodes if filtering is on)\r\n\t\t * @name clear_search()\r\n\t\t * @plugin search\r\n\t\t * @trigger clear_search.jstree\r\n\t\t */\r\n\t\tthis.clear_search = function () {\r\n\t\t\tif(this.settings.search.close_opened_onclear) {\r\n\t\t\t\tthis.close_node(this._data.search.opn, 0);\r\n\t\t\t}\r\n\t\t\t/**\r\n\t\t\t * triggered after search is complete\r\n\t\t\t * @event\r\n\t\t\t * @name clear_search.jstree\r\n\t\t\t * @param {jQuery} nodes a jQuery collection of matching nodes (the result from the last search)\r\n\t\t\t * @param {String} str the search string (the last search string)\r\n\t\t\t * @param {Array} res a collection of objects represeing the matching nodes (the result from the last search)\r\n\t\t\t * @plugin search\r\n\t\t\t */\r\n\t\t\tthis.trigger('clear_search', { 'nodes' : this._data.search.dom, str : this._data.search.str, res : this._data.search.res });\r\n\t\t\tif(this._data.search.res.length) {\r\n\t\t\t\tthis._data.search.dom = $(this.element[0].querySelectorAll('#' + $.map(this._data.search.res, function (v) {\r\n\t\t\t\t\treturn \"0123456789\".indexOf(v[0]) !== -1 ? '\\\\3' + v[0] + ' ' + v.substr(1).replace($.jstree.idregex,'\\\\$&') : v.replace($.jstree.idregex,'\\\\$&');\r\n\t\t\t\t}).join(', #')));\r\n\t\t\t\tthis._data.search.dom.children(\".jstree-anchor\").removeClass(\"jstree-search\");\r\n\t\t\t}\r\n\t\t\tthis._data.search.str = \"\";\r\n\t\t\tthis._data.search.res = [];\r\n\t\t\tthis._data.search.opn = [];\r\n\t\t\tthis._data.search.dom = $();\r\n\t\t};\r\n\r\n\t\tthis.redraw_node = function(obj, deep, callback, force_render) {\r\n\t\t\tobj = parent.redraw_node.apply(this, arguments);\r\n\t\t\tif(obj) {\r\n\t\t\t\tif($.inArray(obj.id, this._data.search.res) !== -1) {\r\n\t\t\t\t\tvar i, j, tmp = null;\r\n\t\t\t\t\tfor(i = 0, j = obj.childNodes.length; i < j; i++) {\r\n\t\t\t\t\t\tif(obj.childNodes[i] && obj.childNodes[i].className && obj.childNodes[i].className.indexOf(\"jstree-anchor\") !== -1) {\r\n\t\t\t\t\t\t\ttmp = obj.childNodes[i];\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(tmp) {\r\n\t\t\t\t\t\ttmp.className += ' jstree-search';\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn obj;\r\n\t\t};\r\n\t};\r\n\r\n\t// helpers\r\n\t(function ($) {\r\n\t\t// from http://kiro.me/projects/fuse.html\r\n\t\t$.vakata.search = function(pattern, txt, options) {\r\n\t\t\toptions = options || {};\r\n\t\t\toptions = $.extend({}, $.vakata.search.defaults, options);\r\n\t\t\tif(options.fuzzy !== false) {\r\n\t\t\t\toptions.fuzzy = true;\r\n\t\t\t}\r\n\t\t\tpattern = options.caseSensitive ? pattern : pattern.toLowerCase();\r\n\t\t\tvar MATCH_LOCATION\t= options.location,\r\n\t\t\t\tMATCH_DISTANCE\t= options.distance,\r\n\t\t\t\tMATCH_THRESHOLD\t= options.threshold,\r\n\t\t\t\tpatternLen = pattern.length,\r\n\t\t\t\tmatchmask, pattern_alphabet, match_bitapScore, search;\r\n\t\t\tif(patternLen > 32) {\r\n\t\t\t\toptions.fuzzy = false;\r\n\t\t\t}\r\n\t\t\tif(options.fuzzy) {\r\n\t\t\t\tmatchmask = 1 << (patternLen - 1);\r\n\t\t\t\tpattern_alphabet = (function () {\r\n\t\t\t\t\tvar mask = {},\r\n\t\t\t\t\t\ti = 0;\r\n\t\t\t\t\tfor (i = 0; i < patternLen; i++) {\r\n\t\t\t\t\t\tmask[pattern.charAt(i)] = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tfor (i = 0; i < patternLen; i++) {\r\n\t\t\t\t\t\tmask[pattern.charAt(i)] |= 1 << (patternLen - i - 1);\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn mask;\r\n\t\t\t\t}());\r\n\t\t\t\tmatch_bitapScore = function (e, x) {\r\n\t\t\t\t\tvar accuracy = e / patternLen,\r\n\t\t\t\t\t\tproximity = Math.abs(MATCH_LOCATION - x);\r\n\t\t\t\t\tif(!MATCH_DISTANCE) {\r\n\t\t\t\t\t\treturn proximity ? 1.0 : accuracy;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn accuracy + (proximity / MATCH_DISTANCE);\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\tsearch = function (text) {\r\n\t\t\t\ttext = options.caseSensitive ? text : text.toLowerCase();\r\n\t\t\t\tif(pattern === text || text.indexOf(pattern) !== -1) {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tisMatch: true,\r\n\t\t\t\t\t\tscore: 0\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tif(!options.fuzzy) {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tisMatch: false,\r\n\t\t\t\t\t\tscore: 1\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tvar i, j,\r\n\t\t\t\t\ttextLen = text.length,\r\n\t\t\t\t\tscoreThreshold = MATCH_THRESHOLD,\r\n\t\t\t\t\tbestLoc = text.indexOf(pattern, MATCH_LOCATION),\r\n\t\t\t\t\tbinMin, binMid,\r\n\t\t\t\t\tbinMax = patternLen + textLen,\r\n\t\t\t\t\tlastRd, start, finish, rd, charMatch,\r\n\t\t\t\t\tscore = 1,\r\n\t\t\t\t\tlocations = [];\r\n\t\t\t\tif (bestLoc !== -1) {\r\n\t\t\t\t\tscoreThreshold = Math.min(match_bitapScore(0, bestLoc), scoreThreshold);\r\n\t\t\t\t\tbestLoc = text.lastIndexOf(pattern, MATCH_LOCATION + patternLen);\r\n\t\t\t\t\tif (bestLoc !== -1) {\r\n\t\t\t\t\t\tscoreThreshold = Math.min(match_bitapScore(0, bestLoc), scoreThreshold);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbestLoc = -1;\r\n\t\t\t\tfor (i = 0; i < patternLen; i++) {\r\n\t\t\t\t\tbinMin = 0;\r\n\t\t\t\t\tbinMid = binMax;\r\n\t\t\t\t\twhile (binMin < binMid) {\r\n\t\t\t\t\t\tif (match_bitapScore(i, MATCH_LOCATION + binMid) <= scoreThreshold) {\r\n\t\t\t\t\t\t\tbinMin = binMid;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tbinMax = binMid;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbinMid = Math.floor((binMax - binMin) / 2 + binMin);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbinMax = binMid;\r\n\t\t\t\t\tstart = Math.max(1, MATCH_LOCATION - binMid + 1);\r\n\t\t\t\t\tfinish = Math.min(MATCH_LOCATION + binMid, textLen) + patternLen;\r\n\t\t\t\t\trd = new Array(finish + 2);\r\n\t\t\t\t\trd[finish + 1] = (1 << i) - 1;\r\n\t\t\t\t\tfor (j = finish; j >= start; j--) {\r\n\t\t\t\t\t\tcharMatch = pattern_alphabet[text.charAt(j - 1)];\r\n\t\t\t\t\t\tif (i === 0) {\r\n\t\t\t\t\t\t\trd[j] = ((rd[j + 1] << 1) | 1) & charMatch;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\trd[j] = ((rd[j + 1] << 1) | 1) & charMatch | (((lastRd[j + 1] | lastRd[j]) << 1) | 1) | lastRd[j + 1];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (rd[j] & matchmask) {\r\n\t\t\t\t\t\t\tscore = match_bitapScore(i, j - 1);\r\n\t\t\t\t\t\t\tif (score <= scoreThreshold) {\r\n\t\t\t\t\t\t\t\tscoreThreshold = score;\r\n\t\t\t\t\t\t\t\tbestLoc = j - 1;\r\n\t\t\t\t\t\t\t\tlocations.push(bestLoc);\r\n\t\t\t\t\t\t\t\tif (bestLoc > MATCH_LOCATION) {\r\n\t\t\t\t\t\t\t\t\tstart = Math.max(1, 2 * MATCH_LOCATION - bestLoc);\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (match_bitapScore(i + 1, MATCH_LOCATION) > scoreThreshold) {\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlastRd = rd;\r\n\t\t\t\t}\r\n\t\t\t\treturn {\r\n\t\t\t\t\tisMatch: bestLoc >= 0,\r\n\t\t\t\t\tscore: score\r\n\t\t\t\t};\r\n\t\t\t};\r\n\t\t\treturn txt === true ? { 'search' : search } : search(txt);\r\n\t\t};\r\n\t\t$.vakata.search.defaults = {\r\n\t\t\tlocation : 0,\r\n\t\t\tdistance : 100,\r\n\t\t\tthreshold : 0.6,\r\n\t\t\tfuzzy : false,\r\n\t\t\tcaseSensitive : false\r\n\t\t};\r\n\t}($));\r\n\r\n\t// include the search plugin by default\r\n\t// $.jstree.defaults.plugins.push(\"search\");\r\n\r\n\treturn $;\r\n\t\r\n});\r\n\ndefine('skylark-widgets-hierarchy/addons/sort',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-browser\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-geom\",\r\n  \"skylark-domx-query\",\r\n  \"../Hierarchy\"\r\n],function(langx,browser,eventer,noder,geom,$,jstree){\r\n\r\n\t\"use strict\";\r\n\r\n\tif($.jstree.plugins.sort) { return; }\r\n\r\n\t/**\r\n\t * the settings function used to sort the nodes.\r\n\t * It is executed in the tree's context, accepts two nodes as arguments and should return `1` or `-1`.\r\n\t * @name $.jstree.defaults.sort\r\n\t * @plugin sort\r\n\t */\r\n\t$.jstree.defaults.sort = function (a, b) {\r\n\t\t//return this.get_type(a) === this.get_type(b) ? (this.get_text(a) > this.get_text(b) ? 1 : -1) : this.get_type(a) >= this.get_type(b);\r\n\t\treturn this.get_text(a) > this.get_text(b) ? 1 : -1;\r\n\t};\r\n\t$.jstree.plugins.sort = function (options, parent) {\r\n\t\tthis.bind = function () {\r\n\t\t\tparent.bind.call(this);\r\n\t\t\tthis.element\r\n\t\t\t\t.on(\"model.jstree\", $.proxy(function (e, data) {\r\n\t\t\t\t\t\tthis.sort(data.parent, true);\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on(\"rename_node.jstree create_node.jstree\", $.proxy(function (e, data) {\r\n\t\t\t\t\t\tthis.sort(data.parent || data.node.parent, false);\r\n\t\t\t\t\t\tthis.redraw_node(data.parent || data.node.parent, true);\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on(\"move_node.jstree copy_node.jstree\", $.proxy(function (e, data) {\r\n\t\t\t\t\t\tthis.sort(data.parent, false);\r\n\t\t\t\t\t\tthis.redraw_node(data.parent, true);\r\n\t\t\t\t\t}, this));\r\n\t\t};\r\n\t\t/**\r\n\t\t * used to sort a node's children\r\n\t\t * @private\r\n\t\t * @name sort(obj [, deep])\r\n\t\t * @param  {mixed} obj the node\r\n\t\t * @param {Boolean} deep if set to `true` nodes are sorted recursively.\r\n\t\t * @plugin sort\r\n\t\t * @trigger search.jstree\r\n\t\t */\r\n\t\tthis.sort = function (obj, deep) {\r\n\t\t\tvar i, j;\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(obj && obj.children && obj.children.length) {\r\n\t\t\t\tobj.children.sort($.proxy(this.settings.sort, this));\r\n\t\t\t\tif(deep) {\r\n\t\t\t\t\tfor(i = 0, j = obj.children_d.length; i < j; i++) {\r\n\t\t\t\t\t\tthis.sort(obj.children_d[i], false);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n\t// include the sort plugin by default\r\n\t// $.jstree.defaults.plugins.push(\"sort\");\r\n\r\n\treturn $;\r\n\t\r\n});\ndefine('skylark-widgets-hierarchy/addons/state',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-browser\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-geom\",\r\n  \"skylark-domx-query\",\r\n  \"../Hierarchy\"\r\n],function(langx,browser,eventer,noder,geom,$,jstree){\r\n\r\n\t\"use strict\";\r\n\r\n\tif($.jstree.plugins.state) { return; }\r\n\r\n\tvar to = false;\r\n\t/**\r\n\t * stores all defaults for the state plugin\r\n\t * @name $.jstree.defaults.state\r\n\t * @plugin state\r\n\t */\r\n\t$.jstree.defaults.state = {\r\n\t\t/**\r\n\t\t * A string for the key to use when saving the current tree (change if using multiple trees in your project). Defaults to `jstree`.\r\n\t\t * @name $.jstree.defaults.state.key\r\n\t\t * @plugin state\r\n\t\t */\r\n\t\tkey\t\t: 'jstree',\r\n\t\t/**\r\n\t\t * A space separated list of events that trigger a state save. Defaults to `changed.jstree open_node.jstree close_node.jstree`.\r\n\t\t * @name $.jstree.defaults.state.events\r\n\t\t * @plugin state\r\n\t\t */\r\n\t\tevents\t: 'changed.jstree open_node.jstree close_node.jstree check_node.jstree uncheck_node.jstree',\r\n\t\t/**\r\n\t\t * Time in milliseconds after which the state will expire. Defaults to 'false' meaning - no expire.\r\n\t\t * @name $.jstree.defaults.state.ttl\r\n\t\t * @plugin state\r\n\t\t */\r\n\t\tttl\t\t: false,\r\n\t\t/**\r\n\t\t * A function that will be executed prior to restoring state with one argument - the state object. Can be used to clear unwanted parts of the state.\r\n\t\t * @name $.jstree.defaults.state.filter\r\n\t\t * @plugin state\r\n\t\t */\r\n\t\tfilter\t: false,\r\n\t\t/**\r\n\t\t * Should loaded nodes be restored (setting this to true means that it is possible that the whole tree will be loaded for some users - use with caution). Defaults to `false`\r\n\t\t * @name $.jstree.defaults.state.preserve_loaded\r\n\t\t * @plugin state\r\n\t\t */\r\n\t\tpreserve_loaded : false\r\n\t};\r\n\t$.jstree.plugins.state = function (options, parent) {\r\n\t\tthis.bind = function () {\r\n\t\t\tparent.bind.call(this);\r\n\t\t\tvar bind = $.proxy(function () {\r\n\t\t\t\tthis.element.on(this.settings.state.events, $.proxy(function () {\r\n\t\t\t\t\tif(to) { clearTimeout(to); }\r\n\t\t\t\t\tto = setTimeout($.proxy(function () { this.save_state(); }, this), 100);\r\n\t\t\t\t}, this));\r\n\t\t\t\t/**\r\n\t\t\t\t * triggered when the state plugin is finished restoring the state (and immediately after ready if there is no state to restore).\r\n\t\t\t\t * @event\r\n\t\t\t\t * @name state_ready.jstree\r\n\t\t\t\t * @plugin state\r\n\t\t\t\t */\r\n\t\t\t\tthis.trigger('state_ready');\r\n\t\t\t}, this);\r\n\t\t\tthis.element\r\n\t\t\t\t.on(\"ready.jstree\", $.proxy(function (e, data) {\r\n\t\t\t\t\t\tthis.element.one(\"restore_state.jstree\", bind);\r\n\t\t\t\t\t\tif(!this.restore_state()) { bind(); }\r\n\t\t\t\t\t}, this));\r\n\t\t};\r\n\t\t/**\r\n\t\t * save the state\r\n\t\t * @name save_state()\r\n\t\t * @plugin state\r\n\t\t */\r\n\t\tthis.save_state = function () {\r\n\t\t\tvar tm = this.get_state();\r\n\t\t\tif (!this.settings.state.preserve_loaded) {\r\n\t\t\t\tdelete tm.core.loaded;\r\n\t\t\t}\r\n\t\t\tvar st = { 'state' : tm, 'ttl' : this.settings.state.ttl, 'sec' : +(new Date()) };\r\n\t\t\t$.vakata.storage.set(this.settings.state.key, JSON.stringify(st));\r\n\t\t};\r\n\t\t/**\r\n\t\t * restore the state from the user's computer\r\n\t\t * @name restore_state()\r\n\t\t * @plugin state\r\n\t\t */\r\n\t\tthis.restore_state = function () {\r\n\t\t\tvar k = $.vakata.storage.get(this.settings.state.key);\r\n\t\t\tif(!!k) { try { k = JSON.parse(k); } catch(ex) { return false; } }\r\n\t\t\tif(!!k && k.ttl && k.sec && +(new Date()) - k.sec > k.ttl) { return false; }\r\n\t\t\tif(!!k && k.state) { k = k.state; }\r\n\t\t\tif(!!k && $.isFunction(this.settings.state.filter)) { k = this.settings.state.filter.call(this, k); }\r\n\t\t\tif(!!k) {\r\n\t\t\t\tif (!this.settings.state.preserve_loaded) {\r\n\t\t\t\t\tdelete k.core.loaded;\r\n\t\t\t\t}\r\n\t\t\t\tthis.element.one(\"set_state.jstree\", function (e, data) { data.instance.trigger('restore_state', { 'state' : $.extend(true, {}, k) }); });\r\n\t\t\t\tthis.set_state(k);\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t};\r\n\t\t/**\r\n\t\t * clear the state on the user's computer\r\n\t\t * @name clear_state()\r\n\t\t * @plugin state\r\n\t\t */\r\n\t\tthis.clear_state = function () {\r\n\t\t\treturn $.vakata.storage.del(this.settings.state.key);\r\n\t\t};\r\n\t};\r\n\r\n\t(function ($, undefined) {\r\n\t\t$.vakata.storage = {\r\n\t\t\t// simply specifying the functions in FF throws an error\r\n\t\t\tset : function (key, val) { return window.localStorage.setItem(key, val); },\r\n\t\t\tget : function (key) { return window.localStorage.getItem(key); },\r\n\t\t\tdel : function (key) { return window.localStorage.removeItem(key); }\r\n\t\t};\r\n\t}($));\r\n\r\n\t// include the state plugin by default\r\n\t// $.jstree.defaults.plugins.push(\"state\");\r\n\r\n\treturn $;\r\n\t\r\n});\ndefine('skylark-widgets-hierarchy/addons/treegrid',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-browser\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-geom\",\r\n  \"skylark-domx-query\",\r\n  \"./menu\",\r\n  \"../Hierarchy\"\r\n],function(langx,browser,eventer,noder,geom,$,menu,jstree){\r\n    var BLANKRE = /^\\s*$/g,\r\n        IDREGEX = /[\\\\:&!^|()\\[\\]<>@*'+~#\";,= \\/${}%]/g,\r\n        escapeId = function(id) {\r\n            return (id || \"\").replace(IDREGEX, '\\\\$&');\r\n        },\r\n        NODE_DATA_ATTR = \"data-jstreegrid\",\r\n        COL_DATA_ATTR = \"data-jstreegrid-column\",\r\n        SEARCHCLASS = \"jstree-search\",\r\n        SPECIAL_TITLE = \"_DATA_\",\r\n        LEVELINDENT = 24,\r\n        styled = false,\r\n        MINCOLWIDTH = 10,\r\n        generateCellId = function(tree, id) {\r\n            return (\"jstree_\" + tree + \"_grid_\" + escapeId(id) + \"_col\");\r\n        },\r\n        getIds = function(nodes) {\r\n            return $.makeArray(nodes.map(function() {\r\n                return this.id;\r\n            }));\r\n        },\r\n        findDataCell = function(uniq, ids, col, scope) {\r\n            if (scope == undefined) {\r\n                scope = $();\r\n            };\r\n            if (ids === null || ids === undefined || ids.length === 0) {\r\n                return scope;\r\n            }\r\n            var ret = $(),\r\n                columns = [].concat(col),\r\n                cellId;\r\n            if (typeof(ids) === \"string\") {\r\n                cellId = generateCellId(uniq, ids);\r\n                ret = columns.map(function(col) {\r\n                    return \"#\" + cellId + col;\r\n                }).join(\", \");\r\n            } else {\r\n                ret = []\r\n                ids.forEach(function(elm, i) {\r\n                    var cellId = generateCellId(uniq, elm);\r\n                    ret = ret.concat(columns.map(function(col) {\r\n                        return \"#\" + cellId + col;\r\n                    }));\r\n                });\r\n                ret = ret.join(\", \");\r\n            }\r\n            return columns.length == 1 ? scope.find(ret) : $(ret);\r\n        },\r\n        isClickedSep = false,\r\n        toResize = null,\r\n        oldMouseX = 0,\r\n        newMouseX = 0,\r\n\r\n        /*jslint regexp:true */\r\n        htmlstripre = /<\\/?[^>]+>/gi,\r\n        /*jslint regexp:false */\r\n\r\n        getIndent = function(node, tree) {\r\n            var div, i, li, width;\r\n\r\n            // did we already save it for this tree?\r\n            tree._gridSettings = tree._gridSettings || {};\r\n            if (tree._gridSettings.indent > 0) {\r\n                width = tree._gridSettings.indent;\r\n            } else {\r\n                // create a new div on the DOM but not visible on the page\r\n                div = $(\"<div></div>\");\r\n                i = node.prev(\"i\");\r\n                li = i.parent();\r\n                // add to that div all of the classes on the tree root\r\n                div.addClass(tree.get_node(\"#\", true).attr(\"class\"));\r\n\r\n                // move the li to the temporary div root\r\n                li.appendTo(div);\r\n\r\n                // attach to the body quickly\r\n                div.appendTo($(\"body\"));\r\n\r\n                // get the width\r\n                width = i.width() || LEVELINDENT;\r\n\r\n                // detach the li from the new div and destroy the new div\r\n                li.detach();\r\n                div.remove();\r\n\r\n                // save it for the future\r\n                tree._gridSettings.indent = width;\r\n            }\r\n\r\n\r\n            return (width);\r\n\r\n        },\r\n\r\n        copyData = function(fromtree, from, totree, to, recurse) {\r\n            var i, j;\r\n            to.data = $.extend(true, {}, from.data);\r\n            if (from && from.children_d && recurse) {\r\n                for (i = 0, j = from.children_d.length; i < j; i++) {\r\n                    copyData(fromtree, fromtree.get_node(from.children_d[i]), totree, totree.get_node(to.children_d[i]), recurse);\r\n                }\r\n            }\r\n        },\r\n\r\n        findLastClosedNode = function(tree, id) {\r\n            // first get our node\r\n            var ret, node = tree.get_node(id),\r\n                children = node.children;\r\n            // is it closed?\r\n            if (!children || children.length <= 0 || !node.state.opened) {\r\n                ret = id;\r\n            } else {\r\n                ret = findLastClosedNode(tree, children[children.length - 1]);\r\n            }\r\n            return (ret);\r\n        },\r\n\r\n        renderAWidth = function(node, tree) {\r\n            var depth, width,\r\n                fullWidth = parseInt(tree.settings.grid.columns[0].width, 10) + parseInt(tree._gridSettings.treeWidthDiff, 10);\r\n            // need to use a selector in jquery 1.4.4+\r\n            depth = tree.get_node(node).parents.length;\r\n            width = fullWidth - depth * getIndent(node, tree);\r\n            // the following line is no longer needed, since we are doing this inside a <td>\r\n            //a.css({\"vertical-align\": \"top\", \"overflow\":\"hidden\"});\r\n            return (fullWidth);\r\n        },\r\n        renderATitle = function(node, t, tree) {\r\n            var a = node.hasClass(\"jstree-anchor\") ? node : node.children(\"[class~='jstree-anchor']\"),\r\n                title, col = tree.settings.grid.columns[0];\r\n            // get the title\r\n            title = \"\";\r\n            if (col.title) {\r\n                if (col.title === SPECIAL_TITLE) {\r\n                    title = tree.get_text(t);\r\n                } else if (t.attr(col.title)) {\r\n                    title = t.attr(col.title);\r\n                }\r\n            }\r\n            // strip out HTML\r\n            title = title.replace(htmlstripre, '');\r\n            if (title) {\r\n                a.attr(\"title\", title);\r\n            }\r\n        },\r\n        getCellData = function(value, data) {\r\n            var val;\r\n            // get the contents of the cell - value could be a string or a function\r\n            if (value !== undefined && value !== null) {\r\n                if (typeof(value) === \"function\") {\r\n                    val = value(data);\r\n                } else if (data.data !== null && data.data !== undefined && data.data[value] !== undefined) {\r\n                    val = data.data[value];\r\n                } else {\r\n                    val = \"\";\r\n                }\r\n            } else {\r\n                val = \"\";\r\n            }\r\n            return val;\r\n        };\r\n\r\n    $.jstree.defaults.grid = {\r\n        width: 'auto'\r\n    };\r\n\r\n    $.jstree.plugins.grid = function(options, parent) {\r\n        this._initialize = function() {\r\n            if (!this._initialized) {\r\n                var s = this.settings.grid || {},\r\n                    styles, container = this.element,\r\n                    i,\r\n                    gs = this._gridSettings = {\r\n                        columns: s.columns || [],\r\n                        treeClass: \"jstree-grid-col-0\",\r\n                        context: s.contextmenu || false,\r\n                        columnWidth: s.columnWidth,\r\n                        defaultConf: {\r\n                            \"*display\": \"inline\",\r\n                            \"*+display\": \"inline\"\r\n                        },\r\n                        isThemeroller: !!this._data.themeroller,\r\n                        treeWidthDiff: 0,\r\n                        resizable: s.resizable,\r\n                        draggable: s.draggable,\r\n                        stateful: s.stateful,\r\n                        indent: 0,\r\n                        sortOrder: 'text',\r\n                        sortAsc: true,\r\n                        caseInsensitive: s.caseInsensitive,\r\n                        fixedHeader: s.fixedHeader !== false,\r\n                        width: s.width,\r\n                        height: s.height,\r\n                        gridcontextmenu: s.gridcontextmenu,\r\n                        treecol: 0,\r\n                        gridcols: []\r\n                    },\r\n                    cols = gs.columns,\r\n                    treecol = 0,\r\n                    columnSearch = false;\r\n                if (gs.gridcontextmenu === true) {\r\n                    gs.gridcontextmenu = function(grid, tree, node, val, col, t, target) {\r\n                        return {\r\n                            \"edit\": {\r\n                                label: \"Edit\",\r\n                                \"action\": function(data) {\r\n                                    var obj = t.get_node(node);\r\n                                    grid._edit(obj, col, target);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                } else if (gs.gridcontextmenu === false) {\r\n                    gs.gridcontextmenu = false;\r\n                }\r\n                // find which column our tree shuld go in\r\n                for (var i = 0, len = s.columns.length; i < len; i++) {\r\n                    if (s.columns[i].tree) {\r\n                        // save which column it was\r\n                        treecol = i;\r\n                        gs.treecol = treecol;\r\n                    } else {\r\n                        gs.gridcols.push(i);\r\n                    }\r\n                }\r\n                // set a unique ID for this table\r\n                this.uniq = Math.ceil(Math.random() * 1000);\r\n                this.rootid = container.attr(\"id\");\r\n\r\n                var msie = /msie/.test(navigator.userAgent.toLowerCase());\r\n                if (msie) {\r\n                    var version = parseFloat(navigator.appVersion.split(\"MSIE\")[1]);\r\n                    if (version < 8) {\r\n                        gs.defaultConf.display = \"inline\";\r\n                        gs.defaultConf.zoom = \"1\";\r\n                    }\r\n                }\r\n\r\n                // set up the classes we need\r\n                if (!styled) {\r\n                    styled = true;\r\n                    styles = [\r\n                        '.jstree-grid-cell {vertical-align: top; overflow:hidden;margin-left:0;position:relative;width: 100%;padding-left:7px;white-space: nowrap;}',\r\n                        '.jstree-grid-cell span {margin-right:0px;margin-right:0px;*display:inline;*+display:inline;white-space: nowrap;}',\r\n                        '.jstree-grid-separator {position:absolute; top:0; right:0; height:24px; margin-left: -2px; border-width: 0 2px 0 0; *display:inline; *+display:inline; margin-right:0px;width:0px;}',\r\n                        '.jstree-grid-header-cell {overflow: hidden; white-space: nowrap;padding: 1px 3px 2px 5px; cursor: default;}',\r\n                        '.jstree-grid-header-themeroller {border: 0; padding: 1px 3px;}',\r\n                        '.jstree-grid-header-regular {position:relative; background-color: #EBF3FD; z-index: 1;}',\r\n                        '.jstree-grid-hidden {display: none;}',\r\n                        '.jstree-grid-resizable-separator {cursor: col-resize; width: 2px;}',\r\n                        '.jstree-grid-separator-regular {border-color: #d0d0d0; border-style: solid;}',\r\n                        '.jstree-grid-cell-themeroller {border: none !important; background: transparent !important;}',\r\n                        '.jstree-grid-wrapper {table-layout: fixed; width: 100%; overflow: auto; position: relative;}',\r\n                        '.jstree-grid-midwrapper {display: table-row;}',\r\n                        '.jstree-grid-width-auto {width:auto;display:block;}',\r\n                        '.jstree-grid-column {display: table-cell; overflow: hidden;}',\r\n                        '.jstree-grid-ellipsis {text-overflow: ellipsis;}',\r\n                        '.jstree-grid-col-0 {width: 100%;}'\r\n                    ];\r\n                    $('<style type=\"text/css\">' + styles.join(\"\\n\") + '</style>').appendTo(\"head\");\r\n                }\r\n                this.gridWrapper = $(\"<div></div>\").addClass(\"jstree-grid-wrapper\").insertAfter(container);\r\n                this.midWrapper = $(\"<div></div>\").addClass(\"jstree-grid-midwrapper\").appendTo(this.gridWrapper);\r\n                // set the wrapper width\r\n                if (s.width) {\r\n                    this.gridWrapper.width(s.width);\r\n                }\r\n                if (s.height) {\r\n                    this.gridWrapper.height(s.height);\r\n                }\r\n                // create the data columns\r\n                for (var i = 0, len = cols.length; i < len; i++) {\r\n                    // create the column\r\n                    $(\"<div></div>\").addClass(\"jstree-default jstree-grid-column jstree-grid-column-\" + i + \" jstree-grid-column-root-\" + this.rootid).appendTo(this.midWrapper);\r\n                }\r\n                this.midWrapper.children(\"div:eq(\" + treecol + \")\").append(container);\r\n                container.addClass(\"jstree-grid-cell\");\r\n\r\n                //move header with scroll\r\n                if (gs.fixedHeader) {\r\n                    this.gridWrapper.scroll(function() {\r\n                        $(this).find('.jstree-grid-header').css('top', $(this).scrollTop());\r\n                    });\r\n                }\r\n\r\n                // copy original sort function\r\n                var defaultSort = $.proxy(this.settings.sort, this);\r\n\r\n                // override sort function\r\n                this.settings.sort = function(a, b) {\r\n                    var bigger, colrefs = this.colrefs;\r\n\r\n                    if (gs.sortOrder === 'text') {\r\n                        var caseInsensitiveSort = this.get_text(a).toLowerCase().localeCompare(this.get_text(b).toLowerCase());\r\n                        bigger = gs.caseInsensitive ? (caseInsensitiveSort === 1) : (defaultSort(a, b) === 1);\r\n                    } else {\r\n                        // gs.sortOrder just refers to the unique random name for this column\r\n                        // we need to get the correct value\r\n                        var nodeA = this.get_node(a),\r\n                            nodeB = this.get_node(b),\r\n                            value = colrefs[gs.sortOrder].value,\r\n                            valueA = typeof(value) === 'function' ? value(nodeA) : nodeA.data[value],\r\n                            valueB = typeof(value) === 'function' ? value(nodeB) : nodeB.data[value];\r\n                        if (typeof(valueA) && typeof(valueB) !== 'undefined') {\r\n                            bigger = gs.caseInsensitive ? valueA.toLowerCase() > valueB.toLowerCase() : valueA > valueB;\r\n                        }\r\n                    }\r\n\r\n                    if (!gs.sortAsc)\r\n                        bigger = !bigger;\r\n\r\n                    return bigger ? 1 : -1;\r\n                };\r\n\r\n                // sortable columns when jQuery UI is available\r\n                if (gs.draggable) {\r\n                    if (!$.ui || !$.ui.sortable) {\r\n                        console.warn('[jstree-grid] draggable option requires jQuery UI');\r\n                    } else {\r\n                        var from, to;\r\n\r\n                        $(this.midWrapper).sortable({\r\n                            axis: \"x\",\r\n                            handle: \".jstree-grid-header\",\r\n                            cancel: \".jstree-grid-separator\",\r\n                            start: function(event, ui) {\r\n                                from = ui.item.index();\r\n                            },\r\n                            stop: function(event, ui) {\r\n                                to = ui.item.index();\r\n                                gs.columns.splice(to, 0, gs.columns.splice(from, 1)[0]);\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n\r\n                //public function. validate searchObject keys, set columnSearch flag, calls jstree search and reset columnSearch flag\r\n                this.searchColumn = function(searchObj) {\r\n                    var validatedSearchObj = {};\r\n\r\n                    if (typeof searchObj == 'object') {\r\n                        for (var columnIndex in searchObj) {\r\n                            if (searchObj.hasOwnProperty(columnIndex)) {\r\n                                // keys should be the index of a column. This means the following:\r\n                                // only integers and smaller than the number of columns and bigger or equal to 0\r\n                                // (possilbe idea for in the future: ability to set key as a more human readable term like the column header and then map it here to an index)\r\n                                if (columnIndex % 1 === 0 && columnIndex < cols.length && columnIndex >= 0) {\r\n                                    validatedSearchObj[columnIndex] = searchObj[columnIndex];\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    columnSearch = validatedSearchObj;\r\n\r\n                    if (Object.keys(validatedSearchObj).length !== 0) {\r\n                        //the search string doesn't matter. we'll use the search string in the columnSearch object!\r\n                        this.search('someValue');\r\n                    } else { // nothing to search so reset jstree's search by passing an empty string\r\n                        this.search('');\r\n                    }\r\n                    columnSearch = false;\r\n                }\r\n\r\n\r\n                // set default search for each column with no user defined search function (used when doing a columnSearch)\r\n                for (var i = 0, len = cols.length; i < len; i++) {\r\n                    var column = cols[i];\r\n                    if (typeof(column.search_callback) !== \"function\") {\r\n                        // no search callback so set default function\r\n                        column.search_callback = function(str, columnValue, node, column) {\r\n                            var f = new $.vakata.search(str, true, {\r\n                                caseSensitive: searchSettings.case_sensitive,\r\n                                fuzzy: searchSettings.fuzzy\r\n                            });\r\n\r\n                            return f.search(columnValue).isMatch;\r\n\r\n                        };\r\n                    }\r\n                }\r\n\r\n                // if there was no overridden search_callback, we will provide it\r\n                // it will use the default per-node search algorithm, augmented by searching our data nodes\r\n                var searchSettings = this.settings.search;\r\n                var omniSearchCallback = searchSettings.search_callback;\r\n\r\n                if (!omniSearchCallback) {\r\n                    omniSearchCallback = function(str, node) {\r\n                        var i, f = new $.vakata.search(str, true, {\r\n                                caseSensitive: searchSettings.case_sensitive,\r\n                                fuzzy: searchSettings.fuzzy\r\n                            }),\r\n                            matched = f.search(node.text).isMatch,\r\n                            col;\r\n\r\n                        // only bother looking in each cell if it was not yet matched\r\n                        if (!matched) {\r\n                            for (var i = 0, len = cols.length; i < len; i++) {\r\n                                if (treecol === i) {\r\n                                    continue;\r\n                                }\r\n                                col = cols[i];\r\n                                matched = f.search(getCellData(col.value, node)).isMatch;\r\n                                if (matched) {\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                        return matched;\r\n                    }\r\n                }\r\n\r\n                searchSettings.search_callback = function(str, node) {\r\n                    var matched = false;\r\n                    if (columnSearch) {\r\n                        //using logical AND for column searches (more options in the future)\r\n                        for (var columnIndex in columnSearch) {\r\n                            if (columnSearch.hasOwnProperty(columnIndex)) {\r\n                                var searchValue = columnSearch[columnIndex];\r\n                                if (searchValue == '') {\r\n                                    continue;\r\n                                }\r\n                                var col = cols[columnIndex];\r\n                                if (treecol == columnIndex) {\r\n                                    matched = col.search_callback(searchValue, node.text, node, col)\r\n                                } else {\r\n                                    matched = col.search_callback(searchValue, getCellData(col.value, node), node, col)\r\n                                }\r\n\r\n                                if (!matched) {\r\n                                    break; //found one that didn't match\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        container.trigger(\"columnSearch_grid.jstree\");\r\n                    } else {\r\n                        matched = omniSearchCallback(str, node);\r\n                        container.trigger(\"omniSearch_grid.jstree\");\r\n                    }\r\n                    return matched;\r\n                };\r\n                this._initialized = true;\r\n            }\r\n        };\r\n        this.init = function(el, options) {\r\n            parent.init.call(this, el, options);\r\n            this._initialize();\r\n        };\r\n        this.bind = function() {\r\n            parent.bind.call(this);\r\n            this._initialize();\r\n            this.element\r\n                .on(\"move_node.jstree create_node.jstree clean_node.jstree change_node.jstree\", $.proxy(function(e, data) {\r\n                    var target = this.get_node(data || \"#\", true);\r\n                    var id = _guid();\r\n                    this._detachColumns(id);\r\n                    this._prepare_grid(target);\r\n                    this._reattachColumns(id);\r\n                }, this))\r\n                .on(\"delete_node.jstree\", $.proxy(function(e, data) {\r\n                    if (data.node.id !== undefined) {\r\n                        var grid = this.gridWrapper,\r\n                            removeNodes = [data.node.id],\r\n                            i;\r\n                        // add children to remove list\r\n                        if (data.node && data.node.children_d) {\r\n                            removeNodes = removeNodes.concat(data.node.children_d);\r\n                        }\r\n                        findDataCell(this.uniq, removeNodes, this._gridSettings.gridcols).remove();\r\n                    }\r\n                }, this))\r\n                .on(\"show_node.jstree\", $.proxy(function(e, data) {\r\n                    this._hideOrShowTree(data.node, false);\r\n                }, this))\r\n                .on(\"hide_node.jstree\", $.proxy(function(e, data) {\r\n                    this._hideOrShowTree(data.node, true);\r\n                }, this))\r\n                .on(\"close_node.jstree\", $.proxy(function(e, data) {\r\n                    this._hide_grid(data.node);\r\n                }, this))\r\n                .on(\"open_node.jstree\", $.proxy(function(e, data) {}, this))\r\n                .on(\"load_node.jstree\", $.proxy(function(e, data) {}, this))\r\n                .on(\"loaded.jstree\", $.proxy(function(e) {\r\n                    this._prepare_headers();\r\n                    this.element.trigger(\"loaded_grid.jstree\");\r\n                }, this))\r\n                .on(\"ready.jstree\", $.proxy(function(e, data) {\r\n                    // find the line-height of the first known node\r\n                    var anchorHeight = this.element.find(\"[class~='jstree-anchor']:first\").outerHeight(),\r\n                        q,\r\n                        cls = this.element.attr(\"class\") || \"\";\r\n                    $('<style type=\"text/css\">div.jstree-grid-cell-root-' + this.rootid + ' {line-height: ' + anchorHeight + 'px; height: ' + anchorHeight + 'px;}</style>').appendTo(\"head\");\r\n\r\n                    // add container classes to the wrapper - EXCEPT those that are added by jstree, i.e. \"jstree\" and \"jstree-*\"\r\n                    q = cls.split(/\\s+/).map(function(i) {\r\n                        var match = i.match(/^jstree(-|$)/);\r\n                        return (match ? \"\" : i);\r\n                    });\r\n                    this.gridWrapper.addClass(q.join(\" \"));\r\n\r\n                }, this))\r\n                .on(\"move_node.jstree\", $.proxy(function(e, data) {\r\n                    var node = data.new_instance.element;\r\n                    //renderAWidth(node,this);\r\n                    // check all the children, because we could drag a tree over\r\n                    node.find(\"li > a\").each($.proxy(function(i, elm) {\r\n                        //renderAWidth($(elm),this);\r\n                    }, this));\r\n\r\n                }, this))\r\n                .on(\"hover_node.jstree\", $.proxy(function(node, selected, event) {\r\n                    var id = selected.node.id;\r\n                    if (this._hover_node !== null && this._hover_node !== undefined) {\r\n                        findDataCell(this.uniq, this._hover_node, this._gridSettings.gridcols).removeClass(\"jstree-hovered\");\r\n                    }\r\n                    this._hover_node = id;\r\n                    findDataCell(this.uniq, id, this._gridSettings.gridcols).addClass(\"jstree-hovered\");\r\n                }, this))\r\n                .on(\"dehover_node.jstree\", $.proxy(function(node, selected, event) {\r\n                    var id = selected.node.id;\r\n                    this._hover_node = null;\r\n                    findDataCell(this.uniq, id, this._gridSettings.gridcols).removeClass(\"jstree-hovered\");\r\n                }, this))\r\n                .on(\"select_node.jstree\", $.proxy(function(node, selected, event) {\r\n                    var id = selected.node.id;\r\n                    findDataCell(this.uniq, id, this._gridSettings.gridcols).addClass(\"jstree-clicked\");\r\n                    this.get_node(selected.node.id, true).children(\"div.jstree-grid-cell\").addClass(\"jstree-clicked\");\r\n                }, this))\r\n                .on(\"deselect_node.jstree\", $.proxy(function(node, selected, event) {\r\n                    var id = selected.node.id;\r\n                    findDataCell(this.uniq, id, this._gridSettings.gridcols).removeClass(\"jstree-clicked\");\r\n                }, this))\r\n                .on(\"deselect_all.jstree\", $.proxy(function(node, selected, event) {\r\n                    // get all of the ids that were unselected\r\n                    var ids = selected.node || [],\r\n                        i;\r\n                    findDataCell(this.uniq, ids, this._gridSettings.gridcols).removeClass(\"jstree-clicked\");\r\n                }, this))\r\n                .on(\"search.jstree\", $.proxy(function(e, data) {\r\n                    // search sometimes filters, so we need to hide all of the appropriate grid cells as well, and show only the matches\r\n                    var grid = this.gridWrapper,\r\n                        that = this,\r\n                        nodesToShow, startTime = new Date().getTime(),\r\n                        ids = getIds(data.nodes.filter(\".jstree-node\")),\r\n                        endTime;\r\n                    this.holdingCells = {};\r\n                    if (data.nodes.length) {\r\n                        var id = _guid();\r\n                        // save the cells we will hide\r\n                        var cells = grid.find('div.jstree-grid-cell-regular');\r\n                        this._detachColumns(id);\r\n                        if (this._data.search.som) {\r\n                            // create the list of nodes we want to look at\r\n                            if (this._data.search.smc) {\r\n                                nodesToShow = data.nodes.add(data.nodes.find('.jstree-node'));\r\n                            }\r\n                            nodesToShow = (nodesToShow || data.nodes).add(data.nodes.parentsUntil(\".jstree\"));\r\n\r\n                            // hide all of the grid cells\r\n                            cells.hide();\r\n                            // show only those that match\r\n                            nodesToShow.filter(\".jstree-node\").each(function(i, node) {\r\n                                var id = node.id;\r\n                                if (id) {\r\n                                    that._prepare_grid(node);\r\n                                    for (var i = 0, len = that._gridSettings.gridcols.length; i < len; i++) {\r\n                                        if (i === that._gridSettings.treecol) {\r\n                                            continue;\r\n                                        }\r\n                                        findDataCell(that.uniq, id, that._gridSettings.gridcols[i], $(that._domManipulation.columns[i])).show();\r\n                                    }\r\n                                }\r\n                            });\r\n                        }\r\n\r\n                        for (var i = 0, len = this._gridSettings.gridcols.length; i < len; i++) {\r\n                            if (i === this._gridSettings.treecol) {\r\n                                continue;\r\n                            }\r\n                            findDataCell(that.uniq, ids, this._gridSettings.gridcols[i], $(this._domManipulation.columns[i])).addClass(SEARCHCLASS);\r\n                        }\r\n                        this._reattachColumns(id);\r\n                        endTime = new Date().getTime();\r\n                        this.element.trigger(\"search-complete.jstree-grid\", [{\r\n                            time: endTime - startTime\r\n                        }]);\r\n                    }\r\n                    return true;\r\n                }, this))\r\n                .on(\"clear_search.jstree\", $.proxy(function(e, data) {\r\n                    // search has been cleared, so we need to show all rows\r\n                    var grid = this.gridWrapper,\r\n                        ids = getIds(data.nodes.filter(\".jstree-node\"));\r\n                    grid.find('div.jstree-grid-cell').show();\r\n                    findDataCell(this.uniq, ids, this._gridSettings.gridcols).removeClass(SEARCHCLASS);\r\n                    return true;\r\n                }, this))\r\n                .on(\"copy_node.jstree\", function(e, data) {\r\n                    var newtree = data.new_instance,\r\n                        oldtree = data.old_instance,\r\n                        obj = newtree.get_node(data.node, true);\r\n                    copyData(oldtree, data.original, newtree, data.node, true);\r\n                    newtree._detachColumns(obj.id);\r\n                    newtree._prepare_grid(obj);\r\n                    newtree._reattachColumns(obj.id);\r\n                    return true;\r\n                })\r\n                .on(\"show_ellipsis.jstree\", $.proxy(function(e, data) {\r\n                    this.gridWrapper.find(\".jstree-grid-cell\").add(\".jstree-grid-header\", this.gridWrapper).addClass(\"jstree-grid-ellipsis\");\r\n                    return true;\r\n                }, this))\r\n                .on(\"hide_ellipsis.jstree\", $.proxy(function(e, data) {\r\n                    this.gridWrapper.find(\".jstree-grid-cell\").add(\".jstree-grid-header\", this.gridWrapper).removeClass(\"jstree-grid-ellipsis\");\r\n                    return true;\r\n                }, this));\r\n            if (this._gridSettings.isThemeroller) {\r\n                this.element\r\n                    .on(\"select_node.jstree\", $.proxy(function(e, data) {\r\n                        data.rslt.obj.children(\"[class~='jstree-anchor']\").nextAll(\"div\").addClass(\"ui-state-active\");\r\n                    }, this))\r\n                    .on(\"deselect_node.jstree deselect_all.jstree\", $.proxy(function(e, data) {\r\n                        data.rslt.obj.children(\"[class~='jstree-anchor']\").nextAll(\"div\").removeClass(\"ui-state-active\");\r\n                    }, this))\r\n                    .on(\"hover_node.jstree\", $.proxy(function(e, data) {\r\n                        data.rslt.obj.children(\"[class~='jstree-anchor']\").nextAll(\"div\").addClass(\"ui-state-hover\");\r\n                    }, this))\r\n                    .on(\"dehover_node.jstree\", $.proxy(function(e, data) {\r\n                        data.rslt.obj.children(\"[class~='jstree-anchor']\").nextAll(\"div\").removeClass(\"ui-state-hover\");\r\n                    }, this));\r\n            }\r\n\r\n            if (this._gridSettings.stateful) {\r\n                this.element\r\n                    .on(\"resize_column.jstree-grid\", $.proxy(function(e, col, width) {\r\n                        localStorage['jstree-root-' + this.rootid + '-column-' + col] = width;\r\n                    }, this));\r\n            }\r\n        };\r\n\r\n        // tear down the tree entirely\r\n        this.teardown = function() {\r\n            var gw = this.gridWrapper,\r\n                container = this.element,\r\n                gridparent = gw.parent();\r\n            container.detach();\r\n            gw.remove();\r\n            gridparent.append(container);\r\n            parent.teardown.call(this);\r\n        };\r\n        // clean the grid in case of redraw or refresh entire tree\r\n        this._clean_grid = function(target, id) {\r\n            var grid = this.gridWrapper;\r\n            if (target) {\r\n                findDataCell(this.uniq, id, this._gridSettings.gridcols).remove();\r\n            } else {\r\n                // get all of the `div` children in all of the `td` in dataRow except for :first (that is the tree itself) and remove\r\n                grid.find(\"div.jstree-grid-cell-regular\").remove();\r\n            }\r\n        };\r\n        // prepare the headers\r\n        this._prepare_headers = function() {\r\n            var header, i, col, _this = this,\r\n                gs = this._gridSettings,\r\n                cols = gs.columns || [],\r\n                width, defaultWidth = gs.columnWidth,\r\n                resizable = gs.resizable || false,\r\n                cl, ccl, val, name, last, tr = gs.isThemeroller,\r\n                classAdd = (tr ? \"themeroller\" : \"regular\"),\r\n                puller,\r\n                hasHeaders = false,\r\n                gridparent = this.gridparent,\r\n                rootid = this.rootid,\r\n                conf = gs.defaultConf,\r\n                coluuid,\r\n                borPadWidth = 0,\r\n                totalWidth = 0;\r\n\r\n            // save the original parent so we can reparent on destroy\r\n            this.parent = gridparent;\r\n\r\n            // save the references to columns by unique ID\r\n            this.colrefs = {};\r\n\r\n\r\n            // create the headers\r\n            for (var i = 0, len = cols.length; i < len; i++) {\r\n                //col = $(\"<col/>\");\r\n                //col.appendTo(colgroup);\r\n                cl = cols[i].headerClass || \"\";\r\n                ccl = cols[i].columnClass || \"\";\r\n                val = cols[i].header || \"\";\r\n                do {\r\n                    coluuid = String(Math.floor(Math.random() * 10000));\r\n                } while (this.colrefs[coluuid] !== undefined);\r\n                // create a unique name for this column\r\n                name = cols[i].value ? coluuid : \"text\";\r\n                this.colrefs[name] = cols[i];\r\n\r\n                if (val) {\r\n                    hasHeaders = true;\r\n                }\r\n                if (gs.stateful && localStorage['jstree-root-' + rootid + '-column-' + i])\r\n                    width = localStorage['jstree-root-' + rootid + '-column-' + i];\r\n                else\r\n                    width = cols[i].width || defaultWidth;\r\n\r\n                var minWidth = cols[i].minWidth || width;\r\n                var maxWidth = cols[i].maxWidth || width;\r\n\r\n                // we only deal with borders if width is not auto and not percentages\r\n                borPadWidth = tr ? 1 + 6 : 2 + 8; // account for the borders and padding\r\n                if (width !== 'auto' && typeof(width) !== \"string\") {\r\n                    width -= borPadWidth;\r\n                }\r\n                col = this.midWrapper.children(\"div.jstree-grid-column-\" + i);\r\n                last = $(\"<div></div>\").css(conf).addClass(\"jstree-grid-div-\" + this.uniq + \"-\" + i + \" \" + (tr ? \"ui-widget-header \" : \"\") + \" jstree-grid-header jstree-grid-header-cell jstree-grid-header-\" + classAdd + \" \" + cl + \" \" + ccl).html(val);\r\n                last.addClass((tr ? \"ui-widget-header \" : \"\") + \"jstree-grid-header jstree-grid-header-\" + classAdd);\r\n                if (this.settings.core.themes.ellipsis === true) {\r\n                    last.addClass('jstree-grid-ellipsis');\r\n                }\r\n                last.prependTo(col);\r\n                last.attr(COL_DATA_ATTR, name);\r\n                totalWidth += last.outerWidth();\r\n                puller = $(\"<div class='jstree-grid-separator jstree-grid-separator-\" + classAdd + (tr ? \" ui-widget-header\" : \"\") + (resizable ? \" jstree-grid-resizable-separator\" : \"\") + \"'>&nbsp;</div>\").appendTo(last);\r\n                col.width(width);\r\n                col.css(\"min-width\", minWidth);\r\n                col.css(\"max-width\", maxWidth);\r\n            }\r\n\r\n            last.addClass((tr ? \"ui-widget-header \" : \"\") + \"jstree-grid-header jstree-grid-header-last jstree-grid-header-\" + classAdd);\r\n            // if there is no width given for the last column, do it via automatic\r\n            if (cols[cols.length - 1].width === undefined) {\r\n                totalWidth -= width;\r\n                col.css({\r\n                    width: \"auto\"\r\n                });\r\n                last.addClass(\"jstree-grid-width-auto\").next(\".jstree-grid-separator\").remove();\r\n            }\r\n            if (hasHeaders) {\r\n                // save the offset of the div from the body\r\n                //gs.divOffset = header.parent().offset().left;\r\n                gs.header = header;\r\n            } else {\r\n                $(\"div.jstree-grid-header\").hide();\r\n            }\r\n\r\n            if (!this.bound && resizable) {\r\n                this.bound = true;\r\n                $(document).mouseup(function() {\r\n                    var ref, cols, width, headers, currentTree, colNum;\r\n                    if (isClickedSep) {\r\n                        colNum = toResize.prevAll(\".jstree-grid-column\").length;\r\n                        currentTree = toResize.closest(\".jstree-grid-wrapper\").find(\".jstree\");\r\n                        ref = $.jstree.reference(currentTree);\r\n                        cols = ref.settings.grid.columns;\r\n                        headers = toResize.parent().children(\"div.jstree-grid-column\");\r\n                        if (isNaN(colNum) || colNum < 0) {\r\n                            ref._gridSettings.treeWidthDiff = currentTree.find(\"ins:eq(0)\").width() + currentTree.find(\"[class~='jstree-anchor']:eq(0)\").width() - ref._gridSettings.columns[0].width;\r\n                        }\r\n                        width = ref._gridSettings.columns[colNum].width = parseFloat(toResize.css(\"width\"));\r\n                        isClickedSep = false;\r\n                        toResize = null;\r\n\r\n                        currentTree.trigger(\"resize_column.jstree-grid\", [colNum, width]);\r\n                    }\r\n                }).mousemove(function(e) {\r\n                    if (isClickedSep) {\r\n                        newMouseX = e.pageX;\r\n                        var diff = newMouseX - oldMouseX,\r\n                            oldPrevHeaderInner,\r\n                            oldPrevColWidth, newPrevColWidth;\r\n\r\n                        if (diff !== 0) {\r\n                            oldPrevHeaderInner = toResize.width();\r\n                            oldPrevColWidth = parseFloat(toResize.css(\"width\"));\r\n\r\n                            // handle a Chrome issue with columns set to auto\r\n                            // thanks to Brabus https://github.com/side-by-side\r\n                            if (!oldPrevColWidth) {\r\n                                oldPrevColWidth = toResize.innerWidth();\r\n                            }\r\n\r\n                            // make sure that diff cannot be beyond the left/right limits\r\n                            diff = diff < 0 ? Math.max(diff, -oldPrevHeaderInner) : diff;\r\n                            newPrevColWidth = oldPrevColWidth + diff;\r\n\r\n                            // only do this if we are not shrinking past 0 on left - and limit it to that amount\r\n                            if ((diff > 0 || oldPrevHeaderInner > 0) && newPrevColWidth > MINCOLWIDTH) {\r\n                                toResize.width(newPrevColWidth + \"px\");\r\n                                toResize.css(\"min-width\", newPrevColWidth + \"px\");\r\n                                toResize.css(\"max-width\", newPrevColWidth + \"px\");\r\n                                oldMouseX = newMouseX;\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n                this.gridWrapper.on(\"selectstart\", \".jstree-grid-resizable-separator\", function() {\r\n                        return false;\r\n                    }).on(\"mousedown\", \".jstree-grid-resizable-separator\", function(e) {\r\n                        isClickedSep = true;\r\n                        oldMouseX = e.pageX;\r\n                        toResize = $(this).closest(\"div.jstree-grid-column\");\r\n                        // the max rightmost position we will allow is the right-most of the wrapper minus a buffer (10)\r\n                        return false;\r\n                    })\r\n                    .on(\"dblclick\", \".jstree-grid-resizable-separator\", function(e) {\r\n                        var clickedSep = $(this),\r\n                            col = clickedSep.closest(\"div.jstree-grid-column\"),\r\n                            oldPrevColWidth = parseFloat(col.css(\"width\")),\r\n                            newWidth = 0,\r\n                            diff,\r\n                            colNum = col.prevAll(\".jstree-grid-column\").length,\r\n                            oldPrevHeaderInner = col.width(),\r\n                            newPrevColWidth;\r\n\r\n\r\n                        //find largest width\r\n                        col.find(\".jstree-grid-cell\").each(function() {\r\n                            var item = $(this),\r\n                                width;\r\n                            item.css(\"position\", \"absolute\");\r\n                            item.css(\"width\", \"auto\");\r\n                            width = item.outerWidth();\r\n                            item.css(\"position\", \"relative\");\r\n\r\n                            if (width > newWidth) {\r\n                                newWidth = width;\r\n                            }\r\n                        });\r\n\r\n                        diff = newWidth - oldPrevColWidth;\r\n\r\n                        // make sure that diff cannot be beyond the left limits\r\n                        diff = diff < 0 ? Math.max(diff, -oldPrevHeaderInner) : diff;\r\n                        newPrevColWidth = (oldPrevColWidth + diff) + \"px\";\r\n\r\n                        col.width(newPrevColWidth);\r\n                        col.css(\"min-width\", newPrevColWidth);\r\n                        col.css(\"max-width\", newPrevColWidth);\r\n\r\n                        $(this).closest(\".jstree-grid-wrapper\").find(\".jstree\").trigger(\"resize_column.jstree-grid\", [colNum, newPrevColWidth]);\r\n                    })\r\n                    .on(\"click\", \".jstree-grid-separator\", function(e) {\r\n                        // don't sort after resize\r\n                        e.stopPropagation();\r\n                    });\r\n            }\r\n            this.gridWrapper.on(\"click\", \".jstree-grid-header-cell\", function(e) {\r\n                if (!_this.sort) {\r\n                    return;\r\n                }\r\n\r\n                // get column\r\n                var name = $(this).attr(COL_DATA_ATTR);\r\n\r\n                // sort order\r\n                var symbol;\r\n                if (gs.sortOrder === name && gs.sortAsc === true) {\r\n                    gs.sortAsc = false;\r\n                    symbol = \"&darr;\";\r\n                } else {\r\n                    gs.sortOrder = name;\r\n                    gs.sortAsc = true;\r\n                    symbol = \"&uarr;\";\r\n                }\r\n\r\n                // add sort arrow\r\n                $(this.closest('.jstree-grid-wrapper')).find(\".jstree-grid-sort-icon\").remove();\r\n                $(\"<span></span>\").addClass(\"jstree-grid-sort-icon\").appendTo($(this)).html(symbol);\r\n\r\n                // sort by column\r\n                var rootNode = _this.get_node('#');\r\n                _this.sort(rootNode, true);\r\n                _this.redraw_node(rootNode, true);\r\n            });\r\n\r\n        };\r\n\r\n        this._domManipulation = null; // We'll store the column nodes in this object and an id for the grid-node that started the manipulation { id: \"id of the node that started the manipulation\", columns: { Key-Value-Pair col-No: Column }}\r\n\r\n        function _guid() {\r\n            function s4() {\r\n                return Math.floor((1 + Math.random()) * 0x10000)\r\n                    .toString(16)\r\n                    .substring(1);\r\n            }\r\n            return s4() + s4() + '-' + s4() + '-' + s4() + '-' +\r\n                s4() + '-' + s4() + s4() + s4();\r\n        }\r\n        /*\r\n         * Trys to detach the tree columns on massive dom manipulations\r\n         */\r\n        this._detachColumns = function(id) {\r\n            // if the columns are not detached, then detach them\r\n            if (this._domManipulation == null) {\r\n                var cols = this._gridSettings.columns || [],\r\n                    treecol = this._gridSettings.treecol,\r\n                    mw = this.midWrapper;\r\n                this._domManipulation = {\r\n                    id: id,\r\n                    columns: {}\r\n                };\r\n                for (var i = 0, len = cols.length; i < len; i++) {\r\n                    //if (treecol === i) {\r\n                    //  continue;\r\n                    //}\r\n                    this._domManipulation.columns[i] = mw.children(\".jstree-grid-column-\" + i)[0];\r\n                    this._domManipulation.columns[i].parentNode.removeChild(this._domManipulation.columns[i]);\r\n                }\r\n            }\r\n            return this._domManipulation;\r\n        }\r\n\r\n        this._reattachColumns = function(id) {\r\n            if (this._domManipulation == null) {\r\n                return false;\r\n            }\r\n            if (this._domManipulation.id === id) {\r\n                var cols = this._gridSettings.columns || [],\r\n                    treecol = this._gridSettings.treecol,\r\n                    mw = this.midWrapper;\r\n                for (var i = 0, len = cols.length; i < len; i++) {\r\n                    //if (treecol === i) {\r\n                    //  continue;\r\n                    //}\r\n                    mw[0].appendChild(this._domManipulation.columns[i]);\r\n                }\r\n                this._domManipulation = null;\r\n            }\r\n            return true;\r\n        }\r\n\r\n        /*\r\n         * Override open_node to detach the columns before redrawing child-nodes, and do reattach them afterwarts\r\n         */\r\n        this.open_node = function(obj, callback, animation) {\r\n            var isArray = $.isArray(obj);\r\n            var node = null;\r\n            if (!isArray) {\r\n                node = this.get_node(obj);\r\n                if (node.id === \"#\") {\r\n                    return;\r\n                } // wtf??? we ar in the root and do not need a open!\r\n            }\r\n            var id = isArray ? _guid() : node.id;\r\n            this._detachColumns(id);\r\n            var ret = parent.open_node.call(this, obj, callback, animation);\r\n            this._reattachColumns(id);\r\n            return ret;\r\n        }\r\n\r\n        /*\r\n         * Override redraw_node to correctly insert the grid\r\n         */\r\n        this.redraw_node = function(obj, deep, is_callback, force_render) {\r\n            var id = $.isArray(obj) ? _guid() : this.get_node(obj).id;\r\n            // we detach the columns once\r\n            this._detachColumns(id);\r\n            // first allow the parent to redraw the node\r\n            obj = parent.redraw_node.call(this, obj, deep, is_callback, force_render);\r\n            // next prepare the grid for a redrawn node - but only if ths node is not hidden (search does that)\r\n            if (obj) {\r\n                this._prepare_grid(obj);\r\n            }\r\n            // don't forget to reattach\r\n            this._reattachColumns(id);\r\n            return obj;\r\n        };\r\n        this.refresh = function() {\r\n            this._clean_grid();\r\n            return parent.refresh.apply(this, arguments);\r\n        };\r\n        /*\r\n         * Override set_id to update cell attributes\r\n         */\r\n        this.set_id = function(obj, id) {\r\n            var old, uniq = this.uniq;\r\n            if (obj) {\r\n                old = obj.id;\r\n            }\r\n            var result = parent.set_id.apply(this, arguments);\r\n            if (result) {\r\n                if (old !== undefined) {\r\n                    var grid = this.gridWrapper,\r\n                        oldNodes = [old],\r\n                        i;\r\n                    // get children\r\n                    if (obj && obj.children_d) {\r\n                        oldNodes = oldNodes.concat(obj.children_d);\r\n                    }\r\n                    // update id in children\r\n                    findDataCell(uniq, oldNodes, this._gridSettings.gridcols)\r\n                        .attr(NODE_DATA_ATTR, obj.id)\r\n                        .removeClass(generateCellId(uniq, old))\r\n                        .addClass(generateCellId(uniq, obj.id))\r\n                        .each(function(i, node) {\r\n                            $(node).attr('id', generateCellId(uniq, obj.id) + (i + 1));\r\n                        });\r\n                }\r\n            }\r\n            return result;\r\n        };\r\n\r\n        this._hideOrShowTree = function(node, hide) {\r\n            //Hides or shows a tree\r\n            this._detachColumns(node.id);\r\n            // show cells in each detachted column\r\n            this._hideOrShowNode(node, hide, this._gridSettings.columns || [], this._gridSettings.treecol);\r\n            this._reattachColumns(node.id);\r\n        }\r\n        this._hideOrShowNode = function(node, hide, cols, treecol) {\r\n            //Hides or shows a node with recursive calls to all open child-nodes\r\n            for (var i = 0, len = cols.length; i < len; i++) {\r\n                if (i === treecol) {\r\n                    continue;\r\n                }\r\n                var cells = findDataCell(this.uniq, node.id, i, $(this._domManipulation.columns[i]));\r\n                if (hide) {\r\n                    cells.addClass(\"jstree-grid-hidden\");\r\n                } else {\r\n                    cells.removeClass(\"jstree-grid-hidden\");\r\n                }\r\n            }\r\n            if (node.state.opened && node.children) {\r\n                for (var i = 0, len = node.children.length; i < len; i++) {\r\n                    this._hideOrShowNode(this.get_node(node.children[i]), hide, cols, treecol);\r\n                }\r\n            }\r\n        }\r\n        this._hide_grid = function(node) {\r\n            if (!node) {\r\n                return true;\r\n            }\r\n            this._detachColumns(node.id);\r\n            var children = node.children ? node.children : [],\r\n                cols = this._gridSettings.columns || [],\r\n                treecol = this._gridSettings.treecol;\r\n            // try to remove all children\r\n            for (var i = 0, len = children.length; i < len; i++) {\r\n                var child = this.get_node(children[i]);\r\n                // go through each column, remove all children with the correct ID name\r\n                for (var j = 0, lenj = cols.length; j < lenj; j++) {\r\n                    if (j === treecol) {\r\n                        continue;\r\n                    }\r\n                    findDataCell(this.uniq, child.id, j, $(this._domManipulation.columns[j])).remove();\r\n                }\r\n                if (child.state.opened) {\r\n                    this._hide_grid(child);\r\n                }\r\n            }\r\n\r\n\r\n            this._reattachColumns(node.id);\r\n        };\r\n        this.holdingCells = {};\r\n        this.getHoldingCells = function(obj, col, hc) {\r\n            if (obj.state.hidden || !obj.state.opened) {\r\n                return $();\r\n            }\r\n            var ret = $(),\r\n                children = obj.children || [],\r\n                child, i, uniq = this.uniq;\r\n            // run through each child, render it, and then render its children recursively\r\n            for (i = 0; i < children.length; i++) {\r\n                child = generateCellId(uniq, children[i]) + col;\r\n                if (hc[child]) {\r\n                    ret = ret.add(hc[child]).add(this.getHoldingCells(this.get_node(children[i]), col, hc));\r\n                    //delete hc[child];\r\n                }\r\n            }\r\n            return (ret);\r\n        };\r\n\r\n        /**\r\n         * put a grid cell in edit mode (input field to edit the data)\r\n         * @name edit(obj, col)\r\n         * @param  {mixed} obj\r\n         * @param  {obj} col definition\r\n         * @param  {element} cell element, either span or wrapping div\r\n         */\r\n        this._edit = function(obj, col, element) {\r\n            if (!obj) {\r\n                return false;\r\n            }\r\n            if (!obj.data) {\r\n                obj.data = {};\r\n            }\r\n            if (element) {\r\n                element = $(element);\r\n                if (element.prop(\"tagName\").toLowerCase() === \"div\") {\r\n                    element = element.children(\"span:first\");\r\n                }\r\n            } else {\r\n                // need to find the element - later\r\n                return false;\r\n            }\r\n            var rtl = this._data.core.rtl,\r\n                w = this.element.width(),\r\n                t = obj.data[col.value],\r\n                h1 = $(\"<\" + \"div />\", {\r\n                    css: {\r\n                        \"position\": \"absolute\",\r\n                        \"top\": \"-200px\",\r\n                        \"left\": (rtl ? \"0px\" : \"-1000px\"),\r\n                        \"visibility\": \"hidden\"\r\n                    }\r\n                }).appendTo(\"body\"),\r\n                h2 = $(\"<\" + \"input />\", {\r\n                    \"value\": t,\r\n                    \"class\": \"jstree-rename-input\",\r\n                    \"css\": {\r\n                        \"padding\": \"0\",\r\n                        \"border\": \"1px solid silver\",\r\n                        \"box-sizing\": \"border-box\",\r\n                        \"display\": \"inline-block\",\r\n                        \"height\": (this._data.core.li_height) + \"px\",\r\n                        \"lineHeight\": (this._data.core.li_height) + \"px\",\r\n                        \"width\": \"150px\" // will be set a bit further down\r\n                    },\r\n                    \"blur\": $.proxy(function() {\r\n                        var v = h2.val();\r\n                        // save the value if changed\r\n                        if (v === \"\" || v === t) {\r\n                            v = t;\r\n                        } else {\r\n                            obj.data[col.value] = v;\r\n                            this.element.trigger('update_cell.jstree-grid', {\r\n                                node: obj,\r\n                                col: col.value,\r\n                                value: v,\r\n                                old: t\r\n                            });\r\n                            var id = _guid();\r\n                            this._detachColumns(id);\r\n                            this._prepare_grid(this.get_node(obj, true));\r\n                            this._reattachColumns(id);\r\n                        }\r\n                        h2.remove();\r\n                        element.show();\r\n                    }, this),\r\n                    \"keydown\": function(event) {\r\n                        var key = event.which;\r\n                        if (key === 27) {\r\n                            this.value = t;\r\n                        }\r\n                        if (key === 27 || key === 13 || key === 37 || key === 38 || key === 39 || key === 40 || key === 32) {\r\n                            event.stopImmediatePropagation();\r\n                        }\r\n                        if (key === 27 || key === 13) {\r\n                            event.preventDefault();\r\n                            this.blur();\r\n                        }\r\n                    },\r\n                    \"click\": function(e) {\r\n                        e.stopImmediatePropagation();\r\n                    },\r\n                    \"mousedown\": function(e) {\r\n                        e.stopImmediatePropagation();\r\n                    },\r\n                    \"keyup\": function(event) {\r\n                        h2.width(Math.min(h1.text(\"pW\" + this.value).width(), w));\r\n                    },\r\n                    \"keypress\": function(event) {\r\n                        if (event.which === 13) {\r\n                            return false;\r\n                        }\r\n                    }\r\n                }),\r\n                fn = {\r\n                    fontFamily: element.css('fontFamily') || '',\r\n                    fontSize: element.css('fontSize') || '',\r\n                    fontWeight: element.css('fontWeight') || '',\r\n                    fontStyle: element.css('fontStyle') || '',\r\n                    fontStretch: element.css('fontStretch') || '',\r\n                    fontVariant: element.css('fontVariant') || '',\r\n                    letterSpacing: element.css('letterSpacing') || '',\r\n                    wordSpacing: element.css('wordSpacing') || ''\r\n                };\r\n            element.hide();\r\n            element.parent().append(h2);\r\n            h2.css(fn).width(Math.min(h1.text(\"pW\" + h2[0].value).width(), w))[0].select();\r\n        };\r\n\r\n        this.grid_hide_column = function(col) {\r\n            this.midWrapper.find(\".jstree-grid-column-\" + col).hide();\r\n        };\r\n        this.grid_show_column = function(col) {\r\n            this.midWrapper.find(\".jstree-grid-column-\" + col).show();\r\n        };\r\n\r\n        this._prepare_grid = function(obj) {\r\n            var gs = this._gridSettings,\r\n                c = gs.treeClass,\r\n                _this = this,\r\n                t,\r\n                cols = gs.columns || [],\r\n                width, tr = gs.isThemeroller,\r\n                uniq = this.uniq,\r\n                treecol = gs.treecol,\r\n                tree = this.element,\r\n                rootid = this.rootid,\r\n                classAdd = (tr ? \"themeroller\" : \"regular\"),\r\n                img, objData = this.get_node(obj),\r\n                defaultWidth = gs.columnWidth,\r\n                conf = gs.defaultConf,\r\n                cellClickHandler = function(tree, node, val, col, t) {\r\n                    return function(e) {\r\n                        //node = tree.find(\"#\"+node.attr(\"id\"));\r\n                        var event = eventer.create(\"select_cell.jstree-grid\");\r\n                        tree.trigger(event, [{\r\n                            value: val,\r\n                            column: col.header,\r\n                            node: node,\r\n                            grid: $(this),\r\n                            sourceName: col.value\r\n                        }]);\r\n                        if (!event.isDefaultPrevented()) {\r\n                            node.children(\".jstree-anchor\").trigger(\"click.jstree\", e);\r\n                        }\r\n                    };\r\n                },\r\n                cellRightClickHandler = function(tree, node, val, col, t) {\r\n                    return function(e) {\r\n                        if (gs.gridcontextmenu) {\r\n                            e.preventDefault();\r\n                            menu.popup(this, {\r\n                                'x': e.pageX,\r\n                                'y': e.pageY\r\n                            }, gs.gridcontextmenu(_this, tree, node, val, col, t, e.target));\r\n                        }\r\n                    };\r\n                },\r\n                hoverInHandler = function(node, jsTreeInstance) {\r\n                    return function() {\r\n                        jsTreeInstance.hover_node(node);\r\n                    };\r\n                },\r\n                hoverOutHandler = function(node, jsTreeInstance) {\r\n                    return function() {\r\n                        jsTreeInstance.dehover_node(node);\r\n                    };\r\n                },\r\n                i, val, cl, wcl, ccl, a, last, valClass, wideValClass, span, paddingleft, title, gridCellName, gridCellParentId, gridCellParent,\r\n                gridCellPrev, gridCellPrevId, gridCellNext, gridCellNextId, gridCellChild, gridCellChildId,\r\n                col, content, tmpWidth, mw = this.midWrapper,\r\n                column, lid = objData.id,\r\n                highlightSearch, isClicked,\r\n                peers = this.get_node(objData.parent).children,\r\n                // find my position in the list of peers. \"peers\" is the list of everyone at my level under my parent, in order\r\n                pos = $.inArray(lid, peers),\r\n                hc = this.holdingCells,\r\n                rendered = false,\r\n                closed;\r\n            // get our column definition\r\n            t = $(obj);\r\n\r\n            // find the a children\r\n            a = t.children(\"[class~='jstree-anchor']\");\r\n            highlightSearch = a.hasClass(SEARCHCLASS);\r\n            isClicked = a.hasClass(\"jstree-clicked\");\r\n\r\n            if (a.length === 1) {\r\n                closed = !objData.state.opened;\r\n                gridCellName = generateCellId(uniq, lid);\r\n                gridCellParentId = objData.parent === \"#\" ? null : objData.parent;\r\n                a.addClass(c);\r\n                //renderAWidth(a,_this);\r\n                renderATitle(a, t, _this);\r\n                last = a;\r\n\r\n                // calculate position ids once\r\n                gridCellPrevId = pos <= 0 ? objData.parent : findLastClosedNode(this, peers[pos - 1]);\r\n                gridCellNextId = pos >= peers.length - 1 ? \"NULL\" : peers[pos + 1];\r\n                gridCellChildId = objData.children && objData.children.length > 0 ? objData.children[0] : \"NULL\";\r\n\r\n                // find which column our tree shuld go in\r\n                var s = this.settings.grid;\r\n                for (var i = 0, len = cols.length; i < len; i++) {\r\n                    if (treecol === i) {\r\n                        continue;\r\n                    }\r\n                    col = cols[i];\r\n                    column = this._domManipulation == null ? mw.children(\"div:eq(\" + i + \")\") : $(this._domManipulation.columns[i]); //Geht the detached column not mw.children(\"div:eq(\"+i+\")\");\r\n                    // get the cellClass, the wideCellClass, and the columnClass\r\n                    cl = col.cellClass || \"\";\r\n                    wcl = col.wideCellClass || \"\";\r\n                    ccl = col.columnClass || \"\";\r\n\r\n                    // add a column class to the Column\r\n                    column.addClass(ccl);\r\n\r\n\r\n                    // get the contents of the cell - value could be a string or a function\r\n                    val = getCellData(col.value, objData);\r\n\r\n                    if (typeof(col.format) === \"function\") {\r\n                        val = col.format(val);\r\n                    }\r\n\r\n                    // put images instead of text if needed\r\n                    if (col.images) {\r\n                        img = col.images[val] || col.images[\"default\"];\r\n                        if (img) {\r\n                            content = img[0] === \"*\" ? '<span class=\"' + img.substr(1) + '\"></span>' : '<img src=\"' + img + '\">';\r\n                        }\r\n                    } else {\r\n                        content = val;\r\n                    }\r\n\r\n                    // content cannot be blank, or it messes up heights\r\n                    if (content === undefined || content === null || BLANKRE.test(content)) {\r\n                        content = \"&nbsp;\";\r\n                    }\r\n\r\n                    // get the valueClass\r\n                    valClass = col.valueClass && objData.data !== null && objData.data !== undefined ? objData.data[col.valueClass] || \"\" : \"\";\r\n                    if (valClass && col.valueClassPrefix && col.valueClassPrefix !== \"\") {\r\n                        valClass = col.valueClassPrefix + valClass;\r\n                    }\r\n                    // get the wideValueClass\r\n                    wideValClass = col.wideValueClass && objData.data !== null && objData.data !== undefined ? objData.data[col.wideValueClass] || \"\" : \"\";\r\n                    if (wideValClass && col.wideValueClassPrefix && col.wideValueClassPrefix !== \"\") {\r\n                        wideValClass = col.wideValueClassPrefix + wideValClass;\r\n                    }\r\n                    // get the title\r\n                    title = col.title && objData.data !== null && objData.data !== undefined ? objData.data[col.title] || \"\" : \"\";\r\n                    // strip out HTML\r\n                    title = title.replace(htmlstripre, '');\r\n\r\n                    // get the width\r\n                    paddingleft = 7;\r\n                    width = col.width || defaultWidth;\r\n                    if (width !== 'auto') {\r\n                        width = tmpWidth || (width - paddingleft);\r\n                    }\r\n\r\n                    last = findDataCell(uniq, lid, i, column);\r\n                    if (!last || last.length < 1) {\r\n                        last = $(\"<div></div>\");\r\n                        $(\"<span></span>\").appendTo(last);\r\n                        last.attr(\"id\", gridCellName + i);\r\n                        last.addClass(gridCellName);\r\n                        last.attr(NODE_DATA_ATTR, lid);\r\n                        if (highlightSearch) {\r\n                            last.addClass(SEARCHCLASS);\r\n                        } else {\r\n                            last.removeClass(SEARCHCLASS);\r\n                        }\r\n                        if (isClicked) {\r\n                            last.addClass(\"jstree-clicked\");\r\n                        } else {\r\n                            last.removeClass(\"jstree-clicked\");\r\n                        }\r\n                        if (this.settings.core.themes.ellipsis === true && i !== treecol) {\r\n                            last.addClass('jstree-grid-ellipsis');\r\n                        }\r\n\r\n                    }\r\n\r\n                    // we need to check the hidden-state and see if we need to hide the node\r\n                    if (objData.state.hidden) {\r\n                        last.addClass(\"jstree-grid-hidden\");\r\n                    } else {\r\n                        last.removeClass(\"jstree-grid-hidden\");\r\n                    }\r\n\r\n                    // we need to put it in the dataCell - after the parent, but the position matters\r\n                    // if we have no parent, then we are one of the root nodes, but still need to look at peers\r\n\r\n\r\n                    // if we are first, i.e. pos === 0, we go right after the parent;\r\n                    // if we are not first, and our previous peer (one before us) is closed, we go right after the previous peer cell\r\n                    // if we are not first, and our previous peer is opened, then we have to find its youngest & lowest closed child (incl. leaf)\r\n                    //\r\n                    // probably be much easier to go *before* our next one\r\n                    // but that one might not be drawn yet\r\n                    // here is the logic for jstree drawing:\r\n                    //   it draws peers from first to last or from last to first\r\n                    //   it draws children before a parent\r\n                    //\r\n                    // so I can rely on my *parent* not being drawn, but I cannot rely on my previous peer or my next peer being drawn\r\n\r\n                    // so we do the following:\r\n                    //   1- We are the first child: install after the parent\r\n                    //   2- Our previous peer is already drawn: install after the previous peer\r\n                    //   3- Our previous peer is not drawn, we have a child that is drawn: install right before our first child\r\n                    //   4- Our previous peer is not drawn, we have no child that is drawn, our next peer is drawn: install right before our next peer\r\n                    //   5- Our previous peer is not drawn, we have no child that is drawn, our next peer is not drawn: install right after parent\r\n                    gridCellPrev = findDataCell(uniq, gridCellPrevId, i, column);\r\n                    gridCellNext = findDataCell(uniq, gridCellNextId, i, column);\r\n                    gridCellChild = findDataCell(uniq, gridCellChildId, i, column);\r\n                    gridCellParent = findDataCell(uniq, gridCellParentId, i, column);\r\n\r\n\r\n                    // if our parent is already drawn, then we put this in the right order under our parent\r\n                    if (gridCellParentId) {\r\n                        if (gridCellParent && gridCellParent.length > 0) {\r\n                            if (gridCellPrev && gridCellPrev.length > 0) {\r\n                                last.insertAfter(gridCellPrev);\r\n                            } else if (gridCellChild && gridCellChild.length > 0) {\r\n                                last.insertBefore(gridCellChild);\r\n                            } else if (gridCellNext && gridCellNext.length > 0) {\r\n                                last.insertBefore(gridCellNext);\r\n                            } else {\r\n                                last.insertAfter(gridCellParent);\r\n                            }\r\n                            rendered = true;\r\n                        } else {\r\n                            rendered = false;\r\n                        }\r\n                        // always put it in the holding cells, and then sort when the parent comes in, in case parent is (re)drawn later\r\n                        hc[gridCellName + i] = last;\r\n                    } else {\r\n                        if (gridCellPrev && gridCellPrev.length > 0) {\r\n                            last.insertAfter(gridCellPrev);\r\n                        } else if (gridCellChild && gridCellChild.length > 0) {\r\n                            last.insertBefore(gridCellChild);\r\n                        } else if (gridCellNext && gridCellNext.length > 0) {\r\n                            last.insertBefore(gridCellNext);\r\n                        } else {\r\n                            last.appendTo(column);\r\n                        }\r\n                        rendered = true;\r\n                    }\r\n                    // do we have any children waiting for this cell? walk down through the children/grandchildren/etc tree\r\n                    if (rendered) {\r\n                        var toRen = this.getHoldingCells(objData, i, hc);\r\n                        last.after(toRen);\r\n                    }\r\n                    // need to make the height of this match the line height of the tree. How?\r\n                    span = last.children(\"span\");\r\n\r\n                    // create a span inside the div, so we can control what happens in the whole div versus inside just the text/background\r\n                    span.addClass(cl + \" \" + valClass).html(content);\r\n                    last = last.css(conf).addClass(\"jstree-grid-cell jstree-grid-cell-regular jstree-grid-cell-root-\" + rootid + \" jstree-grid-cell-\" + classAdd + \" \" + wcl + \" \" + wideValClass + (tr ? \" ui-state-default\" : \"\")).addClass(\"jstree-grid-col-\" + i).addClass(\"jstree-animated\");\r\n                    // add click handler for clicking inside a grid cell\r\n                    last.click(cellClickHandler(tree, t, val, col, this));\r\n                    last.on(\"contextmenu\", cellRightClickHandler(tree, t, val, col, this));\r\n                    last.hover(hoverInHandler(t, this), hoverOutHandler(t, this));\r\n\r\n                    if (title) {\r\n                        span.attr(\"title\", title);\r\n                    }\r\n\r\n                    tree.trigger(\"render_cell.jstree-grid\", [{\r\n                        value: val,\r\n                        column: col.header,\r\n                        node: t,\r\n                        sourceName: col.value\r\n                    }]);\r\n                }\r\n                last.addClass(\"jstree-grid-cell-last\" + (tr ? \" ui-state-default\" : \"\"));\r\n                // if there is no width given for the last column, do it via automatic\r\n                if (cols[cols.length - 1].width === undefined) {\r\n                    last.addClass(\"jstree-grid-width-auto\").next(\".jstree-grid-separator\").remove();\r\n                }\r\n            }\r\n            this.element.css({\r\n                'overflow-y': 'auto !important'\r\n            });\r\n        };\r\n        // clean up holding cells\r\n        this.holdingCells = {};\r\n\r\n        // need to do alternating background colors or borders\r\n    };\r\n\r\n    return $;\r\n});\ndefine('skylark-widgets-hierarchy/addons/types',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-browser\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-geom\",\r\n  \"skylark-domx-query\",\r\n  \"../Hierarchy\"\r\n],function(langx,browser,eventer,noder,geom,$,jstree){\r\n\t\"use strict\";\r\n\r\n\tif($.jstree.plugins.types) { return; }\r\n\r\n\t/**\r\n\t * An object storing all types as key value pairs, where the key is the type name and the value is an object that could contain following keys (all optional).\r\n\t *\r\n\t * * `max_children` the maximum number of immediate children this node type can have. Do not specify or set to `-1` for unlimited.\r\n\t * * `max_depth` the maximum number of nesting this node type can have. A value of `1` would mean that the node can have children, but no grandchildren. Do not specify or set to `-1` for unlimited.\r\n\t * * `valid_children` an array of node type strings, that nodes of this type can have as children. Do not specify or set to `-1` for no limits.\r\n\t * * `icon` a string - can be a path to an icon or a className, if using an image that is in the current directory use a `./` prefix, otherwise it will be detected as a class. Omit to use the default icon from your theme.\r\n\t * * `li_attr` an object of values which will be used to add HTML attributes on the resulting LI DOM node (merged with the node's own data)\r\n\t * * `a_attr` an object of values which will be used to add HTML attributes on the resulting A DOM node (merged with the node's own data)\r\n\t *\r\n\t * There are two predefined types:\r\n\t *\r\n\t * * `#` represents the root of the tree, for example `max_children` would control the maximum number of root nodes.\r\n\t * * `default` represents the default node - any settings here will be applied to all nodes that do not have a type specified.\r\n\t *\r\n\t * @name $.jstree.defaults.types\r\n\t * @plugin types\r\n\t */\r\n\t$.jstree.defaults.types = {\r\n\t\t'default' : {}\r\n\t};\r\n\t$.jstree.defaults.types[$.jstree.root] = {};\r\n\r\n\t$.jstree.plugins.types = function (options, parent) {\r\n\t\tthis.init = function (el, options) {\r\n\t\t\tvar i, j;\r\n\t\t\tif(options && options.types && options.types['default']) {\r\n\t\t\t\tfor(i in options.types) {\r\n\t\t\t\t\tif(i !== \"default\" && i !== $.jstree.root && options.types.hasOwnProperty(i)) {\r\n\t\t\t\t\t\tfor(j in options.types['default']) {\r\n\t\t\t\t\t\t\tif(options.types['default'].hasOwnProperty(j) && options.types[i][j] === undefined) {\r\n\t\t\t\t\t\t\t\toptions.types[i][j] = options.types['default'][j];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tparent.init.call(this, el, options);\r\n\t\t\tthis._model.data[$.jstree.root].type = $.jstree.root;\r\n\t\t};\r\n\t\tthis.refresh = function (skip_loading, forget_state) {\r\n\t\t\tparent.refresh.call(this, skip_loading, forget_state);\r\n\t\t\tthis._model.data[$.jstree.root].type = $.jstree.root;\r\n\t\t};\r\n\t\tthis.bind = function () {\r\n\t\t\tthis.element\r\n\t\t\t\t.on('model.jstree', $.proxy(function (e, data) {\r\n\t\t\t\t\t\tvar m = this._model.data,\r\n\t\t\t\t\t\t\tdpc = data.nodes,\r\n\t\t\t\t\t\t\tt = this.settings.types,\r\n\t\t\t\t\t\t\ti, j, c = 'default', k;\r\n\t\t\t\t\t\tfor(i = 0, j = dpc.length; i < j; i++) {\r\n\t\t\t\t\t\t\tc = 'default';\r\n\t\t\t\t\t\t\tif(m[dpc[i]].original && m[dpc[i]].original.type && t[m[dpc[i]].original.type]) {\r\n\t\t\t\t\t\t\t\tc = m[dpc[i]].original.type;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(m[dpc[i]].data && m[dpc[i]].data.jstree && m[dpc[i]].data.jstree.type && t[m[dpc[i]].data.jstree.type]) {\r\n\t\t\t\t\t\t\t\tc = m[dpc[i]].data.jstree.type;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tm[dpc[i]].type = c;\r\n\t\t\t\t\t\t\tif(m[dpc[i]].icon === true && t[c].icon !== undefined) {\r\n\t\t\t\t\t\t\t\tm[dpc[i]].icon = t[c].icon;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(t[c].li_attr !== undefined && typeof t[c].li_attr === 'object') {\r\n\t\t\t\t\t\t\t\tfor (k in t[c].li_attr) {\r\n\t\t\t\t\t\t\t\t\tif (t[c].li_attr.hasOwnProperty(k)) {\r\n\t\t\t\t\t\t\t\t\t\tif (k === 'id') {\r\n\t\t\t\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\telse if (m[dpc[i]].li_attr[k] === undefined) {\r\n\t\t\t\t\t\t\t\t\t\t\tm[dpc[i]].li_attr[k] = t[c].li_attr[k];\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\telse if (k === 'class') {\r\n\t\t\t\t\t\t\t\t\t\t\tm[dpc[i]].li_attr['class'] = t[c].li_attr['class'] + ' ' + m[dpc[i]].li_attr['class'];\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(t[c].a_attr !== undefined && typeof t[c].a_attr === 'object') {\r\n\t\t\t\t\t\t\t\tfor (k in t[c].a_attr) {\r\n\t\t\t\t\t\t\t\t\tif (t[c].a_attr.hasOwnProperty(k)) {\r\n\t\t\t\t\t\t\t\t\t\tif (k === 'id') {\r\n\t\t\t\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\telse if (m[dpc[i]].a_attr[k] === undefined) {\r\n\t\t\t\t\t\t\t\t\t\t\tm[dpc[i]].a_attr[k] = t[c].a_attr[k];\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\telse if (k === 'href' && m[dpc[i]].a_attr[k] === '#') {\r\n\t\t\t\t\t\t\t\t\t\t\tm[dpc[i]].a_attr['href'] = t[c].a_attr['href'];\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\telse if (k === 'class') {\r\n\t\t\t\t\t\t\t\t\t\t\tm[dpc[i]].a_attr['class'] = t[c].a_attr['class'] + ' ' + m[dpc[i]].a_attr['class'];\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tm[$.jstree.root].type = $.jstree.root;\r\n\t\t\t\t\t}, this));\r\n\t\t\tparent.bind.call(this);\r\n\t\t};\r\n\t\tthis.get_json = function (obj, options, flat) {\r\n\t\t\tvar i, j,\r\n\t\t\t\tm = this._model.data,\r\n\t\t\t\topt = options ? $.extend(true, {}, options, {no_id:false}) : {},\r\n\t\t\t\ttmp = parent.get_json.call(this, obj, opt, flat);\r\n\t\t\tif(tmp === false) { return false; }\r\n\t\t\tif($.isArray(tmp)) {\r\n\t\t\t\tfor(i = 0, j = tmp.length; i < j; i++) {\r\n\t\t\t\t\ttmp[i].type = tmp[i].id && m[tmp[i].id] && m[tmp[i].id].type ? m[tmp[i].id].type : \"default\";\r\n\t\t\t\t\tif(options && options.no_id) {\r\n\t\t\t\t\t\tdelete tmp[i].id;\r\n\t\t\t\t\t\tif(tmp[i].li_attr && tmp[i].li_attr.id) {\r\n\t\t\t\t\t\t\tdelete tmp[i].li_attr.id;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(tmp[i].a_attr && tmp[i].a_attr.id) {\r\n\t\t\t\t\t\t\tdelete tmp[i].a_attr.id;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ttmp.type = tmp.id && m[tmp.id] && m[tmp.id].type ? m[tmp.id].type : \"default\";\r\n\t\t\t\tif(options && options.no_id) {\r\n\t\t\t\t\ttmp = this._delete_ids(tmp);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn tmp;\r\n\t\t};\r\n\t\tthis._delete_ids = function (tmp) {\r\n\t\t\tif($.isArray(tmp)) {\r\n\t\t\t\tfor(var i = 0, j = tmp.length; i < j; i++) {\r\n\t\t\t\t\ttmp[i] = this._delete_ids(tmp[i]);\r\n\t\t\t\t}\r\n\t\t\t\treturn tmp;\r\n\t\t\t}\r\n\t\t\tdelete tmp.id;\r\n\t\t\tif(tmp.li_attr && tmp.li_attr.id) {\r\n\t\t\t\tdelete tmp.li_attr.id;\r\n\t\t\t}\r\n\t\t\tif(tmp.a_attr && tmp.a_attr.id) {\r\n\t\t\t\tdelete tmp.a_attr.id;\r\n\t\t\t}\r\n\t\t\tif(tmp.children && $.isArray(tmp.children)) {\r\n\t\t\t\ttmp.children = this._delete_ids(tmp.children);\r\n\t\t\t}\r\n\t\t\treturn tmp;\r\n\t\t};\r\n\t\tthis.check = function (chk, obj, par, pos, more) {\r\n\t\t\tif(parent.check.call(this, chk, obj, par, pos, more) === false) { return false; }\r\n\t\t\tobj = obj && obj.id ? obj : this.get_node(obj);\r\n\t\t\tpar = par && par.id ? par : this.get_node(par);\r\n\t\t\tvar m = obj && obj.id ? (more && more.origin ? more.origin : $.jstree.reference(obj.id)) : null, tmp, d, i, j;\r\n\t\t\tm = m && m._model && m._model.data ? m._model.data : null;\r\n\t\t\tswitch(chk) {\r\n\t\t\t\tcase \"create_node\":\r\n\t\t\t\tcase \"move_node\":\r\n\t\t\t\tcase \"copy_node\":\r\n\t\t\t\t\tif(chk !== 'move_node' || $.inArray(obj.id, par.children) === -1) {\r\n\t\t\t\t\t\ttmp = this.get_rules(par);\r\n\t\t\t\t\t\tif(tmp.max_children !== undefined && tmp.max_children !== -1 && tmp.max_children === par.children.length) {\r\n\t\t\t\t\t\t\tthis._data.core.last_error = { 'error' : 'check', 'plugin' : 'types', 'id' : 'types_01', 'reason' : 'max_children prevents function: ' + chk, 'data' : JSON.stringify({ 'chk' : chk, 'pos' : pos, 'obj' : obj && obj.id ? obj.id : false, 'par' : par && par.id ? par.id : false }) };\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(tmp.valid_children !== undefined && tmp.valid_children !== -1 && $.inArray((obj.type || 'default'), tmp.valid_children) === -1) {\r\n\t\t\t\t\t\t\tthis._data.core.last_error = { 'error' : 'check', 'plugin' : 'types', 'id' : 'types_02', 'reason' : 'valid_children prevents function: ' + chk, 'data' : JSON.stringify({ 'chk' : chk, 'pos' : pos, 'obj' : obj && obj.id ? obj.id : false, 'par' : par && par.id ? par.id : false }) };\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(m && obj.children_d && obj.parents) {\r\n\t\t\t\t\t\t\td = 0;\r\n\t\t\t\t\t\t\tfor(i = 0, j = obj.children_d.length; i < j; i++) {\r\n\t\t\t\t\t\t\t\td = Math.max(d, m[obj.children_d[i]].parents.length);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\td = d - obj.parents.length + 1;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(d <= 0 || d === undefined) { d = 1; }\r\n\t\t\t\t\t\tdo {\r\n\t\t\t\t\t\t\tif(tmp.max_depth !== undefined && tmp.max_depth !== -1 && tmp.max_depth < d) {\r\n\t\t\t\t\t\t\t\tthis._data.core.last_error = { 'error' : 'check', 'plugin' : 'types', 'id' : 'types_03', 'reason' : 'max_depth prevents function: ' + chk, 'data' : JSON.stringify({ 'chk' : chk, 'pos' : pos, 'obj' : obj && obj.id ? obj.id : false, 'par' : par && par.id ? par.id : false }) };\r\n\t\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tpar = this.get_node(par.parent);\r\n\t\t\t\t\t\t\ttmp = this.get_rules(par);\r\n\t\t\t\t\t\t\td++;\r\n\t\t\t\t\t\t} while(par);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t};\r\n\t\t/**\r\n\t\t * used to retrieve the type settings object for a node\r\n\t\t * @name get_rules(obj)\r\n\t\t * @param {mixed} obj the node to find the rules for\r\n\t\t * @return {Object}\r\n\t\t * @plugin types\r\n\t\t */\r\n\t\tthis.get_rules = function (obj) {\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj) { return false; }\r\n\t\t\tvar tmp = this.get_type(obj, true);\r\n\t\t\tif(tmp.max_depth === undefined) { tmp.max_depth = -1; }\r\n\t\t\tif(tmp.max_children === undefined) { tmp.max_children = -1; }\r\n\t\t\tif(tmp.valid_children === undefined) { tmp.valid_children = -1; }\r\n\t\t\treturn tmp;\r\n\t\t};\r\n\t\t/**\r\n\t\t * used to retrieve the type string or settings object for a node\r\n\t\t * @name get_type(obj [, rules])\r\n\t\t * @param {mixed} obj the node to find the rules for\r\n\t\t * @param {Boolean} rules if set to `true` instead of a string the settings object will be returned\r\n\t\t * @return {String|Object}\r\n\t\t * @plugin types\r\n\t\t */\r\n\t\tthis.get_type = function (obj, rules) {\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\treturn (!obj) ? false : ( rules ? $.extend({ 'type' : obj.type }, this.settings.types[obj.type]) : obj.type);\r\n\t\t};\r\n\t\t/**\r\n\t\t * used to change a node's type\r\n\t\t * @name set_type(obj, type)\r\n\t\t * @param {mixed} obj the node to change\r\n\t\t * @param {String} type the new type\r\n\t\t * @plugin types\r\n\t\t */\r\n\t\tthis.set_type = function (obj, type) {\r\n\t\t\tvar m = this._model.data, t, t1, t2, old_type, old_icon, k, d, a;\r\n\t\t\tif($.isArray(obj)) {\r\n\t\t\t\tobj = obj.slice();\r\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\r\n\t\t\t\t\tthis.set_type(obj[t1], type);\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tt = this.settings.types;\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!t[type] || !obj) { return false; }\r\n\t\t\td = this.get_node(obj, true);\r\n\t\t\tif (d && d.length) {\r\n\t\t\t\ta = d.children('.jstree-anchor');\r\n\t\t\t}\r\n\t\t\told_type = obj.type;\r\n\t\t\told_icon = this.get_icon(obj);\r\n\t\t\tobj.type = type;\r\n\t\t\tif(old_icon === true || !t[old_type] || (t[old_type].icon !== undefined && old_icon === t[old_type].icon)) {\r\n\t\t\t\tthis.set_icon(obj, t[type].icon !== undefined ? t[type].icon : true);\r\n\t\t\t}\r\n\r\n\t\t\t// remove old type props\r\n\t\t\tif(t[old_type] && t[old_type].li_attr !== undefined && typeof t[old_type].li_attr === 'object') {\r\n\t\t\t\tfor (k in t[old_type].li_attr) {\r\n\t\t\t\t\tif (t[old_type].li_attr.hasOwnProperty(k)) {\r\n\t\t\t\t\t\tif (k === 'id') {\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (k === 'class') {\r\n\t\t\t\t\t\t\tm[obj.id].li_attr['class'] = (m[obj.id].li_attr['class'] || '').replace(t[old_type].li_attr[k], '');\r\n\t\t\t\t\t\t\tif (d) { d.removeClass(t[old_type].li_attr[k]); }\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (m[obj.id].li_attr[k] === t[old_type].li_attr[k]) {\r\n\t\t\t\t\t\t\tm[obj.id].li_attr[k] = null;\r\n\t\t\t\t\t\t\tif (d) { d.removeAttr(k); }\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(t[old_type] && t[old_type].a_attr !== undefined && typeof t[old_type].a_attr === 'object') {\r\n\t\t\t\tfor (k in t[old_type].a_attr) {\r\n\t\t\t\t\tif (t[old_type].a_attr.hasOwnProperty(k)) {\r\n\t\t\t\t\t\tif (k === 'id') {\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (k === 'class') {\r\n\t\t\t\t\t\t\tm[obj.id].a_attr['class'] = (m[obj.id].a_attr['class'] || '').replace(t[old_type].a_attr[k], '');\r\n\t\t\t\t\t\t\tif (a) { a.removeClass(t[old_type].a_attr[k]); }\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (m[obj.id].a_attr[k] === t[old_type].a_attr[k]) {\r\n\t\t\t\t\t\t\tif (k === 'href') {\r\n\t\t\t\t\t\t\t\tm[obj.id].a_attr[k] = '#';\r\n\t\t\t\t\t\t\t\tif (a) { a.attr('href', '#'); }\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\tdelete m[obj.id].a_attr[k];\r\n\t\t\t\t\t\t\t\tif (a) { a.removeAttr(k); }\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// add new props\r\n\t\t\tif(t[type].li_attr !== undefined && typeof t[type].li_attr === 'object') {\r\n\t\t\t\tfor (k in t[type].li_attr) {\r\n\t\t\t\t\tif (t[type].li_attr.hasOwnProperty(k)) {\r\n\t\t\t\t\t\tif (k === 'id') {\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (m[obj.id].li_attr[k] === undefined) {\r\n\t\t\t\t\t\t\tm[obj.id].li_attr[k] = t[type].li_attr[k];\r\n\t\t\t\t\t\t\tif (d) {\r\n\t\t\t\t\t\t\t\tif (k === 'class') {\r\n\t\t\t\t\t\t\t\t\td.addClass(t[type].li_attr[k]);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\td.attr(k, t[type].li_attr[k]);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (k === 'class') {\r\n\t\t\t\t\t\t\tm[obj.id].li_attr['class'] = t[type].li_attr[k] + ' ' + m[obj.id].li_attr['class'];\r\n\t\t\t\t\t\t\tif (d) { d.addClass(t[type].li_attr[k]); }\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(t[type].a_attr !== undefined && typeof t[type].a_attr === 'object') {\r\n\t\t\t\tfor (k in t[type].a_attr) {\r\n\t\t\t\t\tif (t[type].a_attr.hasOwnProperty(k)) {\r\n\t\t\t\t\t\tif (k === 'id') {\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (m[obj.id].a_attr[k] === undefined) {\r\n\t\t\t\t\t\t\tm[obj.id].a_attr[k] = t[type].a_attr[k];\r\n\t\t\t\t\t\t\tif (a) {\r\n\t\t\t\t\t\t\t\tif (k === 'class') {\r\n\t\t\t\t\t\t\t\t\ta.addClass(t[type].a_attr[k]);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\ta.attr(k, t[type].a_attr[k]);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (k === 'href' && m[obj.id].a_attr[k] === '#') {\r\n\t\t\t\t\t\t\tm[obj.id].a_attr['href'] = t[type].a_attr['href'];\r\n\t\t\t\t\t\t\tif (a) { a.attr('href', t[type].a_attr['href']); }\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (k === 'class') {\r\n\t\t\t\t\t\t\tm[obj.id].a_attr['class'] = t[type].a_attr['class'] + ' ' + m[obj.id].a_attr['class'];\r\n\t\t\t\t\t\t\tif (a) { a.addClass(t[type].a_attr[k]); }\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\t\t};\r\n\t};\r\n\t// include the types plugin by default\r\n\t// $.jstree.defaults.plugins.push(\"types\");\r\n\treturn $;\r\n\t\r\n});\r\n\ndefine('skylark-widgets-hierarchy/addons/unique',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-browser\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-geom\",\r\n  \"skylark-domx-query\",\r\n  \"../Hierarchy\"\r\n],function(langx,browser,eventer,noder,geom,$,jstree){\r\n\t\"use strict\";\r\n\r\n\tif($.jstree.plugins.unique) { return; }\r\n\r\n\t/**\r\n\t * stores all defaults for the unique plugin\r\n\t * @name $.jstree.defaults.unique\r\n\t * @plugin unique\r\n\t */\r\n\t$.jstree.defaults.unique = {\r\n\t\t/**\r\n\t\t * Indicates if the comparison should be case sensitive. Default is `false`.\r\n\t\t * @name $.jstree.defaults.unique.case_sensitive\r\n\t\t * @plugin unique\r\n\t\t */\r\n\t\tcase_sensitive : false,\r\n\t\t/**\r\n\t\t * Indicates if white space should be trimmed before the comparison. Default is `false`.\r\n\t\t * @name $.jstree.defaults.unique.trim_whitespace\r\n\t\t * @plugin unique\r\n\t\t */\r\n\t\ttrim_whitespace : false,\r\n\t\t/**\r\n\t\t * A callback executed in the instance's scope when a new node is created and the name is already taken, the two arguments are the conflicting name and the counter. The default will produce results like `New node (2)`.\r\n\t\t * @name $.jstree.defaults.unique.duplicate\r\n\t\t * @plugin unique\r\n\t\t */\r\n\t\tduplicate : function (name, counter) {\r\n\t\t\treturn name + ' (' + counter + ')';\r\n\t\t}\r\n\t};\r\n\r\n\t$.jstree.plugins.unique = function (options, parent) {\r\n\t\tthis.check = function (chk, obj, par, pos, more) {\r\n\t\t\tif(parent.check.call(this, chk, obj, par, pos, more) === false) { return false; }\r\n\t\t\tobj = obj && obj.id ? obj : this.get_node(obj);\r\n\t\t\tpar = par && par.id ? par : this.get_node(par);\r\n\t\t\tif(!par || !par.children) { return true; }\r\n\t\t\tvar n = chk === \"rename_node\" ? pos : obj.text,\r\n\t\t\t\tc = [],\r\n\t\t\t\ts = this.settings.unique.case_sensitive,\r\n\t\t\t\tw = this.settings.unique.trim_whitespace,\r\n\t\t\t\tm = this._model.data, i, j, t;\r\n\t\t\tfor(i = 0, j = par.children.length; i < j; i++) {\r\n\t\t\t\tt = m[par.children[i]].text;\r\n\t\t\t\tif (!s) {\r\n\t\t\t\t\tt = t.toLowerCase();\r\n\t\t\t\t}\r\n\t\t\t\tif (w) {\r\n\t\t\t\t\tt = t.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');\r\n\t\t\t\t}\r\n\t\t\t\tc.push(t);\r\n\t\t\t}\r\n\t\t\tif(!s) { n = n.toLowerCase(); }\r\n\t\t\tif (w) { n = n.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, ''); }\r\n\t\t\tswitch(chk) {\r\n\t\t\t\tcase \"delete_node\":\r\n\t\t\t\t\treturn true;\r\n\t\t\t\tcase \"rename_node\":\r\n\t\t\t\t\tt = obj.text || '';\r\n\t\t\t\t\tif (!s) {\r\n\t\t\t\t\t\tt = t.toLowerCase();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (w) {\r\n\t\t\t\t\t\tt = t.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');\r\n\t\t\t\t\t}\r\n\t\t\t\t\ti = ($.inArray(n, c) === -1 || (obj.text && t === n));\r\n\t\t\t\t\tif(!i) {\r\n\t\t\t\t\t\tthis._data.core.last_error = { 'error' : 'check', 'plugin' : 'unique', 'id' : 'unique_01', 'reason' : 'Child with name ' + n + ' already exists. Preventing: ' + chk, 'data' : JSON.stringify({ 'chk' : chk, 'pos' : pos, 'obj' : obj && obj.id ? obj.id : false, 'par' : par && par.id ? par.id : false }) };\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn i;\r\n\t\t\t\tcase \"create_node\":\r\n\t\t\t\t\ti = ($.inArray(n, c) === -1);\r\n\t\t\t\t\tif(!i) {\r\n\t\t\t\t\t\tthis._data.core.last_error = { 'error' : 'check', 'plugin' : 'unique', 'id' : 'unique_04', 'reason' : 'Child with name ' + n + ' already exists. Preventing: ' + chk, 'data' : JSON.stringify({ 'chk' : chk, 'pos' : pos, 'obj' : obj && obj.id ? obj.id : false, 'par' : par && par.id ? par.id : false }) };\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn i;\r\n\t\t\t\tcase \"copy_node\":\r\n\t\t\t\t\ti = ($.inArray(n, c) === -1);\r\n\t\t\t\t\tif(!i) {\r\n\t\t\t\t\t\tthis._data.core.last_error = { 'error' : 'check', 'plugin' : 'unique', 'id' : 'unique_02', 'reason' : 'Child with name ' + n + ' already exists. Preventing: ' + chk, 'data' : JSON.stringify({ 'chk' : chk, 'pos' : pos, 'obj' : obj && obj.id ? obj.id : false, 'par' : par && par.id ? par.id : false }) };\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn i;\r\n\t\t\t\tcase \"move_node\":\r\n\t\t\t\t\ti = ( (obj.parent === par.id && (!more || !more.is_multi)) || $.inArray(n, c) === -1);\r\n\t\t\t\t\tif(!i) {\r\n\t\t\t\t\t\tthis._data.core.last_error = { 'error' : 'check', 'plugin' : 'unique', 'id' : 'unique_03', 'reason' : 'Child with name ' + n + ' already exists. Preventing: ' + chk, 'data' : JSON.stringify({ 'chk' : chk, 'pos' : pos, 'obj' : obj && obj.id ? obj.id : false, 'par' : par && par.id ? par.id : false }) };\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn i;\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t};\r\n\t\tthis.create_node = function (par, node, pos, callback, is_loaded) {\r\n\t\t\tif(!node || node.text === undefined) {\r\n\t\t\t\tif(par === null) {\r\n\t\t\t\t\tpar = $.jstree.root;\r\n\t\t\t\t}\r\n\t\t\t\tpar = this.get_node(par);\r\n\t\t\t\tif(!par) {\r\n\t\t\t\t\treturn parent.create_node.call(this, par, node, pos, callback, is_loaded);\r\n\t\t\t\t}\r\n\t\t\t\tpos = pos === undefined ? \"last\" : pos;\r\n\t\t\t\tif(!pos.toString().match(/^(before|after)$/) && !is_loaded && !this.is_loaded(par)) {\r\n\t\t\t\t\treturn parent.create_node.call(this, par, node, pos, callback, is_loaded);\r\n\t\t\t\t}\r\n\t\t\t\tif(!node) { node = {}; }\r\n\t\t\t\tvar tmp, n, dpc, i, j, m = this._model.data, s = this.settings.unique.case_sensitive, w = this.settings.unique.trim_whitespace, cb = this.settings.unique.duplicate, t;\r\n\t\t\t\tn = tmp = this.get_string('New node');\r\n\t\t\t\tdpc = [];\r\n\t\t\t\tfor(i = 0, j = par.children.length; i < j; i++) {\r\n\t\t\t\t\tt = m[par.children[i]].text;\r\n\t\t\t\t\tif (!s) {\r\n\t\t\t\t\t\tt = t.toLowerCase();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (w) {\r\n\t\t\t\t\t\tt = t.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdpc.push(t);\r\n\t\t\t\t}\r\n\t\t\t\ti = 1;\r\n\t\t\t\tt = n;\r\n\t\t\t\tif (!s) {\r\n\t\t\t\t\tt = t.toLowerCase();\r\n\t\t\t\t}\r\n\t\t\t\tif (w) {\r\n\t\t\t\t\tt = t.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');\r\n\t\t\t\t}\r\n\t\t\t\twhile($.inArray(t, dpc) !== -1) {\r\n\t\t\t\t\tn = cb.call(this, tmp, (++i)).toString();\r\n\t\t\t\t\tt = n;\r\n\t\t\t\t\tif (!s) {\r\n\t\t\t\t\t\tt = t.toLowerCase();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (w) {\r\n\t\t\t\t\t\tt = t.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tnode.text = n;\r\n\t\t\t}\r\n\t\t\treturn parent.create_node.call(this, par, node, pos, callback, is_loaded);\r\n\t\t};\r\n\t};\r\n\r\n\t// include the unique plugin by default\r\n\t// $.jstree.defaults.plugins.push(\"unique\");\r\n\treturn $;\r\n\t\r\n});\r\n\ndefine('skylark-widgets-hierarchy/addons/wholerow',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-browser\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-geom\",\r\n  \"skylark-domx-query\",\r\n  \"../Hierarchy\"\r\n],function(langx,browser,eventer,noder,geom,$,jstree){\r\n\t\"use strict\";\r\n\r\n\tif($.jstree.plugins.wholerow) { return; }\r\n\r\n\tvar div = document.createElement('DIV');\r\n\tdiv.setAttribute('unselectable','on');\r\n\tdiv.setAttribute('role','presentation');\r\n\tdiv.className = 'jstree-wholerow';\r\n\tdiv.innerHTML = '&#160;';\r\n\t$.jstree.plugins.wholerow = function (options, parent) {\r\n\t\tthis.bind = function () {\r\n\t\t\tparent.bind.call(this);\r\n\r\n\t\t\tthis.element\r\n\t\t\t\t.on('ready.jstree set_state.jstree', $.proxy(function () {\r\n\t\t\t\t\t\tthis.hide_dots();\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on(\"init.jstree loading.jstree ready.jstree\", $.proxy(function () {\r\n\t\t\t\t\t\t//div.style.height = this._data.core.li_height + 'px';\r\n\t\t\t\t\t\tthis.get_container_ul().addClass('jstree-wholerow-ul');\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on(\"deselect_all.jstree\", $.proxy(function (e, data) {\r\n\t\t\t\t\t\tthis.element.find('.jstree-wholerow-clicked').removeClass('jstree-wholerow-clicked');\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on(\"changed.jstree\", $.proxy(function (e, data) {\r\n\t\t\t\t\t\tthis.element.find('.jstree-wholerow-clicked').removeClass('jstree-wholerow-clicked');\r\n\t\t\t\t\t\tvar tmp = false, i, j;\r\n\t\t\t\t\t\tfor(i = 0, j = data.selected.length; i < j; i++) {\r\n\t\t\t\t\t\t\ttmp = this.get_node(data.selected[i], true);\r\n\t\t\t\t\t\t\tif(tmp && tmp.length) {\r\n\t\t\t\t\t\t\t\ttmp.children('.jstree-wholerow').addClass('jstree-wholerow-clicked');\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on(\"open_node.jstree\", $.proxy(function (e, data) {\r\n\t\t\t\t\t\tthis.get_node(data.node, true).find('.jstree-clicked').parent().children('.jstree-wholerow').addClass('jstree-wholerow-clicked');\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on(\"hover_node.jstree dehover_node.jstree\", $.proxy(function (e, data) {\r\n\t\t\t\t\t\tif(e.type === \"hover_node\" && this.is_disabled(data.node)) { return; }\r\n\t\t\t\t\t\tthis.get_node(data.node, true).children('.jstree-wholerow')[e.type === \"hover_node\"?\"addClass\":\"removeClass\"]('jstree-wholerow-hovered');\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on(\"contextmenu.jstree\", \".jstree-wholerow\", $.proxy(function (e) {\r\n\t\t\t\t\t\tif (this._data.contextmenu) {\r\n\t\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\t\tvar tmp = $.Event('contextmenu', { metaKey : e.metaKey, ctrlKey : e.ctrlKey, altKey : e.altKey, shiftKey : e.shiftKey, pageX : e.pageX, pageY : e.pageY });\r\n\t\t\t\t\t\t\t$(e.currentTarget).closest(\".jstree-node\").children(\".jstree-anchor\").first().trigger(tmp);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t/*!\r\n\t\t\t\t.on(\"mousedown.jstree touchstart.jstree\", \".jstree-wholerow\", function (e) {\r\n\t\t\t\t\t\tif(e.target === e.currentTarget) {\r\n\t\t\t\t\t\t\tvar a = $(e.currentTarget).closest(\".jstree-node\").children(\".jstree-anchor\");\r\n\t\t\t\t\t\t\te.target = a[0];\r\n\t\t\t\t\t\t\ta.trigger(e);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t\t*/\r\n\t\t\t\t.on(\"click.jstree\", \".jstree-wholerow\", function (e) {\r\n\t\t\t\t\t\te.stopImmediatePropagation();\r\n\t\t\t\t\t\tvar tmp = $.Event('click', { metaKey : e.metaKey, ctrlKey : e.ctrlKey, altKey : e.altKey, shiftKey : e.shiftKey });\r\n\t\t\t\t\t\t$(e.currentTarget).closest(\".jstree-node\").children(\".jstree-anchor\").first().trigger(tmp).focus();\r\n\t\t\t\t\t})\r\n\t\t\t\t.on(\"dblclick.jstree\", \".jstree-wholerow\", function (e) {\r\n\t\t\t\t\t\te.stopImmediatePropagation();\r\n\t\t\t\t\t\tvar tmp = $.Event('dblclick', { metaKey : e.metaKey, ctrlKey : e.ctrlKey, altKey : e.altKey, shiftKey : e.shiftKey });\r\n\t\t\t\t\t\t$(e.currentTarget).closest(\".jstree-node\").children(\".jstree-anchor\").first().trigger(tmp).focus();\r\n\t\t\t\t\t})\r\n\t\t\t\t.on(\"click.jstree\", \".jstree-leaf > .jstree-ocl\", $.proxy(function (e) {\r\n\t\t\t\t\t\te.stopImmediatePropagation();\r\n\t\t\t\t\t\tvar tmp = $.Event('click', { metaKey : e.metaKey, ctrlKey : e.ctrlKey, altKey : e.altKey, shiftKey : e.shiftKey });\r\n\t\t\t\t\t\t$(e.currentTarget).closest(\".jstree-node\").children(\".jstree-anchor\").first().trigger(tmp).focus();\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on(\"mouseover.jstree\", \".jstree-wholerow, .jstree-icon\", $.proxy(function (e) {\r\n\t\t\t\t\t\te.stopImmediatePropagation();\r\n\t\t\t\t\t\tif(!this.is_disabled(e.currentTarget)) {\r\n\t\t\t\t\t\t\tthis.hover_node(e.currentTarget);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on(\"mouseleave.jstree\", \".jstree-node\", $.proxy(function (e) {\r\n\t\t\t\t\t\tthis.dehover_node(e.currentTarget);\r\n\t\t\t\t\t}, this));\r\n\t\t};\r\n\t\tthis.teardown = function () {\r\n\t\t\tif(this.settings.wholerow) {\r\n\t\t\t\tthis.element.find(\".jstree-wholerow\").remove();\r\n\t\t\t}\r\n\t\t\tparent.teardown.call(this);\r\n\t\t};\r\n\t\tthis.redraw_node = function(obj, deep, callback, force_render) {\r\n\t\t\tobj = parent.redraw_node.apply(this, arguments);\r\n\t\t\tif(obj) {\r\n\t\t\t\tvar tmp = div.cloneNode(true);\r\n\t\t\t\t//tmp.style.height = this._data.core.li_height + 'px';\r\n\t\t\t\tif($.inArray(obj.id, this._data.core.selected) !== -1) { tmp.className += ' jstree-wholerow-clicked'; }\r\n\t\t\t\tif(this._data.core.focused && this._data.core.focused === obj.id) { tmp.className += ' jstree-wholerow-hovered'; }\r\n\t\t\t\tobj.insertBefore(tmp, obj.childNodes[0]);\r\n\t\t\t}\r\n\t\t\treturn obj;\r\n\t\t};\r\n\t};\r\n\t// include the wholerow plugin by default\r\n\t// $.jstree.defaults.plugins.push(\"wholerow\");\r\n\r\n\treturn $;\r\n\r\n});\r\n\ndefine('skylark-widgets-hierarchy/main',[\r\n    \"skylark-domx-query\",\r\n    \"./Hierarchy\",\r\n    \"./addons/changed\",\r\n    \"./addons/checkbox\",\r\n    \"./addons/conditionalselect\",\r\n    \"./addons/contextmenu\",\r\n    \"./addons/dnd\",\r\n    \"./addons/massload\",\r\n    \"./addons/search\",\r\n    \"./addons/sort\",\r\n    \"./addons/state\",\r\n    \"./addons/treegrid\",\r\n    \"./addons/types\",\r\n    \"./addons/unique\",\r\n    \"./addons/wholerow\"\r\n], function($) {\r\n    return $;\r\n});\ndefine('skylark-widgets-hierarchy', ['skylark-widgets-hierarchy/main'], function (main) { return main; });\n\n"]}