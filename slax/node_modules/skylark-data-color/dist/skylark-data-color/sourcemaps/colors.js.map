{"version":3,"sources":["colors.js"],"names":["define","skylark","langx","colors","trimLeft","trimRight","math","Math","mathRound","round","mathMin","min","mathMax","max","names","random","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","burntsienna","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","hexNames","o","flipped","i","hasOwnProperty","flip","rgbToRgb","r","g","b","bound01","hslToRgb","h","s","l","hue2rgb","p","q","t","boundAlpha","a","parseFloat","isNaN","n","isOnePointZero","processPercent","isPercentage","parseInt","abs","parseIntFromHex","val","indexOf","pad2","c","length","convertToPercentage","convertHexToDecimal","CSS_UNIT","PERMISSIVE_MATCH3","PERMISSIVE_MATCH4","matchers","rgb","RegExp","rgba","hsl","hsla","hsv","hsva","hex3","hex6","hex8","stringInputToObject","color","replace","toLowerCase","match","named","format","exec","v","mixin","inputToRGB","ok","String","substr","floor","f","mod","hsvToRgb","rgbToHsl","d","rgbToHsv","rgbToHex","allow3Char","hex","toString","charAt","join","rgbaToHex","clamp01","attach"],"mappings":"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","file":"../colors.js","sourcesContent":["define([\r\n    \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\"\r\n],function(skylark,langx) {\r\n    /*\r\n     * This module uses the following open source code:\r\n     *   TinyColor v1.1.2\r\n     *     https://github.com/bgrins/TinyColor\r\n     *     Brian Grinstead, MIT License\r\n     */\r\n\r\n    var colors = skylark.colors =  skylark.colors || {};\r\n\r\n    var trimLeft = /^[\\s,#]+/,\r\n        trimRight = /\\s+$/,\r\n        math = Math,\r\n        mathRound = math.round,\r\n        mathMin = math.min,\r\n        mathMax = math.max,\r\n        mathRandom = math.random;\r\n\r\n\r\n     // Big List of Colors\r\n    // ------------------\r\n    // <http://www.w3.org/TR/css3-color/#svg-color>\r\n    var names = colors.names = {\r\n        aliceblue: \"f0f8ff\",\r\n        antiquewhite: \"faebd7\",\r\n        aqua: \"0ff\",\r\n        aquamarine: \"7fffd4\",\r\n        azure: \"f0ffff\",\r\n        beige: \"f5f5dc\",\r\n        bisque: \"ffe4c4\",\r\n        black: \"000\",\r\n        blanchedalmond: \"ffebcd\",\r\n        blue: \"00f\",\r\n        blueviolet: \"8a2be2\",\r\n        brown: \"a52a2a\",\r\n        burlywood: \"deb887\",\r\n        burntsienna: \"ea7e5d\",\r\n        cadetblue: \"5f9ea0\",\r\n        chartreuse: \"7fff00\",\r\n        chocolate: \"d2691e\",\r\n        coral: \"ff7f50\",\r\n        cornflowerblue: \"6495ed\",\r\n        cornsilk: \"fff8dc\",\r\n        crimson: \"dc143c\",\r\n        cyan: \"0ff\",\r\n        darkblue: \"00008b\",\r\n        darkcyan: \"008b8b\",\r\n        darkgoldenrod: \"b8860b\",\r\n        darkgray: \"a9a9a9\",\r\n        darkgreen: \"006400\",\r\n        darkgrey: \"a9a9a9\",\r\n        darkkhaki: \"bdb76b\",\r\n        darkmagenta: \"8b008b\",\r\n        darkolivegreen: \"556b2f\",\r\n        darkorange: \"ff8c00\",\r\n        darkorchid: \"9932cc\",\r\n        darkred: \"8b0000\",\r\n        darksalmon: \"e9967a\",\r\n        darkseagreen: \"8fbc8f\",\r\n        darkslateblue: \"483d8b\",\r\n        darkslategray: \"2f4f4f\",\r\n        darkslategrey: \"2f4f4f\",\r\n        darkturquoise: \"00ced1\",\r\n        darkviolet: \"9400d3\",\r\n        deeppink: \"ff1493\",\r\n        deepskyblue: \"00bfff\",\r\n        dimgray: \"696969\",\r\n        dimgrey: \"696969\",\r\n        dodgerblue: \"1e90ff\",\r\n        firebrick: \"b22222\",\r\n        floralwhite: \"fffaf0\",\r\n        forestgreen: \"228b22\",\r\n        fuchsia: \"f0f\",\r\n        gainsboro: \"dcdcdc\",\r\n        ghostwhite: \"f8f8ff\",\r\n        gold: \"ffd700\",\r\n        goldenrod: \"daa520\",\r\n        gray: \"808080\",\r\n        green: \"008000\",\r\n        greenyellow: \"adff2f\",\r\n        grey: \"808080\",\r\n        honeydew: \"f0fff0\",\r\n        hotpink: \"ff69b4\",\r\n        indianred: \"cd5c5c\",\r\n        indigo: \"4b0082\",\r\n        ivory: \"fffff0\",\r\n        khaki: \"f0e68c\",\r\n        lavender: \"e6e6fa\",\r\n        lavenderblush: \"fff0f5\",\r\n        lawngreen: \"7cfc00\",\r\n        lemonchiffon: \"fffacd\",\r\n        lightblue: \"add8e6\",\r\n        lightcoral: \"f08080\",\r\n        lightcyan: \"e0ffff\",\r\n        lightgoldenrodyellow: \"fafad2\",\r\n        lightgray: \"d3d3d3\",\r\n        lightgreen: \"90ee90\",\r\n        lightgrey: \"d3d3d3\",\r\n        lightpink: \"ffb6c1\",\r\n        lightsalmon: \"ffa07a\",\r\n        lightseagreen: \"20b2aa\",\r\n        lightskyblue: \"87cefa\",\r\n        lightslategray: \"789\",\r\n        lightslategrey: \"789\",\r\n        lightsteelblue: \"b0c4de\",\r\n        lightyellow: \"ffffe0\",\r\n        lime: \"0f0\",\r\n        limegreen: \"32cd32\",\r\n        linen: \"faf0e6\",\r\n        magenta: \"f0f\",\r\n        maroon: \"800000\",\r\n        mediumaquamarine: \"66cdaa\",\r\n        mediumblue: \"0000cd\",\r\n        mediumorchid: \"ba55d3\",\r\n        mediumpurple: \"9370db\",\r\n        mediumseagreen: \"3cb371\",\r\n        mediumslateblue: \"7b68ee\",\r\n        mediumspringgreen: \"00fa9a\",\r\n        mediumturquoise: \"48d1cc\",\r\n        mediumvioletred: \"c71585\",\r\n        midnightblue: \"191970\",\r\n        mintcream: \"f5fffa\",\r\n        mistyrose: \"ffe4e1\",\r\n        moccasin: \"ffe4b5\",\r\n        navajowhite: \"ffdead\",\r\n        navy: \"000080\",\r\n        oldlace: \"fdf5e6\",\r\n        olive: \"808000\",\r\n        olivedrab: \"6b8e23\",\r\n        orange: \"ffa500\",\r\n        orangered: \"ff4500\",\r\n        orchid: \"da70d6\",\r\n        palegoldenrod: \"eee8aa\",\r\n        palegreen: \"98fb98\",\r\n        paleturquoise: \"afeeee\",\r\n        palevioletred: \"db7093\",\r\n        papayawhip: \"ffefd5\",\r\n        peachpuff: \"ffdab9\",\r\n        peru: \"cd853f\",\r\n        pink: \"ffc0cb\",\r\n        plum: \"dda0dd\",\r\n        powderblue: \"b0e0e6\",\r\n        purple: \"800080\",\r\n        rebeccapurple: \"663399\",\r\n        red: \"f00\",\r\n        rosybrown: \"bc8f8f\",\r\n        royalblue: \"4169e1\",\r\n        saddlebrown: \"8b4513\",\r\n        salmon: \"fa8072\",\r\n        sandybrown: \"f4a460\",\r\n        seagreen: \"2e8b57\",\r\n        seashell: \"fff5ee\",\r\n        sienna: \"a0522d\",\r\n        silver: \"c0c0c0\",\r\n        skyblue: \"87ceeb\",\r\n        slateblue: \"6a5acd\",\r\n        slategray: \"708090\",\r\n        slategrey: \"708090\",\r\n        snow: \"fffafa\",\r\n        springgreen: \"00ff7f\",\r\n        steelblue: \"4682b4\",\r\n        tan: \"d2b48c\",\r\n        teal: \"008080\",\r\n        thistle: \"d8bfd8\",\r\n        tomato: \"ff6347\",\r\n        turquoise: \"40e0d0\",\r\n        violet: \"ee82ee\",\r\n        wheat: \"f5deb3\",\r\n        white: \"fff\",\r\n        whitesmoke: \"f5f5f5\",\r\n        yellow: \"ff0\",\r\n        yellowgreen: \"9acd32\"\r\n    };\r\n\r\n    // Make it easy to access colors via `hexNames[hex]`\r\n    var hexNames = colors.hexNames = flip(names);\r\n\r\n\r\n    // Utilities\r\n    // ---------\r\n\r\n    // `{ 'name1': 'val1' }` becomes `{ 'val1': 'name1' }`\r\n    function flip(o) {\r\n        var flipped = { };\r\n        for (var i in o) {\r\n            if (o.hasOwnProperty(i)) {\r\n                flipped[o[i]] = i;\r\n            }\r\n        }\r\n        return flipped;\r\n    }\r\n       \r\n\r\n\r\n    // Given a string or object, convert that input to RGB\r\n    // Possible string inputs:\r\n    //\r\n    //     \"red\"\r\n    //     \"#f00\" or \"f00\"\r\n    //     \"#ff0000\" or \"ff0000\"\r\n    //     \"#ff000000\" or \"ff000000\"\r\n    //     \"rgb 255 0 0\" or \"rgb (255, 0, 0)\"\r\n    //     \"rgb 1.0 0 0\" or \"rgb (1, 0, 0)\"\r\n    //     \"rgba (255, 0, 0, 1)\" or \"rgba 255, 0, 0, 1\"\r\n    //     \"rgba (1.0, 0, 0, 1)\" or \"rgba 1.0, 0, 0, 1\"\r\n    //     \"hsl(0, 100%, 50%)\" or \"hsl 0 100% 50%\"\r\n    //     \"hsla(0, 100%, 50%, 1)\" or \"hsla 0 100% 50%, 1\"\r\n    //     \"hsv(0, 100%, 100%)\" or \"hsv 0 100% 100%\"\r\n    //\r\n    function inputToRGB(color) {\r\n\r\n        var rgb = { r: 0, g: 0, b: 0 };\r\n        var a = 1;\r\n        var ok = false;\r\n        var format = false;\r\n\r\n        if (typeof color == \"string\") {\r\n            color = stringInputToObject(color);\r\n        }\r\n\r\n        if (typeof color == \"object\") {\r\n            if (color.hasOwnProperty(\"r\") && color.hasOwnProperty(\"g\") && color.hasOwnProperty(\"b\")) {\r\n                rgb = rgbToRgb(color.r, color.g, color.b);\r\n                ok = true;\r\n                format = String(color.r).substr(-1) === \"%\" ? \"prgb\" : \"rgb\";\r\n            }\r\n            else if (color.hasOwnProperty(\"h\") && color.hasOwnProperty(\"s\") && color.hasOwnProperty(\"v\")) {\r\n                color.s = convertToPercentage(color.s);\r\n                color.v = convertToPercentage(color.v);\r\n                rgb = hsvToRgb(color.h, color.s, color.v);\r\n                ok = true;\r\n                format = \"hsv\";\r\n            }\r\n            else if (color.hasOwnProperty(\"h\") && color.hasOwnProperty(\"s\") && color.hasOwnProperty(\"l\")) {\r\n                color.s = convertToPercentage(color.s);\r\n                color.l = convertToPercentage(color.l);\r\n                rgb = hslToRgb(color.h, color.s, color.l);\r\n                ok = true;\r\n                format = \"hsl\";\r\n            }\r\n\r\n            if (color.hasOwnProperty(\"a\")) {\r\n                a = color.a;\r\n            }\r\n        }\r\n\r\n        a = boundAlpha(a);\r\n\r\n        return {\r\n            ok: ok,\r\n            format: color.format || format,\r\n            r: mathMin(255, mathMax(rgb.r, 0)),\r\n            g: mathMin(255, mathMax(rgb.g, 0)),\r\n            b: mathMin(255, mathMax(rgb.b, 0)),\r\n            a: a\r\n        };\r\n    }\r\n\r\n\r\n    // Conversion Functions\r\n    // --------------------\r\n\r\n    // `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:\r\n    // <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>\r\n\r\n    // `rgbToRgb`\r\n    // Handle bounds / percentage checking to conform to CSS color spec\r\n    // <http://www.w3.org/TR/css3-color/>\r\n    // *Assumes:* r, g, b in [0, 255] or [0, 1]\r\n    // *Returns:* { r, g, b } in [0, 255]\r\n    function rgbToRgb(r, g, b){\r\n        return {\r\n            r: bound01(r, 255) * 255,\r\n            g: bound01(g, 255) * 255,\r\n            b: bound01(b, 255) * 255\r\n        };\r\n    }\r\n\r\n    // `rgbToHsl`\r\n    // Converts an RGB color value to HSL.\r\n    // *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]\r\n    // *Returns:* { h, s, l } in [0,1]\r\n    function rgbToHsl(r, g, b) {\r\n\r\n        r = bound01(r, 255);\r\n        g = bound01(g, 255);\r\n        b = bound01(b, 255);\r\n\r\n        var max = mathMax(r, g, b), min = mathMin(r, g, b);\r\n        var h, s, l = (max + min) / 2;\r\n\r\n        if(max == min) {\r\n            h = s = 0; // achromatic\r\n        }\r\n        else {\r\n            var d = max - min;\r\n            s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\r\n            switch(max) {\r\n                case r: h = (g - b) / d + (g < b ? 6 : 0); break;\r\n                case g: h = (b - r) / d + 2; break;\r\n                case b: h = (r - g) / d + 4; break;\r\n            }\r\n\r\n            h /= 6;\r\n        }\r\n\r\n        return { h: h, s: s, l: l };\r\n    }\r\n\r\n    // `hslToRgb`\r\n    // Converts an HSL color value to RGB.\r\n    // *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]\r\n    // *Returns:* { r, g, b } in the set [0, 255]\r\n    function hslToRgb(h, s, l) {\r\n        var r, g, b;\r\n\r\n        h = bound01(h, 360);\r\n        s = bound01(s, 100);\r\n        l = bound01(l, 100);\r\n\r\n        function hue2rgb(p, q, t) {\r\n            if(t < 0) t += 1;\r\n            if(t > 1) t -= 1;\r\n            if(t < 1/6) return p + (q - p) * 6 * t;\r\n            if(t < 1/2) return q;\r\n            if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;\r\n            return p;\r\n        }\r\n\r\n        if(s === 0) {\r\n            r = g = b = l; // achromatic\r\n        }\r\n        else {\r\n            var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\r\n            var p = 2 * l - q;\r\n            r = hue2rgb(p, q, h + 1/3);\r\n            g = hue2rgb(p, q, h);\r\n            b = hue2rgb(p, q, h - 1/3);\r\n        }\r\n\r\n        return { r: r * 255, g: g * 255, b: b * 255 };\r\n    }\r\n\r\n    // `rgbToHsv`\r\n    // Converts an RGB color value to HSV\r\n    // *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]\r\n    // *Returns:* { h, s, v } in [0,1]\r\n    function rgbToHsv(r, g, b) {\r\n\r\n        r = bound01(r, 255);\r\n        g = bound01(g, 255);\r\n        b = bound01(b, 255);\r\n\r\n        var max = mathMax(r, g, b), min = mathMin(r, g, b);\r\n        var h, s, v = max;\r\n\r\n        var d = max - min;\r\n        s = max === 0 ? 0 : d / max;\r\n\r\n        if(max == min) {\r\n            h = 0; // achromatic\r\n        }\r\n        else {\r\n            switch(max) {\r\n                case r: h = (g - b) / d + (g < b ? 6 : 0); break;\r\n                case g: h = (b - r) / d + 2; break;\r\n                case b: h = (r - g) / d + 4; break;\r\n            }\r\n            h /= 6;\r\n        }\r\n        return { h: h, s: s, v: v };\r\n    }\r\n\r\n    // `hsvToRgb`\r\n    // Converts an HSV color value to RGB.\r\n    // *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]\r\n    // *Returns:* { r, g, b } in the set [0, 255]\r\n     function hsvToRgb(h, s, v) {\r\n\r\n        h = bound01(h, 360) * 6;\r\n        s = bound01(s, 100);\r\n        v = bound01(v, 100);\r\n\r\n        var i = math.floor(h),\r\n            f = h - i,\r\n            p = v * (1 - s),\r\n            q = v * (1 - f * s),\r\n            t = v * (1 - (1 - f) * s),\r\n            mod = i % 6,\r\n            r = [v, q, p, p, t, v][mod],\r\n            g = [t, v, v, q, p, p][mod],\r\n            b = [p, p, t, v, v, q][mod];\r\n\r\n        return { r: r * 255, g: g * 255, b: b * 255 };\r\n    }\r\n\r\n    // `rgbToHex`\r\n    // Converts an RGB color to hex\r\n    // Assumes r, g, and b are contained in the set [0, 255]\r\n    // Returns a 3 or 6 character hex\r\n    function rgbToHex(r, g, b, allow3Char) {\r\n\r\n        var hex = [\r\n            pad2(mathRound(r).toString(16)),\r\n            pad2(mathRound(g).toString(16)),\r\n            pad2(mathRound(b).toString(16))\r\n        ];\r\n\r\n        // Return a 3 character hex if possible\r\n        if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {\r\n            return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);\r\n        }\r\n\r\n        return hex.join(\"\");\r\n    }\r\n\r\n    // `rgbaToHex`\r\n    // Converts an RGBA color plus alpha transparency to hex\r\n    // Assumes r, g, b and a are contained in the set [0, 255]\r\n    // Returns an 8 character hex\r\n    function rgbaToHex(r, g, b, a) {\r\n\r\n        var hex = [\r\n            pad2(convertDecimalToHex(a)),\r\n            pad2(mathRound(r).toString(16)),\r\n            pad2(mathRound(g).toString(16)),\r\n            pad2(mathRound(b).toString(16))\r\n        ];\r\n\r\n        return hex.join(\"\");\r\n    }\r\n\r\n\r\n\r\n    // Return a valid alpha value [0,1] with all invalid values being set to 1\r\n    function boundAlpha(a) {\r\n        a = parseFloat(a);\r\n\r\n        if (isNaN(a) || a < 0 || a > 1) {\r\n            a = 1;\r\n        }\r\n\r\n        return a;\r\n    }\r\n\r\n    // Take input from [0, n] and return it as [0, 1]\r\n    function bound01(n, max) {\r\n        if (isOnePointZero(n)) { n = \"100%\"; }\r\n\r\n        var processPercent = isPercentage(n);\r\n        n = mathMin(max, mathMax(0, parseFloat(n)));\r\n\r\n        // Automatically convert percentage into number\r\n        if (processPercent) {\r\n            n = parseInt(n * max, 10) / 100;\r\n        }\r\n\r\n        // Handle floating point rounding errors\r\n        if ((math.abs(n - max) < 0.000001)) {\r\n            return 1;\r\n        }\r\n\r\n        // Convert into [0, 1] range if it isn't already\r\n        return (n % max) / parseFloat(max);\r\n    }\r\n\r\n    // Force a number between 0 and 1\r\n    function clamp01(val) {\r\n        return mathMin(1, mathMax(0, val));\r\n    }\r\n\r\n    // Parse a base-16 hex value into a base-10 integer\r\n    function parseIntFromHex(val) {\r\n        return parseInt(val, 16);\r\n    }\r\n\r\n    // Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1\r\n    // <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>\r\n    function isOnePointZero(n) {\r\n        return typeof n == \"string\" && n.indexOf('.') != -1 && parseFloat(n) === 1;\r\n    }\r\n\r\n    // Check to see if string passed in is a percentage\r\n    function isPercentage(n) {\r\n        return typeof n === \"string\" && n.indexOf('%') != -1;\r\n    }\r\n\r\n    // Force a hex value to have 2 characters\r\n    function pad2(c) {\r\n        return c.length == 1 ? '0' + c : '' + c;\r\n    }\r\n\r\n    // Replace a decimal with it's percentage value\r\n    function convertToPercentage(n) {\r\n        if (n <= 1) {\r\n            n = (n * 100) + \"%\";\r\n        }\r\n\r\n        return n;\r\n    }\r\n\r\n    // Converts a decimal to a hex value\r\n    function convertDecimalToHex(d) {\r\n        return Math.round(parseFloat(d) * 255).toString(16);\r\n    }\r\n    // Converts a hex value to a decimal\r\n    function convertHexToDecimal(h) {\r\n        return (parseIntFromHex(h) / 255);\r\n    }\r\n\r\n    var matchers = (function() {\r\n\r\n        // <http://www.w3.org/TR/css3-values/#integers>\r\n        var CSS_INTEGER = \"[-\\\\+]?\\\\d+%?\";\r\n\r\n        // <http://www.w3.org/TR/css3-values/#number-value>\r\n        var CSS_NUMBER = \"[-\\\\+]?\\\\d*\\\\.\\\\d+%?\";\r\n\r\n        // Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.\r\n        var CSS_UNIT = \"(?:\" + CSS_NUMBER + \")|(?:\" + CSS_INTEGER + \")\";\r\n\r\n        // Actual matching.\r\n        // Parentheses and commas are optional, but not required.\r\n        // Whitespace can take the place of commas or opening paren\r\n        var PERMISSIVE_MATCH3 = \"[\\\\s|\\\\(]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")\\\\s*\\\\)?\";\r\n        var PERMISSIVE_MATCH4 = \"[\\\\s|\\\\(]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")\\\\s*\\\\)?\";\r\n\r\n        return {\r\n            rgb: new RegExp(\"rgb\" + PERMISSIVE_MATCH3),\r\n            rgba: new RegExp(\"rgba\" + PERMISSIVE_MATCH4),\r\n            hsl: new RegExp(\"hsl\" + PERMISSIVE_MATCH3),\r\n            hsla: new RegExp(\"hsla\" + PERMISSIVE_MATCH4),\r\n            hsv: new RegExp(\"hsv\" + PERMISSIVE_MATCH3),\r\n            hsva: new RegExp(\"hsva\" + PERMISSIVE_MATCH4),\r\n            hex3: /^([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\r\n            hex6: /^([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\r\n            hex8: /^([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/\r\n        };\r\n    })();\r\n\r\n    // `stringInputToObject`\r\n    // Permissive string parsing.  Take in a number of formats, and output an object\r\n    // based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`\r\n    function stringInputToObject(color) {\r\n\r\n        color = color.replace(trimLeft,'').replace(trimRight, '').toLowerCase();\r\n        var named = false;\r\n        if (names[color]) {\r\n            color = names[color];\r\n            named = true;\r\n        }\r\n        else if (color == 'transparent') {\r\n            return { r: 0, g: 0, b: 0, a: 0, format: \"name\" };\r\n        }\r\n\r\n        // Try to match string input using regular expressions.\r\n        // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]\r\n        // Just return an object and let the conversion functions handle that.\r\n        // This way the result will be the same whether the tinycolor is initialized with string or object.\r\n        var match;\r\n        if ((match = matchers.rgb.exec(color))) {\r\n            return { r: match[1], g: match[2], b: match[3] };\r\n        }\r\n        if ((match = matchers.rgba.exec(color))) {\r\n            return { r: match[1], g: match[2], b: match[3], a: match[4] };\r\n        }\r\n        if ((match = matchers.hsl.exec(color))) {\r\n            return { h: match[1], s: match[2], l: match[3] };\r\n        }\r\n        if ((match = matchers.hsla.exec(color))) {\r\n            return { h: match[1], s: match[2], l: match[3], a: match[4] };\r\n        }\r\n        if ((match = matchers.hsv.exec(color))) {\r\n            return { h: match[1], s: match[2], v: match[3] };\r\n        }\r\n        if ((match = matchers.hsva.exec(color))) {\r\n            return { h: match[1], s: match[2], v: match[3], a: match[4] };\r\n        }\r\n        if ((match = matchers.hex8.exec(color))) {\r\n            return {\r\n                a: convertHexToDecimal(match[1]),\r\n                r: parseIntFromHex(match[2]),\r\n                g: parseIntFromHex(match[3]),\r\n                b: parseIntFromHex(match[4]),\r\n                format: named ? \"name\" : \"hex8\"\r\n            };\r\n        }\r\n        if ((match = matchers.hex6.exec(color))) {\r\n            return {\r\n                r: parseIntFromHex(match[1]),\r\n                g: parseIntFromHex(match[2]),\r\n                b: parseIntFromHex(match[3]),\r\n                format: named ? \"name\" : \"hex\"\r\n            };\r\n        }\r\n        if ((match = matchers.hex3.exec(color))) {\r\n            return {\r\n                r: parseIntFromHex(match[1] + '' + match[1]),\r\n                g: parseIntFromHex(match[2] + '' + match[2]),\r\n                b: parseIntFromHex(match[3] + '' + match[3]),\r\n                format: named ? \"name\" : \"hex\"\r\n            };\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    langx.mixin(colors,{\r\n        inputToRGB : inputToRGB,\r\n        rgbToRgb : rgbToRgb,\r\n        rgbToHsl : rgbToHsl,\r\n        hslToRgb : hslToRgb,\r\n        rgbToHsv : rgbToHsv,\r\n        rgbToHex : rgbToHex,\r\n        rgbaToHex : rgbaToHex,\r\n        boundAlpha : boundAlpha,\r\n        bound01 : bound01,\r\n        clamp01 : clamp01,\r\n        parseIntFromHex : parseIntFromHex,\r\n        isOnePointZero : isOnePointZero,\r\n        isPercentage : isPercentage,\r\n        pad2 : pad2,\r\n        convertToPercentage : convertToPercentage,\r\n        convertHexToDecimal : convertHexToDecimal,\r\n        stringInputToObject : stringInputToObject\r\n\r\n    });\r\n\r\n    return skylark.attach(\"data.colors\",colors);\r\n\r\n});\r\n"]}