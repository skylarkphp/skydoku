{"version":3,"sources":["Color.js"],"names":["define","langx","colors","inputToRGB","rgbToHsl","rgbToRgb","rgbToHsv","hslToRgb","rgbToHex","rgbaToHex","boundAlpha","bound01","clamp01","convertToPercentage","parseIntFromHex","isOnePointZero","isPercentage","pad2","hexNames","convertHexToDecimal","stringInputToObject","tinyCounter","math","Math","mathRound","round","mathMin","min","mathMax","max","mathRandom","random","Color","klass","init","color","opts","rgb","this","_originalInput","_r","r","_g","g","_b","b","_a","a","_roundA","_format","format","_gradientType","gradientType","_ok","ok","_tc_id","isDark","getBrightness","isLight","isValid","getOriginalInput","getFormat","getAlpha","toRgb","setAlpha","value","toHsv","hsv","h","s","v","toHsvString","toHsl","hsl","l","toHslString","toHex","allow3Char","toHexString","toHex8","toHex8String","toRgbString","toPercentageRgb","toPercentageRgbString","toName","toFilter","secondColor","hex8String","secondHex8String","toString","formatSet","formattedString","hasAlpha","_applyModification","fn","args","apply","concat","slice","call","lighten","arguments","brighten","darken","desaturate","saturate","greyscale","spin","_applyCombination","analogous","complement","monochromatic","splitcomplement","triad","tetrad","amount","hue","results","slices","part","ret","push","modification","fromRatio","newColor","i","hasOwnProperty","equals","color1","color2","mix","w1","rgb1","rgb2","p","w","w2","rgba","readability","c1","c2","brightnessA","brightnessB","colorDiff","brightness","abs","isReadable","mostReadable","baseColor","colorList","bestColor","bestScore","bestIsReadable","length","readable","score"],"mappings":"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","file":"../Color.js","sourcesContent":["define([\r\n    \"skylark-langx/langx\",\r\n    \"./colors\"\r\n],function(langx,colors) {\r\n    /*\r\n     * This module uses the following open source code:\r\n     *   TinyColor v1.1.2\r\n     *     https://github.com/bgrins/TinyColor\r\n     *     Brian Grinstead, MIT License\r\n     */\r\n\r\n    var inputToRGB = colors.inputToRGB,\r\n        rgbToRgb = colors.rgbToRgb,\r\n        rgbToHsl = colors.rgbToHsl,\r\n        hslToRgb = colors.hslToRgb,\r\n        rgbToHsv = colors.rgbToHsv,\r\n        rgbToHex = colors.rgbToHex,\r\n        rgbaToHex = colors.rgbaToHex,\r\n        boundAlpha = colors.boundAlpha,\r\n        bound01 = colors.bound01,\r\n        clamp01 = colors.clamp01,\r\n        parseIntFromHex = colors.parseIntFromHex,\r\n        isOnePointZero = colors.isOnePointZero,\r\n        isPercentage = colors.isPercentage,\r\n        pad2 = colors.pad2,\r\n        convertToPercentage = colors.convertToPercentage,\r\n        convertHexToDecimal = colors.convertHexToDecimal,\r\n        stringInputToObject = colors.stringInputToObject,\r\n        hexNames = colors.hexNames;\r\n\r\n    var tinyCounter = 0,\r\n        math = Math,\r\n        mathRound = math.round,\r\n        mathMin = math.min,\r\n        mathMax = math.max,\r\n        mathRandom = math.random;\r\n\r\n\tvar Color = colors.Color = langx.klass({\r\n\t\tinit : function(color, opts) {\r\n\t        color = (color) ? color : '';\r\n    \t    opts = opts || { };\r\n\r\n\t        // If input is already a Color, return itself\r\n\t        if (color instanceof Color) {\r\n\t           return color;\r\n\t        }\r\n\r\n\t        var rgb = inputToRGB(color);\r\n\t        this._originalInput = color,\r\n\t        this._r = rgb.r,\r\n\t        this._g = rgb.g,\r\n\t        this._b = rgb.b,\r\n\t        this._a = rgb.a,\r\n\t        this._roundA = mathRound(1000 * this._a) / 1000,\r\n\t        this._format = opts.format || rgb.format;\r\n\t        this._gradientType = opts.gradientType;\r\n\r\n\t        // Don't let the range of [0,255] come back in [0,1].\r\n\t        // Potentially lose a little bit of precision here, but will fix issues where\r\n\t        // .5 gets interpreted as half of the total, instead of half of 1\r\n\t        // If it was supposed to be 128, this was already taken care of by `inputToRgb`\r\n\t        if (this._r < 1) { this._r = mathRound(this._r); }\r\n\t        if (this._g < 1) { this._g = mathRound(this._g); }\r\n\t        if (this._b < 1) { this._b = mathRound(this._b); }\r\n\r\n\t        this._ok = rgb.ok;\r\n\t        this._tc_id = tinyCounter++;\r\n\t    },\r\n\r\n        isDark: function() {\r\n            return this.getBrightness() < 128;\r\n        },\r\n        isLight: function() {\r\n            return !this.isDark();\r\n        },\r\n        isValid: function() {\r\n            return this._ok;\r\n        },\r\n        getOriginalInput: function() {\r\n          return this._originalInput;\r\n        },\r\n        getFormat: function() {\r\n            return this._format;\r\n        },\r\n        getAlpha: function() {\r\n            return this._a;\r\n        },\r\n        getBrightness: function() {\r\n            var rgb = this.toRgb();\r\n            return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;\r\n        },\r\n        setAlpha: function(value) {\r\n            this._a = boundAlpha(value);\r\n            this._roundA = mathRound(1000 * this._a) / 1000;\r\n            return this;\r\n        },\r\n        toHsv: function() {\r\n            var hsv = rgbToHsv(this._r, this._g, this._b);\r\n            return { h: hsv.h * 360, s: hsv.s, v: hsv.v, a: this._a };\r\n        },\r\n        toHsvString: function() {\r\n            var hsv = rgbToHsv(this._r, this._g, this._b);\r\n            var h = mathRound(hsv.h * 360), s = mathRound(hsv.s * 100), v = mathRound(hsv.v * 100);\r\n            return (this._a == 1) ?\r\n              \"hsv(\"  + h + \", \" + s + \"%, \" + v + \"%)\" :\r\n              \"hsva(\" + h + \", \" + s + \"%, \" + v + \"%, \"+ this._roundA + \")\";\r\n        },\r\n        toHsl: function() {\r\n            var hsl = rgbToHsl(this._r, this._g, this._b);\r\n            return { h: hsl.h * 360, s: hsl.s, l: hsl.l, a: this._a };\r\n        },\r\n        toHslString: function() {\r\n            var hsl = rgbToHsl(this._r, this._g, this._b);\r\n            var h = mathRound(hsl.h * 360), s = mathRound(hsl.s * 100), l = mathRound(hsl.l * 100);\r\n            return (this._a == 1) ?\r\n              \"hsl(\"  + h + \", \" + s + \"%, \" + l + \"%)\" :\r\n              \"hsla(\" + h + \", \" + s + \"%, \" + l + \"%, \"+ this._roundA + \")\";\r\n        },\r\n        toHex: function(allow3Char) {\r\n            return rgbToHex(this._r, this._g, this._b, allow3Char);\r\n        },\r\n        toHexString: function(allow3Char) {\r\n            return '#' + this.toHex(allow3Char);\r\n        },\r\n        toHex8: function() {\r\n            return rgbaToHex(this._r, this._g, this._b, this._a);\r\n        },\r\n        toHex8String: function() {\r\n            return '#' + this.toHex8();\r\n        },\r\n        toRgb: function() {\r\n            return { r: mathRound(this._r), g: mathRound(this._g), b: mathRound(this._b), a: this._a };\r\n        },\r\n        toRgbString: function() {\r\n            return (this._a == 1) ?\r\n              \"rgb(\"  + mathRound(this._r) + \", \" + mathRound(this._g) + \", \" + mathRound(this._b) + \")\" :\r\n              \"rgba(\" + mathRound(this._r) + \", \" + mathRound(this._g) + \", \" + mathRound(this._b) + \", \" + this._roundA + \")\";\r\n        },\r\n        toPercentageRgb: function() {\r\n            return { r: mathRound(bound01(this._r, 255) * 100) + \"%\", g: mathRound(bound01(this._g, 255) * 100) + \"%\", b: mathRound(bound01(this._b, 255) * 100) + \"%\", a: this._a };\r\n        },\r\n        toPercentageRgbString: function() {\r\n            return (this._a == 1) ?\r\n              \"rgb(\"  + mathRound(bound01(this._r, 255) * 100) + \"%, \" + mathRound(bound01(this._g, 255) * 100) + \"%, \" + mathRound(bound01(this._b, 255) * 100) + \"%)\" :\r\n              \"rgba(\" + mathRound(bound01(this._r, 255) * 100) + \"%, \" + mathRound(bound01(this._g, 255) * 100) + \"%, \" + mathRound(bound01(this._b, 255) * 100) + \"%, \" + this._roundA + \")\";\r\n        },\r\n        toName: function() {\r\n            if (this._a === 0) {\r\n                return \"transparent\";\r\n            }\r\n\r\n            if (this._a < 1) {\r\n                return false;\r\n            }\r\n\r\n            return hexNames[rgbToHex(this._r, this._g, this._b, true)] || false;\r\n        },\r\n        toFilter: function(secondColor) {\r\n            var hex8String = '#' + rgbaToHex(this._r, this._g, this._b, this._a);\r\n            var secondHex8String = hex8String;\r\n            var gradientType = this._gradientType ? \"GradientType = 1, \" : \"\";\r\n\r\n            if (secondColor) {\r\n                var s = Color(secondColor);\r\n                secondHex8String = s.toHex8String();\r\n            }\r\n\r\n            return \"progid:DXImageTransform.Microsoft.gradient(\"+gradientType+\"startColorstr=\"+hex8String+\",endColorstr=\"+secondHex8String+\")\";\r\n        },\r\n        toString: function(format) {\r\n            var formatSet = !!format;\r\n            format = format || this._format;\r\n\r\n            var formattedString = false;\r\n            var hasAlpha = this._a < 1 && this._a >= 0;\r\n            var needsAlphaFormat = !formatSet && hasAlpha && (format === \"hex\" || format === \"hex6\" || format === \"hex3\" || format === \"name\");\r\n\r\n            if (needsAlphaFormat) {\r\n                // Special case for \"transparent\", all other non-alpha formats\r\n                // will return rgba when there is transparency.\r\n                if (format === \"name\" && this._a === 0) {\r\n                    return this.toName();\r\n                }\r\n                return this.toRgbString();\r\n            }\r\n            if (format === \"rgb\") {\r\n                formattedString = this.toRgbString();\r\n            }\r\n            if (format === \"prgb\") {\r\n                formattedString = this.toPercentageRgbString();\r\n            }\r\n            if (format === \"hex\" || format === \"hex6\") {\r\n                formattedString = this.toHexString();\r\n            }\r\n            if (format === \"hex3\") {\r\n                formattedString = this.toHexString(true);\r\n            }\r\n            if (format === \"hex8\") {\r\n                formattedString = this.toHex8String();\r\n            }\r\n            if (format === \"name\") {\r\n                formattedString = this.toName();\r\n            }\r\n            if (format === \"hsl\") {\r\n                formattedString = this.toHslString();\r\n            }\r\n            if (format === \"hsv\") {\r\n                formattedString = this.toHsvString();\r\n            }\r\n\r\n            return formattedString || this.toHexString();\r\n        },\r\n\r\n        _applyModification: function(fn, args) {\r\n            var color = fn.apply(null, [this].concat([].slice.call(args)));\r\n            this._r = color._r;\r\n            this._g = color._g;\r\n            this._b = color._b;\r\n            this.setAlpha(color._a);\r\n            return this;\r\n        },\r\n        lighten: function() {\r\n            return this._applyModification(lighten, arguments);\r\n        },\r\n        brighten: function() {\r\n            return this._applyModification(brighten, arguments);\r\n        },\r\n        darken: function() {\r\n            return this._applyModification(darken, arguments);\r\n        },\r\n        desaturate: function() {\r\n            return this._applyModification(desaturate, arguments);\r\n        },\r\n        saturate: function() {\r\n            return this._applyModification(saturate, arguments);\r\n        },\r\n        greyscale: function() {\r\n            return this._applyModification(greyscale, arguments);\r\n        },\r\n        spin: function() {\r\n            return this._applyModification(spin, arguments);\r\n        },\r\n\r\n        _applyCombination: function(fn, args) {\r\n            return fn.apply(null, [this].concat([].slice.call(args)));\r\n        },\r\n        analogous: function() {\r\n            return this._applyCombination(analogous, arguments);\r\n        },\r\n        complement: function() {\r\n            return this._applyCombination(complement, arguments);\r\n        },\r\n        monochromatic: function() {\r\n            return this._applyCombination(monochromatic, arguments);\r\n        },\r\n        splitcomplement: function() {\r\n            return this._applyCombination(splitcomplement, arguments);\r\n        },\r\n        triad: function() {\r\n            return this._applyCombination(triad, arguments);\r\n        },\r\n        tetrad: function() {\r\n            return this._applyCombination(tetrad, arguments);\r\n        }\r\n\t});\r\n\r\n\r\n\r\n    // If input is an object, force 1 into \"1.0\" to handle ratios properly\r\n    // String input requires \"1.0\" as input, so 1 will be treated as 1\r\n    Color.fromRatio = function(color, opts) {\r\n        if (typeof color == \"object\") {\r\n            var newColor = {};\r\n            for (var i in color) {\r\n                if (color.hasOwnProperty(i)) {\r\n                    if (i === \"a\") {\r\n                        newColor[i] = color[i];\r\n                    }\r\n                    else {\r\n                        newColor[i] = convertToPercentage(color[i]);\r\n                    }\r\n                }\r\n            }\r\n            color = newColor;\r\n        }\r\n\r\n        return Color(color, opts);\r\n    };\r\n\r\n    // `equals`\r\n    // Can be called with any Color input\r\n    Color.equals = function (color1, color2) {\r\n        if (!color1 || !color2) { return false; }\r\n        return Color(color1).toRgbString() == Color(color2).toRgbString();\r\n    };\r\n    \r\n    Color.random = function() {\r\n        return Color.fromRatio({\r\n            r: mathRandom(),\r\n            g: mathRandom(),\r\n            b: mathRandom()\r\n        });\r\n    };\r\n\r\n   // Modification Functions\r\n    // ----------------------\r\n    // Thanks to less.js for some of the basics here\r\n    // <https://github.com/cloudhead/less.js/blob/master/lib/less/functions.js>\r\n\r\n    function desaturate(color, amount) {\r\n        amount = (amount === 0) ? 0 : (amount || 10);\r\n        var hsl = Color(color).toHsl();\r\n        hsl.s -= amount / 100;\r\n        hsl.s = clamp01(hsl.s);\r\n        return Color(hsl);\r\n    }\r\n\r\n    function saturate(color, amount) {\r\n        amount = (amount === 0) ? 0 : (amount || 10);\r\n        var hsl = Color(color).toHsl();\r\n        hsl.s += amount / 100;\r\n        hsl.s = clamp01(hsl.s);\r\n        return Color(hsl);\r\n    }\r\n\r\n    function greyscale(color) {\r\n        return Color(color).desaturate(100);\r\n    }\r\n\r\n    function lighten (color, amount) {\r\n        amount = (amount === 0) ? 0 : (amount || 10);\r\n        var hsl = Color(color).toHsl();\r\n        hsl.l += amount / 100;\r\n        hsl.l = clamp01(hsl.l);\r\n        return Color(hsl);\r\n    }\r\n\r\n    function brighten(color, amount) {\r\n        amount = (amount === 0) ? 0 : (amount || 10);\r\n        var rgb = Color(color).toRgb();\r\n        rgb.r = mathMax(0, mathMin(255, rgb.r - mathRound(255 * - (amount / 100))));\r\n        rgb.g = mathMax(0, mathMin(255, rgb.g - mathRound(255 * - (amount / 100))));\r\n        rgb.b = mathMax(0, mathMin(255, rgb.b - mathRound(255 * - (amount / 100))));\r\n        return Color(rgb);\r\n    }\r\n\r\n    function darken (color, amount) {\r\n        amount = (amount === 0) ? 0 : (amount || 10);\r\n        var hsl = Color(color).toHsl();\r\n        hsl.l -= amount / 100;\r\n        hsl.l = clamp01(hsl.l);\r\n        return Color(hsl);\r\n    }\r\n\r\n    // Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.\r\n    // Values outside of this range will be wrapped into this range.\r\n    function spin(color, amount) {\r\n        var hsl = Color(color).toHsl();\r\n        var hue = (mathRound(hsl.h) + amount) % 360;\r\n        hsl.h = hue < 0 ? 360 + hue : hue;\r\n        return Color(hsl);\r\n    }\r\n\r\n    // Combination Functions\r\n    // ---------------------\r\n    // Thanks to jQuery xColor for some of the ideas behind these\r\n    // <https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js>\r\n\r\n    function complement(color) {\r\n        var hsl = Color(color).toHsl();\r\n        hsl.h = (hsl.h + 180) % 360;\r\n        return Color(hsl);\r\n    }\r\n\r\n    function triad(color) {\r\n        var hsl = Color(color).toHsl();\r\n        var h = hsl.h;\r\n        return [\r\n            Color(color),\r\n            Color({ h: (h + 120) % 360, s: hsl.s, l: hsl.l }),\r\n            Color({ h: (h + 240) % 360, s: hsl.s, l: hsl.l })\r\n        ];\r\n    }\r\n\r\n    function tetrad(color) {\r\n        var hsl = Color(color).toHsl();\r\n        var h = hsl.h;\r\n        return [\r\n            Color(color),\r\n            Color({ h: (h + 90) % 360, s: hsl.s, l: hsl.l }),\r\n            Color({ h: (h + 180) % 360, s: hsl.s, l: hsl.l }),\r\n            Color({ h: (h + 270) % 360, s: hsl.s, l: hsl.l })\r\n        ];\r\n    }\r\n\r\n    function splitcomplement(color) {\r\n        var hsl = Color(color).toHsl();\r\n        var h = hsl.h;\r\n        return [\r\n            Color(color),\r\n            Color({ h: (h + 72) % 360, s: hsl.s, l: hsl.l}),\r\n            Color({ h: (h + 216) % 360, s: hsl.s, l: hsl.l})\r\n        ];\r\n    }\r\n\r\n    function analogous(color, results, slices) {\r\n        results = results || 6;\r\n        slices = slices || 30;\r\n\r\n        var hsl = Color(color).toHsl();\r\n        var part = 360 / slices;\r\n        var ret = [Color(color)];\r\n\r\n        for (hsl.h = ((hsl.h - (part * results >> 1)) + 720) % 360; --results; ) {\r\n            hsl.h = (hsl.h + part) % 360;\r\n            ret.push(Color(hsl));\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    function monochromatic(color, results) {\r\n        results = results || 6;\r\n        var hsv = Color(color).toHsv();\r\n        var h = hsv.h, s = hsv.s, v = hsv.v;\r\n        var ret = [];\r\n        var modification = 1 / results;\r\n\r\n        while (results--) {\r\n            ret.push(Color({ h: h, s: s, v: v}));\r\n            v = (v + modification) % 1;\r\n        }\r\n\r\n        return ret;\r\n    }\r\n\r\n    // Utility Functions\r\n    // ---------------------\r\n\r\n    Color.mix = function(color1, color2, amount) {\r\n        amount = (amount === 0) ? 0 : (amount || 50);\r\n\r\n        var rgb1 = Color(color1).toRgb();\r\n        var rgb2 = Color(color2).toRgb();\r\n\r\n        var p = amount / 100;\r\n        var w = p * 2 - 1;\r\n        var a = rgb2.a - rgb1.a;\r\n\r\n        var w1;\r\n\r\n        if (w * a == -1) {\r\n            w1 = w;\r\n        } else {\r\n            w1 = (w + a) / (1 + w * a);\r\n        }\r\n\r\n        w1 = (w1 + 1) / 2;\r\n\r\n        var w2 = 1 - w1;\r\n\r\n        var rgba = {\r\n            r: rgb2.r * w1 + rgb1.r * w2,\r\n            g: rgb2.g * w1 + rgb1.g * w2,\r\n            b: rgb2.b * w1 + rgb1.b * w2,\r\n            a: rgb2.a * p  + rgb1.a * (1 - p)\r\n        };\r\n\r\n        return Color(rgba);\r\n    };\r\n\r\n\r\n    // Readability Functions\r\n    // ---------------------\r\n    // <http://www.w3.org/TR/AERT#color-contrast>\r\n\r\n    // `readability`\r\n    // Analyze the 2 colors and returns an object with the following properties:\r\n    //    `brightness`: difference in brightness between the two colors\r\n    //    `color`: difference in color/hue between the two colors\r\n    Color.readability = function(color1, color2) {\r\n        var c1 = Color(color1);\r\n        var c2 = Color(color2);\r\n        var rgb1 = c1.toRgb();\r\n        var rgb2 = c2.toRgb();\r\n        var brightnessA = c1.getBrightness();\r\n        var brightnessB = c2.getBrightness();\r\n        var colorDiff = (\r\n            Math.max(rgb1.r, rgb2.r) - Math.min(rgb1.r, rgb2.r) +\r\n            Math.max(rgb1.g, rgb2.g) - Math.min(rgb1.g, rgb2.g) +\r\n            Math.max(rgb1.b, rgb2.b) - Math.min(rgb1.b, rgb2.b)\r\n        );\r\n\r\n        return {\r\n            brightness: Math.abs(brightnessA - brightnessB),\r\n            color: colorDiff\r\n        };\r\n    };\r\n\r\n    // `readable`\r\n    // http://www.w3.org/TR/AERT#color-contrast\r\n    // Ensure that foreground and background color combinations provide sufficient contrast.\r\n    // *Example*\r\n    //    Color.isReadable(\"#000\", \"#111\") => false\r\n    Color.isReadable = function(color1, color2) {\r\n        var readability = Color.readability(color1, color2);\r\n        return readability.brightness > 125 && readability.color > 500;\r\n    };\r\n\r\n    // `mostReadable`\r\n    // Given a base color and a list of possible foreground or background\r\n    // colors for that base, returns the most readable color.\r\n    // *Example*\r\n    //    Color.mostReadable(\"#123\", [\"#fff\", \"#000\"]) => \"#000\"\r\n    Color.mostReadable = function(baseColor, colorList) {\r\n        var bestColor = null;\r\n        var bestScore = 0;\r\n        var bestIsReadable = false;\r\n        for (var i=0; i < colorList.length; i++) {\r\n\r\n            // We normalize both around the \"acceptable\" breaking point,\r\n            // but rank brightness constrast higher than hue.\r\n\r\n            var readability = Color.readability(baseColor, colorList[i]);\r\n            var readable = readability.brightness > 125 && readability.color > 500;\r\n            var score = 3 * (readability.brightness / 125) + (readability.color / 500);\r\n\r\n            if ((readable && ! bestIsReadable) ||\r\n                (readable && bestIsReadable && score > bestScore) ||\r\n                ((! readable) && (! bestIsReadable) && score > bestScore)) {\r\n                bestIsReadable = readable;\r\n                bestScore = score;\r\n                bestColor = Color(colorList[i]);\r\n            }\r\n        }\r\n        return bestColor;\r\n    };\r\n\r\n\r\n\treturn Color;\r\n});\r\n"]}