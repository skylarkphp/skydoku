{"version":3,"sources":["skylark-data-color.js"],"names":["define","skylark","langx","colors","trimLeft","trimRight","math","Math","mathRound","round","mathMin","min","mathMax","max","names","random","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","burntsienna","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","hexNames","o","flipped","i","hasOwnProperty","flip","rgbToRgb","r","g","b","bound01","hslToRgb","h","s","l","hue2rgb","p","q","t","hsvToRgb","v","floor","f","mod","boundAlpha","a","parseFloat","isNaN","n","isOnePointZero","processPercent","isPercentage","parseInt","abs","parseIntFromHex","val","indexOf","pad2","c","length","convertToPercentage","convertHexToDecimal","CSS_UNIT","PERMISSIVE_MATCH3","PERMISSIVE_MATCH4","matchers","rgb","RegExp","rgba","hsl","hsla","hsv","hsva","hex3","hex6","hex8","stringInputToObject","color","replace","toLowerCase","match","named","format","exec","mixin","inputToRGB","ok","String","substr","rgbToHsl","d","rgbToHsv","rgbToHex","allow3Char","hex","toString","charAt","join","rgbaToHex","clamp01","attach","tinyCounter","mathRandom","Color","klass","init","opts","this","_originalInput","_r","_g","_b","_a","_roundA","_format","_gradientType","gradientType","_ok","_tc_id","isDark","getBrightness","isLight","isValid","getOriginalInput","getFormat","getAlpha","toRgb","setAlpha","value","toHsv","toHsvString","toHsl","toHslString","toHex","toHexString","toHex8","toHex8String","toRgbString","toPercentageRgb","toPercentageRgbString","toName","toFilter","secondColor","hex8String","secondHex8String","formatSet","formattedString","hasAlpha","needsAlphaFormat","_applyModification","fn","args","apply","concat","slice","call","lighten","arguments","brighten","darken","desaturate","saturate","greyscale","spin","_applyCombination","analogous","complement","monochromatic","splitcomplement","triad","tetrad","amount","hue","results","slices","part","ret","push","modification","fromRatio","newColor","equals","color1","color2","mix","w1","rgb1","rgb2","w","w2","readability","c1","c2","brightnessA","brightnessB","colorDiff","brightness","isReadable","mostReadable","baseColor","colorList","bestColor","bestScore","bestIsReadable","readable","score","main"],"mappings":"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","file":"../skylark-data-color.js","sourcesContent":["define('skylark-data-color/colors',[\r\n    \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\"\r\n],function(skylark,langx) {\r\n    /*\r\n     * This module uses the following open source code:\r\n     *   TinyColor v1.1.2\r\n     *     https://github.com/bgrins/TinyColor\r\n     *     Brian Grinstead, MIT License\r\n     */\r\n\r\n    var colors = skylark.colors =  skylark.colors || {};\r\n\r\n    var trimLeft = /^[\\s,#]+/,\r\n        trimRight = /\\s+$/,\r\n        math = Math,\r\n        mathRound = math.round,\r\n        mathMin = math.min,\r\n        mathMax = math.max,\r\n        mathRandom = math.random;\r\n\r\n\r\n     // Big List of Colors\r\n    // ------------------\r\n    // <http://www.w3.org/TR/css3-color/#svg-color>\r\n    var names = colors.names = {\r\n        aliceblue: \"f0f8ff\",\r\n        antiquewhite: \"faebd7\",\r\n        aqua: \"0ff\",\r\n        aquamarine: \"7fffd4\",\r\n        azure: \"f0ffff\",\r\n        beige: \"f5f5dc\",\r\n        bisque: \"ffe4c4\",\r\n        black: \"000\",\r\n        blanchedalmond: \"ffebcd\",\r\n        blue: \"00f\",\r\n        blueviolet: \"8a2be2\",\r\n        brown: \"a52a2a\",\r\n        burlywood: \"deb887\",\r\n        burntsienna: \"ea7e5d\",\r\n        cadetblue: \"5f9ea0\",\r\n        chartreuse: \"7fff00\",\r\n        chocolate: \"d2691e\",\r\n        coral: \"ff7f50\",\r\n        cornflowerblue: \"6495ed\",\r\n        cornsilk: \"fff8dc\",\r\n        crimson: \"dc143c\",\r\n        cyan: \"0ff\",\r\n        darkblue: \"00008b\",\r\n        darkcyan: \"008b8b\",\r\n        darkgoldenrod: \"b8860b\",\r\n        darkgray: \"a9a9a9\",\r\n        darkgreen: \"006400\",\r\n        darkgrey: \"a9a9a9\",\r\n        darkkhaki: \"bdb76b\",\r\n        darkmagenta: \"8b008b\",\r\n        darkolivegreen: \"556b2f\",\r\n        darkorange: \"ff8c00\",\r\n        darkorchid: \"9932cc\",\r\n        darkred: \"8b0000\",\r\n        darksalmon: \"e9967a\",\r\n        darkseagreen: \"8fbc8f\",\r\n        darkslateblue: \"483d8b\",\r\n        darkslategray: \"2f4f4f\",\r\n        darkslategrey: \"2f4f4f\",\r\n        darkturquoise: \"00ced1\",\r\n        darkviolet: \"9400d3\",\r\n        deeppink: \"ff1493\",\r\n        deepskyblue: \"00bfff\",\r\n        dimgray: \"696969\",\r\n        dimgrey: \"696969\",\r\n        dodgerblue: \"1e90ff\",\r\n        firebrick: \"b22222\",\r\n        floralwhite: \"fffaf0\",\r\n        forestgreen: \"228b22\",\r\n        fuchsia: \"f0f\",\r\n        gainsboro: \"dcdcdc\",\r\n        ghostwhite: \"f8f8ff\",\r\n        gold: \"ffd700\",\r\n        goldenrod: \"daa520\",\r\n        gray: \"808080\",\r\n        green: \"008000\",\r\n        greenyellow: \"adff2f\",\r\n        grey: \"808080\",\r\n        honeydew: \"f0fff0\",\r\n        hotpink: \"ff69b4\",\r\n        indianred: \"cd5c5c\",\r\n        indigo: \"4b0082\",\r\n        ivory: \"fffff0\",\r\n        khaki: \"f0e68c\",\r\n        lavender: \"e6e6fa\",\r\n        lavenderblush: \"fff0f5\",\r\n        lawngreen: \"7cfc00\",\r\n        lemonchiffon: \"fffacd\",\r\n        lightblue: \"add8e6\",\r\n        lightcoral: \"f08080\",\r\n        lightcyan: \"e0ffff\",\r\n        lightgoldenrodyellow: \"fafad2\",\r\n        lightgray: \"d3d3d3\",\r\n        lightgreen: \"90ee90\",\r\n        lightgrey: \"d3d3d3\",\r\n        lightpink: \"ffb6c1\",\r\n        lightsalmon: \"ffa07a\",\r\n        lightseagreen: \"20b2aa\",\r\n        lightskyblue: \"87cefa\",\r\n        lightslategray: \"789\",\r\n        lightslategrey: \"789\",\r\n        lightsteelblue: \"b0c4de\",\r\n        lightyellow: \"ffffe0\",\r\n        lime: \"0f0\",\r\n        limegreen: \"32cd32\",\r\n        linen: \"faf0e6\",\r\n        magenta: \"f0f\",\r\n        maroon: \"800000\",\r\n        mediumaquamarine: \"66cdaa\",\r\n        mediumblue: \"0000cd\",\r\n        mediumorchid: \"ba55d3\",\r\n        mediumpurple: \"9370db\",\r\n        mediumseagreen: \"3cb371\",\r\n        mediumslateblue: \"7b68ee\",\r\n        mediumspringgreen: \"00fa9a\",\r\n        mediumturquoise: \"48d1cc\",\r\n        mediumvioletred: \"c71585\",\r\n        midnightblue: \"191970\",\r\n        mintcream: \"f5fffa\",\r\n        mistyrose: \"ffe4e1\",\r\n        moccasin: \"ffe4b5\",\r\n        navajowhite: \"ffdead\",\r\n        navy: \"000080\",\r\n        oldlace: \"fdf5e6\",\r\n        olive: \"808000\",\r\n        olivedrab: \"6b8e23\",\r\n        orange: \"ffa500\",\r\n        orangered: \"ff4500\",\r\n        orchid: \"da70d6\",\r\n        palegoldenrod: \"eee8aa\",\r\n        palegreen: \"98fb98\",\r\n        paleturquoise: \"afeeee\",\r\n        palevioletred: \"db7093\",\r\n        papayawhip: \"ffefd5\",\r\n        peachpuff: \"ffdab9\",\r\n        peru: \"cd853f\",\r\n        pink: \"ffc0cb\",\r\n        plum: \"dda0dd\",\r\n        powderblue: \"b0e0e6\",\r\n        purple: \"800080\",\r\n        rebeccapurple: \"663399\",\r\n        red: \"f00\",\r\n        rosybrown: \"bc8f8f\",\r\n        royalblue: \"4169e1\",\r\n        saddlebrown: \"8b4513\",\r\n        salmon: \"fa8072\",\r\n        sandybrown: \"f4a460\",\r\n        seagreen: \"2e8b57\",\r\n        seashell: \"fff5ee\",\r\n        sienna: \"a0522d\",\r\n        silver: \"c0c0c0\",\r\n        skyblue: \"87ceeb\",\r\n        slateblue: \"6a5acd\",\r\n        slategray: \"708090\",\r\n        slategrey: \"708090\",\r\n        snow: \"fffafa\",\r\n        springgreen: \"00ff7f\",\r\n        steelblue: \"4682b4\",\r\n        tan: \"d2b48c\",\r\n        teal: \"008080\",\r\n        thistle: \"d8bfd8\",\r\n        tomato: \"ff6347\",\r\n        turquoise: \"40e0d0\",\r\n        violet: \"ee82ee\",\r\n        wheat: \"f5deb3\",\r\n        white: \"fff\",\r\n        whitesmoke: \"f5f5f5\",\r\n        yellow: \"ff0\",\r\n        yellowgreen: \"9acd32\"\r\n    };\r\n\r\n    // Make it easy to access colors via `hexNames[hex]`\r\n    var hexNames = colors.hexNames = flip(names);\r\n\r\n\r\n    // Utilities\r\n    // ---------\r\n\r\n    // `{ 'name1': 'val1' }` becomes `{ 'val1': 'name1' }`\r\n    function flip(o) {\r\n        var flipped = { };\r\n        for (var i in o) {\r\n            if (o.hasOwnProperty(i)) {\r\n                flipped[o[i]] = i;\r\n            }\r\n        }\r\n        return flipped;\r\n    }\r\n       \r\n\r\n\r\n    // Given a string or object, convert that input to RGB\r\n    // Possible string inputs:\r\n    //\r\n    //     \"red\"\r\n    //     \"#f00\" or \"f00\"\r\n    //     \"#ff0000\" or \"ff0000\"\r\n    //     \"#ff000000\" or \"ff000000\"\r\n    //     \"rgb 255 0 0\" or \"rgb (255, 0, 0)\"\r\n    //     \"rgb 1.0 0 0\" or \"rgb (1, 0, 0)\"\r\n    //     \"rgba (255, 0, 0, 1)\" or \"rgba 255, 0, 0, 1\"\r\n    //     \"rgba (1.0, 0, 0, 1)\" or \"rgba 1.0, 0, 0, 1\"\r\n    //     \"hsl(0, 100%, 50%)\" or \"hsl 0 100% 50%\"\r\n    //     \"hsla(0, 100%, 50%, 1)\" or \"hsla 0 100% 50%, 1\"\r\n    //     \"hsv(0, 100%, 100%)\" or \"hsv 0 100% 100%\"\r\n    //\r\n    function inputToRGB(color) {\r\n\r\n        var rgb = { r: 0, g: 0, b: 0 };\r\n        var a = 1;\r\n        var ok = false;\r\n        var format = false;\r\n\r\n        if (typeof color == \"string\") {\r\n            color = stringInputToObject(color);\r\n        }\r\n\r\n        if (typeof color == \"object\") {\r\n            if (color.hasOwnProperty(\"r\") && color.hasOwnProperty(\"g\") && color.hasOwnProperty(\"b\")) {\r\n                rgb = rgbToRgb(color.r, color.g, color.b);\r\n                ok = true;\r\n                format = String(color.r).substr(-1) === \"%\" ? \"prgb\" : \"rgb\";\r\n            }\r\n            else if (color.hasOwnProperty(\"h\") && color.hasOwnProperty(\"s\") && color.hasOwnProperty(\"v\")) {\r\n                color.s = convertToPercentage(color.s);\r\n                color.v = convertToPercentage(color.v);\r\n                rgb = hsvToRgb(color.h, color.s, color.v);\r\n                ok = true;\r\n                format = \"hsv\";\r\n            }\r\n            else if (color.hasOwnProperty(\"h\") && color.hasOwnProperty(\"s\") && color.hasOwnProperty(\"l\")) {\r\n                color.s = convertToPercentage(color.s);\r\n                color.l = convertToPercentage(color.l);\r\n                rgb = hslToRgb(color.h, color.s, color.l);\r\n                ok = true;\r\n                format = \"hsl\";\r\n            }\r\n\r\n            if (color.hasOwnProperty(\"a\")) {\r\n                a = color.a;\r\n            }\r\n        }\r\n\r\n        a = boundAlpha(a);\r\n\r\n        return {\r\n            ok: ok,\r\n            format: color.format || format,\r\n            r: mathMin(255, mathMax(rgb.r, 0)),\r\n            g: mathMin(255, mathMax(rgb.g, 0)),\r\n            b: mathMin(255, mathMax(rgb.b, 0)),\r\n            a: a\r\n        };\r\n    }\r\n\r\n\r\n    // Conversion Functions\r\n    // --------------------\r\n\r\n    // `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:\r\n    // <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>\r\n\r\n    // `rgbToRgb`\r\n    // Handle bounds / percentage checking to conform to CSS color spec\r\n    // <http://www.w3.org/TR/css3-color/>\r\n    // *Assumes:* r, g, b in [0, 255] or [0, 1]\r\n    // *Returns:* { r, g, b } in [0, 255]\r\n    function rgbToRgb(r, g, b){\r\n        return {\r\n            r: bound01(r, 255) * 255,\r\n            g: bound01(g, 255) * 255,\r\n            b: bound01(b, 255) * 255\r\n        };\r\n    }\r\n\r\n    // `rgbToHsl`\r\n    // Converts an RGB color value to HSL.\r\n    // *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]\r\n    // *Returns:* { h, s, l } in [0,1]\r\n    function rgbToHsl(r, g, b) {\r\n\r\n        r = bound01(r, 255);\r\n        g = bound01(g, 255);\r\n        b = bound01(b, 255);\r\n\r\n        var max = mathMax(r, g, b), min = mathMin(r, g, b);\r\n        var h, s, l = (max + min) / 2;\r\n\r\n        if(max == min) {\r\n            h = s = 0; // achromatic\r\n        }\r\n        else {\r\n            var d = max - min;\r\n            s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\r\n            switch(max) {\r\n                case r: h = (g - b) / d + (g < b ? 6 : 0); break;\r\n                case g: h = (b - r) / d + 2; break;\r\n                case b: h = (r - g) / d + 4; break;\r\n            }\r\n\r\n            h /= 6;\r\n        }\r\n\r\n        return { h: h, s: s, l: l };\r\n    }\r\n\r\n    // `hslToRgb`\r\n    // Converts an HSL color value to RGB.\r\n    // *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]\r\n    // *Returns:* { r, g, b } in the set [0, 255]\r\n    function hslToRgb(h, s, l) {\r\n        var r, g, b;\r\n\r\n        h = bound01(h, 360);\r\n        s = bound01(s, 100);\r\n        l = bound01(l, 100);\r\n\r\n        function hue2rgb(p, q, t) {\r\n            if(t < 0) t += 1;\r\n            if(t > 1) t -= 1;\r\n            if(t < 1/6) return p + (q - p) * 6 * t;\r\n            if(t < 1/2) return q;\r\n            if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;\r\n            return p;\r\n        }\r\n\r\n        if(s === 0) {\r\n            r = g = b = l; // achromatic\r\n        }\r\n        else {\r\n            var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\r\n            var p = 2 * l - q;\r\n            r = hue2rgb(p, q, h + 1/3);\r\n            g = hue2rgb(p, q, h);\r\n            b = hue2rgb(p, q, h - 1/3);\r\n        }\r\n\r\n        return { r: r * 255, g: g * 255, b: b * 255 };\r\n    }\r\n\r\n    // `rgbToHsv`\r\n    // Converts an RGB color value to HSV\r\n    // *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]\r\n    // *Returns:* { h, s, v } in [0,1]\r\n    function rgbToHsv(r, g, b) {\r\n\r\n        r = bound01(r, 255);\r\n        g = bound01(g, 255);\r\n        b = bound01(b, 255);\r\n\r\n        var max = mathMax(r, g, b), min = mathMin(r, g, b);\r\n        var h, s, v = max;\r\n\r\n        var d = max - min;\r\n        s = max === 0 ? 0 : d / max;\r\n\r\n        if(max == min) {\r\n            h = 0; // achromatic\r\n        }\r\n        else {\r\n            switch(max) {\r\n                case r: h = (g - b) / d + (g < b ? 6 : 0); break;\r\n                case g: h = (b - r) / d + 2; break;\r\n                case b: h = (r - g) / d + 4; break;\r\n            }\r\n            h /= 6;\r\n        }\r\n        return { h: h, s: s, v: v };\r\n    }\r\n\r\n    // `hsvToRgb`\r\n    // Converts an HSV color value to RGB.\r\n    // *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]\r\n    // *Returns:* { r, g, b } in the set [0, 255]\r\n     function hsvToRgb(h, s, v) {\r\n\r\n        h = bound01(h, 360) * 6;\r\n        s = bound01(s, 100);\r\n        v = bound01(v, 100);\r\n\r\n        var i = math.floor(h),\r\n            f = h - i,\r\n            p = v * (1 - s),\r\n            q = v * (1 - f * s),\r\n            t = v * (1 - (1 - f) * s),\r\n            mod = i % 6,\r\n            r = [v, q, p, p, t, v][mod],\r\n            g = [t, v, v, q, p, p][mod],\r\n            b = [p, p, t, v, v, q][mod];\r\n\r\n        return { r: r * 255, g: g * 255, b: b * 255 };\r\n    }\r\n\r\n    // `rgbToHex`\r\n    // Converts an RGB color to hex\r\n    // Assumes r, g, and b are contained in the set [0, 255]\r\n    // Returns a 3 or 6 character hex\r\n    function rgbToHex(r, g, b, allow3Char) {\r\n\r\n        var hex = [\r\n            pad2(mathRound(r).toString(16)),\r\n            pad2(mathRound(g).toString(16)),\r\n            pad2(mathRound(b).toString(16))\r\n        ];\r\n\r\n        // Return a 3 character hex if possible\r\n        if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {\r\n            return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);\r\n        }\r\n\r\n        return hex.join(\"\");\r\n    }\r\n\r\n    // `rgbaToHex`\r\n    // Converts an RGBA color plus alpha transparency to hex\r\n    // Assumes r, g, b and a are contained in the set [0, 255]\r\n    // Returns an 8 character hex\r\n    function rgbaToHex(r, g, b, a) {\r\n\r\n        var hex = [\r\n            pad2(convertDecimalToHex(a)),\r\n            pad2(mathRound(r).toString(16)),\r\n            pad2(mathRound(g).toString(16)),\r\n            pad2(mathRound(b).toString(16))\r\n        ];\r\n\r\n        return hex.join(\"\");\r\n    }\r\n\r\n\r\n\r\n    // Return a valid alpha value [0,1] with all invalid values being set to 1\r\n    function boundAlpha(a) {\r\n        a = parseFloat(a);\r\n\r\n        if (isNaN(a) || a < 0 || a > 1) {\r\n            a = 1;\r\n        }\r\n\r\n        return a;\r\n    }\r\n\r\n    // Take input from [0, n] and return it as [0, 1]\r\n    function bound01(n, max) {\r\n        if (isOnePointZero(n)) { n = \"100%\"; }\r\n\r\n        var processPercent = isPercentage(n);\r\n        n = mathMin(max, mathMax(0, parseFloat(n)));\r\n\r\n        // Automatically convert percentage into number\r\n        if (processPercent) {\r\n            n = parseInt(n * max, 10) / 100;\r\n        }\r\n\r\n        // Handle floating point rounding errors\r\n        if ((math.abs(n - max) < 0.000001)) {\r\n            return 1;\r\n        }\r\n\r\n        // Convert into [0, 1] range if it isn't already\r\n        return (n % max) / parseFloat(max);\r\n    }\r\n\r\n    // Force a number between 0 and 1\r\n    function clamp01(val) {\r\n        return mathMin(1, mathMax(0, val));\r\n    }\r\n\r\n    // Parse a base-16 hex value into a base-10 integer\r\n    function parseIntFromHex(val) {\r\n        return parseInt(val, 16);\r\n    }\r\n\r\n    // Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1\r\n    // <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>\r\n    function isOnePointZero(n) {\r\n        return typeof n == \"string\" && n.indexOf('.') != -1 && parseFloat(n) === 1;\r\n    }\r\n\r\n    // Check to see if string passed in is a percentage\r\n    function isPercentage(n) {\r\n        return typeof n === \"string\" && n.indexOf('%') != -1;\r\n    }\r\n\r\n    // Force a hex value to have 2 characters\r\n    function pad2(c) {\r\n        return c.length == 1 ? '0' + c : '' + c;\r\n    }\r\n\r\n    // Replace a decimal with it's percentage value\r\n    function convertToPercentage(n) {\r\n        if (n <= 1) {\r\n            n = (n * 100) + \"%\";\r\n        }\r\n\r\n        return n;\r\n    }\r\n\r\n    // Converts a decimal to a hex value\r\n    function convertDecimalToHex(d) {\r\n        return Math.round(parseFloat(d) * 255).toString(16);\r\n    }\r\n    // Converts a hex value to a decimal\r\n    function convertHexToDecimal(h) {\r\n        return (parseIntFromHex(h) / 255);\r\n    }\r\n\r\n    var matchers = (function() {\r\n\r\n        // <http://www.w3.org/TR/css3-values/#integers>\r\n        var CSS_INTEGER = \"[-\\\\+]?\\\\d+%?\";\r\n\r\n        // <http://www.w3.org/TR/css3-values/#number-value>\r\n        var CSS_NUMBER = \"[-\\\\+]?\\\\d*\\\\.\\\\d+%?\";\r\n\r\n        // Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.\r\n        var CSS_UNIT = \"(?:\" + CSS_NUMBER + \")|(?:\" + CSS_INTEGER + \")\";\r\n\r\n        // Actual matching.\r\n        // Parentheses and commas are optional, but not required.\r\n        // Whitespace can take the place of commas or opening paren\r\n        var PERMISSIVE_MATCH3 = \"[\\\\s|\\\\(]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")\\\\s*\\\\)?\";\r\n        var PERMISSIVE_MATCH4 = \"[\\\\s|\\\\(]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")\\\\s*\\\\)?\";\r\n\r\n        return {\r\n            rgb: new RegExp(\"rgb\" + PERMISSIVE_MATCH3),\r\n            rgba: new RegExp(\"rgba\" + PERMISSIVE_MATCH4),\r\n            hsl: new RegExp(\"hsl\" + PERMISSIVE_MATCH3),\r\n            hsla: new RegExp(\"hsla\" + PERMISSIVE_MATCH4),\r\n            hsv: new RegExp(\"hsv\" + PERMISSIVE_MATCH3),\r\n            hsva: new RegExp(\"hsva\" + PERMISSIVE_MATCH4),\r\n            hex3: /^([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\r\n            hex6: /^([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\r\n            hex8: /^([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/\r\n        };\r\n    })();\r\n\r\n    // `stringInputToObject`\r\n    // Permissive string parsing.  Take in a number of formats, and output an object\r\n    // based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`\r\n    function stringInputToObject(color) {\r\n\r\n        color = color.replace(trimLeft,'').replace(trimRight, '').toLowerCase();\r\n        var named = false;\r\n        if (names[color]) {\r\n            color = names[color];\r\n            named = true;\r\n        }\r\n        else if (color == 'transparent') {\r\n            return { r: 0, g: 0, b: 0, a: 0, format: \"name\" };\r\n        }\r\n\r\n        // Try to match string input using regular expressions.\r\n        // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]\r\n        // Just return an object and let the conversion functions handle that.\r\n        // This way the result will be the same whether the tinycolor is initialized with string or object.\r\n        var match;\r\n        if ((match = matchers.rgb.exec(color))) {\r\n            return { r: match[1], g: match[2], b: match[3] };\r\n        }\r\n        if ((match = matchers.rgba.exec(color))) {\r\n            return { r: match[1], g: match[2], b: match[3], a: match[4] };\r\n        }\r\n        if ((match = matchers.hsl.exec(color))) {\r\n            return { h: match[1], s: match[2], l: match[3] };\r\n        }\r\n        if ((match = matchers.hsla.exec(color))) {\r\n            return { h: match[1], s: match[2], l: match[3], a: match[4] };\r\n        }\r\n        if ((match = matchers.hsv.exec(color))) {\r\n            return { h: match[1], s: match[2], v: match[3] };\r\n        }\r\n        if ((match = matchers.hsva.exec(color))) {\r\n            return { h: match[1], s: match[2], v: match[3], a: match[4] };\r\n        }\r\n        if ((match = matchers.hex8.exec(color))) {\r\n            return {\r\n                a: convertHexToDecimal(match[1]),\r\n                r: parseIntFromHex(match[2]),\r\n                g: parseIntFromHex(match[3]),\r\n                b: parseIntFromHex(match[4]),\r\n                format: named ? \"name\" : \"hex8\"\r\n            };\r\n        }\r\n        if ((match = matchers.hex6.exec(color))) {\r\n            return {\r\n                r: parseIntFromHex(match[1]),\r\n                g: parseIntFromHex(match[2]),\r\n                b: parseIntFromHex(match[3]),\r\n                format: named ? \"name\" : \"hex\"\r\n            };\r\n        }\r\n        if ((match = matchers.hex3.exec(color))) {\r\n            return {\r\n                r: parseIntFromHex(match[1] + '' + match[1]),\r\n                g: parseIntFromHex(match[2] + '' + match[2]),\r\n                b: parseIntFromHex(match[3] + '' + match[3]),\r\n                format: named ? \"name\" : \"hex\"\r\n            };\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    langx.mixin(colors,{\r\n        inputToRGB : inputToRGB,\r\n        rgbToRgb : rgbToRgb,\r\n        rgbToHsl : rgbToHsl,\r\n        hslToRgb : hslToRgb,\r\n        rgbToHsv : rgbToHsv,\r\n        hsvToRgb : hsvToRgb,\r\n        rgbToHex : rgbToHex,\r\n        rgbaToHex : rgbaToHex,\r\n        boundAlpha : boundAlpha,\r\n        bound01 : bound01,\r\n        clamp01 : clamp01,\r\n        parseIntFromHex : parseIntFromHex,\r\n        isOnePointZero : isOnePointZero,\r\n        isPercentage : isPercentage,\r\n        pad2 : pad2,\r\n        convertToPercentage : convertToPercentage,\r\n        convertHexToDecimal : convertHexToDecimal,\r\n        stringInputToObject : stringInputToObject\r\n\r\n    });\r\n\r\n    return skylark.attach(\"data.colors\",colors);\r\n\r\n});\r\n\ndefine('skylark-data-color/Color',[\r\n    \"skylark-langx/langx\",\r\n    \"./colors\"\r\n],function(langx,colors) {\r\n    /*\r\n     * This module uses the following open source code:\r\n     *   TinyColor v1.1.2\r\n     *     https://github.com/bgrins/TinyColor\r\n     *     Brian Grinstead, MIT License\r\n     */\r\n\r\n    var inputToRGB = colors.inputToRGB,\r\n        rgbToRgb = colors.rgbToRgb,\r\n        rgbToHsl = colors.rgbToHsl,\r\n        hslToRgb = colors.hslToRgb,\r\n        rgbToHsv = colors.rgbToHsv,\r\n        rgbToHex = colors.rgbToHex,\r\n        rgbaToHex = colors.rgbaToHex,\r\n        boundAlpha = colors.boundAlpha,\r\n        bound01 = colors.bound01,\r\n        clamp01 = colors.clamp01,\r\n        parseIntFromHex = colors.parseIntFromHex,\r\n        isOnePointZero = colors.isOnePointZero,\r\n        isPercentage = colors.isPercentage,\r\n        pad2 = colors.pad2,\r\n        convertToPercentage = colors.convertToPercentage,\r\n        convertHexToDecimal = colors.convertHexToDecimal,\r\n        stringInputToObject = colors.stringInputToObject,\r\n        hexNames = colors.hexNames;\r\n\r\n    var tinyCounter = 0,\r\n        math = Math,\r\n        mathRound = math.round,\r\n        mathMin = math.min,\r\n        mathMax = math.max,\r\n        mathRandom = math.random;\r\n\r\n\tvar Color = colors.Color = langx.klass({\r\n\t\tinit : function(color, opts) {\r\n\t        color = (color) ? color : '';\r\n    \t    opts = opts || { };\r\n\r\n\t        // If input is already a Color, return itself\r\n\t        if (color instanceof Color) {\r\n\t           return color;\r\n\t        }\r\n\r\n\t        var rgb = inputToRGB(color);\r\n\t        this._originalInput = color,\r\n\t        this._r = rgb.r,\r\n\t        this._g = rgb.g,\r\n\t        this._b = rgb.b,\r\n\t        this._a = rgb.a,\r\n\t        this._roundA = mathRound(1000 * this._a) / 1000,\r\n\t        this._format = opts.format || rgb.format;\r\n\t        this._gradientType = opts.gradientType;\r\n\r\n\t        // Don't let the range of [0,255] come back in [0,1].\r\n\t        // Potentially lose a little bit of precision here, but will fix issues where\r\n\t        // .5 gets interpreted as half of the total, instead of half of 1\r\n\t        // If it was supposed to be 128, this was already taken care of by `inputToRgb`\r\n\t        if (this._r < 1) { this._r = mathRound(this._r); }\r\n\t        if (this._g < 1) { this._g = mathRound(this._g); }\r\n\t        if (this._b < 1) { this._b = mathRound(this._b); }\r\n\r\n\t        this._ok = rgb.ok;\r\n\t        this._tc_id = tinyCounter++;\r\n\t    },\r\n\r\n        isDark: function() {\r\n            return this.getBrightness() < 128;\r\n        },\r\n        isLight: function() {\r\n            return !this.isDark();\r\n        },\r\n        isValid: function() {\r\n            return this._ok;\r\n        },\r\n        getOriginalInput: function() {\r\n          return this._originalInput;\r\n        },\r\n        getFormat: function() {\r\n            return this._format;\r\n        },\r\n        getAlpha: function() {\r\n            return this._a;\r\n        },\r\n        getBrightness: function() {\r\n            var rgb = this.toRgb();\r\n            return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;\r\n        },\r\n        setAlpha: function(value) {\r\n            this._a = boundAlpha(value);\r\n            this._roundA = mathRound(1000 * this._a) / 1000;\r\n            return this;\r\n        },\r\n        toHsv: function() {\r\n            var hsv = rgbToHsv(this._r, this._g, this._b);\r\n            return { h: hsv.h * 360, s: hsv.s, v: hsv.v, a: this._a };\r\n        },\r\n        toHsvString: function() {\r\n            var hsv = rgbToHsv(this._r, this._g, this._b);\r\n            var h = mathRound(hsv.h * 360), s = mathRound(hsv.s * 100), v = mathRound(hsv.v * 100);\r\n            return (this._a == 1) ?\r\n              \"hsv(\"  + h + \", \" + s + \"%, \" + v + \"%)\" :\r\n              \"hsva(\" + h + \", \" + s + \"%, \" + v + \"%, \"+ this._roundA + \")\";\r\n        },\r\n        toHsl: function() {\r\n            var hsl = rgbToHsl(this._r, this._g, this._b);\r\n            return { h: hsl.h * 360, s: hsl.s, l: hsl.l, a: this._a };\r\n        },\r\n        toHslString: function() {\r\n            var hsl = rgbToHsl(this._r, this._g, this._b);\r\n            var h = mathRound(hsl.h * 360), s = mathRound(hsl.s * 100), l = mathRound(hsl.l * 100);\r\n            return (this._a == 1) ?\r\n              \"hsl(\"  + h + \", \" + s + \"%, \" + l + \"%)\" :\r\n              \"hsla(\" + h + \", \" + s + \"%, \" + l + \"%, \"+ this._roundA + \")\";\r\n        },\r\n        toHex: function(allow3Char) {\r\n            return rgbToHex(this._r, this._g, this._b, allow3Char);\r\n        },\r\n        toHexString: function(allow3Char) {\r\n            return '#' + this.toHex(allow3Char);\r\n        },\r\n        toHex8: function() {\r\n            return rgbaToHex(this._r, this._g, this._b, this._a);\r\n        },\r\n        toHex8String: function() {\r\n            return '#' + this.toHex8();\r\n        },\r\n        toRgb: function() {\r\n            return { r: mathRound(this._r), g: mathRound(this._g), b: mathRound(this._b), a: this._a };\r\n        },\r\n        toRgbString: function() {\r\n            return (this._a == 1) ?\r\n              \"rgb(\"  + mathRound(this._r) + \", \" + mathRound(this._g) + \", \" + mathRound(this._b) + \")\" :\r\n              \"rgba(\" + mathRound(this._r) + \", \" + mathRound(this._g) + \", \" + mathRound(this._b) + \", \" + this._roundA + \")\";\r\n        },\r\n        toPercentageRgb: function() {\r\n            return { r: mathRound(bound01(this._r, 255) * 100) + \"%\", g: mathRound(bound01(this._g, 255) * 100) + \"%\", b: mathRound(bound01(this._b, 255) * 100) + \"%\", a: this._a };\r\n        },\r\n        toPercentageRgbString: function() {\r\n            return (this._a == 1) ?\r\n              \"rgb(\"  + mathRound(bound01(this._r, 255) * 100) + \"%, \" + mathRound(bound01(this._g, 255) * 100) + \"%, \" + mathRound(bound01(this._b, 255) * 100) + \"%)\" :\r\n              \"rgba(\" + mathRound(bound01(this._r, 255) * 100) + \"%, \" + mathRound(bound01(this._g, 255) * 100) + \"%, \" + mathRound(bound01(this._b, 255) * 100) + \"%, \" + this._roundA + \")\";\r\n        },\r\n        toName: function() {\r\n            if (this._a === 0) {\r\n                return \"transparent\";\r\n            }\r\n\r\n            if (this._a < 1) {\r\n                return false;\r\n            }\r\n\r\n            return hexNames[rgbToHex(this._r, this._g, this._b, true)] || false;\r\n        },\r\n        toFilter: function(secondColor) {\r\n            var hex8String = '#' + rgbaToHex(this._r, this._g, this._b, this._a);\r\n            var secondHex8String = hex8String;\r\n            var gradientType = this._gradientType ? \"GradientType = 1, \" : \"\";\r\n\r\n            if (secondColor) {\r\n                var s = Color(secondColor);\r\n                secondHex8String = s.toHex8String();\r\n            }\r\n\r\n            return \"progid:DXImageTransform.Microsoft.gradient(\"+gradientType+\"startColorstr=\"+hex8String+\",endColorstr=\"+secondHex8String+\")\";\r\n        },\r\n        toString: function(format) {\r\n            var formatSet = !!format;\r\n            format = format || this._format;\r\n\r\n            var formattedString = false;\r\n            var hasAlpha = this._a < 1 && this._a >= 0;\r\n            var needsAlphaFormat = !formatSet && hasAlpha && (format === \"hex\" || format === \"hex6\" || format === \"hex3\" || format === \"name\");\r\n\r\n            if (needsAlphaFormat) {\r\n                // Special case for \"transparent\", all other non-alpha formats\r\n                // will return rgba when there is transparency.\r\n                if (format === \"name\" && this._a === 0) {\r\n                    return this.toName();\r\n                }\r\n                return this.toRgbString();\r\n            }\r\n            if (format === \"rgb\") {\r\n                formattedString = this.toRgbString();\r\n            }\r\n            if (format === \"prgb\") {\r\n                formattedString = this.toPercentageRgbString();\r\n            }\r\n            if (format === \"hex\" || format === \"hex6\") {\r\n                formattedString = this.toHexString();\r\n            }\r\n            if (format === \"hex3\") {\r\n                formattedString = this.toHexString(true);\r\n            }\r\n            if (format === \"hex8\") {\r\n                formattedString = this.toHex8String();\r\n            }\r\n            if (format === \"name\") {\r\n                formattedString = this.toName();\r\n            }\r\n            if (format === \"hsl\") {\r\n                formattedString = this.toHslString();\r\n            }\r\n            if (format === \"hsv\") {\r\n                formattedString = this.toHsvString();\r\n            }\r\n\r\n            return formattedString || this.toHexString();\r\n        },\r\n\r\n        _applyModification: function(fn, args) {\r\n            var color = fn.apply(null, [this].concat([].slice.call(args)));\r\n            this._r = color._r;\r\n            this._g = color._g;\r\n            this._b = color._b;\r\n            this.setAlpha(color._a);\r\n            return this;\r\n        },\r\n        lighten: function() {\r\n            return this._applyModification(lighten, arguments);\r\n        },\r\n        brighten: function() {\r\n            return this._applyModification(brighten, arguments);\r\n        },\r\n        darken: function() {\r\n            return this._applyModification(darken, arguments);\r\n        },\r\n        desaturate: function() {\r\n            return this._applyModification(desaturate, arguments);\r\n        },\r\n        saturate: function() {\r\n            return this._applyModification(saturate, arguments);\r\n        },\r\n        greyscale: function() {\r\n            return this._applyModification(greyscale, arguments);\r\n        },\r\n        spin: function() {\r\n            return this._applyModification(spin, arguments);\r\n        },\r\n\r\n        _applyCombination: function(fn, args) {\r\n            return fn.apply(null, [this].concat([].slice.call(args)));\r\n        },\r\n        analogous: function() {\r\n            return this._applyCombination(analogous, arguments);\r\n        },\r\n        complement: function() {\r\n            return this._applyCombination(complement, arguments);\r\n        },\r\n        monochromatic: function() {\r\n            return this._applyCombination(monochromatic, arguments);\r\n        },\r\n        splitcomplement: function() {\r\n            return this._applyCombination(splitcomplement, arguments);\r\n        },\r\n        triad: function() {\r\n            return this._applyCombination(triad, arguments);\r\n        },\r\n        tetrad: function() {\r\n            return this._applyCombination(tetrad, arguments);\r\n        }\r\n\t});\r\n\r\n\r\n\r\n    // If input is an object, force 1 into \"1.0\" to handle ratios properly\r\n    // String input requires \"1.0\" as input, so 1 will be treated as 1\r\n    Color.fromRatio = function(color, opts) {\r\n        if (typeof color == \"object\") {\r\n            var newColor = {};\r\n            for (var i in color) {\r\n                if (color.hasOwnProperty(i)) {\r\n                    if (i === \"a\") {\r\n                        newColor[i] = color[i];\r\n                    }\r\n                    else {\r\n                        newColor[i] = convertToPercentage(color[i]);\r\n                    }\r\n                }\r\n            }\r\n            color = newColor;\r\n        }\r\n\r\n        return Color(color, opts);\r\n    };\r\n\r\n    // `equals`\r\n    // Can be called with any Color input\r\n    Color.equals = function (color1, color2) {\r\n        if (!color1 || !color2) { return false; }\r\n        return Color(color1).toRgbString() == Color(color2).toRgbString();\r\n    };\r\n    \r\n    Color.random = function() {\r\n        return Color.fromRatio({\r\n            r: mathRandom(),\r\n            g: mathRandom(),\r\n            b: mathRandom()\r\n        });\r\n    };\r\n\r\n   // Modification Functions\r\n    // ----------------------\r\n    // Thanks to less.js for some of the basics here\r\n    // <https://github.com/cloudhead/less.js/blob/master/lib/less/functions.js>\r\n\r\n    function desaturate(color, amount) {\r\n        amount = (amount === 0) ? 0 : (amount || 10);\r\n        var hsl = Color(color).toHsl();\r\n        hsl.s -= amount / 100;\r\n        hsl.s = clamp01(hsl.s);\r\n        return Color(hsl);\r\n    }\r\n\r\n    function saturate(color, amount) {\r\n        amount = (amount === 0) ? 0 : (amount || 10);\r\n        var hsl = Color(color).toHsl();\r\n        hsl.s += amount / 100;\r\n        hsl.s = clamp01(hsl.s);\r\n        return Color(hsl);\r\n    }\r\n\r\n    function greyscale(color) {\r\n        return Color(color).desaturate(100);\r\n    }\r\n\r\n    function lighten (color, amount) {\r\n        amount = (amount === 0) ? 0 : (amount || 10);\r\n        var hsl = Color(color).toHsl();\r\n        hsl.l += amount / 100;\r\n        hsl.l = clamp01(hsl.l);\r\n        return Color(hsl);\r\n    }\r\n\r\n    function brighten(color, amount) {\r\n        amount = (amount === 0) ? 0 : (amount || 10);\r\n        var rgb = Color(color).toRgb();\r\n        rgb.r = mathMax(0, mathMin(255, rgb.r - mathRound(255 * - (amount / 100))));\r\n        rgb.g = mathMax(0, mathMin(255, rgb.g - mathRound(255 * - (amount / 100))));\r\n        rgb.b = mathMax(0, mathMin(255, rgb.b - mathRound(255 * - (amount / 100))));\r\n        return Color(rgb);\r\n    }\r\n\r\n    function darken (color, amount) {\r\n        amount = (amount === 0) ? 0 : (amount || 10);\r\n        var hsl = Color(color).toHsl();\r\n        hsl.l -= amount / 100;\r\n        hsl.l = clamp01(hsl.l);\r\n        return Color(hsl);\r\n    }\r\n\r\n    // Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.\r\n    // Values outside of this range will be wrapped into this range.\r\n    function spin(color, amount) {\r\n        var hsl = Color(color).toHsl();\r\n        var hue = (mathRound(hsl.h) + amount) % 360;\r\n        hsl.h = hue < 0 ? 360 + hue : hue;\r\n        return Color(hsl);\r\n    }\r\n\r\n    // Combination Functions\r\n    // ---------------------\r\n    // Thanks to jQuery xColor for some of the ideas behind these\r\n    // <https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js>\r\n\r\n    function complement(color) {\r\n        var hsl = Color(color).toHsl();\r\n        hsl.h = (hsl.h + 180) % 360;\r\n        return Color(hsl);\r\n    }\r\n\r\n    function triad(color) {\r\n        var hsl = Color(color).toHsl();\r\n        var h = hsl.h;\r\n        return [\r\n            Color(color),\r\n            Color({ h: (h + 120) % 360, s: hsl.s, l: hsl.l }),\r\n            Color({ h: (h + 240) % 360, s: hsl.s, l: hsl.l })\r\n        ];\r\n    }\r\n\r\n    function tetrad(color) {\r\n        var hsl = Color(color).toHsl();\r\n        var h = hsl.h;\r\n        return [\r\n            Color(color),\r\n            Color({ h: (h + 90) % 360, s: hsl.s, l: hsl.l }),\r\n            Color({ h: (h + 180) % 360, s: hsl.s, l: hsl.l }),\r\n            Color({ h: (h + 270) % 360, s: hsl.s, l: hsl.l })\r\n        ];\r\n    }\r\n\r\n    function splitcomplement(color) {\r\n        var hsl = Color(color).toHsl();\r\n        var h = hsl.h;\r\n        return [\r\n            Color(color),\r\n            Color({ h: (h + 72) % 360, s: hsl.s, l: hsl.l}),\r\n            Color({ h: (h + 216) % 360, s: hsl.s, l: hsl.l})\r\n        ];\r\n    }\r\n\r\n    function analogous(color, results, slices) {\r\n        results = results || 6;\r\n        slices = slices || 30;\r\n\r\n        var hsl = Color(color).toHsl();\r\n        var part = 360 / slices;\r\n        var ret = [Color(color)];\r\n\r\n        for (hsl.h = ((hsl.h - (part * results >> 1)) + 720) % 360; --results; ) {\r\n            hsl.h = (hsl.h + part) % 360;\r\n            ret.push(Color(hsl));\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    function monochromatic(color, results) {\r\n        results = results || 6;\r\n        var hsv = Color(color).toHsv();\r\n        var h = hsv.h, s = hsv.s, v = hsv.v;\r\n        var ret = [];\r\n        var modification = 1 / results;\r\n\r\n        while (results--) {\r\n            ret.push(Color({ h: h, s: s, v: v}));\r\n            v = (v + modification) % 1;\r\n        }\r\n\r\n        return ret;\r\n    }\r\n\r\n    // Utility Functions\r\n    // ---------------------\r\n\r\n    Color.mix = function(color1, color2, amount) {\r\n        amount = (amount === 0) ? 0 : (amount || 50);\r\n\r\n        var rgb1 = Color(color1).toRgb();\r\n        var rgb2 = Color(color2).toRgb();\r\n\r\n        var p = amount / 100;\r\n        var w = p * 2 - 1;\r\n        var a = rgb2.a - rgb1.a;\r\n\r\n        var w1;\r\n\r\n        if (w * a == -1) {\r\n            w1 = w;\r\n        } else {\r\n            w1 = (w + a) / (1 + w * a);\r\n        }\r\n\r\n        w1 = (w1 + 1) / 2;\r\n\r\n        var w2 = 1 - w1;\r\n\r\n        var rgba = {\r\n            r: rgb2.r * w1 + rgb1.r * w2,\r\n            g: rgb2.g * w1 + rgb1.g * w2,\r\n            b: rgb2.b * w1 + rgb1.b * w2,\r\n            a: rgb2.a * p  + rgb1.a * (1 - p)\r\n        };\r\n\r\n        return Color(rgba);\r\n    };\r\n\r\n\r\n    // Readability Functions\r\n    // ---------------------\r\n    // <http://www.w3.org/TR/AERT#color-contrast>\r\n\r\n    // `readability`\r\n    // Analyze the 2 colors and returns an object with the following properties:\r\n    //    `brightness`: difference in brightness between the two colors\r\n    //    `color`: difference in color/hue between the two colors\r\n    Color.readability = function(color1, color2) {\r\n        var c1 = Color(color1);\r\n        var c2 = Color(color2);\r\n        var rgb1 = c1.toRgb();\r\n        var rgb2 = c2.toRgb();\r\n        var brightnessA = c1.getBrightness();\r\n        var brightnessB = c2.getBrightness();\r\n        var colorDiff = (\r\n            Math.max(rgb1.r, rgb2.r) - Math.min(rgb1.r, rgb2.r) +\r\n            Math.max(rgb1.g, rgb2.g) - Math.min(rgb1.g, rgb2.g) +\r\n            Math.max(rgb1.b, rgb2.b) - Math.min(rgb1.b, rgb2.b)\r\n        );\r\n\r\n        return {\r\n            brightness: Math.abs(brightnessA - brightnessB),\r\n            color: colorDiff\r\n        };\r\n    };\r\n\r\n    // `readable`\r\n    // http://www.w3.org/TR/AERT#color-contrast\r\n    // Ensure that foreground and background color combinations provide sufficient contrast.\r\n    // *Example*\r\n    //    Color.isReadable(\"#000\", \"#111\") => false\r\n    Color.isReadable = function(color1, color2) {\r\n        var readability = Color.readability(color1, color2);\r\n        return readability.brightness > 125 && readability.color > 500;\r\n    };\r\n\r\n    // `mostReadable`\r\n    // Given a base color and a list of possible foreground or background\r\n    // colors for that base, returns the most readable color.\r\n    // *Example*\r\n    //    Color.mostReadable(\"#123\", [\"#fff\", \"#000\"]) => \"#000\"\r\n    Color.mostReadable = function(baseColor, colorList) {\r\n        var bestColor = null;\r\n        var bestScore = 0;\r\n        var bestIsReadable = false;\r\n        for (var i=0; i < colorList.length; i++) {\r\n\r\n            // We normalize both around the \"acceptable\" breaking point,\r\n            // but rank brightness constrast higher than hue.\r\n\r\n            var readability = Color.readability(baseColor, colorList[i]);\r\n            var readable = readability.brightness > 125 && readability.color > 500;\r\n            var score = 3 * (readability.brightness / 125) + (readability.color / 500);\r\n\r\n            if ((readable && ! bestIsReadable) ||\r\n                (readable && bestIsReadable && score > bestScore) ||\r\n                ((! readable) && (! bestIsReadable) && score > bestScore)) {\r\n                bestIsReadable = readable;\r\n                bestScore = score;\r\n                bestColor = Color(colorList[i]);\r\n            }\r\n        }\r\n        return bestColor;\r\n    };\r\n\r\n\r\n\treturn Color;\r\n});\r\n\n define('skylark-data-color/hexNames',[\r\n    \"skylark-langx/langx\",\r\n    \"./colors\"\r\n],function(langx,colors) {\r\n\r\n    return colors.hexNames;\r\n\r\n});\r\n\r\n\n define('skylark-data-color/names',[\r\n    \"skylark-langx/langx\",\r\n    \"./colors\"\r\n],function(langx,colors) {\r\n\r\n    return colors.names;\r\n\r\n});\r\n\r\n\ndefine('skylark-data-color/main',[\r\n    \"./colors\",\r\n    \"./Color\",\r\n    \"./hexNames\",\r\n    \"./names\"\r\n], function(colors) {\r\n\r\n\treturn colors;\r\n});\ndefine('skylark-data-color', ['skylark-data-color/main'], function (main) { return main; });\n\n"]}