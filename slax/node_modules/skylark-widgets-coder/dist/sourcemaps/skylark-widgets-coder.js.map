{"version":3,"sources":["skylark-widgets-coder.js"],"names":["define","langx","Xhr","seqRunner","index","params","arr","errors","callback","err","res","push","length","apply","this","arguments","defaultModemap","html","css","js","less","styl","coffee","fetch","url","get","then","e","seq","log","console","getMode","type","file","customModemap","modemap","mixin","key","keyLength","slice","container","paneActiveClass","containerClass","hasFileClass","editorClass","editorContent","fileUrl","statusMessage","statusClass","statusActiveClass","pluginClass","name","statusLoading","statusFetchError","general","edit","skylark","Widget","styler","datax","util","template","addons","Coder","klassName","pluginName","options","files","showBlank","runScripts","pane","debounce","[object Object]","$coderContainer","opts","gerneral","super","_init","_private","_get","_set","value","$container","_elm","paneActive","velm","_velm","addClass","on","change","bind","markup","load","fileIndex","$parent","querySelector","findFile","$editor","document","createElement","innerHTML","className","appendChild","content","$textarea","setValue","status","clearStatus","val","target","data","cachedContent","emit","errs","removeClass","preventDefault","statusType","messages","$status","forEach","attach","Evented","base","Addon","inherit","_construct","widget","_widget","Object","defineProperty","register","categoryName","addonName","_Addon","coder","pluginCssClass","constructor","CodeMirror","AddonCodeMirror","lineNumbers","i","editor","$editors","querySelectorAll","fromTextArea","setOption","cmEditor","editorChange","getValue","AddonConsole","autoClear","logCaptureSnippet","capture","toString","$nav","$pane","append","find","$output","$input","$inputForm","$clear","addEventListener","submit","history","clear","priority","window","getMessage","historyIndex","contentCache","getIframe","source","contentWindow","JSON","parse","message","snippetlessContent","replace","forceRender","indexOf","oldConsoleLog","Function","prototype","call","parent","postMessage","stringify","$log","inputValue","trim","scriptOutput","eval","scrollTop","scrollHeight","gotHistory","selectionStart","keyCode","AddonPlay","firstRun","cache","$button","run","code","clone","AddonRender","supportSrcdoc","$resultFrame","domready","frameContent","callbacks","lastCallback","style","body","script","oldFrameContent","$newResultFrame","parentNode","replaceChild","open","write","close","setAttribute","jsUrl","location","main"],"mappings":"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","file":"../skylark-widgets-coder.js","sourcesContent":["define('skylark-widgets-coder/util',[\n    \"skylark-langx/langx\",\n    \"skylark-net-http/Xhr\"\n],function (langx,Xhr) {\n    'use strict';\n\n    function fetch(url, callback) {\n        /*\n        var xhr = new window.XMLHttpRequest();\n        xhr.open('GET', url);\n        xhr.responseType = 'text';\n        xhr.onload = function () {\n            if (xhr.status === 200) {\n                callback(null, xhr.responseText);\n            } else {\n                callback(url, xhr);\n            }\n        };\n        xhr.onerror = function (err) {\n            callback(err);\n        };\n        xhr.send();\n        */\n        Xhr.get(url).then(\n            function(res) {\n                callback(null,res);\n            },\n            function(e){\n                callback(e);\n            }\n        )\n    }\n    function runCallback(index, params, arr, errors, callback) {\n        return function (err, res) {\n            if (err) {\n                errors.push(err);\n            }\n            index++;\n            if (index < arr.length) {\n                seqRunner(index, res, arr, errors, callback);\n            } else {\n                callback(errors, res);\n            }\n        };\n    }\n    function seqRunner(index, params, arr, errors, callback) {\n        arr[index](params, runCallback.apply(this, arguments));\n    }\n    function seq(arr, params, callback = function () {\n    }) {\n        var errors = [];\n        if (!arr.length) {\n            return callback(errors, params);\n        }\n        seqRunner(0, params, arr, errors, callback);\n    }\n    function log() {\n        console.log(arguments);\n    }\n\n\n    var defaultModemap = {\n        'html': 'html',\n        'css': 'css',\n        'js': 'javascript',\n        'less': 'less',\n        'styl': 'stylus',\n        'coffee': 'coffeescript'\n    };\n    function getMode(type = '', file = '', customModemap = {}) {\n        var modemap = langx.mixin({}, defaultModemap,customModemap);\n        for (let key in modemap) {\n            let keyLength = key.length;\n            if (file.slice(-keyLength++) === '.' + key) {\n                return modemap[key];\n            }\n        }\n        for (let key in modemap) {\n            if (type === key) {\n                return modemap[key];\n            }\n        }\n        return type;\n    }\n    return {\n        fetch,\n        seq,\n        log,\n        getMode\n    };\n});\ndefine('skylark-widgets-coder/template',[],function () {\n    'use strict';\n    function container() {\n        return `\n    <ul class=\"coder-nav\">\n      <li class=\"coder-nav-item coder-nav-item-result\">\n        <a href=\"#\" data-coder-type=\"result\">\n          Result\n        </a>\n      </li>\n      <li class=\"coder-nav-item coder-nav-item-html\">\n        <a href=\"#\" data-coder-type=\"html\">\n          HTML\n        </a>\n      </li>\n      <li class=\"coder-nav-item coder-nav-item-css\">\n        <a href=\"#\" data-coder-type=\"css\">\n          CSS\n        </a>\n      </li>\n      <li class=\"coder-nav-item coder-nav-item-js\">\n        <a href=\"#\" data-coder-type=\"js\">\n          JavaScript\n        </a>\n      </li>\n    </ul>\n    <div class=\"coder-pane coder-pane-result\"><iframe></iframe></div>\n    <div class=\"coder-pane coder-pane-html\"></div>\n    <div class=\"coder-pane coder-pane-css\"></div>\n    <div class=\"coder-pane coder-pane-js\"></div>\n  `;\n    }\n    function paneActiveClass(type) {\n        return `coder-pane-active-${ type }`;\n    }\n    function containerClass() {\n        return 'coder';\n    }\n    function hasFileClass(type) {\n        return `coder-has-${ type }`;\n    }\n    function editorClass(type) {\n        return `coder-editor coder-editor-${ type }`;\n    }\n    function editorContent(type, fileUrl = '') {\n        return `\n    <textarea data-coder-type=\"${ type }\" data-coder-file=\"${ fileUrl }\"></textarea>\n    <div class=\"coder-status\"></div>\n  `;\n    }\n    function statusMessage(err) {\n        return `\n    <p>${ err }</p>\n  `;\n    }\n    function statusClass(type) {\n        return `coder-status-${ type }`;\n    }\n    function statusActiveClass(type) {\n        return `coder-status-active-${ type }`;\n    }\n    function pluginClass(name) {\n        return `coder-plugin-${ name }`;\n    }\n    function statusLoading(url) {\n        return `Loading <strong>${ url }</strong>..`;\n    }\n    function statusFetchError(url) {\n        return `There was an error loading <strong>${ url }</strong>.`;\n    }\n    return {\n        container: container,\n        paneActiveClass: paneActiveClass,\n        containerClass: containerClass,\n        hasFileClass: hasFileClass,\n        editorClass: editorClass,\n        editorContent: editorContent,\n        statusMessage: statusMessage,\n        statusClass: statusClass,\n        statusActiveClass: statusActiveClass,\n        pluginClass: pluginClass,\n        statusLoading: statusLoading,\n        statusFetchError: statusFetchError\n    };\n});\ndefine('skylark-widgets-coder/addons',[],function(){\r\n\treturn {\r\n\t    general : {\r\n\r\n\t    },\r\n\r\n\t    html : {\r\n      \r\n\t    },\r\n\r\n\t    css : {\r\n      \r\n\t    },\r\n\r\n\t    js : {\r\n      \r\n\t    },\r\n\r\n\t    edit : {\r\n      \r\n\t    }\t\r\n\t};\r\n});\ndefine('skylark-widgets-coder/Coder',[\n    'skylark-langx/skylark',\n    'skylark-langx/langx',\n    'skylark-widgets-base/Widget',\n    \"skylark-domx-styler\",\n    \"skylark-domx-data\",\n    './util',\n    './template',\n    \"./addons\"\n], function (skylark,langx,Widget, styler,datax,util, template,addons) {\n    'use strict';\n    class Coder extends Widget{\n        get klassName() {\n          return \"Coder\";\n        } \n\n        get pluginName(){\n          return \"lark.coder\";\n        } \n\n        //default options\n        get options () {\n            return {\n                files: [],\n                showBlank: false,\n                runScripts: true,\n                pane: 'result',\n                debounce: 250,\n                addons: {\n                    \"general\" : [\"render\"]\n                }\n            }\n        }\n\n        _init ($coderContainer, opts) {\n            //if (!$coderContainer) {\n            //    throw new Error(\"Can't find Coder container.\");\n            // }\n\n            var options = this.options;\n            if (options.runScripts === false) {\n                options.addons.gerneral.push('scriptless');\n            }\n\n            super._init();\n            //Widget.prototype._init.call(this);\n\n            var _private = {};\n            this._get = function (key) {\n                return _private[key];\n            };\n            this._set = function (key, value) {\n                _private[key] = value;\n                return _private[key];\n            };\n\n\n            this._set('cachedContent', {\n                html: null,\n                css: null,\n                js: null\n            });\n\n            var $container = this.$container = this._elm;\n\n            var paneActive = this._set('paneActive', options.pane);\n\n            var velm = this._velm;\n            velm.html(template.container())\n                .addClass(template.containerClass())\n                .addClass(template.paneActiveClass(paneActive))\n                .on('keyup', langx.debounce(this.change.bind(this), options.debounce))\n                .on('change', langx.debounce(this.change.bind(this), options.debounce))\n                .on('click', this.pane.bind(this));\n\n            this._set('$status', {});\n            for (let type of [\n                    'html',\n                    'css',\n                    'js'\n                ]) {\n                this.markup(type);\n            }\n        }\n\n        _startup() {\n            var options = this.options;\n            this.paneActive = this._get('paneActive');\n            for (let type of [\n                    'html',\n                    'css',\n                    'js'\n                ]) {\n                this.load(type);\n            }\n            if (options.showBlank) {\n                for (let type of [\n                        'html',\n                        'css',\n                        'js'\n                    ]) {\n                    this._velm.addClass(template.hasFileClass(type));\n                }\n            }\n\n        }\n\n        findFile(type) {\n            var file = {};\n            //var options = this._get('options');\n            var options = this.options;\n            for (let fileIndex in options.files) {\n                let file = options.files[fileIndex];\n                if (file.type === type) {\n                    return file;\n                }\n            }\n            return file;\n        }\n        markup(type) {\n            //var $container = this._get('$container');\n            var $container = this._elm;\n            var $parent = $container.querySelector(`.coder-pane-${ type }`);\n            var file = this.findFile(type);\n            var $editor = document.createElement('div');\n            $editor.innerHTML = template.editorContent(type, file.url);\n            $editor.className = template.editorClass(type);\n            $parent.appendChild($editor);\n            this._get('$status')[type] = $parent.querySelector('.coder-status');\n            if (typeof file.url !== 'undefined' || typeof file.content !== 'undefined') {\n                styler.addClass($container, template.hasFileClass(type));\n            }\n        }\n        load(type) {\n            var file = this.findFile(type);\n            //var $textarea = this._get('$container').querySelector(`.coder-pane-${ type } textarea`);\n            var $textarea = this._elm.querySelector(`.coder-pane-${ type } textarea`);\n            if (typeof file.content !== 'undefined') {\n                this.setValue($textarea, file.content);\n            } else if (typeof file.url !== 'undefined') {\n                this.status('loading', [template.statusLoading(file.url)], {\n                    type: type,\n                    file: file\n                });\n                util.fetch(file.url, (err, res) => {\n                    if (err) {\n                        this.status('error', [template.statusFetchError(err)], { type: type });\n                        return;\n                    }\n                    this.clearStatus('loading', { type: type });\n                    this.setValue($textarea, res);\n                });\n            } else {\n                this.setValue($textarea, '');\n            }\n        }\n        setValue($textarea, val) {\n            $textarea.value = val;\n            this.change({ target: $textarea });\n        }\n        change(e) {\n            var type = datax.data(e.target, 'coder-type');\n            if (!type) {\n                return;\n            }\n            var cachedContent = this._get('cachedContent');\n            if (cachedContent[type] === e.target.value) {\n                return;\n            }\n            cachedContent[type] = e.target.value;\n            this.emit('change', {\n                type: type,\n                file: datax.data(e.target, 'coder-file'),\n                content: cachedContent[type]\n            });\n        }\n        errors(errs, params) {\n            this.status('error', errs, params);\n        }\n        pane(e) {\n            if (!datax.data(e.target, 'coder-type')) {\n                return;\n            }\n            //var $container = this._get('$container');\n            var $container = this._elm;\n            var paneActive = this._get('paneActive');\n            styler.removeClass($container, template.paneActiveClass(paneActive));\n            paneActive = this._set('paneActive', datax.data(e.target, 'coder-type'));\n            styler.addClass($container, template.paneActiveClass(paneActive));\n            e.preventDefault();\n        }\n        status(statusType = 'error', messages = [], params = {}) {\n            if (!messages.length) {\n                return this.clearStatus(statusType, params);\n            }\n            var $status = this._get('$status');\n            styler.addClass($status[params.type], template.statusClass(statusType));\n            //styler.addClass(this._get('$container'), template.statusActiveClass(params.type));\n            styler.addClass(this._elm, template.statusActiveClass(params.type));\n            var markup = '';\n            messages.forEach(function (err) {\n                markup += template.statusMessage(err);\n            });\n            $status[params.type].innerHTML = markup;\n        }\n        clearStatus(statusType, params) {\n            var $status = this._get('$status');\n            styler.removeClass($status[params.type], template.statusClass(statusType));\n            //styler.removeClass(this._get('$container'), template.statusActiveClass(params.type));\n            styler.removeClass(this._elm, template.statusActiveClass(params.type));\n            $status[params.type].innerHTML = '';\n        }\n    }\n    Coder.addons = addons;\n\n    return skylark.attach(\"widgets.Coder\",Coder);\n});\ndefine('skylark-widgets-base/Addon',[\r\n  \"skylark-langx/langx\",\t\r\n  \"skylark-langx/Evented\",\r\n\t\"./base\"\r\n],function(langx,Evented,base){\r\n\r\n\tvar Addon = Evented.inherit({\r\n\r\n\t\t_construct : function(widget,options) {\r\n\t\t\tthis._widget = widget;\r\n            Object.defineProperty(this,\"options\",{\r\n              value :langx.mixin({},this.options,options,true)\r\n            });\r\n\t\t\tif (this._init) {\r\n\t\t\t\tthis._init();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t});\r\n\r\n\tAddon.register = function(Widget) {\r\n\t\tvar categoryName = this.categoryName,\r\n\t\t\taddonName = this.addonName;\r\n\r\n\t\tif (categoryName && addonName) {\r\n\t\t\tWidget.addons = Widget.addons || {};\r\n\t\t\tWidget.addons[categoryName] = Widget.addons[categoryName] || {};\r\n\t\t\tWidget.addons[categoryName][addonName] = this;\r\n\t\t}\r\n\t};\r\n\r\n\treturn base.Addon = Addon;\r\n\r\n});\ndefine('skylark-widgets-coder/Addon',[\r\n\t\"skylark-domx-styler\",\r\n\t\"skylark-widgets-base/Addon\"\r\n],function(styler,_Addon){\r\n\treturn class Addon extends _Addon {\r\n\t\t_init() {\r\n            this.coder = this._widget;\r\n\r\n            this.options.pluginCssClass = this.options.pluginClass || (\"coder-plugin-\" + this.constructor.addonName);\r\n\r\n\t\t\tif (this.options.pluginCssClass) {\r\n\t            styler.addClass(this._widget._elm, this.options.pluginCssClass);\t\t\t\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n});\ndefine('skylark-widgets-coder/addons/edit/codemirror',[\n    'skylark-langx/langx',\n    'skylark-domx-data',\n    'skylark-codemirror/CodeMirror',\n    \"../../Addon\",\n    '../../util',\n    \"../../Coder\"    \n], function (langx,datax,CodeMirror,Addon,util,Coder) {\n    'use strict';\n    class AddonCodeMirror  extends Addon{\n        //constructor(coder, options) \n\n        get options() {\n            return {\n               lineNumbers: true,\n               pluginCssClass : \"coder-plugin-codemirror\"\n            }\n        }\n\n        _init() {\n            super._init();\n            var coder = this.coder,\n                options = this.options;\n\n            var priority = 1;\n            var i;\n            this.editor = {};\n            //this.coder = coder;\n            var modemap = { 'html': 'htmlmixed' };\n            var options = this.options;\n            //if (typeof window.CodeMirror === 'undefined') {\n            //    return;\n            //}\n            var $editors = coder.$container.querySelectorAll('.coder-editor');\n            for (i = 0; i < $editors.length; i++) {\n                let $textarea = $editors[i].querySelector('textarea');\n                let type = datax.data($textarea, 'coder-type');\n                let file = datax.data($textarea, 'coder-file');\n                this.editor[type] = CodeMirror.fromTextArea($textarea, options);\n                this.editor[type].setOption('mode', util.getMode(type, file, modemap));\n            }\n            coder.on('change', this.change.bind(this), priority);\n        }\n        editorChange(params) {\n            return () => {\n                this.coder.emit('change', params);\n            };\n        }\n        change(e, callback) {\n            var params = e.data,\n                editor = this.editor[params.type];\n            if (!params.cmEditor) {\n                editor.setValue(params.content);\n                params.cmEditor = editor;\n                editor.on('change', this.editorChange(params));\n            }\n            params.content = editor.getValue();\n            //callback(null, params);\n        }\n\n\n        static get categoryName() {\n            return \"edit\";\n        }\n\n        static get addonName(){\n            return \"codemirror\";\n        }        \n    };\n\n    AddonCodeMirror.register(Coder);\n\n    return AddonCodeMirror;\n});\ndefine('skylark-widgets-coder/addons/general/console',[\n    'skylark-langx/langx',\n    \"skylark-domx-styler\",\n    \"../../Addon\",\n    '../../util',\n    \"../../Coder\"\n], function (langx,styler,Addon,util,Coder) {\n    'use strict';\n    \n    class AddonConsole  extends Addon{\n        //constructor(coder, options) \n\n        get options() {\n            return {\n               autoClear: false \n            }\n        }\n\n        _init() {\n            super._init();\n            var coder = this.coder,\n                options = this.options;\n            \n            var priority = 30;\n            var history = [];\n            var historyIndex = 0;\n            var logCaptureSnippet = `(function ${ this.capture.toString() })();`;\n            var contentCache = {\n                html: '',\n                css: '',\n                js: ''\n            };\n            var $nav = document.createElement('li');\n            styler.addClass($nav, 'coder-nav-item coder-nav-item-console');\n            $nav.innerHTML = '<a href=\"#\" data-coder-type=\"console\">JS Console</a>';\n            var $pane = document.createElement('div');\n            styler.addClass($pane, 'coder-pane coder-pane-console');\n            $pane.innerHTML = `\n              <div class=\"coder-console-container\">\n                <ul class=\"coder-console-output\"></ul>\n                <form class=\"coder-console-input\">\n                  <input type=\"text\">\n                </form>\n              </div>\n              <button class=\"coder-button coder-console-clear\">Clear</button>\n            `;\n\n            coder._velm.append($pane);\n            coder._velm.find('.coder-nav').append($nav);\n            var $container = coder.$container.querySelector('.coder-console-container');\n            var $output = coder.$container.querySelector('.coder-console-output');\n            var $input = coder.$container.querySelector('.coder-console-input input');\n            var $inputForm = coder.$container.querySelector('.coder-console-input');\n            var $clear = coder.$container.querySelector('.coder-console-clear');\n            $inputForm.addEventListener('submit', this.submit.bind(this));\n            $input.addEventListener('keydown', this.history.bind(this));\n            $clear.addEventListener('click', this.clear.bind(this));\n            if (options.autoClear === true) {\n                coder.on('change', this.autoClear.bind(this), priority - 1);\n            }\n            coder.on('change', this.change.bind(this), priority);\n            window.addEventListener('message', this.getMessage.bind(this));\n            this.$coderContainer = coder.$container;\n            this.$container = $container;\n            this.$input = $input;\n            this.$output = $output;\n            this.history = history;\n            this.historyIndex = historyIndex;\n            this.logCaptureSnippet = logCaptureSnippet;\n            this.contentCache = contentCache;\n            this.getIframe = this.getIframe.bind(this);\n        }\n        getIframe() {\n            return this.$coderContainer.querySelector('.coder-pane-result iframe');\n        }\n        getMessage(e) {\n            if (e.source !== this.getIframe().contentWindow) {\n                return;\n            }\n            var data = {};\n            try {\n                data = JSON.parse(e.data);\n            } catch (err) {\n            }\n            if (data.type === 'coder-console-log') {\n                this.log(data.message);\n            }\n        }\n        autoClear(params, callback) {\n            var snippetlessContent = params.content;\n            if (params.type === 'js') {\n                snippetlessContent = snippetlessContent.replace(this.logCaptureSnippet, '');\n            }\n            if (params.forceRender === true || this.contentCache[params.type] !== snippetlessContent) {\n                this.clear();\n            }\n            this.contentCache[params.type] = snippetlessContent;\n            //callback(null, params);\n        }\n        change(e) {\n            var params = e.data;\n            if (params.type !== 'js') {\n                return //callback(null, params);\n            }\n            if (params.content.indexOf(this.logCaptureSnippet) === -1) {\n                params.content = `${ this.logCaptureSnippet }${ params.content }`;\n            }\n            //callback(null, params);\n        }\n        capture() {\n            if (typeof window.console === 'undefined' || typeof window.console.log === 'undefined') {\n                window.console = {\n                    log: function () {\n                    }\n                };\n            }\n            var oldConsoleLog = Function.prototype.bind.call(window.console.log, window.console);\n            window.console.log = function () {\n                [].slice.call(arguments).forEach(function (message) {\n                    window.parent.postMessage(JSON.stringify({\n                        type: 'coder-console-log',\n                        message: message\n                    }), '*');\n                });\n                oldConsoleLog.apply(oldConsoleLog, arguments);\n            };\n        }\n        log(message = '', type) {\n            var $log = document.createElement('li');\n            styler.addClass($log, 'coder-console-log');\n            if (typeof type !== 'undefined') {\n                styler.addClass($log, `coder-console-log-${ type }`);\n            }\n            $log.innerHTML = message;\n            this.$output.appendChild($log);\n        }\n        submit(e) {\n            var inputValue = this.$input.value.trim();\n            if (inputValue === '') {\n                return e.preventDefault();\n            }\n            this.history.push(inputValue);\n            this.historyIndex = this.history.length;\n            this.log(inputValue, 'history');\n            if (inputValue.indexOf('return') !== 0) {\n                inputValue = 'return ' + inputValue;\n            }\n            try {\n                var scriptOutput = this.getIframe().contentWindow.eval(`(function() {${ inputValue }})()`);\n                this.log(scriptOutput);\n            } catch (err) {\n                this.log(err, 'error');\n            }\n            this.$input.value = '';\n            this.$container.scrollTop = this.$container.scrollHeight;\n            e.preventDefault();\n        }\n        clear() {\n            this.$output.innerHTML = '';\n        }\n        history(e) {\n            var UP = 38;\n            var DOWN = 40;\n            var gotHistory = false;\n            var selectionStart = this.$input.selectionStart;\n            if (e.keyCode === UP && this.historyIndex !== 0 && selectionStart === 0) {\n                this.historyIndex--;\n                gotHistory = true;\n            }\n            if (e.keyCode === DOWN && this.historyIndex !== this.history.length - 1 && selectionStart === this.$input.value.length) {\n                this.historyIndex++;\n                gotHistory = true;\n            }\n            if (gotHistory) {\n                this.$input.value = this.history[this.historyIndex];\n            }\n        }\n\n        static get categoryName() {\n            return \"general\";\n        }\n\n        static get addonName(){\n            return \"console\";\n        }\n        \n    };\n\n    AddonConsole.register(Coder);\n\n    return AddonConsole;\n});\ndefine('skylark-widgets-coder/addons/general/play',[\n    'skylark-langx/langx',\n    \"../../Addon\",\n    '../../util',\n    \"../../Coder\"\n], function (langx,Addon,util,Coder) {\n    class AddonPlay  extends Addon{\n        //constructor(coder, options) \n\n        get options() {\n            return {\n               firstRun: true \n            }\n        }\n\n        _init() {\n            super._init();\n\n            var coder = this.coder,\n                options = this.options;\n            \n            var priority = 10;\n            var cache = {};\n            var code = {};\n            if (options.firstRun === false) {\n                cache = {\n                    html: {\n                        type: 'html',\n                        content: ''\n                    },\n                    css: {\n                        type: 'css',\n                        content: ''\n                    },\n                    js: {\n                        type: 'js',\n                        content: ''\n                    }\n                };\n            }\n            var $button = document.createElement('button');\n            $button.className = 'coder-button coder-button-play';\n            $button.innerHTML = 'Run';\n            coder.$container.appendChild($button);\n            $button.addEventListener('click', this.run.bind(this));\n            coder.on('change', this.change.bind(this), priority);\n            this.cache = cache;\n            this.code = code;\n            this.coder = coder;\n        }\n        change(e) {\n            var params = e.data;\n            this.code[params.type] = langx.clone(params);\n            if (typeof this.cache[params.type] !== 'undefined') {\n                callback(null, this.cache[params.type]);\n                this.cache[params.type].forceRender = null;\n            } else {\n                this.cache[params.type] = langx.clone(params);\n                //callback(null, params);\n            }\n        }\n        run() {\n            for (let type in this.code) {\n                this.cache[type] = langx.mixin({ forceRender: true },this.code[type]);\n                this.coder.emit('change', this.cache[type]);\n            }\n        }\n\n        static get categoryName() {\n            return \"general\";\n        }\n\n        static get addonName(){\n            return \"play\";\n        }\n\n    };\n\n    AddonPlay.register(Coder);\n\n    return AddonPlay;\n});\ndefine('skylark-widgets-coder/addons/general/render',[\n    'skylark-langx/langx',\n    \"../../Addon\",\n    '../../util',\n    \"../../Coder\"\n], function (langx,Addon,util,Coder) {\n    'use strict';\n    class AddonRender  extends Addon{\n        //constructor(coder, options) \n\n        _init() {\n            super._init();\n\n            var coder = this.coder,\n                options = this.options;\n\n\n            var supportSrcdoc = !!('srcdoc' in document.createElement('iframe'));\n            var $resultFrame = coder.$container.querySelector('.coder-pane-result iframe');\n            var frameContent = '';\n            var content = {\n                html: '',\n                css: '',\n                js: ''\n            };\n            window.addEventListener('message', this.domready.bind(this));\n            coder.on('change', this.change.bind(this), 100);\n            this.supportSrcdoc = supportSrcdoc;\n            this.content = content;\n            this.frameContent = frameContent;\n            this.$resultFrame = $resultFrame;\n            this.callbacks = [];\n            this.index = 0;\n            this.lastCallback = () => {\n            };\n        }\n        template(style = '', body = '', script = '') {\n            return `\n      <!doctype html>\n      <html>\n        <head>\n          <script>\n            (function () {\n              window.addEventListener('DOMContentLoaded', function () {\n                window.parent.postMessage(JSON.stringify({\n                  type: 'coder-dom-ready'\n                }), '*')\n              })\n            }())\n          </script>\n\n          <style>${ style }</style>\n        </head>\n        <body>\n          ${ body }\n\n          <!--\n            Coder:\n            Empty script tag prevents malformed HTML from breaking the next script.\n          -->\n          <script></script>\n          <script>${ script }</script>\n        </body>\n      </html>\n    `;\n        }\n        change(e) {\n            var params = e.data;\n            this.content[params.type] = params.content;\n            var oldFrameContent = this.frameContent;\n            this.frameContent = this.template(this.content['css'], this.content['html'], this.content['js']);\n            this.lastCallback = () => {\n                this.lastCallback = () => {\n                };\n                //callback(null, params);\n            };\n            if (params.forceRender !== true && this.frameContent === oldFrameContent) {\n                //callback(null, params);\n                return;\n            }\n            if (this.supportSrcdoc) {\n                var $newResultFrame = document.createElement('iframe');\n                this.$resultFrame.parentNode.replaceChild($newResultFrame, this.$resultFrame);\n                this.$resultFrame = $newResultFrame;\n                this.$resultFrame.contentWindow.document.open();\n                this.$resultFrame.contentWindow.document.write(this.frameContent);\n                this.$resultFrame.contentWindow.document.close();\n            } else {\n                this.$resultFrame.setAttribute('data-srcdoc', this.frameContent);\n                var jsUrl = 'javascript:window.frameElement.getAttribute(\"data-srcdoc\");';\n                this.$resultFrame.setAttribute('src', jsUrl);\n                if (this.$resultFrame.contentWindow) {\n                    this.$resultFrame.contentWindow.location = jsUrl;\n                }\n            }\n        }\n        domready(e) {\n            if (e.source !== this.$resultFrame.contentWindow) {\n                return;\n            }\n            var data = {};\n            try {\n                data = JSON.parse(e.data);\n            } catch (e) {\n            }\n            if (data.type === 'coder-dom-ready') {\n                this.lastCallback();\n            }\n        }\n\n        static get categoryName() {\n            return \"general\";\n        }\n\n        static get addonName(){\n            return \"render\";\n        }\n\n    };\n\n    AddonRender.register(Coder);\n\n    return AddonRender;\n});\ndefine('skylark-widgets-coder/main',[\r\n\t\"./Coder\",\r\n\t\"./addons/edit/codemirror\",\r\n\t\"./addons/general/console\",\r\n\t\"./addons/general/play\",\r\n\t\"./addons/general/render\"\r\n],function(Coder){\r\n\r\n\treturn Coder;\r\n});\ndefine('skylark-widgets-coder', ['skylark-widgets-coder/main'], function (main) { return main; });\n\n"]}