{"version":3,"sources":["addons/general/render.js"],"names":["define","langx","Addon","util","Coder","AddonRender","[object Object]","super","_init","coder","this","supportSrcdoc","options","document","createElement","$resultFrame","$container","querySelector","window","addEventListener","domready","bind","on","change","content","html","css","js","frameContent","callbacks","index","lastCallback","style","body","script","e","params","data","type","oldFrameContent","template","forceRender","$newResultFrame","parentNode","replaceChild","contentWindow","open","write","close","setAttribute","jsUrl","location","source","JSON","parse","categoryName","addonName","register"],"mappings":";;;;;;;AAAAA,QACI,sBACA,cACA,aACA,eACD,SAAUC,EAAMC,EAAMC,EAAKC,GAC1B,mBACMC,UAAqBH,EAGvBI,QACIC,MAAMC,QAEN,IAAIC,EAAQC,KAAKD,MAIbE,GAHUD,KAAKE,WAGI,WAAYC,SAASC,cAAc,YACtDC,EAAeN,EAAMO,WAAWC,cAAc,6BAOlDC,OAAOC,iBAAiB,UAAWT,KAAKU,SAASC,KAAKX,OACtDD,EAAMa,GAAG,SAAUZ,KAAKa,OAAOF,KAAKX,MAAO,KAC3CA,KAAKC,cAAgBA,EACrBD,KAAKc,SAPDC,KAAM,GACNC,IAAK,GACLC,GAAI,IAMRjB,KAAKkB,aAVc,GAWnBlB,KAAKK,aAAeA,EACpBL,KAAKmB,aACLnB,KAAKoB,MAAQ,EACbpB,KAAKqB,aAAe,SAGxBzB,SAAS0B,EAAQ,GAAIC,EAAO,GAAIC,EAAS,IACrC,uYAcQF,yDAGPC,sMAOQC,oDAKb5B,OAAO6B,GACH,IAAIC,EAASD,EAAEE,KACf3B,KAAKc,QAAQY,EAAOE,MAAQF,EAAOZ,QACnC,IAAIe,EAAkB7B,KAAKkB,aAO3B,GANAlB,KAAKkB,aAAelB,KAAK8B,SAAS9B,KAAKc,QAAa,IAAGd,KAAKc,QAAc,KAAGd,KAAKc,QAAY,IAC9Fd,KAAKqB,aAAe,MAChBrB,KAAKqB,aAAe,YAIG,IAAvBK,EAAOK,aAAwB/B,KAAKkB,eAAiBW,EAIzD,GAAI7B,KAAKC,cAAe,CACpB,IAAI+B,EAAkB7B,SAASC,cAAc,UAC7CJ,KAAKK,aAAa4B,WAAWC,aAAaF,EAAiBhC,KAAKK,cAChEL,KAAKK,aAAe2B,EACpBhC,KAAKK,aAAa8B,cAAchC,SAASiC,OACzCpC,KAAKK,aAAa8B,cAAchC,SAASkC,MAAMrC,KAAKkB,cACpDlB,KAAKK,aAAa8B,cAAchC,SAASmC,YACtC,CACHtC,KAAKK,aAAakC,aAAa,cAAevC,KAAKkB,cACnD,IAAIsB,EAAQ,8DACZxC,KAAKK,aAAakC,aAAa,MAAOC,GAClCxC,KAAKK,aAAa8B,gBAClBnC,KAAKK,aAAa8B,cAAcM,SAAWD,IAIvD5C,SAAS6B,GACL,GAAIA,EAAEiB,SAAW1C,KAAKK,aAAa8B,cAAnC,CAGA,IAAIR,KACJ,IACIA,EAAOgB,KAAKC,MAAMnB,EAAEE,MACtB,MAAOF,IAES,oBAAdE,EAAKC,MACL5B,KAAKqB,gBAIbwB,0BACI,MAAO,UAGXC,uBACI,MAAO,UAOf,OAFAnD,EAAYoD,SAASrD,GAEdC","file":"../../../addons/general/render.js","sourcesContent":["define([\n    'skylark-langx/langx',\n    \"../../Addon\",\n    '../../util',\n    \"../../Coder\"\n], function (langx,Addon,util,Coder) {\n    'use strict';\n    class AddonRender  extends Addon{\n        //constructor(coder, options) \n\n        _init() {\n            super._init();\n\n            var coder = this.coder,\n                options = this.options;\n\n\n            var supportSrcdoc = !!('srcdoc' in document.createElement('iframe'));\n            var $resultFrame = coder.$container.querySelector('.coder-pane-result iframe');\n            var frameContent = '';\n            var content = {\n                html: '',\n                css: '',\n                js: ''\n            };\n            window.addEventListener('message', this.domready.bind(this));\n            coder.on('change', this.change.bind(this), 100);\n            this.supportSrcdoc = supportSrcdoc;\n            this.content = content;\n            this.frameContent = frameContent;\n            this.$resultFrame = $resultFrame;\n            this.callbacks = [];\n            this.index = 0;\n            this.lastCallback = () => {\n            };\n        }\n        template(style = '', body = '', script = '') {\n            return `\n      <!doctype html>\n      <html>\n        <head>\n          <script>\n            (function () {\n              window.addEventListener('DOMContentLoaded', function () {\n                window.parent.postMessage(JSON.stringify({\n                  type: 'coder-dom-ready'\n                }), '*')\n              })\n            }())\n          </script>\n\n          <style>${ style }</style>\n        </head>\n        <body>\n          ${ body }\n\n          <!--\n            Coder:\n            Empty script tag prevents malformed HTML from breaking the next script.\n          -->\n          <script></script>\n          <script>${ script }</script>\n        </body>\n      </html>\n    `;\n        }\n        change(e) {\n            var params = e.data;\n            this.content[params.type] = params.content;\n            var oldFrameContent = this.frameContent;\n            this.frameContent = this.template(this.content['css'], this.content['html'], this.content['js']);\n            this.lastCallback = () => {\n                this.lastCallback = () => {\n                };\n                //callback(null, params);\n            };\n            if (params.forceRender !== true && this.frameContent === oldFrameContent) {\n                //callback(null, params);\n                return;\n            }\n            if (this.supportSrcdoc) {\n                var $newResultFrame = document.createElement('iframe');\n                this.$resultFrame.parentNode.replaceChild($newResultFrame, this.$resultFrame);\n                this.$resultFrame = $newResultFrame;\n                this.$resultFrame.contentWindow.document.open();\n                this.$resultFrame.contentWindow.document.write(this.frameContent);\n                this.$resultFrame.contentWindow.document.close();\n            } else {\n                this.$resultFrame.setAttribute('data-srcdoc', this.frameContent);\n                var jsUrl = 'javascript:window.frameElement.getAttribute(\"data-srcdoc\");';\n                this.$resultFrame.setAttribute('src', jsUrl);\n                if (this.$resultFrame.contentWindow) {\n                    this.$resultFrame.contentWindow.location = jsUrl;\n                }\n            }\n        }\n        domready(e) {\n            if (e.source !== this.$resultFrame.contentWindow) {\n                return;\n            }\n            var data = {};\n            try {\n                data = JSON.parse(e.data);\n            } catch (e) {\n            }\n            if (data.type === 'coder-dom-ready') {\n                this.lastCallback();\n            }\n        }\n\n        static get categoryName() {\n            return \"general\";\n        }\n\n        static get addonName(){\n            return \"render\";\n        }\n\n    };\n\n    AddonRender.register(Coder);\n\n    return AddonRender;\n});"]}