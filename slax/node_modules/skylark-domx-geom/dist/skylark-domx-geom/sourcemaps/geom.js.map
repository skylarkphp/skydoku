{"version":3,"sources":["geom.js"],"names":["define","skylark","langx","noder","styler","cachedScrollbarWidth","rootNodeRE","px","toPixel","offsetParent","scrollbarWidth","undefined","w1","w2","div","createFragment","innerDiv","childNodes","append","document","body","offsetWidth","css","clientWidth","remove","borderExtents","elm","isWindow","left","top","right","bottom","s","getComputedStyle","borderLeftWidth","borderTopWidth","borderRightWidth","borderBottomWidth","boundingPosition","coords","test","nodeName","getBoundingClientRect","parent","parentOffset","mex","marginExtents","pbex","relativePosition","this","boundingRect","size","clientSize","dimension","width","height","clientHeight","isBorderBox","props","bex","pex","paddingExtents","getDocumentSize","doc","documentElement","max","Math","scrollWidth","scrollHeight","offsetHeight","marginLeft","marginTop","marginRight","marginBottom","marginSize","obj","me","paddingLeft","paddingTop","paddingRight","paddingBottom","pagePosition","window","pageXOffset","pageYOffset","offset","relativeRect","scrollLeft","value","nodeType","defaultView","hasScrollLeft","scrollTo","scrollY","scrollTop","hasScrollTop","scrollX","innerWidth","innerHeight","isDocument","geom","mixin","contentRect","cs","marginRect","pageRect","round","scrollIntoView","align","x","y","parentWidth","parentHeight","parentElm","parentNode","pos","rootElm","offsetLeft","offsetTop","getOffset","abs","rhorizontal","rvertical","roffset","rposition","rpercent","getOffsets","offsets","parseFloat","parseCss","element","property","parseInt","positions","fit","position","data","newOverRight","within","withinOffset","outerWidth","collisionPosLeft","collisionPosition","overLeft","overRight","collisionWidth","newOverBottom","outerHeight","collisionPosTop","overTop","overBottom","collisionHeight","flip","newOverLeft","myOffset","my","elemWidth","atOffset","at","targetWidth","newOverTop","elemHeight","targetHeight","flipfit","apply","arguments","posit","options","targetOffset","basePosition","dimensions","withinElement","hasOffset","msize","raw","target","extend","of","scrollInfo","overflowX","overflowY","hasOverflowX","getScrollInfo","collision","split","preventDefault","pageY","pageX","each","horizontalOffset","verticalOffset","length","concat","exec","elem","using","i","dir","feedback","horizontal","vertical","important","call","attach"],"mappings":"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","file":"../geom.js","sourcesContent":["define([\r\n    \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-styler\"\r\n], function(skylark, langx, noder, styler) {\r\n    var rootNodeRE = /^(?:body|html)$/i,\r\n        px = langx.toPixel,\r\n        offsetParent = noder.offsetParent,\r\n        cachedScrollbarWidth;\r\n\r\n    function scrollbarWidth() {\r\n        if (cachedScrollbarWidth !== undefined) {\r\n            return cachedScrollbarWidth;\r\n        }\r\n        var w1, w2,\r\n            div = noder.createFragment(\"<div style=\" +\r\n                \"'display:block;position:absolute;width:200px;height:200px;overflow:hidden;'>\" +\r\n                \"<div style='height:300px;width:auto;'></div></div>\")[0],\r\n            innerDiv = div.childNodes[0];\r\n\r\n        noder.append(document.body, div);\r\n\r\n        w1 = innerDiv.offsetWidth;\r\n\r\n        styler.css(div, \"overflow\", \"scroll\");\r\n\r\n        w2 = innerDiv.offsetWidth;\r\n\r\n        if (w1 === w2) {\r\n            w2 = div[0].clientWidth;\r\n        }\r\n\r\n        noder.remove(div);\r\n\r\n        return (cachedScrollbarWidth = w1 - w2);\r\n    }\r\n    /*\r\n     * Get the widths of each border of the specified element.\r\n     * @param {HTMLElement} elm\r\n     */\r\n    function borderExtents(elm) {\r\n        if (noder.isWindow(elm)) {\r\n            return {\r\n                left : 0,\r\n                top : 0,\r\n                right : 0,\r\n                bottom : 0\r\n            }\r\n        }        var s = getComputedStyle(elm);\r\n        return {\r\n            left: px(s.borderLeftWidth, elm),\r\n            top: px(s.borderTopWidth, elm),\r\n            right: px(s.borderRightWidth, elm),\r\n            bottom: px(s.borderBottomWidth, elm)\r\n        }\r\n    }\r\n\r\n    //viewport coordinate\r\n    /*\r\n     * Get or set the viewport position of the specified element border box.\r\n     * @param {HTMLElement} elm\r\n     * @param {PlainObject} coords\r\n     */\r\n    function boundingPosition(elm, coords) {\r\n        if (coords === undefined) {\r\n            return rootNodeRE.test(elm.nodeName) ? { top: 0, left: 0 } : elm.getBoundingClientRect();\r\n        } else {\r\n            var // Get *real* offsetParent\r\n                parent = offsetParent(elm),\r\n                // Get correct offsets\r\n                parentOffset = boundingPosition(parent),\r\n                mex = marginExtents(elm),\r\n                pbex = borderExtents(parent);\r\n\r\n            relativePosition(elm, {\r\n                top: coords.top - parentOffset.top - mex.top - pbex.top,\r\n                left: coords.left - parentOffset.left - mex.left - pbex.left\r\n            });\r\n            return this;\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Get or set the viewport rect of the specified element border box.\r\n     * @param {HTMLElement} elm\r\n     * @param {PlainObject} coords\r\n     */\r\n    function boundingRect(elm, coords) {\r\n        if (coords === undefined) {\r\n            return elm.getBoundingClientRect()\r\n        } else {\r\n            boundingPosition(elm, coords);\r\n            size(elm, coords);\r\n            return this;\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Get or set the height of the specified element client box.\r\n     * @param {HTMLElement} elm\r\n     * @param {Number} value\r\n     */\r\n    function clientHeight(elm, value) {\r\n        if (value == undefined) {\r\n            return clientSize(elm).height;\r\n        } else {\r\n            return clientSize(elm, {\r\n                height: value\r\n            });\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Get or set the size of the specified element client box.\r\n     * @param {HTMLElement} elm\r\n     * @param {PlainObject} dimension\r\n     */\r\n    function clientSize(elm, dimension) {\r\n        if (dimension == undefined) {\r\n            return {\r\n                width: elm.clientWidth,\r\n                height: elm.clientHeight\r\n            }\r\n        } else {\r\n            var isBorderBox = (styler.css(elm, \"box-sizing\") === \"border-box\"),\r\n                props = {\r\n                    width: dimension.width,\r\n                    height: dimension.height\r\n                };\r\n            if (!isBorderBox) {\r\n                var pex = paddingExtents(elm);\r\n\r\n                if (props.width !== undefined) {\r\n                    props.width = props.width - pex.left - pex.right;\r\n                }\r\n\r\n                if (props.height !== undefined) {\r\n                    props.height = props.height - pex.top - pex.bottom;\r\n                }\r\n            } else {\r\n                var bex = borderExtents(elm);\r\n\r\n                if (props.width !== undefined) {\r\n                    props.width = props.width + bex.left + bex.right;\r\n                }\r\n\r\n                if (props.height !== undefined) {\r\n                    props.height = props.height + bex.top + bex.bottom;\r\n                }\r\n\r\n            }\r\n            styler.css(elm, props);\r\n            return this;\r\n        }\r\n        return {\r\n            width: elm.clientWidth,\r\n            height: elm.clientHeight\r\n        };\r\n    }\r\n\r\n    /*\r\n     * Get or set the width of the specified element client box.\r\n     * @param {HTMLElement} elm\r\n     * @param {PlainObject} dimension\r\n     */\r\n    function clientWidth(elm, value) {\r\n        if (value == undefined) {\r\n            return clientSize(elm).width;\r\n        } else {\r\n            clientSize(elm, {\r\n                width: value\r\n            });\r\n            return this;\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Get the rect of the specified element content box.\r\n     * @param {HTMLElement} elm\r\n     */\r\n    function contentRect(elm) {\r\n        var cs = clientSize(elm),\r\n            pex = paddingExtents(elm);\r\n\r\n\r\n        //// On Opera, offsetLeft includes the parent's border\r\n        //if(has(\"opera\")){\r\n        //    pe.l += be.l;\r\n        //    pe.t += be.t;\r\n        //}\r\n        return {\r\n            left: pex.left,\r\n            top: pex.top,\r\n            width: cs.width - pex.left - pex.right,\r\n            height: cs.height - pex.top - pex.bottom\r\n        };\r\n    }\r\n\r\n    /*\r\n     * Get the document size.\r\n     * @param {HTMLDocument} doc\r\n     */\r\n    function getDocumentSize(doc) {\r\n        var documentElement = doc.documentElement,\r\n            body = doc.body,\r\n            max = Math.max,\r\n            scrollWidth = max(documentElement.scrollWidth, body.scrollWidth),\r\n            clientWidth = max(documentElement.clientWidth, body.clientWidth),\r\n            offsetWidth = max(documentElement.offsetWidth, body.offsetWidth),\r\n            scrollHeight = max(documentElement.scrollHeight, body.scrollHeight),\r\n            clientHeight = max(documentElement.clientHeight, body.clientHeight),\r\n            offsetHeight = max(documentElement.offsetHeight, body.offsetHeight);\r\n\r\n        return {\r\n            width: scrollWidth < offsetWidth ? clientWidth : scrollWidth,\r\n            height: scrollHeight < offsetHeight ? clientHeight : scrollHeight\r\n        };\r\n    }\r\n\r\n    /*\r\n     * Get the document size.\r\n     * @param {HTMLElement} elm\r\n     * @param {Number} value\r\n     */\r\n    function height(elm, value) {\r\n        if (value == undefined) {\r\n            return size(elm).height;\r\n        } else {\r\n            size(elm, {\r\n                height: value\r\n            });\r\n            return this;\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Get the widths of each margin of the specified element.\r\n     * @param {HTMLElement} elm\r\n     */\r\n    function marginExtents(elm) {\r\n        if (noder.isWindow(elm)) {\r\n            return {\r\n                left : 0,\r\n                top : 0,\r\n                right : 0,\r\n                bottom : 0\r\n            }\r\n        }\r\n        var s = getComputedStyle(elm);\r\n        return {\r\n            left: px(s.marginLeft),\r\n            top: px(s.marginTop),\r\n            right: px(s.marginRight),\r\n            bottom: px(s.marginBottom),\r\n        }\r\n    }\r\n\r\n\r\n    function marginRect(elm) {\r\n        var obj = relativeRect(elm),\r\n            me = marginExtents(elm);\r\n\r\n        return {\r\n            left: obj.left,\r\n            top: obj.top,\r\n            width: obj.width + me.left + me.right,\r\n            height: obj.height + me.top + me.bottom\r\n        };\r\n    }\r\n\r\n\r\n    function marginSize(elm) {\r\n        var obj = size(elm),\r\n            me = marginExtents(elm);\r\n\r\n        return {\r\n            width: obj.width + me.left + me.right,\r\n            height: obj.height + me.top + me.bottom\r\n        };\r\n    }\r\n\r\n    /*\r\n     * Get the widths of each padding of the specified element.\r\n     * @param {HTMLElement} elm\r\n     */\r\n    function paddingExtents(elm) {\r\n        if (noder.isWindow(elm)) {\r\n            return {\r\n                left : 0,\r\n                top : 0,\r\n                right : 0,\r\n                bottom : 0\r\n            }\r\n        }\r\n        var s = getComputedStyle(elm);\r\n        return {\r\n            left: px(s.paddingLeft),\r\n            top: px(s.paddingTop),\r\n            right: px(s.paddingRight),\r\n            bottom: px(s.paddingBottom),\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Get or set the document position of the specified element border box.\r\n     * @param {HTMLElement} elm\r\n     * @param {PlainObject} coords\r\n     */\r\n    //coordinate to the document\r\n    function pagePosition(elm, coords) {\r\n        if (coords === undefined) {\r\n            var obj = elm.getBoundingClientRect()\r\n            return {\r\n                left: obj.left + window.pageXOffset,\r\n                top: obj.top + window.pageYOffset\r\n            }\r\n        } else {\r\n            var // Get *real* offsetParent\r\n                parent = offsetParent(elm),\r\n                // Get correct offsets\r\n                parentOffset = pagePosition(parent),\r\n                mex = marginExtents(elm),\r\n                pbex = borderExtents(parent);\r\n\r\n            relativePosition(elm, {\r\n                top: coords.top - parentOffset.top - mex.top - pbex.top,\r\n                left: coords.left - parentOffset.left - mex.left - pbex.left\r\n            });\r\n            return this;\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Get or set the document rect of the specified element border box.\r\n     * @param {HTMLElement} elm\r\n     * @param {PlainObject} coords\r\n     */\r\n    function pageRect(elm, coords) {\r\n        if (coords === undefined) {\r\n            var obj = elm.getBoundingClientRect()\r\n            return {\r\n                left: obj.left + window.pageXOffset,\r\n                top: obj.top + window.pageYOffset,\r\n                width: Math.round(obj.width),\r\n                height: Math.round(obj.height)\r\n            }\r\n        } else {\r\n            pagePosition(elm, coords);\r\n            size(elm, coords);\r\n            return this;\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Get or set the position of the specified element border box , relative to parent element.\r\n     * @param {HTMLElement} elm\r\n     * @param {PlainObject} coords\r\n     */\r\n    // coordinate relative to it's parent\r\n    function relativePosition(elm, coords) {\r\n        if (coords == undefined) {\r\n            var // Get *real* offsetParent\r\n                parent = offsetParent(elm),\r\n                // Get correct offsets\r\n                offset = boundingPosition(elm),\r\n                parentOffset = boundingPosition(parent),\r\n                mex = marginExtents(elm),\r\n                pbex = borderExtents(parent);\r\n\r\n            // Subtract parent offsets and element margins\r\n            return {\r\n                top: offset.top - parentOffset.top - pbex.top, // - mex.top,\r\n                left: offset.left - parentOffset.left - pbex.left, // - mex.left\r\n            }\r\n        } else {\r\n            var props = {\r\n                top: coords.top,\r\n                left: coords.left\r\n            }\r\n\r\n            if (styler.css(elm, \"position\") == \"static\") {\r\n                props['position'] = \"relative\";\r\n            }\r\n            styler.css(elm, props);\r\n            return this;\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Get or set the rect of the specified element border box , relatived to parent element.\r\n     * @param {HTMLElement} elm\r\n     * @param {PlainObject} coords\r\n     */\r\n    function relativeRect(elm, coords) {\r\n        if (coords === undefined) {\r\n            var // Get *real* offsetParent\r\n                parent = offsetParent(elm),\r\n                // Get correct offsets\r\n                offset = boundingRect(elm),\r\n                parentOffset = boundingPosition(parent),\r\n                mex = marginExtents(elm),\r\n                pbex = borderExtents(parent);\r\n\r\n            // Subtract parent offsets and element margins\r\n            return {\r\n                top: offset.top - parentOffset.top - pbex.top, // - mex.top,\r\n                left: offset.left - parentOffset.left - pbex.left, // - mex.left,\r\n                width: offset.width,\r\n                height: offset.height\r\n            }\r\n        } else {\r\n            relativePosition(elm, coords);\r\n            size(elm, coords);\r\n            return this;\r\n        }\r\n    }\r\n    /*\r\n     * Scroll the specified element into view.\r\n     * @param {HTMLElement} elm\r\n     * @param {} align\r\n     */\r\n    function scrollIntoView(elm, align) {\r\n        function getOffset(elm, rootElm) {\r\n            var x, y, parent = elm;\r\n\r\n            x = y = 0;\r\n            while (parent && parent != rootElm && parent.nodeType) {\r\n                x += parent.offsetLeft || 0;\r\n                y += parent.offsetTop || 0;\r\n                parent = parent.offsetParent;\r\n            }\r\n\r\n            return { x: x, y: y };\r\n        }\r\n\r\n        var parentElm = elm.parentNode;\r\n        var x, y, width, height, parentWidth, parentHeight;\r\n        var pos = getOffset(elm, parentElm);\r\n\r\n        x = pos.x;\r\n        y = pos.y;\r\n        width = elm.offsetWidth;\r\n        height = elm.offsetHeight;\r\n        parentWidth = parentElm.clientWidth;\r\n        parentHeight = parentElm.clientHeight;\r\n\r\n        if (align == \"end\") {\r\n            x -= parentWidth - width;\r\n            y -= parentHeight - height;\r\n        } else if (align == \"center\") {\r\n            x -= (parentWidth / 2) - (width / 2);\r\n            y -= (parentHeight / 2) - (height / 2);\r\n        }\r\n\r\n        parentElm.scrollLeft = x;\r\n        parentElm.scrollTop = y;\r\n\r\n        return this;\r\n    }\r\n    /*\r\n     * Get or set the current horizontal position of the scroll bar for the specified element.\r\n     * @param {HTMLElement} elm\r\n     * @param {Number} value\r\n     */\r\n    function scrollLeft(elm, value) {\r\n        if (elm.nodeType === 9) {\r\n            elm = elm.defaultView;\r\n        }\r\n        var hasScrollLeft = \"scrollLeft\" in elm;\r\n        if (value === undefined) {\r\n            return hasScrollLeft ? elm.scrollLeft : elm.pageXOffset\r\n        } else {\r\n            if (hasScrollLeft) {\r\n                elm.scrollLeft = value;\r\n            } else {\r\n                elm.scrollTo(value, elm.scrollY);\r\n            }\r\n            return this;\r\n        }\r\n    }\r\n    /*\r\n     * Get or the current vertical position of the scroll bar for the specified element.\r\n     * @param {HTMLElement} elm\r\n     * @param {Number} value\r\n     */\r\n    function scrollTop(elm, value) {\r\n        if (elm.nodeType === 9) {\r\n            elm = elm.defaultView;\r\n        }\r\n        var hasScrollTop = \"scrollTop\" in elm;\r\n\r\n        if (value === undefined) {\r\n            return hasScrollTop ? elm.scrollTop : elm.pageYOffset\r\n        } else {\r\n            if (hasScrollTop) {\r\n                elm.scrollTop = value;\r\n            } else {\r\n                elm.scrollTo(elm.scrollX, value);\r\n            }\r\n            return this;\r\n        }\r\n    }\r\n    /*\r\n     * Get or set the size of the specified element border box.\r\n     * @param {HTMLElement} elm\r\n     * @param {PlainObject}dimension\r\n     */\r\n    function size(elm, dimension) {\r\n        if (dimension == undefined) {\r\n            if (langx.isWindow(elm)) {\r\n                return {\r\n                    width: elm.innerWidth,\r\n                    height: elm.innerHeight\r\n                }\r\n\r\n            } else if (langx.isDocument(elm)) {\r\n                return getDocumentSize(document);\r\n            } else {\r\n                return {\r\n                    width: elm.offsetWidth,\r\n                    height: elm.offsetHeight\r\n                }\r\n            }\r\n        } else {\r\n            var isBorderBox = (styler.css(elm, \"box-sizing\") === \"border-box\"),\r\n                props = {\r\n                    width: dimension.width,\r\n                    height: dimension.height\r\n                };\r\n            if (!isBorderBox) {\r\n                var pex = paddingExtents(elm),\r\n                    bex = borderExtents(elm);\r\n\r\n                if (props.width !== undefined && props.width !== \"\" && props.width !== null) {\r\n                    props.width = props.width - pex.left - pex.right - bex.left - bex.right;\r\n                }\r\n\r\n                if (props.height !== undefined && props.height !== \"\" && props.height !== null) {\r\n                    props.height = props.height - pex.top - pex.bottom - bex.top - bex.bottom;\r\n                }\r\n            }\r\n            styler.css(elm, props);\r\n            return this;\r\n        }\r\n    }\r\n    /*\r\n     * Get or set the size of the specified element border box.\r\n     * @param {HTMLElement} elm\r\n     * @param {Number} value\r\n     */\r\n    function width(elm, value) {\r\n        if (value == undefined) {\r\n            return size(elm).width;\r\n        } else {\r\n            size(elm, {\r\n                width: value\r\n            });\r\n            return this;\r\n        }\r\n    }\r\n\r\n    function geom() {\r\n        return geom;\r\n    }\r\n\r\n    langx.mixin(geom, {\r\n        borderExtents: borderExtents,\r\n        //viewport coordinate\r\n        boundingPosition: boundingPosition,\r\n\r\n        boundingRect: boundingRect,\r\n\r\n        clientHeight: clientHeight,\r\n\r\n        clientSize: clientSize,\r\n\r\n        clientWidth: clientWidth,\r\n\r\n        contentRect: contentRect,\r\n\r\n        getDocumentSize: getDocumentSize,\r\n\r\n        height: height,\r\n\r\n        marginExtents: marginExtents,\r\n\r\n        marginRect: marginRect,\r\n\r\n        marginSize: marginSize,\r\n\r\n        offsetParent: offsetParent,\r\n\r\n        paddingExtents: paddingExtents,\r\n\r\n        //coordinate to the document\r\n        pagePosition: pagePosition,\r\n\r\n        pageRect: pageRect,\r\n\r\n        // coordinate relative to it's parent\r\n        relativePosition: relativePosition,\r\n\r\n        relativeRect: relativeRect,\r\n\r\n        scrollbarWidth: scrollbarWidth,\r\n\r\n        scrollIntoView: scrollIntoView,\r\n\r\n        scrollLeft: scrollLeft,\r\n\r\n        scrollTop: scrollTop,\r\n\r\n        size: size,\r\n\r\n        width: width\r\n    });\r\n\r\n    ( function() {\r\n        var max = Math.max,\r\n            abs = Math.abs,\r\n            rhorizontal = /left|center|right/,\r\n            rvertical = /top|center|bottom/,\r\n            roffset = /[\\+\\-]\\d+(\\.[\\d]+)?%?/,\r\n            rposition = /^\\w+/,\r\n            rpercent = /%$/;\r\n\r\n        function getOffsets( offsets, width, height ) {\r\n            return [\r\n                parseFloat( offsets[ 0 ] ) * ( rpercent.test( offsets[ 0 ] ) ? width / 100 : 1 ),\r\n                parseFloat( offsets[ 1 ] ) * ( rpercent.test( offsets[ 1 ] ) ? height / 100 : 1 )\r\n            ];\r\n        }\r\n\r\n        function parseCss( element, property ) {\r\n            return parseInt( styler.css( element, property ), 10 ) || 0;\r\n        }\r\n\r\n        function getDimensions( raw ) {\r\n            if ( raw.nodeType === 9 ) {\r\n                return {\r\n                    size: size(raw),\r\n                    offset: { top: 0, left: 0 }\r\n                };\r\n            }\r\n            if ( noder.isWindow( raw ) ) {\r\n                return {\r\n                    size: size(raw),\r\n                    offset: { \r\n                        top: scrollTop(raw), \r\n                        left: scrollLeft(raw) \r\n                    }\r\n                };\r\n            }\r\n            if ( raw.preventDefault ) {\r\n                return {\r\n                    size : {\r\n                        width: 0,\r\n                        height: 0\r\n                    },\r\n                    offset: { \r\n                        top: raw.pageY, \r\n                        left: raw.pageX \r\n                    }\r\n                };\r\n            }\r\n            return {\r\n                size: size(raw),\r\n                offset: pagePosition(raw)\r\n            };\r\n        }\r\n\r\n        function getScrollInfo( within ) {\r\n            var overflowX = within.isWindow || within.isDocument ? \"\" :\r\n                    styler.css(within.element,\"overflow-x\" ),\r\n                overflowY = within.isWindow || within.isDocument ? \"\" :\r\n                    styler.css(within.element,\"overflow-y\" ),\r\n                hasOverflowX = overflowX === \"scroll\" ||\r\n                    ( overflowX === \"auto\" && within.width < scrollWidth(within.element) ),\r\n                hasOverflowY = overflowY === \"scroll\" ||\r\n                    ( overflowY === \"auto\" && within.height < scrollHeight(within.element));\r\n            return {\r\n                width: hasOverflowY ? scrollbarWidth() : 0,\r\n                height: hasOverflowX ? scrollbarWidth() : 0\r\n            };\r\n        }\r\n\r\n        function getWithinInfo( element ) {\r\n            var withinElement = element || window,\r\n                isWindow = noder.isWindow( withinElement),\r\n                isDocument = !!withinElement && withinElement.nodeType === 9,\r\n                hasOffset = !isWindow && !isDocument,\r\n                msize = marginSize(withinElement);\r\n            return {\r\n                element: withinElement,\r\n                isWindow: isWindow,\r\n                isDocument: isDocument,\r\n                offset: hasOffset ? pagePosition(element) : { left: 0, top: 0 },\r\n                scrollLeft: scrollLeft(withinElement),\r\n                scrollTop: scrollTop(withinElement),\r\n                width: msize.width,\r\n                height: msize.height\r\n            };\r\n        }\r\n\r\n        function posit(elm,options ) {\r\n            // Make a copy, we don't want to modify arguments\r\n            options = langx.extend( {}, options );\r\n\r\n            var atOffset, targetWidth, targetHeight, targetOffset, basePosition, dimensions,\r\n                target = options.of,\r\n                within = getWithinInfo( options.within ),\r\n                scrollInfo = getScrollInfo( within ),\r\n                collision = ( options.collision || \"flip\" ).split( \" \" ),\r\n                offsets = {};\r\n\r\n            dimensions = getDimensions( target );\r\n            if ( target.preventDefault ) {\r\n\r\n                // Force left top to allow flipping\r\n                options.at = \"left top\";\r\n            }\r\n            targetWidth = dimensions.size.width;\r\n            targetHeight = dimensions.size.height;\r\n            targetOffset = dimensions.offset;\r\n\r\n            // Clone to reuse original targetOffset later\r\n            basePosition = langx.extend( {}, targetOffset );\r\n\r\n            // Force my and at to have valid horizontal and vertical positions\r\n            // if a value is missing or invalid, it will be converted to center\r\n            langx.each( [ \"my\", \"at\" ], function() {\r\n                var pos = ( options[ this ] || \"\" ).split( \" \" ),\r\n                    horizontalOffset,\r\n                    verticalOffset;\r\n\r\n                if ( pos.length === 1 ) {\r\n                    pos = rhorizontal.test( pos[ 0 ] ) ?\r\n                        pos.concat( [ \"center\" ] ) :\r\n                        rvertical.test( pos[ 0 ] ) ?\r\n                            [ \"center\" ].concat( pos ) :\r\n                            [ \"center\", \"center\" ];\r\n                }\r\n                pos[ 0 ] = rhorizontal.test( pos[ 0 ] ) ? pos[ 0 ] : \"center\";\r\n                pos[ 1 ] = rvertical.test( pos[ 1 ] ) ? pos[ 1 ] : \"center\";\r\n\r\n                // Calculate offsets\r\n                horizontalOffset = roffset.exec( pos[ 0 ] );\r\n                verticalOffset = roffset.exec( pos[ 1 ] );\r\n                offsets[ this ] = [\r\n                    horizontalOffset ? horizontalOffset[ 0 ] : 0,\r\n                    verticalOffset ? verticalOffset[ 0 ] : 0\r\n                ];\r\n\r\n                // Reduce to just the positions without the offsets\r\n                options[ this ] = [\r\n                    rposition.exec( pos[ 0 ] )[ 0 ],\r\n                    rposition.exec( pos[ 1 ] )[ 0 ]\r\n                ];\r\n            } );\r\n\r\n            // Normalize collision option\r\n            if ( collision.length === 1 ) {\r\n                collision[ 1 ] = collision[ 0 ];\r\n            }\r\n\r\n            if ( options.at[ 0 ] === \"right\" ) {\r\n                basePosition.left += targetWidth;\r\n            } else if ( options.at[ 0 ] === \"center\" ) {\r\n                basePosition.left += targetWidth / 2;\r\n            }\r\n\r\n            if ( options.at[ 1 ] === \"bottom\" ) {\r\n                basePosition.top += targetHeight;\r\n            } else if ( options.at[ 1 ] === \"center\" ) {\r\n                basePosition.top += targetHeight / 2;\r\n            }\r\n\r\n            atOffset = getOffsets( offsets.at, targetWidth, targetHeight );\r\n            basePosition.left += atOffset[ 0 ];\r\n            basePosition.top += atOffset[ 1 ];\r\n\r\n            return ( function(elem) {\r\n                var collisionPosition, using,\r\n                    msize = marginSize(elem),\r\n                    elemWidth = msize.width,\r\n                    elemHeight = msize.height,\r\n                    marginLeft = parseCss( elem, \"marginLeft\" ),\r\n                    marginTop = parseCss( elem, \"marginTop\" ),\r\n                    collisionWidth = elemWidth + marginLeft + parseCss( elem, \"marginRight\" ) +\r\n                        scrollInfo.width,\r\n                    collisionHeight = elemHeight + marginTop + parseCss( elem, \"marginBottom\" ) +\r\n                        scrollInfo.height,\r\n                    position = langx.extend( {}, basePosition ),\r\n                    myOffset = getOffsets( offsets.my, msize.width, msize.height);\r\n\r\n                if ( options.my[ 0 ] === \"right\" ) {\r\n                    position.left -= elemWidth;\r\n                } else if ( options.my[ 0 ] === \"center\" ) {\r\n                    position.left -= elemWidth / 2;\r\n                }\r\n\r\n                if ( options.my[ 1 ] === \"bottom\" ) {\r\n                    position.top -= elemHeight;\r\n                } else if ( options.my[ 1 ] === \"center\" ) {\r\n                    position.top -= elemHeight / 2;\r\n                }\r\n\r\n                position.left += myOffset[ 0 ];\r\n                position.top += myOffset[ 1 ];\r\n\r\n                collisionPosition = {\r\n                    marginLeft: marginLeft,\r\n                    marginTop: marginTop\r\n                };\r\n\r\n                langx.each( [ \"left\", \"top\" ], function( i, dir ) {\r\n                    if ( positions[ collision[ i ] ] ) {\r\n                        positions[ collision[ i ] ][ dir ]( position, {\r\n                            targetWidth: targetWidth,\r\n                            targetHeight: targetHeight,\r\n                            elemWidth: elemWidth,\r\n                            elemHeight: elemHeight,\r\n                            collisionPosition: collisionPosition,\r\n                            collisionWidth: collisionWidth,\r\n                            collisionHeight: collisionHeight,\r\n                            offset: [ atOffset[ 0 ] + myOffset[ 0 ], atOffset [ 1 ] + myOffset[ 1 ] ],\r\n                            my: options.my,\r\n                            at: options.at,\r\n                            within: within,\r\n                            elem: elem\r\n                        } );\r\n                    }\r\n                } );\r\n\r\n                if ( options.using ) {\r\n\r\n                    // Adds feedback as second argument to using callback, if present\r\n                    using = function( props ) {\r\n                        var left = targetOffset.left - position.left,\r\n                            right = left + targetWidth - elemWidth,\r\n                            top = targetOffset.top - position.top,\r\n                            bottom = top + targetHeight - elemHeight,\r\n                            feedback = {\r\n                                target: {\r\n                                    element: target,\r\n                                    left: targetOffset.left,\r\n                                    top: targetOffset.top,\r\n                                    width: targetWidth,\r\n                                    height: targetHeight\r\n                                },\r\n                                element: {\r\n                                    element: elem,\r\n                                    left: position.left,\r\n                                    top: position.top,\r\n                                    width: elemWidth,\r\n                                    height: elemHeight\r\n                                },\r\n                                horizontal: right < 0 ? \"left\" : left > 0 ? \"right\" : \"center\",\r\n                                vertical: bottom < 0 ? \"top\" : top > 0 ? \"bottom\" : \"middle\"\r\n                            };\r\n                        if ( targetWidth < elemWidth && abs( left + right ) < targetWidth ) {\r\n                            feedback.horizontal = \"center\";\r\n                        }\r\n                        if ( targetHeight < elemHeight && abs( top + bottom ) < targetHeight ) {\r\n                            feedback.vertical = \"middle\";\r\n                        }\r\n                        if ( max( abs( left ), abs( right ) ) > max( abs( top ), abs( bottom ) ) ) {\r\n                            feedback.important = \"horizontal\";\r\n                        } else {\r\n                            feedback.important = \"vertical\";\r\n                        }\r\n                        options.using.call( this, props, feedback );\r\n                    };\r\n                }\r\n\r\n                pagePosition(elem, langx.extend( position, { using: using } ));\r\n            })(elm);\r\n        }\r\n\r\n        var positions = {\r\n            fit: {\r\n                left: function( position, data ) {\r\n                    var within = data.within,\r\n                        withinOffset = within.isWindow ? within.scrollLeft : within.offset.left,\r\n                        outerWidth = within.width,\r\n                        collisionPosLeft = position.left - data.collisionPosition.marginLeft,\r\n                        overLeft = withinOffset - collisionPosLeft,\r\n                        overRight = collisionPosLeft + data.collisionWidth - outerWidth - withinOffset,\r\n                        newOverRight;\r\n\r\n                    // Element is wider than within\r\n                    if ( data.collisionWidth > outerWidth ) {\r\n\r\n                        // Element is initially over the left side of within\r\n                        if ( overLeft > 0 && overRight <= 0 ) {\r\n                            newOverRight = position.left + overLeft + data.collisionWidth - outerWidth -\r\n                                withinOffset;\r\n                            position.left += overLeft - newOverRight;\r\n\r\n                        // Element is initially over right side of within\r\n                        } else if ( overRight > 0 && overLeft <= 0 ) {\r\n                            position.left = withinOffset;\r\n\r\n                        // Element is initially over both left and right sides of within\r\n                        } else {\r\n                            if ( overLeft > overRight ) {\r\n                                position.left = withinOffset + outerWidth - data.collisionWidth;\r\n                            } else {\r\n                                position.left = withinOffset;\r\n                            }\r\n                        }\r\n\r\n                    // Too far left -> align with left edge\r\n                    } else if ( overLeft > 0 ) {\r\n                        position.left += overLeft;\r\n\r\n                    // Too far right -> align with right edge\r\n                    } else if ( overRight > 0 ) {\r\n                        position.left -= overRight;\r\n\r\n                    // Adjust based on position and margin\r\n                    } else {\r\n                        position.left = max( position.left - collisionPosLeft, position.left );\r\n                    }\r\n                },\r\n                top: function( position, data ) {\r\n                    var within = data.within,\r\n                        withinOffset = within.isWindow ? within.scrollTop : within.offset.top,\r\n                        outerHeight = data.within.height,\r\n                        collisionPosTop = position.top - data.collisionPosition.marginTop,\r\n                        overTop = withinOffset - collisionPosTop,\r\n                        overBottom = collisionPosTop + data.collisionHeight - outerHeight - withinOffset,\r\n                        newOverBottom;\r\n\r\n                    // Element is taller than within\r\n                    if ( data.collisionHeight > outerHeight ) {\r\n\r\n                        // Element is initially over the top of within\r\n                        if ( overTop > 0 && overBottom <= 0 ) {\r\n                            newOverBottom = position.top + overTop + data.collisionHeight - outerHeight -\r\n                                withinOffset;\r\n                            position.top += overTop - newOverBottom;\r\n\r\n                        // Element is initially over bottom of within\r\n                        } else if ( overBottom > 0 && overTop <= 0 ) {\r\n                            position.top = withinOffset;\r\n\r\n                        // Element is initially over both top and bottom of within\r\n                        } else {\r\n                            if ( overTop > overBottom ) {\r\n                                position.top = withinOffset + outerHeight - data.collisionHeight;\r\n                            } else {\r\n                                position.top = withinOffset;\r\n                            }\r\n                        }\r\n\r\n                    // Too far up -> align with top\r\n                    } else if ( overTop > 0 ) {\r\n                        position.top += overTop;\r\n\r\n                    // Too far down -> align with bottom edge\r\n                    } else if ( overBottom > 0 ) {\r\n                        position.top -= overBottom;\r\n\r\n                    // Adjust based on position and margin\r\n                    } else {\r\n                        position.top = max( position.top - collisionPosTop, position.top );\r\n                    }\r\n                }\r\n            },\r\n            flip: {\r\n                left: function( position, data ) {\r\n                    var within = data.within,\r\n                        withinOffset = within.offset.left + within.scrollLeft,\r\n                        outerWidth = within.width,\r\n                        offsetLeft = within.isWindow ? within.scrollLeft : within.offset.left,\r\n                        collisionPosLeft = position.left - data.collisionPosition.marginLeft,\r\n                        overLeft = collisionPosLeft - offsetLeft,\r\n                        overRight = collisionPosLeft + data.collisionWidth - outerWidth - offsetLeft,\r\n                        myOffset = data.my[ 0 ] === \"left\" ?\r\n                            -data.elemWidth :\r\n                            data.my[ 0 ] === \"right\" ?\r\n                                data.elemWidth :\r\n                                0,\r\n                        atOffset = data.at[ 0 ] === \"left\" ?\r\n                            data.targetWidth :\r\n                            data.at[ 0 ] === \"right\" ?\r\n                                -data.targetWidth :\r\n                                0,\r\n                        offset = -2 * data.offset[ 0 ],\r\n                        newOverRight,\r\n                        newOverLeft;\r\n\r\n                    if ( overLeft < 0 ) {\r\n                        newOverRight = position.left + myOffset + atOffset + offset + data.collisionWidth -\r\n                            outerWidth - withinOffset;\r\n                        if ( newOverRight < 0 || newOverRight < abs( overLeft ) ) {\r\n                            position.left += myOffset + atOffset + offset;\r\n                        }\r\n                    } else if ( overRight > 0 ) {\r\n                        newOverLeft = position.left - data.collisionPosition.marginLeft + myOffset +\r\n                            atOffset + offset - offsetLeft;\r\n                        if ( newOverLeft > 0 || abs( newOverLeft ) < overRight ) {\r\n                            position.left += myOffset + atOffset + offset;\r\n                        }\r\n                    }\r\n                },\r\n                top: function( position, data ) {\r\n                    var within = data.within,\r\n                        withinOffset = within.offset.top + within.scrollTop,\r\n                        outerHeight = within.height,\r\n                        offsetTop = within.isWindow ? within.scrollTop : within.offset.top,\r\n                        collisionPosTop = position.top - data.collisionPosition.marginTop,\r\n                        overTop = collisionPosTop - offsetTop,\r\n                        overBottom = collisionPosTop + data.collisionHeight - outerHeight - offsetTop,\r\n                        top = data.my[ 1 ] === \"top\",\r\n                        myOffset = top ?\r\n                            -data.elemHeight :\r\n                            data.my[ 1 ] === \"bottom\" ?\r\n                                data.elemHeight :\r\n                                0,\r\n                        atOffset = data.at[ 1 ] === \"top\" ?\r\n                            data.targetHeight :\r\n                            data.at[ 1 ] === \"bottom\" ?\r\n                                -data.targetHeight :\r\n                                0,\r\n                        offset = -2 * data.offset[ 1 ],\r\n                        newOverTop,\r\n                        newOverBottom;\r\n                    if ( overTop < 0 ) {\r\n                        newOverBottom = position.top + myOffset + atOffset + offset + data.collisionHeight -\r\n                            outerHeight - withinOffset;\r\n                        if ( newOverBottom < 0 || newOverBottom < abs( overTop ) ) {\r\n                            position.top += myOffset + atOffset + offset;\r\n                        }\r\n                    } else if ( overBottom > 0 ) {\r\n                        newOverTop = position.top - data.collisionPosition.marginTop + myOffset + atOffset +\r\n                            offset - offsetTop;\r\n                        if ( newOverTop > 0 || abs( newOverTop ) < overBottom ) {\r\n                            position.top += myOffset + atOffset + offset;\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            flipfit: {\r\n                left: function() {\r\n                    positions.flip.left.apply( this, arguments );\r\n                    positions.fit.left.apply( this, arguments );\r\n                },\r\n                top: function() {\r\n                    positions.flip.top.apply( this, arguments );\r\n                    positions.fit.top.apply( this, arguments );\r\n                }\r\n            }\r\n        };\r\n\r\n        geom.posit = posit;\r\n    })();\r\n\r\n    return skylark.attach(\"domx.geom\", geom);\r\n});"]}