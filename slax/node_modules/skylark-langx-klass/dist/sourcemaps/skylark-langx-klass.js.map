{"version":3,"sources":["skylark-langx-klass.js"],"names":["define","skylark","types","objects","arrays","uniq","has","mixin","isArray","isDefined","createClass","_constructor","this","_construct","apply","arguments","init","props","parent","mixins","options","Object","innerParent","ctor","result","forEach","Error","clss","unshift","superclass","concat","filter","cls","clsMixines","i","length","serialMixins","newCtor","xtor","Function","prototype","create","__proto__","__mixin__","mergeMixins","klassName","constructor","__mixins__","partial","proto","_super","noOverrided","overrides","name","prop","fn","superFn","tmp","overrided","ret","isPlainObject","defineProperty","extendClass","inherit","f1","attach","klass","main"],"mappings":"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","file":"../skylark-langx-klass.js","sourcesContent":["define('skylark-langx-klass/klass',[\r\n  \"skylark-langx-ns/ns\",\r\n  \"skylark-langx-types\",\r\n  \"skylark-langx-objects\",\r\n  \"skylark-langx-arrays\",\r\n],function(skylark,types,objects,arrays){\r\n    var uniq = arrays.uniq,\r\n        has = objects.has,\r\n        mixin = objects.mixin,\r\n        isArray = types.isArray,\r\n        isDefined = types.isDefined;\r\n\r\n/* for reference \r\n function klass(props,parent) {\r\n    var ctor = function(){\r\n        this._construct();\r\n    };\r\n    ctor.prototype = props;\r\n    if (parent) {\r\n        ctor._proto_ = parent;\r\n        props.__proto__ = parent.prototype;\r\n    }\r\n    return ctor;\r\n}\r\n\r\n// Type some JavaScript code here.\r\nlet animal = klass({\r\n  _construct(){\r\n      this.name = this.name + \",hi\";\r\n  },\r\n    \r\n  name: \"Animal\",\r\n  eat() {         // [[HomeObject]] == animal\r\n    alert(`${this.name} eats.`);\r\n  }\r\n    \r\n    \r\n});\r\n\r\n\r\nlet rabbit = klass({\r\n  name: \"Rabbit\",\r\n  _construct(){\r\n      super._construct();\r\n  },\r\n  eat() {         // [[HomeObject]] == rabbit\r\n    super.eat();\r\n  }\r\n},animal);\r\n\r\nlet longEar = klass({\r\n  name: \"Long Ear\",\r\n  eat() {         // [[HomeObject]] == longEar\r\n    super.eat();\r\n  }\r\n},rabbit);\r\n*/\r\n    \r\n    function inherit(ctor, base) {\r\n        var f = function() {};\r\n        f.prototype = base.prototype;\r\n\r\n        ctor.prototype = new f();\r\n    }\r\n\r\n    var f1 = function() {\r\n        function extendClass(ctor, props, options) {\r\n            // Copy the properties to the prototype of the class.\r\n            var proto = ctor.prototype,\r\n                _super = ctor.superclass.prototype,\r\n                noOverrided = options && options.noOverrided,\r\n                overrides = options && options.overrides || {};\r\n\r\n            for (var name in props) {\r\n                if (name === \"constructor\") {\r\n                    continue;\r\n                }\r\n\r\n                // Check if we're overwriting an existing function\r\n                var prop = props[name];\r\n                if (typeof props[name] == \"function\") {\r\n                    proto[name] =  !prop._constructor && !noOverrided && typeof _super[name] == \"function\" ?\r\n                          (function(name, fn, superFn) {\r\n                            return function() {\r\n                                var tmp = this.overrided;\r\n\r\n                                // Add a new ._super() method that is the same method\r\n                                // but on the super-class\r\n                                this.overrided = superFn;\r\n\r\n                                // The method only need to be bound temporarily, so we\r\n                                // remove it when we're done executing\r\n                                var ret = fn.apply(this, arguments);\r\n\r\n                                this.overrided = tmp;\r\n\r\n                                return ret;\r\n                            };\r\n                        })(name, prop, _super[name]) :\r\n                        prop;\r\n                } else if (types.isPlainObject(prop) && prop!==null && (prop.get)) {\r\n                    Object.defineProperty(proto,name,prop);\r\n                } else {\r\n                    proto[name] = prop;\r\n                }\r\n            }\r\n            return ctor;\r\n        }\r\n\r\n        function serialMixins(ctor,mixins) {\r\n            var result = [];\r\n\r\n            mixins.forEach(function(mixin){\r\n                if (has(mixin,\"__mixins__\")) {\r\n                     throw new Error(\"nested mixins\");\r\n                }\r\n                var clss = [];\r\n                while (mixin) {\r\n                    clss.unshift(mixin);\r\n                    mixin = mixin.superclass;\r\n                }\r\n                result = result.concat(clss);\r\n            });\r\n\r\n            result = uniq(result);\r\n\r\n            result = result.filter(function(mixin){\r\n                var cls = ctor;\r\n                while (cls) {\r\n                    if (mixin === cls) {\r\n                        return false;\r\n                    }\r\n                    if (has(cls,\"__mixins__\")) {\r\n                        var clsMixines = cls[\"__mixins__\"];\r\n                        for (var i=0; i<clsMixines.length;i++) {\r\n                            if (clsMixines[i]===mixin) {\r\n                                return false;\r\n                            }\r\n                        }\r\n                    }\r\n                    cls = cls.superclass;\r\n                }\r\n                return true;\r\n            });\r\n\r\n            if (result.length>0) {\r\n                return result;\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        function mergeMixins(ctor,mixins) {\r\n            var newCtor =ctor;\r\n            for (var i=0;i<mixins.length;i++) {\r\n                var xtor = new Function();\r\n                xtor.prototype = Object.create(newCtor.prototype);\r\n                xtor.__proto__ = newCtor;\r\n                xtor.superclass = null;\r\n                mixin(xtor.prototype,mixins[i].prototype);\r\n                xtor.prototype.__mixin__ = mixins[i];\r\n                newCtor = xtor;\r\n            }\r\n\r\n            return newCtor;\r\n        }\r\n\r\n        function _constructor ()  {\r\n            if (this._construct) {\r\n                return this._construct.apply(this, arguments);\r\n            } else  if (this.init) {\r\n                return this.init.apply(this, arguments);\r\n            }\r\n        }\r\n\r\n        return function createClass(props, parent, mixins,options) {\r\n            if (isArray(parent)) {\r\n                options = mixins;\r\n                mixins = parent;\r\n                parent = null;\r\n            }\r\n            parent = parent || Object;\r\n\r\n            if (isDefined(mixins) && !isArray(mixins)) {\r\n                options = mixins;\r\n                mixins = false;\r\n            }\r\n\r\n            var innerParent = parent;\r\n\r\n            if (mixins) {\r\n                mixins = serialMixins(innerParent,mixins);\r\n            }\r\n\r\n            if (mixins) {\r\n                innerParent = mergeMixins(innerParent,mixins);\r\n            }\r\n\r\n            var klassName = props.klassName || \"\",\r\n                ctor = new Function(\r\n                    \"return function \" + klassName + \"() {\" +\r\n                    \"var inst = this,\" +\r\n                    \" ctor = arguments.callee;\" +\r\n                    \"if (!(inst instanceof ctor)) {\" +\r\n                    \"inst = Object.create(ctor.prototype);\" +\r\n                    \"}\" +\r\n                    \"return ctor._constructor.apply(inst, arguments) || inst;\" + \r\n                    \"}\"\r\n                )();\r\n\r\n\r\n            // Populate our constructed prototype object\r\n            ctor.prototype = Object.create(innerParent.prototype);\r\n\r\n            // Enforce the constructor to be what we expect\r\n            ctor.prototype.constructor = ctor;\r\n            ctor.superclass = parent;\r\n\r\n            // And make this class extendable\r\n            ctor.__proto__ = innerParent;\r\n\r\n\r\n            if (!ctor._constructor) {\r\n                ctor._constructor = _constructor;\r\n            } \r\n\r\n            if (mixins) {\r\n                ctor.__mixins__ = mixins;\r\n            }\r\n\r\n            if (!ctor.partial) {\r\n                ctor.partial = function(props, options) {\r\n                    return extendClass(this, props, options);\r\n                };\r\n            }\r\n            if (!ctor.inherit) {\r\n                ctor.inherit = function(props, mixins,options) {\r\n                    return createClass(props, this, mixins,options);\r\n                };\r\n            }\r\n\r\n            ctor.partial(props, options);\r\n\r\n            return ctor;\r\n        };\r\n    }\r\n\r\n    var createClass = f1();\r\n\r\n    return skylark.attach(\"langx.klass\",createClass);\r\n});\ndefine('skylark-langx-klass/main',[\r\n\t\"./klass\"\r\n],function(klass){\r\n\treturn klass;\r\n});\ndefine('skylark-langx-klass', ['skylark-langx-klass/main'], function (main) { return main; });\n\n"]}