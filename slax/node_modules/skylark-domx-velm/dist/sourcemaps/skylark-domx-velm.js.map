{"version":3,"sources":["skylark-domx-velm.js"],"names":["define","skylark","langx","noder","finder","$","map","Array","prototype","slice","VisualElement","klass","klassName","_construct","node","isString","charAt","createFragment","document","getElementById","this","_elm","query","selector","elm","root","body","velm","mixin","batch","nodes","action","args","forEach","apply","partial","name","fn","props","delegate","names","context","elem","ret","concat","call","arguments","HTMLElement","isArrayLike","el","_delegator","find","descendant","attach","main"],"mappings":";;;;;;;+zBAAAA,EAAA,0BACA,wBACA,sBACA,qBACA,sBACA,sBACA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAAC,EAAAC,MAAAC,UAAAF,IACAG,EAAAF,MAAAC,UAAAC,MAKAC,EAAAR,EAAAS,OACAC,UAAA,gBAEAC,WAAA,SAAAC,GACAZ,EAAAa,SAAAD,KAGAA,EAFA,MAAAA,EAAAE,OAAA,GAEAb,EAAAc,eAAAH,GAAA,GAGAI,SAAAC,eAAAL,IAGAM,KAAAC,KAAAP,KAIAJ,EAAAF,UAAAH,EAAAK,EAAAF,UAAAc,MAAA,SAAAC,GACA,OAAAlB,EAAAkB,EAAAH,KAAAC,OAGAX,EAAAF,UAAAgB,IAAA,WACA,OAAAJ,KAAAC,MAMA,IAAAI,EAAA,IAAAf,EAAAQ,SAAAQ,MACAC,EAAA,SAAAb,GACA,OAAAA,EACA,IAAAJ,EAAAI,GAEAW,GA+CA,OA7FAvB,EAAA0B,MAAAD,GACAE,MAAA,SAAAC,EAAAC,EAAAC,GAMA,OALAF,EAAAG,QAAA,SAAAnB,GACA,IAAAU,EAAAV,aAAAJ,EAAAI,EAAAa,EAAAb,GACAU,EAAAO,GAAAG,MAAAV,EAAAQ,KAGAZ,MAGAK,KAAA,IAAAf,EAAAQ,SAAAQ,MAEAhB,cAAAA,EAEAyB,QAAA,SAAAC,EAAAC,GACA,IAAAC,KAEAA,EAAAF,GAAAC,EAEA3B,EAAAyB,QAAAG,IAGAC,SAAA,SAAAC,EAAAC,GACA,IAAAH,KAEAE,EAAAP,QAAA,SAAAG,GACAE,EAAAF,GA4BA,SAAAC,EAAAI,GACA,OAAA,WACA,IACAC,EADAtB,KACAC,KACAsB,EAAAN,EAAAH,MAAAO,GAAAC,GAAAE,OAAAnC,EAAAoC,KAAAC,aAEA,GAAAH,EAAA,CACA,GAAAA,IAAAF,EACA,OANArB,KAQAuB,aAAAI,YACAJ,EAAA,IAAAjC,EAAAiC,GACAzC,EAAA8C,YAAAL,KACAA,EAAArC,EAAAuC,KAAAF,EAAA,SAAAM,GACA,OAAAA,aAAAF,YACA,IAAArC,EAAAuC,GAEAA,KAMA,OAAAN,GAnDAO,CAAAT,EAAAL,GAAAK,KAGA/B,EAAAyB,QAAAG,MAKAX,EAAAY,UACA,WACA,YACA,WACA,aACA,OACA,UACA,aACA,YACA,UACA,cACA,eACA,SACA,kBACA,mBACA,YACAnC,GAMAuB,EAAAwB,KAAA,SAAA5B,GACA,MAAA,SAAAA,EACAH,KAAAK,KAEAL,KAAAK,KAAA2B,WAAA7B,IAMAI,EAAAY,UACA,QACA,SACA,SACA,QACA,WACA,WACA,QACA,OACA,YACA,aACA,eACA,WACA,WACA,UACA,SACA,cACA,UACA,UACA,QACA,WACA,UACA,eACA,UACApC,GAGAF,EAAAoD,OAAA,YAAA1B,KAEA3B,EAAA,0BACA,UACA,SAAA2B,GACA,OAAAA,IAEA3B,EAAA,qBAAA,0BAAA,SAAAsD,GAAA,OAAAA","file":"../skylark-domx-velm.js","sourcesContent":["define('skylark-domx-velm/velm',[\r\n    \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-finder\",\r\n    \"skylark-domx-query\"\r\n], function(skylark, langx, noder, finder, $) {\r\n    var map = Array.prototype.map,\r\n        slice = Array.prototype.slice;\r\n    /*\r\n     * VisualElement is a skylark class type wrapping a visule dom node,\r\n     * provides a number of prototype methods and supports chain calls.\r\n     */\r\n    var VisualElement = langx.klass({\r\n        klassName: \"VisualElement\",\r\n\r\n        \"_construct\": function(node) {\r\n            if (langx.isString(node)) {\r\n                if (node.charAt(0) === \"<\") {\r\n                    //html\r\n                    node = noder.createFragment(node)[0];\r\n                } else {\r\n                    // id\r\n                    node = document.getElementById(node);\r\n                }\r\n            }\r\n            this._elm = node;\r\n        }\r\n    });\r\n\r\n    VisualElement.prototype.$ = VisualElement.prototype.query = function(selector) {\r\n        return $(selector,this._elm);\r\n    };\r\n\r\n    VisualElement.prototype.elm = function() {\r\n        return this._elm;\r\n    };\r\n\r\n    /*\r\n     * the VisualElement object wrapping document.body\r\n     */\r\n    var root = new VisualElement(document.body),\r\n        velm = function(node) {\r\n            if (node) {\r\n                return new VisualElement(node);\r\n            } else {\r\n                return root;\r\n            }\r\n        };\r\n    /*\r\n     * Extend VisualElement prototype with wrapping the specified methods.\r\n     * @param {ArrayLike} fn\r\n     * @param {Object} context\r\n     */\r\n    function _delegator(fn, context) {\r\n        return function() {\r\n            var self = this,\r\n                elem = self._elm,\r\n                ret = fn.apply(context, [elem].concat(slice.call(arguments)));\r\n\r\n            if (ret) {\r\n                if (ret === context) {\r\n                    return self;\r\n                } else {\r\n                    if (ret instanceof HTMLElement) {\r\n                        ret = new VisualElement(ret);\r\n                    } else if (langx.isArrayLike(ret)) {\r\n                        ret = map.call(ret, function(el) {\r\n                            if (el instanceof HTMLElement) {\r\n                                return new VisualElement(el);\r\n                            } else {\r\n                                return el;\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n            }\r\n            return ret;\r\n        };\r\n    }\r\n\r\n    langx.mixin(velm, {\r\n        batch: function(nodes, action, args) {\r\n            nodes.forEach(function(node) {\r\n                var elm = (node instanceof VisualElement) ? node : velm(node);\r\n                elm[action].apply(elm, args);\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        root: new VisualElement(document.body),\r\n\r\n        VisualElement: VisualElement,\r\n\r\n        partial: function(name, fn) {\r\n            var props = {};\r\n\r\n            props[name] = fn;\r\n\r\n            VisualElement.partial(props);\r\n        },\r\n\r\n        delegate: function(names, context) {\r\n            var props = {};\r\n\r\n            names.forEach(function(name) {\r\n                props[name] = _delegator(context[name], context);\r\n            });\r\n\r\n            VisualElement.partial(props);\r\n        }\r\n    });\r\n\r\n    // from ./finder\r\n    velm.delegate([\r\n        \"ancestor\",\r\n        \"ancestors\",\r\n        \"children\",\r\n        \"descendant\",\r\n        \"find\",\r\n        \"findAll\",\r\n        \"firstChild\",\r\n        \"lastChild\",\r\n        \"matches\",\r\n        \"nextSibling\",\r\n        \"nextSiblings\",\r\n        \"parent\",\r\n        \"previousSibling\",\r\n        \"previousSiblings\",\r\n        \"siblings\"\r\n    ], finder);\r\n\r\n    /*\r\n     * find a dom element matched by the specified selector.\r\n     * @param {String} selector\r\n     */\r\n    velm.find = function(selector) {\r\n        if (selector === \"body\") {\r\n            return this.root;\r\n        } else {\r\n            return this.root.descendant(selector);\r\n        }\r\n    };\r\n\r\n\r\n    // from ./noder\r\n    velm.delegate([\r\n        \"after\",\r\n        \"append\",\r\n        \"before\",\r\n        \"clone\",\r\n        \"contains\",\r\n        \"contents\",\r\n        \"empty\",\r\n        \"html\",\r\n        \"isChildOf\",\r\n        \"isDocument\",\r\n        \"isInDocument\",\r\n        \"isWindow\",\r\n        \"ownerDoc\",\r\n        \"prepend\",\r\n        \"remove\",\r\n        \"removeChild\",\r\n        \"replace\",\r\n        \"reverse\",\r\n        \"throb\",\r\n        \"traverse\",\r\n        \"wrapper\",\r\n        \"wrapperInner\",\r\n        \"unwrap\"\r\n    ], noder);\r\n\r\n\r\n    return skylark.attach(\"domx.velm\", velm);\r\n});\ndefine('skylark-domx-velm/main',[\r\n\t\"./velm\"\r\n],function(velm){\r\n\treturn velm;\r\n});\ndefine('skylark-domx-velm', ['skylark-domx-velm/main'], function (main) { return main; });\n\n"]}