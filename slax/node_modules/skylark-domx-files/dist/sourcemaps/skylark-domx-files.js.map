{"version":3,"sources":["skylark-domx-files.js"],"names":["define","skylark","files","attach","arrays","Deferred","styler","eventer","webentry","dropzone","elm","params","hoverClass","droppedCallback","dropped","enterdCount","on","e","dataTransfer","types","indexOf","stop","addClass","removeClass","items","length","webkitGetAsEntry","getAsEntry","all","map","item","then","this","objects","pastezone","pastedCallback","pasted","originalEvent","clipboardData","each","index","file","getAsFile","push","select","picker","preventDefault","langx","$","elmx","FileUpload","plugins","MultiUploader","Plugin","inherit","klassName","pluginName","options","uploadUrl","formParamName","maxConnections","allowedExtensions","sizeLimit","minSizeLimit","autoUpload","selectors","fileList","fileItem","nodata","startUploads","cancelUploads","template","dataType","name","size","cancel","clear","progress","message","_construct","overrided","_velm","_elm","_initEventHandler","_initFileHandlers","_initUpoadHandler","_updateFileList","self","dzSelector","pzSelector","pkSelector","_addFiles","multiple","picked","_handler","url","onProgress","id","fileName","loaded","total","_onProgress","onComplete","result","_onComplete","onCancel","_onCancel","onFailure","_onFailure","itemSelectors","_listElement","$fileItem","closest","fileId","data","remove","click","$files","find","forEach","send","$item","_getItemByFileId","percent","parseInt","progressHTML","_formatSize","css","parent","html","_updateFile","_filesInProgress","doneMsg","_addToList","getName","fileSize","getSize","_formatFileName","append","with_files_elements","without_files_elements","when_pending","when_running","when_done","status","add","i","item2","_validateFile","_addFile","value","replace","_isAllowedExtension","_error","code","messages","r","replacement","join","showMessage","slice","ext","toLowerCase","allowed","bytes","Math","max","toFixed","register","velm","delegate","fn","wraps","wrapper_every_act","main"],"mappings":"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","file":"../skylark-domx-files.js","sourcesContent":["define('skylark-domx-files/files',[\r\n    \"skylark-langx/skylark\"\r\n], function(skylark) {\r\n\r\n    function dataURLtoBlob(dataurl) {\r\n        var arr = dataurl.split(','),\r\n            mime = arr[0].match(/:(.*?);/)[1],\r\n            bstr = atob(arr[1]),\r\n            n = bstr.length,\r\n            u8arr = new Uint8Array(n);\r\n        while (n--) {\r\n            u8arr[n] = bstr.charCodeAt(n);\r\n        }\r\n        return new Blob([u8arr], { type: mime });\r\n    }\r\n\r\n\r\n    var files = function() {\r\n        return files;\r\n    };\r\n\r\n    return skylark.attach(\"domx.files\", files);\r\n});\n  define('skylark-domx-files/dropzone',[\r\n    \"skylark-langx/arrays\",\r\n    \"skylark-langx/Deferred\",\r\n    \"skylark-domx-styler\",\r\n    \"skylark-domx-eventer\",\r\n    \"./files\",\r\n    \"skylark-io-diskfs/webentry\"\r\n],function(arrays,Deferred, styler, eventer, files, webentry){  /*\r\n     * Make the specified element to could accept HTML5 file drag and drop.\r\n     * @param {HTMLElement} elm\r\n     * @param {PlainObject} params\r\n     */\r\n    function dropzone(elm, params) {\r\n        params = params || {};\r\n        var hoverClass = params.hoverClass || \"dropzone\",\r\n            droppedCallback = params.dropped;\r\n\r\n        var enterdCount = 0;\r\n        eventer.on(elm, \"dragenter\", function(e) {\r\n            if (e.dataTransfer && e.dataTransfer.types.indexOf(\"Files\") > -1) {\r\n                eventer.stop(e);\r\n                enterdCount++;\r\n                styler.addClass(elm, hoverClass)\r\n            }\r\n        });\r\n\r\n        eventer.on(elm, \"dragover\", function(e) {\r\n            if (e.dataTransfer && e.dataTransfer.types.indexOf(\"Files\") > -1) {\r\n                eventer.stop(e);\r\n            }\r\n        });\r\n\r\n        eventer.on(elm, \"dragleave\", function(e) {\r\n            if (e.dataTransfer && e.dataTransfer.types.indexOf(\"Files\") > -1) {\r\n                enterdCount--\r\n                if (enterdCount == 0) {\r\n                    styler.removeClass(elm, hoverClass);\r\n                }\r\n            }\r\n        });\r\n\r\n        eventer.on(elm, \"drop\", function(e) {\r\n            if (e.dataTransfer && e.dataTransfer.types.indexOf(\"Files\") > -1) {\r\n                styler.removeClass(elm, hoverClass)\r\n                eventer.stop(e);\r\n                if (droppedCallback) {\r\n                    var items = e.dataTransfer.items;\r\n                    if (items && items.length && (items[0].webkitGetAsEntry ||\r\n                            items[0].getAsEntry)) {\r\n                        webentry.all(\r\n                            arrays.map(items, function(item) {\r\n                                if (item.webkitGetAsEntry) {\r\n                                    return item.webkitGetAsEntry();\r\n                                }\r\n                                return item.getAsEntry();\r\n                            })\r\n                        ).then(droppedCallback);\r\n                    } else {\r\n                        droppedCallback(e.dataTransfer.files);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        return this;\r\n    }\r\n\r\n     return files.dropzone = dropzone;\r\n});\ndefine('skylark-domx-files/pastezone',[\r\n    \"skylark-langx/objects\",\r\n    \"skylark-domx-eventer\",\r\n    \"./files\"\r\n],function(objects, eventer, files){\r\n    function pastezone(elm, params) {\r\n        params = params || {};\r\n        var hoverClass = params.hoverClass || \"pastezone\",\r\n            pastedCallback = params.pasted;\r\n\r\n        eventer.on(elm, \"paste\", function(e) {\r\n            var items = e.originalEvent && e.originalEvent.clipboardData &&\r\n                e.originalEvent.clipboardData.items,\r\n                files = [];\r\n            if (items && items.length) {\r\n                objects.each(items, function(index, item) {\r\n                    var file = item.getAsFile && item.getAsFile();\r\n                    if (file) {\r\n                        files.push(file);\r\n                    }\r\n                });\r\n            }\r\n            if (pastedCallback && files.length) {\r\n                pastedCallback(files);\r\n            }\r\n        });\r\n\r\n        return this;\r\n    }\r\n\r\n    return files.pastezone = pastezone;\r\n\r\n});\r\n\ndefine('skylark-domx-files/picker',[\r\n    \"skylark-langx/objects\",\r\n    \"skylark-domx-eventer\",\r\n    \"./files\",\r\n    \"skylark-io-diskfs/select\"\r\n],function(objects, eventer, files, select){\r\n    /*\r\n     * Make the specified element to pop-up the file selection dialog box when clicked , and read the contents the files selected from client file system by user.\r\n     * @param {HTMLElement} elm\r\n     * @param {PlainObject} params\r\n     */\r\n    function picker(elm, params) {\r\n        eventer.on(elm, \"click\", function(e) {\r\n            e.preventDefault();\r\n            select(params);\r\n        });\r\n        return this;\r\n    }\r\n\r\n    return files.picker = picker;\r\n\r\n});\r\n\r\n\r\n\ndefine('skylark-domx-files/MultiUploader',[\r\n  \"skylark-langx/skylark\",\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-query\",\r\n  \"skylark-domx-velm\",\r\n  \"skylark-net-http/Upload\",\r\n  \"skylark-domx-plugins\",\r\n  \"./files\"\r\n]  ,function(skylark,langx,$, elmx,FileUpload, plugins,files){\r\n\r\n    var fileListTemplate = '<div class=\"lark-multiuploader\">' + \r\n        '    <h3 class=\"popover-title\">Upload files</h3>' + \r\n        '    <div class=\"popover-content container-fluid\" class=\"file-list file-dropzone file-pastezone\">' + \r\n        '        <div class=\"no-data\"><em>Add files.</em></div>' + \r\n        '    </div>' + \r\n        '    <footer>' + \r\n        '        <button class=\"btn btn-warning pull-right btn-sm\" id=\"cancel-uploads-button\"><i class=\"icon-cancel\"></i>Cancel uploads</button>' + \r\n        '        <span class=\"btn btn-success fileinput-button btn-sm\" id=\"fileinput-button\">' + \r\n        '            <i class=\"icon-plus\"></i>' + \r\n        '            <span>Add files...</span>' + \r\n        '            <input id=\"fileupload\" type=\"file\" name=\"files[]\" multiple=\"multiple\">' + \r\n        '        </span>' + \r\n        '        <button class=\"btn btn-primary btn-sm\" id=\"start-uploads-button\"><i class=\"icon-start\"></i>Start uploads</button>' + \r\n        '    </footer>' + \r\n        '</div>',\r\n        fileItemTemplate = '<div class=\"file-item row\">' +\r\n        '   <div class=\"col-md-6\"><span class=\"name\"></span></div>' + \r\n        '   <div class=\"col-md-3\">' +\r\n        '    <span class=\"size\"></span>' +\r\n        '    <div class=\"progress hidden\">' +\r\n        '        <div class=\"progress-label\"></div>' +\r\n        '        <div class=\"bar\"></div>' +\r\n        '    </div>' +\r\n        '    <span class=\"message hidden\"></span>' +\r\n        '   </div>' +\r\n        '   <div class=\"col-md-3\">' +\r\n        '    <button class=\"btn btn-warning btn-xs cancel\"><i class=\"icon-remove\"></i>Cancel</button>' +\r\n        '    <button class=\"btn btn-xs clear hidden\">Clear</button>' +\r\n        '   </div>' +\r\n        '</div>';\r\n\r\n    var MultiUploader =  plugins.Plugin.inherit({\r\n        klassName : \"Uploader\",\r\n        pluginName : \"lark.multiuploader\",\r\n\r\n        options: {\r\n            uploadUrl: '/upload',\r\n\r\n        \tparams: {\r\n                formParamName : \"file\"\r\n            },\r\n\r\n    \t    maxConnections: 3,\r\n        \t// validation\r\n        \tallowedExtensions: [],\r\n        \tsizeLimit: 0,\r\n        \tminSizeLimit: 0,\r\n\r\n            autoUpload: false,\r\n            selectors : {\r\n              fileList : \".file-list\",\r\n              fileItem : \".file-item\",\r\n              nodata : \".file-list .no-data\",\r\n\r\n              picker   : \".file-picker\",\r\n              dropzone : \".file-dropzone\",\r\n              pastezone: \".file-pastezone\",\r\n\r\n              startUploads: '.start-uploads',\r\n              cancelUploads: '.cancel-uploads',\r\n            },\r\n\r\n            template : fileListTemplate,\r\n\r\n            dataType: 'json',\r\n\r\n            fileItem : {\r\n            \tselectors : {\r\n                    name : \".name\",\r\n                    size : \".size\",\r\n                    cancel: \".cancel\",\r\n                    clear : \".clear\",\r\n                    progress : \".progress\",\r\n                    message : \".message\"                   \r\n            \t},\r\n\r\n            \ttemplate : fileItemTemplate\r\n            }\r\n        },\r\n\r\n\r\n        _construct : function(elm,options) {\r\n            var self = this;\r\n\r\n\r\n            // Render current files\r\n            /*\r\n            this.files.forEach(function (file) {\r\n                self.renderFile(file);\r\n            });\r\n            */\r\n\r\n            //this._refresh({files:true});\r\n        \r\n\r\n            //this._files.on('all', function(){\r\n            //  self._refresh({files:true});\r\n            //});\r\n\r\n\r\n           this.overrided(elm,options);\r\n\r\n\r\n           this._velm = elmx(this._elm);\r\n        \r\n\r\n\r\n            this._initEventHandler();\r\n            this._initFileHandlers();\r\n            this._initUpoadHandler();\r\n            this._updateFileList();\r\n        },\r\n\r\n        _initFileHandlers : function() {\r\n            var self = this;\r\n\r\n            var selectors = this.options.selectors,\r\n            \tdzSelector = selectors.dropzone,\r\n            \tpzSelector = selectors.pastezone,\r\n            \tpkSelector = selectors.picker;\r\n\r\n            if (dzSelector) {\r\n\t\t\t\tthis._velm.$(dzSelector).dropzone({\r\n\t                dropped : function (files) {\r\n                        self._addFiles(files);\r\n\t                }\r\n\t\t\t\t});\r\n            }\r\n\r\n\r\n            if (pzSelector) {\r\n                this._velm.$(pzSelector).pastezone({\r\n                    pasted : function (files) {\r\n                        self._addFiles(files);\r\n                    }\r\n                });                \r\n            }\r\n\r\n            if (pkSelector) {\r\n                this._velm.$(pkSelector).picker({\r\n                    multiple: true,\r\n                    picked : function (files) {\r\n                        self._addFiles(files);\r\n                    }\r\n                });                \r\n            }\r\n        },\r\n\r\n        _initUpoadHandler: function(){\r\n            var self = this,\r\n                handlerClass;\r\n\r\n            this._handler = new FileUpload({\r\n                url: this.options.uploadUrl,\r\n                maxConnections: this.options.maxConnections,\r\n                onProgress: function(id, fileName, loaded, total){\r\n                    self._onProgress(id, fileName, loaded, total);\r\n                },\r\n                onComplete: function(id, fileName, result){\r\n                    self._onComplete(id, fileName, result);\r\n                },\r\n                onCancel: function(id, fileName){\r\n                    self._onCancel(id, fileName);\r\n                },\r\n                onFailure: function(id,fileName,e){\r\n                    self._onFailure(id,fileName,e);\r\n                }\r\n            });\r\n        },\r\n        \r\n         /**\r\n         * delegate click event for cancel link\r\n         **/\r\n        _initEventHandler: function(){\r\n            var self = this,\r\n               selectors = this.options.selectors,\r\n               itemSelectors = this.options.fileItem.selectors, \r\n               list = this._listElement;\r\n\r\n            // Add cancel handler\r\n            this._velm.$(selectors.fileList).on(\"click\",itemSelectors.cancel,function(e){\r\n                var $fileItem = $(this).closest(selectors.fileItem),\r\n                    fileId = $fileItem.data(\"fileId\");\r\n                self._handler.cancel(fileId);\r\n                $fileItem.remove();\r\n                self._updateFileList();\r\n            });\r\n\r\n            // Add clear handler\r\n            this._velm.$(selectors.fileList).on(\"click\",itemSelectors.clear,function(e){\r\n                var $fileItem = $(this).closest(selectors.fileItem),\r\n                    fileId = $fileItem.data(\"fileId\");\r\n                $fileItem.remove();\r\n                self._updateFileList();\r\n            });\r\n\r\n            // Add cancel all handler\r\n            this._velm.$(selectors.cancelUploads).click(function(){\r\n                var $files = self._velm.$(selectors.fileList).find(selectors.fileItem);           \r\n                $files.forEach(function(fileItem){\r\n                    var $fileItem = $(fileItem),\r\n                        fileId = $fileItem.data(\"fileId\");\r\n                    self._handler.cancel(fileId);\r\n                    $fileItem.remove();\r\n                });\r\n                self._updateFileList();\r\n\r\n            });\r\n\r\n            // Add start uploads handler\r\n            this._velm.$(selectors.startUploads).click(function(){\r\n                var $files = self._velm.$(selectors.fileList).find(selectors.fileItem);           \r\n                $files.forEach(function(fileItem){\r\n                    var $fileItem = $(fileItem),\r\n                        fileId = $fileItem.data(\"fileId\");\r\n                    if (!$fileItem.data(\"status\")) {\r\n                        // The file has not yet been sent\r\n                        self._handler.send(fileId,self.options.params);\r\n                    }\r\n                });\r\n\r\n            });\r\n            \r\n\r\n        },       \r\n\r\n        _onProgress: function(id, fileName, loaded, total){          \r\n            var $item = this._getItemByFileId(id);\r\n\r\n            var percent = parseInt(loaded / total * 100, 10);\r\n            var progressHTML = this._formatSize(loaded)+' of '+ this._formatSize(total);\r\n\r\n            $item.data(\"status\",\"running\");\r\n            $item.find('.progress')\r\n                .find('.bar')\r\n                .css('width', percent+'%')\r\n                .parent()\r\n                .find('.progress-label')\r\n                .html(progressHTML);\r\n            this._updateFile($item);\r\n\r\n        },\r\n\r\n        _onComplete: function(id, fileName, result){\r\n            this._filesInProgress--;\r\n            var $item = this._getItemByFileId(id);\r\n            $item.data(\"status\",\"done\");\r\n            $item.find('.message').html('<i class=\"icon-success\"></i> ' + (this.doneMsg || 'Uploaded'));\r\n            this._updateFile($item);\r\n        },\r\n\r\n        _onFailure : function(id,fileName,e) {\r\n            this._filesInProgress--;\r\n            var $item = this._getItemByFileId(id);\r\n            $item.data(\"status\",\"error\");\r\n            $item.find('.message').html('<i class=\"icon-error\"></i> ');;\r\n            this._updateFile($item)\r\n\r\n        },\r\n\r\n        _onCancel: function(id, fileName){\r\n            this._filesInProgress--;\r\n            var $item = this._getItemByFileId(id);\r\n            $item.data(\"status\",\"cancel\");\r\n            this._updateFile($item)\r\n        },\r\n\r\n        _addToList: function(id, fileName){\r\n            var self = this;\r\n\r\n\r\n            var fileName = this._handler.getName(id),\r\n                fileSize = this._handler.getSize(id);\r\n\r\n            var item = $(this.options.fileItem.template);\r\n            item.data(\"fileId\",id);\r\n\r\n            item.find(this.options.fileItem.selectors.name).html(this._formatFileName(fileName));\r\n            item.find(this.options.fileItem.selectors.size).html(this._formatSize(fileSize));\r\n\r\n            this._velm.$(this.options.selectors.fileList).append(item);\r\n\r\n            this._updateFileList();\r\n        },\r\n    \r\n        _updateFileList : function ()  {\r\n            var selectors = this.options.selectors,\r\n                itemSelectors = this.options.fileItem.selectors,\r\n                files = this._velm.$(selectors.fileList).find(selectors.fileItem);\r\n\r\n            var with_files_elements = this._velm.$(selectors.cancelUploads + ',' + selectors.startUploads);\r\n            var without_files_elements = this._velm.$(selectors.nodata);\r\n            if (files.length > 0) {\r\n                with_files_elements.removeClass('hidden');\r\n                without_files_elements.addClass('hidden');\r\n            } else {\r\n                with_files_elements.addClass('hidden');\r\n                without_files_elements.removeClass('hidden');\r\n            }\r\n        },\r\n        \r\n        _updateFile: function ($item) {\r\n            var selectors = this.options.fileItem.selectors,\r\n                when_pending = $item.find(selectors.size + \",\" + selectors.cancel),\r\n                when_running = $item.find(selectors.progress + \",\" + selectors.cancel),\r\n                when_done = $item.find(selectors.message + \",\" + selectors.clear);\r\n\r\n            var status = $item.data(\"status\");    \r\n            if (status == \"pending\") {\r\n                when_running.add(when_done).addClass('hidden');\r\n                when_pending.removeClass('hidden');\r\n            } else if (status == \"running\") {\r\n                when_pending.add(when_done).addClass('hidden');\r\n                when_running.removeClass('hidden');\r\n            } else if (status == \"done\" || status == \"error\") {\r\n                when_pending.add(when_running).addClass('hidden');\r\n                when_done.removeClass('hidden');\r\n            }\r\n        },\r\n\r\n        _getItemByFileId: function(id){\r\n            var selectors = this.options.selectors,\r\n                files = this._velm.$(selectors.fileList).find(selectors.fileItem),\r\n                item;\r\n\r\n            // there can't be txt nodes in dynamically created list\r\n            // and we can  use nextSibling\r\n\r\n            for (var i = 0; i<files.length;i++){\r\n                var item2 = files[i];\r\n                if ($(item2).data(\"fileId\") == id) {\r\n                    item = item2;\r\n                    break;\r\n                }\r\n            }\r\n            if (item) {\r\n                return $(item);\r\n            }\r\n        },\r\n\r\n\r\n            \r\n        _addFiles: function(files){\r\n            for (var i=0; i<files.length; i++){\r\n                if ( !this._validateFile(files[i])){\r\n                    return;\r\n                }\r\n            }\r\n\r\n            for (var i=0; i<files.length; i++){\r\n                this._addFile(files[i]);\r\n            }\r\n        },\r\n\r\n        _addFile: function(file){\r\n            var id = this._handler.add(file);\r\n\r\n            this._filesInProgress++;\r\n            this._addToList(id);\r\n\r\n            //this._handler.upload(id, this.options.params);\r\n        },\r\n\r\n        _validateFile: function(file){\r\n            var name, size;\r\n\r\n            if (file.value){\r\n                // it is a file input\r\n                // get input value and remove path to normalize\r\n                name = file.value.replace(/.*(\\/|\\\\)/, \"\");\r\n            } else {\r\n                // fix missing properties in Safari\r\n                name = file.fileName != null ? file.fileName : file.name;\r\n                size = file.fileSize != null ? file.fileSize : file.size;\r\n            }\r\n\r\n            if (! this._isAllowedExtension(name)){\r\n                this._error('typeError', name);\r\n                return false;\r\n\r\n            } else if (size === 0){\r\n                this._error('emptyError', name);\r\n                return false;\r\n\r\n            } else if (size && this.options.sizeLimit && size > this.options.sizeLimit){\r\n                this._error('sizeError', name);\r\n                return false;\r\n\r\n            } else if (size && size < this.options.minSizeLimit){\r\n                this._error('minSizeError', name);\r\n                return false;\r\n            }\r\n\r\n            return true;\r\n        },\r\n\r\n        _error: function(code, fileName){\r\n            var message = this.options.messages[code];\r\n            function r(name, replacement){ message = message.replace(name, replacement); }\r\n\r\n            r('{file}', this._formatFileName(fileName));\r\n            r('{extensions}', this.options.allowedExtensions.join(', '));\r\n            r('{sizeLimit}', this._formatSize(this.options.sizeLimit));\r\n            r('{minSizeLimit}', this._formatSize(this.options.minSizeLimit));\r\n\r\n            this.options.showMessage(message);\r\n        },\r\n\r\n        _formatFileName: function(name){\r\n            if (name.length > 33){\r\n                name = name.slice(0, 19) + '...' + name.slice(-13);\r\n            }\r\n            return name;\r\n        },\r\n\r\n        _isAllowedExtension: function(fileName){\r\n            var ext = (-1 !== fileName.indexOf('.')) ? fileName.replace(/.*[.]/, '').toLowerCase() : '';\r\n            var allowed = this.options.allowedExtensions;\r\n\r\n            if (!allowed.length){return true;}\r\n\r\n            for (var i=0; i<allowed.length; i++){\r\n                if (allowed[i].toLowerCase() == ext){ return true;}\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        _formatSize: function(bytes){\r\n            var i = -1;\r\n            do {\r\n                bytes = bytes / 1024;\r\n                i++;\r\n            } while (bytes > 99);\r\n\r\n            return Math.max(bytes, 0.1).toFixed(1) + ['KB', 'MB', 'GB', 'TB', 'PB', 'EB'][i];\r\n        }\r\n\r\n    });\r\n\r\n   plugins.register(MultiUploader);\r\n\r\n\r\n\r\n\treturn files.MultiUploader = MultiUploader;\r\n});\ndefine('skylark-domx-files/main',[\r\n\t\"./files\",\r\n\t\"skylark-domx-velm\",\r\n\t\"skylark-domx-query\",\r\n\t\"./dropzone\",\r\n\t\"./pastezone\",\r\n\t\"./picker\",\r\n\t\"./MultiUploader\"\r\n],function(files,velm,$){\r\n\tvelm.delegate([\r\n\t\t\"dropzone\",\r\n\t\t\"pastezone\",\r\n\t\t\"picker\"\r\n\t],files);\r\n\r\n    $.fn.pastezone = $.wraps.wrapper_every_act(files.pastezone, files);\r\n    $.fn.dropzone = $.wraps.wrapper_every_act(files.dropzone, files);\r\n    $.fn.picker = $.wraps.wrapper_every_act(files.picker, files);\r\n\r\n\treturn files;\r\n});\ndefine('skylark-domx-files', ['skylark-domx-files/main'], function (main) { return main; });\n\n"]}