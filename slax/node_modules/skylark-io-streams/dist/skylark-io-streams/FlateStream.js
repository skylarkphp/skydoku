/**
 * skylark-io-streams - The stream features enhancement for skylark utils.
 * @author Hudaokeji Co.,Ltd
 * @version v0.9.0
 * @link www.skylarkjs.org
 * @license MIT
 */
define(["skylark-langx/skylark","skylark-langx/langx","./streams","./DecodeStream"],function(e,t,r,i){var s=new Uint32Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]),a=new Uint32Array([3,4,5,6,7,8,9,10,65547,65549,65551,65553,131091,131095,131099,131103,196643,196651,196659,196667,262211,262227,262243,262259,327811,327843,327875,327907,258,258,258]),n=new Uint32Array([1,2,3,4,65541,65543,131081,131085,196625,196633,262177,262193,327745,327777,393345,393409,459009,459137,524801,525057,590849,591361,657409,658433,724993,727041,794625,798721,868353,876545]),o=[new Uint32Array([459008,524368,524304,524568,459024,524400,524336,590016,459016,524384,524320,589984,524288,524416,524352,590048,459012,524376,524312,589968,459028,524408,524344,590032,459020,524392,524328,59e4,524296,524424,524360,590064,459010,524372,524308,524572,459026,524404,524340,590024,459018,524388,524324,589992,524292,524420,524356,590056,459014,524380,524316,589976,459030,524412,524348,590040,459022,524396,524332,590008,524300,524428,524364,590072,459009,524370,524306,524570,459025,524402,524338,590020,459017,524386,524322,589988,524290,524418,524354,590052,459013,524378,524314,589972,459029,524410,524346,590036,459021,524394,524330,590004,524298,524426,524362,590068,459011,524374,524310,524574,459027,524406,524342,590028,459019,524390,524326,589996,524294,524422,524358,590060,459015,524382,524318,589980,459031,524414,524350,590044,459023,524398,524334,590012,524302,524430,524366,590076,459008,524369,524305,524569,459024,524401,524337,590018,459016,524385,524321,589986,524289,524417,524353,590050,459012,524377,524313,589970,459028,524409,524345,590034,459020,524393,524329,590002,524297,524425,524361,590066,459010,524373,524309,524573,459026,524405,524341,590026,459018,524389,524325,589994,524293,524421,524357,590058,459014,524381,524317,589978,459030,524413,524349,590042,459022,524397,524333,590010,524301,524429,524365,590074,459009,524371,524307,524571,459025,524403,524339,590022,459017,524387,524323,589990,524291,524419,524355,590054,459013,524379,524315,589974,459029,524411,524347,590038,459021,524395,524331,590006,524299,524427,524363,590070,459011,524375,524311,524575,459027,524407,524343,590030,459019,524391,524327,589998,524295,524423,524359,590062,459015,524383,524319,589982,459031,524415,524351,590046,459023,524399,524335,590014,524303,524431,524367,590078,459008,524368,524304,524568,459024,524400,524336,590017,459016,524384,524320,589985,524288,524416,524352,590049,459012,524376,524312,589969,459028,524408,524344,590033,459020,524392,524328,590001,524296,524424,524360,590065,459010,524372,524308,524572,459026,524404,524340,590025,459018,524388,524324,589993,524292,524420,524356,590057,459014,524380,524316,589977,459030,524412,524348,590041,459022,524396,524332,590009,524300,524428,524364,590073,459009,524370,524306,524570,459025,524402,524338,590021,459017,524386,524322,589989,524290,524418,524354,590053,459013,524378,524314,589973,459029,524410,524346,590037,459021,524394,524330,590005,524298,524426,524362,590069,459011,524374,524310,524574,459027,524406,524342,590029,459019,524390,524326,589997,524294,524422,524358,590061,459015,524382,524318,589981,459031,524414,524350,590045,459023,524398,524334,590013,524302,524430,524366,590077,459008,524369,524305,524569,459024,524401,524337,590019,459016,524385,524321,589987,524289,524417,524353,590051,459012,524377,524313,589971,459028,524409,524345,590035,459020,524393,524329,590003,524297,524425,524361,590067,459010,524373,524309,524573,459026,524405,524341,590027,459018,524389,524325,589995,524293,524421,524357,590059,459014,524381,524317,589979,459030,524413,524349,590043,459022,524397,524333,590011,524301,524429,524365,590075,459009,524371,524307,524571,459025,524403,524339,590023,459017,524387,524323,589991,524291,524419,524355,590055,459013,524379,524315,589975,459029,524411,524347,590039,459021,524395,524331,590007,524299,524427,524363,590071,459011,524375,524311,524575,459027,524407,524343,590031,459019,524391,524327,589999,524295,524423,524359,590063,459015,524383,524319,589983,459031,524415,524351,590047,459023,524399,524335,590015,524303,524431,524367,590079]),9],f=[new Uint32Array([327680,327696,327688,327704,327684,327700,327692,327708,327682,327698,327690,327706,327686,327702,327694,0,327681,327697,327689,327705,327685,327701,327693,327709,327683,327699,327691,327707,327687,327703,327695,0]),5],h=i.inherit({klassName:"FlateStream",init:function(e){var t=e.getBytes(),r=0;this.dict=e.dict;var s=t[r++],a=t[r++];-1!=s&&-1!=a||error("Invalid header in flate stream: "+s+", "+a),8!=(15&s)&&error("Unknown compression method in flate stream: "+s+", "+a),((s<<8)+a)%31!=0&&error("Bad FCHECK in flate stream: "+s+", "+a),32&a&&error("FDICT bit set in flate stream: "+s+", "+a),this.bytes=t,this.bytesPos=r,this.codeSize=0,this.codeBuf=0,i.prototype.init.call(this)},getBits:function(e){for(var t,r=this.codeSize,i=this.codeBuf,s=this.bytes,a=this.bytesPos;r<e;)void 0===(t=s[a++])&&error("Bad encoding in flate stream"),i|=t<<r,r+=8;return t=i&(1<<e)-1,this.codeBuf=i>>e,this.codeSize=r-=e,this.bytesPos=a,t},getCode:function(e){for(var t=e[0],r=e[1],i=this.codeSize,s=this.codeBuf,a=this.bytes,n=this.bytesPos;i<r;){var o;void 0===(o=a[n++])&&error("Bad encoding in flate stream"),s|=o<<i,i+=8}var f=t[s&(1<<r)-1],h=f>>16,d=65535&f;return(0==i||i<h||0==h)&&error("Bad encoding in flate stream"),this.codeBuf=s>>h,this.codeSize=i-h,this.bytesPos=n,d},generateHuffmanTable:function(e){for(var t=e.length,r=0,i=0;i<t;++i)e[i]>r&&(r=e[i]);for(var s=1<<r,a=new Uint32Array(s),n=1,o=0,f=2;n<=r;++n,o<<=1,f<<=1)for(var h=0;h<t;++h)if(e[h]==n){var d=0,l=o;for(i=0;i<n;++i)d=d<<1|1&l,l>>=1;for(i=d;i<s;i+=f)a[i]=n<<16|h;++o}return[a,r]},readBlock:function(){var e=this.getBits(3);if(1&e&&(this.eof=!0),0!=(e>>=1)){var t,r;if(1==e)t=o,r=f;else if(2==e){for(var i=this.getBits(5)+257,h=this.getBits(5)+1,d=this.getBits(4)+4,l=new Uint8Array(s.length),v=0;v<d;++v)l[s[v]]=this.getBits(3);for(var u=this.generateHuffmanTable(l),c=0,g=(v=0,i+h),b=new Uint8Array(g);v<g;){var B=this.getCode(u);if(16==B)var y=2,m=3,k=c;else if(17==B)y=3,m=3,k=c=0;else{if(18!=B){b[v++]=c=B;continue}y=7,m=11,k=c=0}for(var w=this.getBits(y)+m;w-- >0;)b[v++]=k}t=this.generateHuffmanTable(b.subarray(0,i)),r=this.generateHuffmanTable(b.subarray(i,g))}else error("Unknown block type in flate stream");for(var U=(D=this.buffer)?D.length:0,S=this.bufferLength;;){var A=this.getCode(t);if(A<256)S+1>=U&&(U=(D=this.ensureBuffer(S+1)).length),D[S++]=A;else{if(256==A)return void(this.bufferLength=S);var C=(A=a[A-=257])>>16;C>0&&(C=this.getBits(C));c=(65535&A)+C;A=this.getCode(r),(C=(A=n[A])>>16)>0&&(C=this.getBits(C));var P=(65535&A)+C;S+c>=U&&(U=(D=this.ensureBuffer(S+c)).length);for(var z=0;z<c;++z,++S)D[S]=D[S-P]}}}else{var p,H=this.bytes,T=this.bytesPos;void 0===(p=H[T++])&&error("Bad block header in flate stream");var F=p;void 0===(p=H[T++])&&error("Bad block header in flate stream"),F|=p<<8,void 0===(p=H[T++])&&error("Bad block header in flate stream");var L=p;void 0===(p=H[T++])&&error("Bad block header in flate stream"),(L|=p<<8)!=(65535&~F)&&error("Bad uncompressed block length in flate stream"),this.codeBuf=0,this.codeSize=0;var x=this.bufferLength,D=this.ensureBuffer(x+F),I=x+F;this.bufferLength=I;for(var E=x;E<I;++E){if(void 0===(p=H[T++])){this.eof=!0;break}D[E]=p}this.bytesPos=T}}});return r.FlateStream=h});
//# sourceMappingURL=sourcemaps/FlateStream.js.map
