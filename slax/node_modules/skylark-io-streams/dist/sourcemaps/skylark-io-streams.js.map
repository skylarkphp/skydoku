{"version":3,"sources":["skylark-io-streams.js"],"names":["define","skylark","attach","langx","streams","Stream","Evented","inherit","klassName","init","arrayBuffer","start","length","dict","this","bytes","Uint8Array","pos","end","get","getByte","getBytes","strEnd","subarray","lookChar","String","fromCharCode","getChar","skip","n","reset","moveStart","makeSubStream","buffer","isStream","DecodeStream","bufferLength","eof","ensureBuffer","requested","current","byteLength","size","buffer2","i","readBlock","bufEnd","Ascii85Stream","str","input","prototype","call","tildaCode","charCodeAt","zCode","c","Lexer","isSpace","t","hexvalueMap","9","32","48","49","50","51","52","53","54","55","56","57","65","66","67","68","69","70","97","98","99","100","101","102","AsciiHexStream","decodeLength","gtCode","ChunkedStream","numChunks","numChunksLoaded","stream","getMissingChunks","chunks","chunk","loadedChunks","push","getBaseStreams","allChunksLoaded","_","onReceiveData","begin","assert","chunkSize","set","beginChunk","Math","floor","endChunk","onReceiveInitialData","data","initialDataLength","ensureRange","MissingDataException","nextEmptyChunk","hasChunk","peekBytes","getByteRange","ChunkedStreamSubstream","Object","create","missingChunks","subStream","DecryptStream","decrypt","FakeStream","codeLenCodeMap","Uint32Array","lengthDecode","distDecode","fixedLitCodeTab","fixedDistCodeTab","FlateStream","bytesPos","cmf","flg","error","codeSize","codeBuf","getBits","bits","b","getCode","table","codes","maxLen","code","codeLen","codeVal","generateHuffmanTable","lengths","len","val","code2","hdr","litCodeTable","distCodeTable","numLitCodes","numDistCodes","numCodeLenCodes","codeLenCodeLengths","codeLenCodeTab","codeLengths","bitsLength","bitsOffset","what","repeatLength","limit","code1","dist","k","blockLen","check","LZWStream","earlyChange","cachedData","bitsCached","lzwState","codeLength","nextCode","dictionaryValues","dictionaryLengths","Uint16Array","dictionaryPrevCodes","currentSequence","currentSequenceLength","readBits","lastCode","j","q","estimatedDecodedSize","blockSize","prevCode","decodedLength","currentBufferLength","hasPrev","min","log","PredictorStream","params","predictor","readBlockTiff","readBlockPng","colors","columns","pixBytes","rowBytes","rawBytes","inbuf","outbuf","inbits","outbits","compArray","bitMask","kk","prevRow","up","upLeft","left","p","pa","pb","pc","StreamsSequenceStream","shift","newLength","StringStream","main"],"mappings":"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","file":"../skylark-io-streams.js","sourcesContent":["define('skylark-io-streams/streams',[\r\n    \"skylark-langx/skylark\"\r\n], function(skylark) {\r\n\r\n    return skylark.attach(\"data.streams\",{});\r\n});\r\n\ndefine('skylark-io-streams/Stream',[\r\n    \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\",\r\n    \"./streams\"\r\n], function(skylark, langx,streams) {\r\n\r\n   \tvar Stream = langx.Evented.inherit({\r\n        klassName: \"Stream\",\r\n        init: function(arrayBuffer, start, length, dict) {\r\n\t        this.bytes = new Uint8Array(arrayBuffer);\r\n\t        this.start = start || 0;\r\n\t        this.pos = this.start;\r\n\t        this.end = (start + length) || this.bytes.length;\r\n\t        this.dict = dict;\r\n        },\r\n\r\n\r\n        length : {\r\n        \tget : function() {\r\n            \treturn this.end - this.start;\r\n        \t}\r\n        },\r\n\r\n        getByte: function () {\r\n            if (this.pos >= this.end)\r\n                return null;\r\n            return this.bytes[this.pos++];\r\n        },\r\n        // returns subarray of original buffer\r\n        // should only be read\r\n        getBytes: function (length) {\r\n            var bytes = this.bytes;\r\n            var pos = this.pos;\r\n            var strEnd = this.end;\r\n\r\n            if (!length)\r\n                return bytes.subarray(pos, strEnd);\r\n\r\n            var end = pos + length;\r\n            if (end > strEnd)\r\n                end = strEnd;\r\n\r\n            this.pos = end;\r\n            return bytes.subarray(pos, end);\r\n        },\r\n\r\n        lookChar: function () {\r\n            if (this.pos >= this.end)\r\n                return null;\r\n            return String.fromCharCode(this.bytes[this.pos]);\r\n        },\r\n        getChar: function () {\r\n            if (this.pos >= this.end)\r\n                return null;\r\n            return String.fromCharCode(this.bytes[this.pos++]);\r\n        },\r\n        skip: function (n) {\r\n            if (!n)\r\n                n = 1;\r\n            this.pos += n;\r\n        },\r\n        reset: function () {\r\n            this.pos = this.start;\r\n        },\r\n        moveStart: function () {\r\n            this.start = this.pos;\r\n        },\r\n        makeSubStream: function (start, length, dict) {\r\n            return new Stream(this.bytes.buffer, start, length, dict);\r\n        },\r\n        isStream: true\r\n    });\r\n    \r\n    return streams.Stream = Stream;\r\n\t\r\n});\r\n\ndefine('skylark-io-streams/DecodeStream',[\r\n    \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\",\r\n    \"./streams\",\r\n    \"./Stream\"\r\n], function(skylark, langx, streams, Stream) {\r\n\r\n    var DecodeStream = Stream.inherit({\r\n        klassName : \"DecodeStream\",\r\n\r\n        init : function() {\r\n            this.pos = 0;\r\n            this.bufferLength = 0;\r\n            this.eof = false;\r\n            this.buffer = null;     \r\n        },\r\n\r\n        ensureBuffer: function(requested) {\r\n            var buffer = this.buffer;\r\n            var current = buffer ? buffer.byteLength : 0;\r\n            if (requested < current)\r\n                return buffer;\r\n            var size = 512;\r\n            while (size < requested)\r\n                size <<= 1;\r\n            var buffer2 = new Uint8Array(size);\r\n            for (var i = 0; i < current; ++i)\r\n                buffer2[i] = buffer[i];\r\n            return (this.buffer = buffer2);\r\n        },\r\n        getByte: function () {\r\n            var pos = this.pos;\r\n            while (this.bufferLength <= pos) {\r\n                if (this.eof)\r\n                    return null;\r\n                this.readBlock();\r\n            }\r\n            return this.buffer[this.pos++];\r\n        },\r\n        getBytes: function(length) {\r\n            var end, pos = this.pos;\r\n\r\n            if (length) {\r\n                this.ensureBuffer(pos + length);\r\n                end = pos + length;\r\n\r\n                while (!this.eof && this.bufferLength < end)\r\n                    this.readBlock();\r\n\r\n                var bufEnd = this.bufferLength;\r\n                if (end > bufEnd)\r\n                    end = bufEnd;\r\n            } else {\r\n                while (!this.eof)\r\n                    this.readBlock();\r\n\r\n                end = this.bufferLength;\r\n\r\n                // checking if bufferLength is still 0 then\r\n                // the buffer has to be initialized\r\n                if (!end)\r\n                    this.buffer = new Uint8Array(0);\r\n            }\r\n\r\n            this.pos = end;\r\n            return this.buffer.subarray(pos, end);\r\n        },\r\n        lookChar: function() {\r\n            var pos = this.pos;\r\n            while (this.bufferLength <= pos) {\r\n                if (this.eof)\r\n                    return null;\r\n                this.readBlock();\r\n            }\r\n            return String.fromCharCode(this.buffer[this.pos]);\r\n        },\r\n        getChar: function () {\r\n            var pos = this.pos;\r\n            while (this.bufferLength <= pos) {\r\n                if (this.eof)\r\n                    return null;\r\n                this.readBlock();\r\n            }\r\n            return String.fromCharCode(this.buffer[this.pos++]);\r\n        },\r\n        makeSubStream: function (start, length, dict) {\r\n            var end = start + length;\r\n            while (this.bufferLength <= end && !this.eof)\r\n                this.readBlock();\r\n            return new Stream(this.buffer, start, length, dict);\r\n        },\r\n        skip: function (n) {\r\n            if (!n)\r\n                n = 1;\r\n            this.pos += n;\r\n        },\r\n        reset: function () {\r\n            this.pos = 0;\r\n        }\r\n\r\n    });\r\n\r\n    return streams.DecodeStream = DecodeStream;\r\n\r\n});\r\n\ndefine('skylark-io-streams/Ascii85Stream',[\r\n    \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\",\r\n    \"./streams\",\r\n    \"./DecodeStream\"\r\n], function(skylark, langx, streams, DecodeStream) {\r\n\r\n    var Ascii85Stream = DecodeStream.inherit({\r\n        klassName : \"Ascii85Stream\",\r\n\r\n        init : function(str) {\r\n            this.str = str;\r\n            this.dict = str.dict;\r\n            this.input = new Uint8Array(5);\r\n\r\n            DecodeStream.prototype.init.call(this);          \r\n        },\r\n\r\n        readBlock : function() {\r\n            var tildaCode = '~'.charCodeAt(0);\r\n            var zCode = 'z'.charCodeAt(0);\r\n            var str = this.str;\r\n\r\n            var c = str.getByte();\r\n            while (Lexer.isSpace(String.fromCharCode(c)))\r\n                c = str.getByte();\r\n\r\n            if (!c || c === tildaCode) {\r\n                this.eof = true;\r\n                return;\r\n            }\r\n\r\n            var bufferLength = this.bufferLength,\r\n                buffer;\r\n\r\n            // special code for z\r\n            if (c == zCode) {\r\n                buffer = this.ensureBuffer(bufferLength + 4);\r\n                for (var i = 0; i < 4; ++i)\r\n                    buffer[bufferLength + i] = 0;\r\n                this.bufferLength += 4;\r\n            } else {\r\n                var input = this.input;\r\n                input[0] = c;\r\n                for (var i = 1; i < 5; ++i) {\r\n                    c = str.getByte();\r\n                    while (Lexer.isSpace(String.fromCharCode(c)))\r\n                        c = str.getByte();\r\n\r\n                    input[i] = c;\r\n\r\n                    if (!c || c == tildaCode)\r\n                        break;\r\n                }\r\n                buffer = this.ensureBuffer(bufferLength + i - 1);\r\n                this.bufferLength += i - 1;\r\n\r\n                // partial ending;\r\n                if (i < 5) {\r\n                    for (; i < 5; ++i)\r\n                        input[i] = 0x21 + 84;\r\n                    this.eof = true;\r\n                }\r\n                var t = 0;\r\n                for (var i = 0; i < 5; ++i)\r\n                    t = t * 85 + (input[i] - 0x21);\r\n\r\n                for (var i = 3; i >= 0; --i) {\r\n                    buffer[bufferLength + i] = t & 0xFF;\r\n                    t >>= 8;\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n    });\r\n\r\n    return streams.Ascii85Stream = Ascii85Stream;\r\n\r\n});\r\n\ndefine('skylark-io-streams/AsciiHexStream',[\r\n    \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\",\r\n    \"./streams\",\r\n    \"./DecodeStream\"\r\n], function(skylark, langx, streams, DecodeStream) {\r\n    var hexvalueMap = {\r\n        9: -1, // \\t\r\n        32: -1, // space\r\n        48: 0,\r\n        49: 1,\r\n        50: 2,\r\n        51: 3,\r\n        52: 4,\r\n        53: 5,\r\n        54: 6,\r\n        55: 7,\r\n        56: 8,\r\n        57: 9,\r\n        65: 10,\r\n        66: 11,\r\n        67: 12,\r\n        68: 13,\r\n        69: 14,\r\n        70: 15,\r\n        97: 10,\r\n        98: 11,\r\n        99: 12,\r\n        100: 13,\r\n        101: 14,\r\n        102: 15\r\n    };\r\n\r\n    var AsciiHexStream = DecodeStream.inherit({\r\n        klassName : \"AsciiHexStream\",\r\n\r\n        init : function(str) {\r\n            this.str = str;\r\n            this.dict = str.dict;\r\n\r\n            DecodeStream.prototype.init.call(this);          \r\n        },\r\n\r\n        readBlock : function() {\r\n            var gtCode = '>'.charCodeAt(0),\r\n                bytes = this.str.getBytes(),\r\n                c, n,\r\n                decodeLength, buffer, bufferLength, i, length;\r\n\r\n            decodeLength = (bytes.length + 1) >> 1;\r\n            buffer = this.ensureBuffer(this.bufferLength + decodeLength);\r\n            bufferLength = this.bufferLength;\r\n\r\n            for (i = 0, length = bytes.length; i < length; i++) {\r\n                c = hexvalueMap[bytes[i]];\r\n                while (c == -1 && (i + 1) < length) {\r\n                    c = hexvalueMap[bytes[++i]];\r\n                }\r\n\r\n                if ((i + 1) < length && (bytes[i + 1] !== gtCode)) {\r\n                    n = hexvalueMap[bytes[++i]];\r\n                    buffer[bufferLength++] = c * 16 + n;\r\n                } else {\r\n                    // EOD marker at an odd number, behave as if a 0 followed the last\r\n                    // digit.\r\n                    if (bytes[i] !== gtCode) {\r\n                        buffer[bufferLength++] = c * 16;\r\n                    }\r\n                }\r\n            }\r\n\r\n            this.bufferLength = bufferLength;\r\n            this.eof = true;        \r\n       }\r\n\r\n    });\r\n\r\n    return streams.AsciiHexStream = AsciiHexStream;\r\n});\r\n\ndefine('skylark-io-streams/ChunkedStream',[\r\n    \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\",\r\n    \"./streams\",\r\n    \"./Stream\"\r\n], function(skylark, langx,streams,Stream) {\r\n\r\n\r\n    var ChunkedStream = Stream.inherit({\r\n        klassName : \"ChunkedStream\",\r\n\r\n        \"numChunks\": 0,\r\n        \"numChunksLoaded\": 0,\r\n\r\n        init : function(str) {\r\n            var length = str.length;\r\n            var bytes = new Uint8Array(length);\r\n            for (var n = 0; n < length; ++n)\r\n                bytes[n] = str.charCodeAt(n);\r\n            DecodeStream.prototype.init.call(bytes);          \r\n            this.dict = stream.dict;\r\n        },\r\n\r\n        \"numChunks\": function() {\r\n\r\n        },\r\n\r\n\r\n        getMissingChunks: function ChunkedStream_getMissingChunks() {\r\n            var chunks = [];\r\n            for (var chunk = 0, n = this.numChunks; chunk < n; ++chunk) {\r\n                if (!(chunk in this.loadedChunks)) {\r\n                    chunks.push(chunk);\r\n                }\r\n            }\r\n            return chunks;\r\n        },\r\n\r\n        getBaseStreams: function ChunkedStream_getBaseStreams() {\r\n            return [this];\r\n        },\r\n\r\n        allChunksLoaded: function ChunkedStream_allChunksLoaded() {\r\n            var _ = this._;\r\n            return _.numChunksLoaded === _.numChunks;\r\n        },\r\n\r\n        onReceiveData: function(begin, chunk) {\r\n            var end = begin + chunk.byteLength;\r\n\r\n            assert(begin % this.chunkSize === 0, 'Bad begin offset: ' + begin);\r\n            // Using this.length is inaccurate here since this.start can be moved\r\n            // See ChunkedStream.moveStart()\r\n            var length = this.bytes.length;\r\n            assert(end % this.chunkSize === 0 || end === length,\r\n                'Bad end offset: ' + end);\r\n\r\n            this.bytes.set(new Uint8Array(chunk), begin);\r\n            var chunkSize = this.chunkSize;\r\n            var beginChunk = Math.floor(begin / chunkSize);\r\n            var endChunk = Math.floor((end - 1) / chunkSize) + 1;\r\n\r\n            for (var chunk = beginChunk; chunk < endChunk; ++chunk) {\r\n                if (!(chunk in this.loadedChunks)) {\r\n                    this.loadedChunks[chunk] = true;\r\n                    ++this.numChunksLoaded;\r\n                }\r\n            }\r\n        },\r\n\r\n        onReceiveInitialData: function(data) {\r\n            this.bytes.set(data);\r\n            this.initialDataLength = data.length;\r\n            var endChunk = this.end === data.length ?\r\n                this.numChunks : Math.floor(data.length / this.chunkSize);\r\n            for (var i = 0; i < endChunk; i++) {\r\n                this.loadedChunks[i] = true;\r\n                ++this.numChunksLoaded;\r\n            }\r\n        },\r\n\r\n        ensureRange: function ChunkedStream_ensureRange(begin, end) {\r\n            if (begin >= end) {\r\n                return;\r\n            }\r\n\r\n            if (end <= this.initialDataLength) {\r\n                return;\r\n            }\r\n\r\n            var chunkSize = this.chunkSize;\r\n            var beginChunk = Math.floor(begin / chunkSize);\r\n            var endChunk = Math.floor((end - 1) / chunkSize) + 1;\r\n            for (var chunk = beginChunk; chunk < endChunk; ++chunk) {\r\n                if (!(chunk in this.loadedChunks)) {\r\n                    throw new MissingDataException(begin, end);\r\n                }\r\n            }\r\n        },\r\n\r\n        nextEmptyChunk: function ChunkedStream_nextEmptyChunk(beginChunk) {\r\n            for (var chunk = beginChunk, n = this.numChunks; chunk < n; ++chunk) {\r\n                if (!(chunk in this.loadedChunks)) {\r\n                    return chunk;\r\n                }\r\n            }\r\n            // Wrap around to beginning\r\n            for (var chunk = 0; chunk < beginChunk; ++chunk) {\r\n                if (!(chunk in this.loadedChunks)) {\r\n                    return chunk;\r\n                }\r\n            }\r\n            return null;\r\n        },\r\n\r\n        hasChunk: function ChunkedStream_hasChunk(chunk) {\r\n            return chunk in this._.loadedChunks;\r\n        },\r\n\r\n        getByte: function ChunkedStream_getByte() {\r\n            var pos = this.pos;\r\n            if (pos >= this.end) {\r\n                return -1;\r\n            }\r\n            this.ensureRange(pos, pos + 1);\r\n            return this.bytes[this.pos++];\r\n        },\r\n\r\n        // returns subarray of original buffer\r\n        // should only be read\r\n        getBytes: function ChunkedStream_getBytes(length) {\r\n            var bytes = this.bytes;\r\n            var pos = this.pos;\r\n            var strEnd = this.end;\r\n\r\n            if (!length) {\r\n                this.ensureRange(pos, strEnd);\r\n                return bytes.subarray(pos, strEnd);\r\n            }\r\n\r\n            var end = pos + length;\r\n            if (end > strEnd)\r\n                end = strEnd;\r\n            this.ensureRange(pos, end);\r\n\r\n            this.pos = end;\r\n            return bytes.subarray(pos, end);\r\n        },\r\n\r\n        peekBytes: function ChunkedStream_peekBytes(length) {\r\n            var bytes = this.getBytes(length);\r\n            this.pos -= bytes.length;\r\n            return bytes;\r\n        },\r\n\r\n        getByteRange: function ChunkedStream_getBytes(begin, end) {\r\n            this.ensureRange(begin, end);\r\n            return this.bytes.subarray(begin, end);\r\n        },\r\n\r\n        skip: function ChunkedStream_skip(n) {\r\n            if (!n)\r\n                n = 1;\r\n            this.pos += n;\r\n        },\r\n\r\n        reset: function ChunkedStream_reset() {\r\n            this.pos = this.start;\r\n        },\r\n\r\n        moveStart: function ChunkedStream_moveStart() {\r\n            this.start = this.pos;\r\n        },\r\n\r\n        makeSubStream: function ChunkedStream_makeSubStream(start, length, dict) {\r\n            function ChunkedStreamSubstream() {}\r\n            ChunkedStreamSubstream.prototype = Object.create(this);\r\n            ChunkedStreamSubstream.prototype.getMissingChunks = function() {\r\n                var chunkSize = this.chunkSize;\r\n                var beginChunk = Math.floor(this.start / chunkSize);\r\n                var endChunk = Math.floor((this.end - 1) / chunkSize) + 1;\r\n                var missingChunks = [];\r\n                for (var chunk = beginChunk; chunk < endChunk; ++chunk) {\r\n                    if (!(chunk in this.loadedChunks)) {\r\n                        missingChunks.push(chunk);\r\n                    }\r\n                }\r\n                return missingChunks;\r\n            };\r\n            var subStream = new ChunkedStreamSubstream();\r\n            subStream.pos = subStream.start = start;\r\n            subStream.end = start + length || this.end;\r\n            subStream.dict = dict;\r\n            return subStream;\r\n        }\r\n    });\r\n\r\n    return streams.ChunkedStream = ChunkedStream;\r\n\r\n});\r\n\n\r\ndefine('skylark-io-streams/DecryptStream',[\r\n    \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\",\r\n    \"./streams\",\r\n    \"./DecodeStream\"\r\n], function(skylark, langx, streams, DecodeStream) {\r\n\r\n    var chunkSize = 512;\r\n\r\n    var DecryptStream = DecodeStream.inherit({\r\n        klassName : \"DecryptStream\",\r\n\r\n        init : function(str, decrypt) {\r\n            this.str = str;\r\n            this.dict = str.dict;\r\n            this.decrypt = decrypt;\r\n            DecodeStream.prototype.init.call(this);          \r\n        },\r\n\r\n        readBlock : function() {\r\n            var chunk = this.str.getBytes(chunkSize);\r\n            if (!chunk || chunk.length == 0) {\r\n                this.eof = true;\r\n                return;\r\n            }\r\n            var decrypt = this.decrypt;\r\n            chunk = decrypt(chunk);\r\n\r\n            var bufferLength = this.bufferLength;\r\n            var i, n = chunk.length;\r\n            var buffer = this.ensureBuffer(bufferLength + n);\r\n            for (i = 0; i < n; i++)\r\n                buffer[bufferLength++] = chunk[i];\r\n            this.bufferLength = bufferLength;\r\n        }\r\n    });\r\n\r\n    return streams.DecryptStream = DecryptStream;\r\n});\r\n\n\r\ndefine('skylark-io-streams/FakeStream',[\r\n    \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\",\r\n    \"./streams\",\r\n    \"./DecodeStream\"\r\n], function(skylark, langx, streams, DecodeStream) {\r\n\r\n    var FakeStream = DecodeStream.inherit({\r\n        klassName : \"FakeStream\",\r\n\r\n        init : function(stream) {\r\n            this.dict = stream.dict;\r\n            Stream.prototype.init.call(this);          \r\n        },\r\n\r\n        readBlock : function() {\r\n            var bufferLength = this.bufferLength;\r\n            bufferLength += 1024;\r\n            var buffer = this.ensureBuffer(bufferLength);\r\n            this.bufferLength = bufferLength;\r\n        },\r\n\r\n        getBytes : function (length) {\r\n            var end, pos = this.pos;\r\n\r\n            if (length) {\r\n                this.ensureBuffer(pos + length);\r\n                end = pos + length;\r\n\r\n                while (!this.eof && this.bufferLength < end)\r\n                    this.readBlock();\r\n\r\n                var bufEnd = this.bufferLength;\r\n                if (end > bufEnd)\r\n                    end = bufEnd;\r\n            } else {\r\n                this.eof = true;\r\n                end = this.bufferLength;\r\n            }\r\n\r\n            this.pos = end;\r\n            return this.buffer.subarray(pos, end);\r\n        }\r\n\r\n    });\r\n\r\n    return streams.FakeStream = FakeStream;\r\n});\r\n\n\r\ndefine('skylark-io-streams/FlateStream',[\r\n    \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\",\r\n    \"./streams\",\r\n    \"./DecodeStream\"\r\n], function(skylark, langx, streams, DecodeStream) {\r\n\r\n    var codeLenCodeMap = new Uint32Array([\r\n        16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15\r\n    ]);\r\n\r\n    var lengthDecode = new Uint32Array([\r\n        0x00003, 0x00004, 0x00005, 0x00006, 0x00007, 0x00008, 0x00009, 0x0000a,\r\n        0x1000b, 0x1000d, 0x1000f, 0x10011, 0x20013, 0x20017, 0x2001b, 0x2001f,\r\n        0x30023, 0x3002b, 0x30033, 0x3003b, 0x40043, 0x40053, 0x40063, 0x40073,\r\n        0x50083, 0x500a3, 0x500c3, 0x500e3, 0x00102, 0x00102, 0x00102\r\n    ]);\r\n\r\n    var distDecode = new Uint32Array([\r\n        0x00001, 0x00002, 0x00003, 0x00004, 0x10005, 0x10007, 0x20009, 0x2000d,\r\n        0x30011, 0x30019, 0x40021, 0x40031, 0x50041, 0x50061, 0x60081, 0x600c1,\r\n        0x70101, 0x70181, 0x80201, 0x80301, 0x90401, 0x90601, 0xa0801, 0xa0c01,\r\n        0xb1001, 0xb1801, 0xc2001, 0xc3001, 0xd4001, 0xd6001\r\n    ]);\r\n\r\n    var fixedLitCodeTab = [new Uint32Array([\r\n        0x70100, 0x80050, 0x80010, 0x80118, 0x70110, 0x80070, 0x80030, 0x900c0,\r\n        0x70108, 0x80060, 0x80020, 0x900a0, 0x80000, 0x80080, 0x80040, 0x900e0,\r\n        0x70104, 0x80058, 0x80018, 0x90090, 0x70114, 0x80078, 0x80038, 0x900d0,\r\n        0x7010c, 0x80068, 0x80028, 0x900b0, 0x80008, 0x80088, 0x80048, 0x900f0,\r\n        0x70102, 0x80054, 0x80014, 0x8011c, 0x70112, 0x80074, 0x80034, 0x900c8,\r\n        0x7010a, 0x80064, 0x80024, 0x900a8, 0x80004, 0x80084, 0x80044, 0x900e8,\r\n        0x70106, 0x8005c, 0x8001c, 0x90098, 0x70116, 0x8007c, 0x8003c, 0x900d8,\r\n        0x7010e, 0x8006c, 0x8002c, 0x900b8, 0x8000c, 0x8008c, 0x8004c, 0x900f8,\r\n        0x70101, 0x80052, 0x80012, 0x8011a, 0x70111, 0x80072, 0x80032, 0x900c4,\r\n        0x70109, 0x80062, 0x80022, 0x900a4, 0x80002, 0x80082, 0x80042, 0x900e4,\r\n        0x70105, 0x8005a, 0x8001a, 0x90094, 0x70115, 0x8007a, 0x8003a, 0x900d4,\r\n        0x7010d, 0x8006a, 0x8002a, 0x900b4, 0x8000a, 0x8008a, 0x8004a, 0x900f4,\r\n        0x70103, 0x80056, 0x80016, 0x8011e, 0x70113, 0x80076, 0x80036, 0x900cc,\r\n        0x7010b, 0x80066, 0x80026, 0x900ac, 0x80006, 0x80086, 0x80046, 0x900ec,\r\n        0x70107, 0x8005e, 0x8001e, 0x9009c, 0x70117, 0x8007e, 0x8003e, 0x900dc,\r\n        0x7010f, 0x8006e, 0x8002e, 0x900bc, 0x8000e, 0x8008e, 0x8004e, 0x900fc,\r\n        0x70100, 0x80051, 0x80011, 0x80119, 0x70110, 0x80071, 0x80031, 0x900c2,\r\n        0x70108, 0x80061, 0x80021, 0x900a2, 0x80001, 0x80081, 0x80041, 0x900e2,\r\n        0x70104, 0x80059, 0x80019, 0x90092, 0x70114, 0x80079, 0x80039, 0x900d2,\r\n        0x7010c, 0x80069, 0x80029, 0x900b2, 0x80009, 0x80089, 0x80049, 0x900f2,\r\n        0x70102, 0x80055, 0x80015, 0x8011d, 0x70112, 0x80075, 0x80035, 0x900ca,\r\n        0x7010a, 0x80065, 0x80025, 0x900aa, 0x80005, 0x80085, 0x80045, 0x900ea,\r\n        0x70106, 0x8005d, 0x8001d, 0x9009a, 0x70116, 0x8007d, 0x8003d, 0x900da,\r\n        0x7010e, 0x8006d, 0x8002d, 0x900ba, 0x8000d, 0x8008d, 0x8004d, 0x900fa,\r\n        0x70101, 0x80053, 0x80013, 0x8011b, 0x70111, 0x80073, 0x80033, 0x900c6,\r\n        0x70109, 0x80063, 0x80023, 0x900a6, 0x80003, 0x80083, 0x80043, 0x900e6,\r\n        0x70105, 0x8005b, 0x8001b, 0x90096, 0x70115, 0x8007b, 0x8003b, 0x900d6,\r\n        0x7010d, 0x8006b, 0x8002b, 0x900b6, 0x8000b, 0x8008b, 0x8004b, 0x900f6,\r\n        0x70103, 0x80057, 0x80017, 0x8011f, 0x70113, 0x80077, 0x80037, 0x900ce,\r\n        0x7010b, 0x80067, 0x80027, 0x900ae, 0x80007, 0x80087, 0x80047, 0x900ee,\r\n        0x70107, 0x8005f, 0x8001f, 0x9009e, 0x70117, 0x8007f, 0x8003f, 0x900de,\r\n        0x7010f, 0x8006f, 0x8002f, 0x900be, 0x8000f, 0x8008f, 0x8004f, 0x900fe,\r\n        0x70100, 0x80050, 0x80010, 0x80118, 0x70110, 0x80070, 0x80030, 0x900c1,\r\n        0x70108, 0x80060, 0x80020, 0x900a1, 0x80000, 0x80080, 0x80040, 0x900e1,\r\n        0x70104, 0x80058, 0x80018, 0x90091, 0x70114, 0x80078, 0x80038, 0x900d1,\r\n        0x7010c, 0x80068, 0x80028, 0x900b1, 0x80008, 0x80088, 0x80048, 0x900f1,\r\n        0x70102, 0x80054, 0x80014, 0x8011c, 0x70112, 0x80074, 0x80034, 0x900c9,\r\n        0x7010a, 0x80064, 0x80024, 0x900a9, 0x80004, 0x80084, 0x80044, 0x900e9,\r\n        0x70106, 0x8005c, 0x8001c, 0x90099, 0x70116, 0x8007c, 0x8003c, 0x900d9,\r\n        0x7010e, 0x8006c, 0x8002c, 0x900b9, 0x8000c, 0x8008c, 0x8004c, 0x900f9,\r\n        0x70101, 0x80052, 0x80012, 0x8011a, 0x70111, 0x80072, 0x80032, 0x900c5,\r\n        0x70109, 0x80062, 0x80022, 0x900a5, 0x80002, 0x80082, 0x80042, 0x900e5,\r\n        0x70105, 0x8005a, 0x8001a, 0x90095, 0x70115, 0x8007a, 0x8003a, 0x900d5,\r\n        0x7010d, 0x8006a, 0x8002a, 0x900b5, 0x8000a, 0x8008a, 0x8004a, 0x900f5,\r\n        0x70103, 0x80056, 0x80016, 0x8011e, 0x70113, 0x80076, 0x80036, 0x900cd,\r\n        0x7010b, 0x80066, 0x80026, 0x900ad, 0x80006, 0x80086, 0x80046, 0x900ed,\r\n        0x70107, 0x8005e, 0x8001e, 0x9009d, 0x70117, 0x8007e, 0x8003e, 0x900dd,\r\n        0x7010f, 0x8006e, 0x8002e, 0x900bd, 0x8000e, 0x8008e, 0x8004e, 0x900fd,\r\n        0x70100, 0x80051, 0x80011, 0x80119, 0x70110, 0x80071, 0x80031, 0x900c3,\r\n        0x70108, 0x80061, 0x80021, 0x900a3, 0x80001, 0x80081, 0x80041, 0x900e3,\r\n        0x70104, 0x80059, 0x80019, 0x90093, 0x70114, 0x80079, 0x80039, 0x900d3,\r\n        0x7010c, 0x80069, 0x80029, 0x900b3, 0x80009, 0x80089, 0x80049, 0x900f3,\r\n        0x70102, 0x80055, 0x80015, 0x8011d, 0x70112, 0x80075, 0x80035, 0x900cb,\r\n        0x7010a, 0x80065, 0x80025, 0x900ab, 0x80005, 0x80085, 0x80045, 0x900eb,\r\n        0x70106, 0x8005d, 0x8001d, 0x9009b, 0x70116, 0x8007d, 0x8003d, 0x900db,\r\n        0x7010e, 0x8006d, 0x8002d, 0x900bb, 0x8000d, 0x8008d, 0x8004d, 0x900fb,\r\n        0x70101, 0x80053, 0x80013, 0x8011b, 0x70111, 0x80073, 0x80033, 0x900c7,\r\n        0x70109, 0x80063, 0x80023, 0x900a7, 0x80003, 0x80083, 0x80043, 0x900e7,\r\n        0x70105, 0x8005b, 0x8001b, 0x90097, 0x70115, 0x8007b, 0x8003b, 0x900d7,\r\n        0x7010d, 0x8006b, 0x8002b, 0x900b7, 0x8000b, 0x8008b, 0x8004b, 0x900f7,\r\n        0x70103, 0x80057, 0x80017, 0x8011f, 0x70113, 0x80077, 0x80037, 0x900cf,\r\n        0x7010b, 0x80067, 0x80027, 0x900af, 0x80007, 0x80087, 0x80047, 0x900ef,\r\n        0x70107, 0x8005f, 0x8001f, 0x9009f, 0x70117, 0x8007f, 0x8003f, 0x900df,\r\n        0x7010f, 0x8006f, 0x8002f, 0x900bf, 0x8000f, 0x8008f, 0x8004f, 0x900ff\r\n    ]), 9];\r\n\r\n    var fixedDistCodeTab = [new Uint32Array([\r\n        0x50000, 0x50010, 0x50008, 0x50018, 0x50004, 0x50014, 0x5000c, 0x5001c,\r\n        0x50002, 0x50012, 0x5000a, 0x5001a, 0x50006, 0x50016, 0x5000e, 0x00000,\r\n        0x50001, 0x50011, 0x50009, 0x50019, 0x50005, 0x50015, 0x5000d, 0x5001d,\r\n        0x50003, 0x50013, 0x5000b, 0x5001b, 0x50007, 0x50017, 0x5000f, 0x00000\r\n    ]), 5];\r\n\r\n\r\n    var FlateStream = DecodeStream.inherit({\r\n        klassName : \"FlateStream\",\r\n\r\n        init : function(stream) {\r\n            var bytes = stream.getBytes();\r\n            var bytesPos = 0;\r\n\r\n            this.dict = stream.dict;\r\n            var cmf = bytes[bytesPos++];\r\n            var flg = bytes[bytesPos++];\r\n            if (cmf == -1 || flg == -1)\r\n                error('Invalid header in flate stream: ' + cmf + ', ' + flg);\r\n            if ((cmf & 0x0f) != 0x08)\r\n                error('Unknown compression method in flate stream: ' + cmf + ', ' + flg);\r\n            if ((((cmf << 8) + flg) % 31) != 0)\r\n                error('Bad FCHECK in flate stream: ' + cmf + ', ' + flg);\r\n            if (flg & 0x20)\r\n                error('FDICT bit set in flate stream: ' + cmf + ', ' + flg);\r\n\r\n            this.bytes = bytes;\r\n            this.bytesPos = bytesPos;\r\n\r\n            this.codeSize = 0;\r\n            this.codeBuf = 0;\r\n            DecodeStream.prototype.init.call(this);          \r\n        },\r\n\r\n        getBits : function(bits) {\r\n            var codeSize = this.codeSize;\r\n            var codeBuf = this.codeBuf;\r\n            var bytes = this.bytes;\r\n            var bytesPos = this.bytesPos;\r\n\r\n            var b;\r\n            while (codeSize < bits) {\r\n                if (typeof(b = bytes[bytesPos++]) == 'undefined')\r\n                    error('Bad encoding in flate stream');\r\n                codeBuf |= b << codeSize;\r\n                codeSize += 8;\r\n            }\r\n            b = codeBuf & ((1 << bits) - 1);\r\n            this.codeBuf = codeBuf >> bits;\r\n            this.codeSize = codeSize -= bits;\r\n            this.bytesPos = bytesPos;\r\n            return b;\r\n        },\r\n\r\n        getCode : function(table) {\r\n            var codes = table[0];\r\n            var maxLen = table[1];\r\n            var codeSize = this.codeSize;\r\n            var codeBuf = this.codeBuf;\r\n            var bytes = this.bytes;\r\n            var bytesPos = this.bytesPos;\r\n\r\n            while (codeSize < maxLen) {\r\n                var b;\r\n                if (typeof(b = bytes[bytesPos++]) == 'undefined')\r\n                    error('Bad encoding in flate stream');\r\n                codeBuf |= (b << codeSize);\r\n                codeSize += 8;\r\n            }\r\n            var code = codes[codeBuf & ((1 << maxLen) - 1)];\r\n            var codeLen = code >> 16;\r\n            var codeVal = code & 0xffff;\r\n            if (codeSize == 0 || codeSize < codeLen || codeLen == 0)\r\n                error('Bad encoding in flate stream');\r\n            this.codeBuf = (codeBuf >> codeLen);\r\n            this.codeSize = (codeSize - codeLen);\r\n            this.bytesPos = bytesPos;\r\n            return codeVal;\r\n        },\r\n\r\n        generateHuffmanTable : function(lengths) {\r\n                var n = lengths.length;\r\n\r\n                // find max code length\r\n                var maxLen = 0;\r\n                for (var i = 0; i < n; ++i) {\r\n                    if (lengths[i] > maxLen)\r\n                        maxLen = lengths[i];\r\n                }\r\n\r\n                // build the table\r\n                var size = 1 << maxLen;\r\n                var codes = new Uint32Array(size);\r\n                for (var len = 1, code = 0, skip = 2; len <= maxLen;\r\n                    ++len, code <<= 1, skip <<= 1) {\r\n                    for (var val = 0; val < n; ++val) {\r\n                        if (lengths[val] == len) {\r\n                            // bit-reverse the code\r\n                            var code2 = 0;\r\n                            var t = code;\r\n                            for (var i = 0; i < len; ++i) {\r\n                                code2 = (code2 << 1) | (t & 1);\r\n                                t >>= 1;\r\n                            }\r\n\r\n                            // fill the table entries\r\n                            for (var i = code2; i < size; i += skip)\r\n                                codes[i] = (len << 16) | val;\r\n\r\n                            ++code;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                return [codes, maxLen];\r\n        },\r\n\r\n        readBlock : function() {\r\n            // read block header\r\n            var hdr = this.getBits(3);\r\n            if (hdr & 1)\r\n                this.eof = true;\r\n            hdr >>= 1;\r\n\r\n            if (hdr == 0) { // uncompressed block\r\n                var bytes = this.bytes;\r\n                var bytesPos = this.bytesPos;\r\n                var b;\r\n\r\n                if (typeof(b = bytes[bytesPos++]) == 'undefined')\r\n                    error('Bad block header in flate stream');\r\n                var blockLen = b;\r\n                if (typeof(b = bytes[bytesPos++]) == 'undefined')\r\n                    error('Bad block header in flate stream');\r\n                blockLen |= (b << 8);\r\n                if (typeof(b = bytes[bytesPos++]) == 'undefined')\r\n                    error('Bad block header in flate stream');\r\n                var check = b;\r\n                if (typeof(b = bytes[bytesPos++]) == 'undefined')\r\n                    error('Bad block header in flate stream');\r\n                check |= (b << 8);\r\n                if (check != (~blockLen & 0xffff))\r\n                    error('Bad uncompressed block length in flate stream');\r\n\r\n                this.codeBuf = 0;\r\n                this.codeSize = 0;\r\n\r\n                var bufferLength = this.bufferLength;\r\n                var buffer = this.ensureBuffer(bufferLength + blockLen);\r\n                var end = bufferLength + blockLen;\r\n                this.bufferLength = end;\r\n                for (var n = bufferLength; n < end; ++n) {\r\n                    if (typeof(b = bytes[bytesPos++]) == 'undefined') {\r\n                        this.eof = true;\r\n                        break;\r\n                    }\r\n                    buffer[n] = b;\r\n                }\r\n                this.bytesPos = bytesPos;\r\n                return;\r\n            }\r\n\r\n            var litCodeTable;\r\n            var distCodeTable;\r\n            if (hdr == 1) { // compressed block, fixed codes\r\n                litCodeTable = fixedLitCodeTab;\r\n                distCodeTable = fixedDistCodeTab;\r\n            } else if (hdr == 2) { // compressed block, dynamic codes\r\n                var numLitCodes = this.getBits(5) + 257;\r\n                var numDistCodes = this.getBits(5) + 1;\r\n                var numCodeLenCodes = this.getBits(4) + 4;\r\n\r\n                // build the code lengths code table\r\n                var codeLenCodeLengths = new Uint8Array(codeLenCodeMap.length);\r\n\r\n                for (var i = 0; i < numCodeLenCodes; ++i)\r\n                    codeLenCodeLengths[codeLenCodeMap[i]] = this.getBits(3);\r\n                var codeLenCodeTab = this.generateHuffmanTable(codeLenCodeLengths);\r\n\r\n                // build the literal and distance code tables\r\n                var len = 0;\r\n                var i = 0;\r\n                var codes = numLitCodes + numDistCodes;\r\n                var codeLengths = new Uint8Array(codes);\r\n                while (i < codes) {\r\n                    var code = this.getCode(codeLenCodeTab);\r\n                    if (code == 16) {\r\n                        var bitsLength = 2,\r\n                            bitsOffset = 3,\r\n                            what = len;\r\n                    } else if (code == 17) {\r\n                        var bitsLength = 3,\r\n                            bitsOffset = 3,\r\n                            what = (len = 0);\r\n                    } else if (code == 18) {\r\n                        var bitsLength = 7,\r\n                            bitsOffset = 11,\r\n                            what = (len = 0);\r\n                    } else {\r\n                        codeLengths[i++] = len = code;\r\n                        continue;\r\n                    }\r\n\r\n                    var repeatLength = this.getBits(bitsLength) + bitsOffset;\r\n                    while (repeatLength-- > 0)\r\n                        codeLengths[i++] = what;\r\n                }\r\n\r\n                litCodeTable =\r\n                    this.generateHuffmanTable(codeLengths.subarray(0, numLitCodes));\r\n                distCodeTable =\r\n                    this.generateHuffmanTable(codeLengths.subarray(numLitCodes, codes));\r\n            } else {\r\n                error('Unknown block type in flate stream');\r\n            }\r\n\r\n            var buffer = this.buffer;\r\n            var limit = buffer ? buffer.length : 0;\r\n            var pos = this.bufferLength;\r\n            while (true) {\r\n                var code1 = this.getCode(litCodeTable);\r\n                if (code1 < 256) {\r\n                    if (pos + 1 >= limit) {\r\n                        buffer = this.ensureBuffer(pos + 1);\r\n                        limit = buffer.length;\r\n                    }\r\n                    buffer[pos++] = code1;\r\n                    continue;\r\n                }\r\n                if (code1 == 256) {\r\n                    this.bufferLength = pos;\r\n                    return;\r\n                }\r\n                code1 -= 257;\r\n                code1 = lengthDecode[code1];\r\n                var code2 = code1 >> 16;\r\n                if (code2 > 0)\r\n                    code2 = this.getBits(code2);\r\n                var len = (code1 & 0xffff) + code2;\r\n                code1 = this.getCode(distCodeTable);\r\n                code1 = distDecode[code1];\r\n                code2 = code1 >> 16;\r\n                if (code2 > 0)\r\n                    code2 = this.getBits(code2);\r\n                var dist = (code1 & 0xffff) + code2;\r\n                if (pos + len >= limit) {\r\n                    buffer = this.ensureBuffer(pos + len);\r\n                    limit = buffer.length;\r\n                }\r\n                for (var k = 0; k < len; ++k, ++pos)\r\n                    buffer[pos] = buffer[pos - dist];\r\n            }\r\n        }\r\n    });\r\n\r\n\r\n    return streams.FlateStream = FlateStream;\r\n});\r\n\ndefine('skylark-io-streams/LZWStream',[\r\n    \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\",\r\n    \"./streams\",\r\n    \"./DecodeStream\"\r\n], function(skylark, langx, streams, DecodeStream) {\r\n\r\n    var LZWStream = DecodeStream.inherit({\r\n        klassName : \"LZWStream\",\r\n\r\n        init : function(str, earlyChange) {\r\n            this.str = str;\r\n            this.dict = str.dict;\r\n            this.cachedData = 0;\r\n            this.bitsCached = 0;\r\n\r\n            var maxLzwDictionarySize = 4096;\r\n            var lzwState = {\r\n                earlyChange: earlyChange,\r\n                codeLength: 9,\r\n                nextCode: 258,\r\n                dictionaryValues: new Uint8Array(maxLzwDictionarySize),\r\n                dictionaryLengths: new Uint16Array(maxLzwDictionarySize),\r\n                dictionaryPrevCodes: new Uint16Array(maxLzwDictionarySize),\r\n                currentSequence: new Uint8Array(maxLzwDictionarySize),\r\n                currentSequenceLength: 0\r\n            };\r\n            for (var i = 0; i < 256; ++i) {\r\n                lzwState.dictionaryValues[i] = i;\r\n                lzwState.dictionaryLengths[i] = 1;\r\n            }\r\n            this.lzwState = lzwState;\r\n            DecodeStream.prototype.init.call(this);          \r\n        },\r\n\r\n        readBits : function(n) {\r\n            var bitsCached = this.bitsCached;\r\n            var cachedData = this.cachedData;\r\n            while (bitsCached < n) {\r\n                var c = this.str.getByte();\r\n                if (c == null) {\r\n                    this.eof = true;\r\n                    return null;\r\n                }\r\n                cachedData = (cachedData << 8) | c;\r\n                bitsCached += 8;\r\n            }\r\n            this.bitsCached = (bitsCached -= n);\r\n            this.cachedData = cachedData;\r\n            this.lastCode = null;\r\n            return (cachedData >>> bitsCached) & ((1 << n) - 1);\r\n        },\r\n\r\n        readBlock : function() {\r\n            var blockSize = 512;\r\n            var estimatedDecodedSize = blockSize * 2,\r\n                decodedSizeDelta = blockSize;\r\n            var i, j, q;\r\n\r\n            var lzwState = this.lzwState;\r\n            if (!lzwState)\r\n                return; // eof was found\r\n\r\n            var earlyChange = lzwState.earlyChange;\r\n            var nextCode = lzwState.nextCode;\r\n            var dictionaryValues = lzwState.dictionaryValues;\r\n            var dictionaryLengths = lzwState.dictionaryLengths;\r\n            var dictionaryPrevCodes = lzwState.dictionaryPrevCodes;\r\n            var codeLength = lzwState.codeLength;\r\n            var prevCode = lzwState.prevCode;\r\n            var currentSequence = lzwState.currentSequence;\r\n            var currentSequenceLength = lzwState.currentSequenceLength;\r\n\r\n            var decodedLength = 0;\r\n            var currentBufferLength = this.bufferLength;\r\n            var buffer = this.ensureBuffer(this.bufferLength + estimatedDecodedSize);\r\n\r\n            for (i = 0; i < blockSize; i++) {\r\n                var code = this.readBits(codeLength);\r\n                var hasPrev = currentSequenceLength > 0;\r\n                if (code < 256) {\r\n                    currentSequence[0] = code;\r\n                    currentSequenceLength = 1;\r\n                } else if (code >= 258) {\r\n                    if (code < nextCode) {\r\n                        currentSequenceLength = dictionaryLengths[code];\r\n                        for (j = currentSequenceLength - 1, q = code; j >= 0; j--) {\r\n                            currentSequence[j] = dictionaryValues[q];\r\n                            q = dictionaryPrevCodes[q];\r\n                        }\r\n                    } else {\r\n                        currentSequence[currentSequenceLength++] = currentSequence[0];\r\n                    }\r\n                } else if (code == 256) {\r\n                    codeLength = 9;\r\n                    nextCode = 258;\r\n                    currentSequenceLength = 0;\r\n                    continue;\r\n                } else {\r\n                    this.eof = true;\r\n                    delete this.lzwState;\r\n                    break;\r\n                }\r\n\r\n                if (hasPrev) {\r\n                    dictionaryPrevCodes[nextCode] = prevCode;\r\n                    dictionaryLengths[nextCode] = dictionaryLengths[prevCode] + 1;\r\n                    dictionaryValues[nextCode] = currentSequence[0];\r\n                    nextCode++;\r\n                    codeLength = (nextCode + earlyChange) & (nextCode + earlyChange - 1) ?\r\n                        codeLength : Math.min(Math.log(nextCode + earlyChange) /\r\n                            0.6931471805599453 + 1, 12) | 0;\r\n                }\r\n                prevCode = code;\r\n\r\n                decodedLength += currentSequenceLength;\r\n                if (estimatedDecodedSize < decodedLength) {\r\n                    do {\r\n                        estimatedDecodedSize += decodedSizeDelta;\r\n                    } while (estimatedDecodedSize < decodedLength);\r\n                    buffer = this.ensureBuffer(this.bufferLength + estimatedDecodedSize);\r\n                }\r\n                for (j = 0; j < currentSequenceLength; j++)\r\n                    buffer[currentBufferLength++] = currentSequence[j];\r\n            }\r\n            lzwState.nextCode = nextCode;\r\n            lzwState.codeLength = codeLength;\r\n            lzwState.prevCode = prevCode;\r\n            lzwState.currentSequenceLength = currentSequenceLength;\r\n\r\n            this.bufferLength = currentBufferLength;\r\n        }\r\n    });\r\n\r\n    return streams.LZWStream = LZWStream;\r\n});\r\n\n\r\ndefine('skylark-io-streams/PredictorStream',[\r\n    \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\",\r\n    \"./streams\",\r\n    \"./DecodeStream\"\r\n], function(skylark, langx, streams, DecodeStream) {\r\n\r\n    var PredictorStream = DecodeStream.inherit({\r\n        klassName : \"PredictorStream\",\r\n\r\n        init : function(stream, params) {\r\n            var predictor = this.predictor = params.get('Predictor') || 1;\r\n\r\n            if (predictor <= 1)\r\n                return stream; // no prediction\r\n            if (predictor !== 2 && (predictor < 10 || predictor > 15))\r\n                error('Unsupported predictor: ' + predictor);\r\n\r\n            if (predictor === 2)\r\n                this.readBlock = this.readBlockTiff;\r\n            else\r\n                this.readBlock = this.readBlockPng;\r\n\r\n            this.stream = stream;\r\n            this.dict = stream.dict;\r\n\r\n            var colors = this.colors = params.get('Colors') || 1;\r\n            var bits = this.bits = params.get('BitsPerComponent') || 8;\r\n            var columns = this.columns = params.get('Columns') || 1;\r\n\r\n            this.pixBytes = (colors * bits + 7) >> 3;\r\n            this.rowBytes = (columns * colors * bits + 7) >> 3;\r\n            DecodeStream.prototype.init.call(this);          \r\n        },\r\n\r\n        readBlockTiff : function () {\r\n                var rowBytes = this.rowBytes;\r\n\r\n                var bufferLength = this.bufferLength;\r\n                var buffer = this.ensureBuffer(bufferLength + rowBytes);\r\n\r\n                var bits = this.bits;\r\n                var colors = this.colors;\r\n\r\n                var rawBytes = this.stream.getBytes(rowBytes);\r\n\r\n                var inbuf = 0,\r\n                    outbuf = 0;\r\n                var inbits = 0,\r\n                    outbits = 0;\r\n                var pos = bufferLength;\r\n\r\n                if (bits === 1) {\r\n                    for (var i = 0; i < rowBytes; ++i) {\r\n                        var c = rawBytes[i];\r\n                        inbuf = (inbuf << 8) | c;\r\n                        // bitwise addition is exclusive or\r\n                        // first shift inbuf and then add\r\n                        buffer[pos++] = (c ^ (inbuf >> colors)) & 0xFF;\r\n                        // truncate inbuf (assumes colors < 16)\r\n                        inbuf &= 0xFFFF;\r\n                    }\r\n                } else if (bits === 8) {\r\n                    for (var i = 0; i < colors; ++i)\r\n                        buffer[pos++] = rawBytes[i];\r\n                    for (; i < rowBytes; ++i) {\r\n                        buffer[pos] = buffer[pos - colors] + rawBytes[i];\r\n                        pos++;\r\n                    }\r\n                } else {\r\n                    var compArray = new Uint8Array(colors + 1);\r\n                    var bitMask = (1 << bits) - 1;\r\n                    var j = 0,\r\n                        k = bufferLength;\r\n                    var columns = this.columns;\r\n                    for (var i = 0; i < columns; ++i) {\r\n                        for (var kk = 0; kk < colors; ++kk) {\r\n                            if (inbits < bits) {\r\n                                inbuf = (inbuf << 8) | (rawBytes[j++] & 0xFF);\r\n                                inbits += 8;\r\n                            }\r\n                            compArray[kk] = (compArray[kk] +\r\n                                (inbuf >> (inbits - bits))) & bitMask;\r\n                            inbits -= bits;\r\n                            outbuf = (outbuf << bits) | compArray[kk];\r\n                            outbits += bits;\r\n                            if (outbits >= 8) {\r\n                                buffer[k++] = (outbuf >> (outbits - 8)) & 0xFF;\r\n                                outbits -= 8;\r\n                            }\r\n                        }\r\n                    }\r\n                    if (outbits > 0) {\r\n                        buffer[k++] = (outbuf << (8 - outbits)) +\r\n                            (inbuf & ((1 << (8 - outbits)) - 1));\r\n                    }\r\n                }\r\n                this.bufferLength += rowBytes;\r\n        },\r\n\r\n        readBlockPng : function() {\r\n\r\n                var rowBytes = this.rowBytes;\r\n                var pixBytes = this.pixBytes;\r\n\r\n                var predictor = this.stream.getByte();\r\n                var rawBytes = this.stream.getBytes(rowBytes);\r\n\r\n                var bufferLength = this.bufferLength;\r\n                var buffer = this.ensureBuffer(bufferLength + rowBytes);\r\n\r\n                var prevRow = buffer.subarray(bufferLength - rowBytes, bufferLength);\r\n                if (prevRow.length == 0)\r\n                    prevRow = new Uint8Array(rowBytes);\r\n\r\n                var j = bufferLength;\r\n                switch (predictor) {\r\n                    case 0:\r\n                        for (var i = 0; i < rowBytes; ++i)\r\n                            buffer[j++] = rawBytes[i];\r\n                        break;\r\n                    case 1:\r\n                        for (var i = 0; i < pixBytes; ++i)\r\n                            buffer[j++] = rawBytes[i];\r\n                        for (; i < rowBytes; ++i) {\r\n                            buffer[j] = (buffer[j - pixBytes] + rawBytes[i]) & 0xFF;\r\n                            j++;\r\n                        }\r\n                        break;\r\n                    case 2:\r\n                        for (var i = 0; i < rowBytes; ++i)\r\n                            buffer[j++] = (prevRow[i] + rawBytes[i]) & 0xFF;\r\n                        break;\r\n                    case 3:\r\n                        for (var i = 0; i < pixBytes; ++i)\r\n                            buffer[j++] = (prevRow[i] >> 1) + rawBytes[i];\r\n                        for (; i < rowBytes; ++i) {\r\n                            buffer[j] = (((prevRow[i] + buffer[j - pixBytes]) >> 1) +\r\n                                rawBytes[i]) & 0xFF;\r\n                            j++;\r\n                        }\r\n                        break;\r\n                    case 4:\r\n                        // we need to save the up left pixels values. the simplest way\r\n                        // is to create a new buffer\r\n                        for (var i = 0; i < pixBytes; ++i) {\r\n                            var up = prevRow[i];\r\n                            var c = rawBytes[i];\r\n                            buffer[j++] = up + c;\r\n                        }\r\n                        for (; i < rowBytes; ++i) {\r\n                            var up = prevRow[i];\r\n                            var upLeft = prevRow[i - pixBytes];\r\n                            var left = buffer[j - pixBytes];\r\n                            var p = left + up - upLeft;\r\n\r\n                            var pa = p - left;\r\n                            if (pa < 0)\r\n                                pa = -pa;\r\n                            var pb = p - up;\r\n                            if (pb < 0)\r\n                                pb = -pb;\r\n                            var pc = p - upLeft;\r\n                            if (pc < 0)\r\n                                pc = -pc;\r\n\r\n                            var c = rawBytes[i];\r\n                            if (pa <= pb && pa <= pc)\r\n                                buffer[j++] = left + c;\r\n                            else if (pb <= pc)\r\n                                buffer[j++] = up + c;\r\n                            else\r\n                                buffer[j++] = upLeft + c;\r\n                        }\r\n                        break;\r\n                    default:\r\n                        error('Unsupported predictor: ' + predictor);\r\n                }\r\n                this.bufferLength += rowBytes;\r\n        }\r\n    });\r\n\r\n    return streams.PredictorStream = PredictorStream;\r\n});\r\n\n\r\ndefine('skylark-io-streams/StreamsSequenceStream',[\r\n    \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\",\r\n    \"./streams\",\r\n    \"./DecodeStream\"\r\n], function(skylark, langx, streams, DecodeStream) {\r\n\r\n    var StreamsSequenceStream = DecodeStream.inherit({\r\n        klassName : \"StreamsSequenceStream\",\r\n\r\n        init : function(streams) {\r\n            this.dict = stream.dict;\r\n            DecodeStream.prototype.init.call(this);          \r\n        },\r\n\r\n        readBlock : function() {\r\n            var streams = this.streams;\r\n            if (streams.length == 0) {\r\n                this.eof = true;\r\n                return;\r\n            }\r\n            var stream = streams.shift();\r\n            var chunk = stream.getBytes();\r\n            var bufferLength = this.bufferLength;\r\n            var newLength = bufferLength + chunk.length;\r\n            var buffer = this.ensureBuffer(newLength);\r\n            buffer.set(chunk, bufferLength);\r\n            this.bufferLength = newLength;\r\n        }\r\n    });\r\n\r\n    return streams.StreamsSequenceStream = StreamsSequenceStream;\r\n});\r\n\ndefine('skylark-io-streams/StringStream',[\r\n    \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\",\r\n    \"./streams\",\r\n    \"./Stream\"\r\n], function(skylark, langx, streams, Stream) {\r\n\r\n    var StringStream = Stream.inherit({\r\n        klassName : \"StringStream\",\r\n\r\n        init : function(str) {\r\n            var length = str.length;\r\n            var bytes = new Uint8Array(length);\r\n            for (var n = 0; n < length; ++n)\r\n                bytes[n] = str.charCodeAt(n);\r\n            DecodeStream.prototype.init.call(this);          \r\n        }\r\n    });\r\n\r\n\r\n    return streams.StringStream = StringStream;\r\n\r\n});\r\n\ndefine('skylark-io-streams/main',[\r\n    \"./streams\",\r\n    \"./Ascii85Stream\",\r\n    \"./AsciiHexStream\",\r\n    \"./ChunkedStream\",\r\n    \"./DecodeStream\",\r\n    \"./DecryptStream\",\r\n    \"./FakeStream\",\r\n    \"./FlateStream\",\r\n    \"./LZWStream\",\r\n    \"./PredictorStream\",\r\n    \"./Stream\",\r\n    \"./StreamsSequenceStream\",\r\n    \"./StringStream\"\r\n], function(streams) {\r\n\r\n\treturn streams;\r\n});\ndefine('skylark-io-streams', ['skylark-io-streams/main'], function (main) { return main; });\n\n"]}