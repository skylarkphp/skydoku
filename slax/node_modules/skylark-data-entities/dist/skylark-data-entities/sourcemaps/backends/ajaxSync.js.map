{"version":3,"sources":["backends/ajaxSync.js"],"names":["define","langx","entities","methodMap","create","update","patch","delete","read","backends","ajaxSync","method","entity","options","type","defaults","emulateHTTP","emulateJSON","params","dataType","url","result","urlError","data","contentType","JSON","stringify","attrs","toJSON","_method","beforeSend","xhr","setRequestHeader","apply","this","arguments","processData","error","textStatus","errorThrown","call","context","Xhr","request","mixin","trigger"],"mappings":";;;;;;;AAAAA,QACC,sBACA,eACC,SAASC,EAAMC,GAEf,IAAIC,GACFC,OAAU,OACVC,OAAU,MACVC,MAAS,QACTC,OAAU,SACVC,KAAQ,OAkEV,OAAON,EAASO,SAASC,SA9Dd,SAASC,EAAQC,EAAQC,GAClC,IAAIC,EAAOX,EAAUQ,GAGrBV,EAAMc,SAASF,IAAYA,OACzBG,YAAad,EAASc,YACtBC,YAAaf,EAASe,cAIxB,IAAIC,GAAUJ,KAAMA,EAAMK,SAAU,QAqBpC,GAlBKN,EAAQO,MACXF,EAAOE,IAAMnB,EAAMoB,OAAOT,EAAQ,QAAUU,YAI1B,MAAhBT,EAAQU,OAAgBX,GAAsB,WAAXD,GAAkC,WAAXA,GAAkC,UAAXA,IACnFO,EAAOM,YAAc,mBACrBN,EAAOK,KAAOE,KAAKC,UAAUb,EAAQc,OAASf,EAAOgB,OAAOf,KAI1DA,EAAQI,cACVC,EAAOM,YAAc,oCACrBN,EAAOK,KAAOL,EAAOK,MAAQX,OAAQM,EAAOK,UAK1CV,EAAQG,cAAyB,QAATF,GAA2B,WAATA,GAA8B,UAATA,GAAmB,CACpFI,EAAOJ,KAAO,OACVD,EAAQI,cAAaC,EAAOK,KAAKM,QAAUf,GAC/C,IAAIgB,EAAajB,EAAQiB,WACzBjB,EAAQiB,WAAa,SAASC,GAE5B,GADAA,EAAIC,iBAAiB,yBAA0BlB,GAC3CgB,EAAY,OAAOA,EAAWG,MAAMC,KAAMC,YAK9B,QAAhBjB,EAAOJ,MAAmBD,EAAQI,cACpCC,EAAOkB,aAAc,GAIvB,IAAIC,EAAQxB,EAAQwB,MACpBxB,EAAQwB,MAAQ,SAASN,EAAKO,EAAYC,GACxC1B,EAAQyB,WAAaA,EACrBzB,EAAQ0B,YAAcA,EAClBF,GAAOA,EAAMG,KAAK3B,EAAQ4B,QAASV,EAAKO,EAAYC,IAI1D,IAAIR,EAAMlB,EAAQkB,IAAM9B,EAAMyC,IAAIC,QAAQ1C,EAAM2C,MAAM1B,EAAQL,IAE9D,OADAD,EAAOiC,QAAQ,UAAWjC,EAAQmB,EAAKlB,GAChCkB","file":"../../backends/ajaxSync.js","sourcesContent":["define([\r\n\t\"skylark-langx/langx\",\r\n\t\"../entities\"\r\n],function(langx,entities){\r\n// Map from CRUD to HTTP for our default `Backbone.sync` implementation.\r\n  var methodMap = {\r\n    'create': 'POST',\r\n    'update': 'PUT',\r\n    'patch': 'PATCH',\r\n    'delete': 'DELETE',\r\n    'read': 'GET'\r\n  };\r\n  \r\n\r\n  var sync = function(method, entity, options) {\r\n    var type = methodMap[method];\r\n\r\n    // Default options, unless specified.\r\n    langx.defaults(options || (options = {}), {\r\n      emulateHTTP: entities.emulateHTTP,\r\n      emulateJSON: entities.emulateJSON\r\n    });\r\n\r\n    // Default JSON-request options.\r\n    var params = {type: type, dataType: 'json'};\r\n\r\n    // Ensure that we have a URL.\r\n    if (!options.url) {\r\n      params.url = langx.result(entity, 'url') || urlError();\r\n    }\r\n\r\n    // Ensure that we have the appropriate request data.\r\n    if (options.data == null && entity && (method === 'create' || method === 'update' || method === 'patch')) {\r\n      params.contentType = 'application/json';\r\n      params.data = JSON.stringify(options.attrs || entity.toJSON(options));\r\n    }\r\n\r\n    // For older servers, emulate JSON by encoding the request into an HTML-form.\r\n    if (options.emulateJSON) {\r\n      params.contentType = 'application/x-www-form-urlencoded';\r\n      params.data = params.data ? {entity: params.data} : {};\r\n    }\r\n\r\n    // For older servers, emulate HTTP by mimicking the HTTP method with `_method`\r\n    // And an `X-HTTP-Method-Override` header.\r\n    if (options.emulateHTTP && (type === 'PUT' || type === 'DELETE' || type === 'PATCH')) {\r\n      params.type = 'POST';\r\n      if (options.emulateJSON) params.data._method = type;\r\n      var beforeSend = options.beforeSend;\r\n      options.beforeSend = function(xhr) {\r\n        xhr.setRequestHeader('X-HTTP-Method-Override', type);\r\n        if (beforeSend) return beforeSend.apply(this, arguments);\r\n      };\r\n    }\r\n\r\n    // Don't process data on a non-GET request.\r\n    if (params.type !== 'GET' && !options.emulateJSON) {\r\n      params.processData = false;\r\n    }\r\n\r\n    // Pass along `textStatus` and `errorThrown` from jQuery.\r\n    var error = options.error;\r\n    options.error = function(xhr, textStatus, errorThrown) {\r\n      options.textStatus = textStatus;\r\n      options.errorThrown = errorThrown;\r\n      if (error) error.call(options.context, xhr, textStatus, errorThrown);\r\n    };\r\n\r\n    // Make the request, allowing the user to override any Ajax options.\r\n    var xhr = options.xhr = langx.Xhr.request(langx.mixin(params, options));\r\n    entity.trigger('request', entity, xhr, options);\r\n    return xhr;\r\n  };\r\n\r\n \r\n  \r\n  return entities.backends.ajaxSync = sync;\r\n\r\n});"]}