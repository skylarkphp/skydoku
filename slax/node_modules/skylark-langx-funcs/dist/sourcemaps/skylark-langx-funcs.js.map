{"version":3,"sources":["skylark-langx-funcs.js"],"names":["define","skylark","types","objects","mixin","slice","Array","prototype","isFunction","isString","delegate","TMP","obj","props","tmp","templateSettings","evaluate","interpolate","escape","attach","debounce","fn","wait","timeout","context","this","args","arguments","clearTimeout","setTimeout","apply","defer","requestAnimationFrame","setTimeoutout","noop","proxy","call","concat","unshift","TypeError","returnTrue","returnFalse","template","text","settings","oldSettings","defaults","render","matcher","RegExp","noMatch","source","join","index","replace","match","offset","escapeRegExp","escapeChar","length","variable","Function","e","data","_","argument","funcs","main"],"mappings":";;;;;;;+zBAAAA,EAAA,6BACA,sBACA,sBACA,yBACA,SAAAC,EAAAC,EAAAC,GACA,IAAAC,EAAAD,EAAAC,MACAC,EAAAC,MAAAC,UAAAF,MACAG,EAAAN,EAAAM,WACAC,EAAAP,EAAAO,SA8CA,IAAAC,EAAA,WAEA,SAAAC,KACA,OAAA,SAAAC,EAAAC,GACAF,EAAAJ,UAAAK,EACA,IAAAE,EAAA,IAAAH,EAKA,OAJAA,EAAAJ,UAAA,KACAM,GACAT,EAAAU,EAAAD,GAEAC,GAVA,GAcAC,GACAC,SAAA,kBACAC,YAAA,mBACAC,OAAA,oBApBA,OAAAjB,EAAAkB,OAAA,eACAC,SAXA,SAAAC,EAAAC,GACA,IAAAC,EACA,OAAA,WACA,IAAAC,EAAAC,KAAAC,EAAAC,UAKAJ,GAAAK,aAAAL,GACAA,EAAAM,WALA,WACAN,EAAA,KACAF,EAAAS,MAAAN,EAAAE,IAGAJ,KAIAZ,SAAAA,EAEAqB,MA9CA,SAAAV,GACAW,sBACAA,sBAAAX,GAEAY,cAAAZ,GAEA,OAAAI,MA0CAS,KAvCA,aAyCAC,MAtCA,SAAAA,EAAAd,EAAAG,GACA,IAAAE,EAAA,KAAAC,WAAAtB,EAAA+B,KAAAT,UAAA,GACA,GAAAnB,EAAAa,GAAA,CAIA,OAHA,WACA,OAAAA,EAAAS,MAAAN,EAAAE,EAAAA,EAAAW,OAAAhC,EAAA+B,KAAAT,YAAAA,YAGA,GAAAlB,EAAAe,GACA,OAAAE,GACAA,EAAAY,QAAAjB,EAAAG,GAAAH,GACAc,EAAAL,MAAA,KAAAJ,IAEAS,EAAAd,EAAAG,GAAAH,GAGA,MAAA,IAAAkB,UAAA,sBAyBAC,WAAA,WACA,OAAA,GAGAC,YAAA,WACA,OAAA,GAGA1B,iBAAAA,EACA2B,SAIA,SAAAC,EAAAC,EAAAC,IACAD,GAAAC,IAAAD,EAAAC,GACAD,EAAAzC,EAAA2C,YAAAF,EAAA7B,GAGA,IAhDAgC,EAgDAC,EAAAC,SAhFAL,EAAA1B,QAAAgC,SAAAC,QACAP,EAAA3B,aAAAiC,SAAAC,QACAP,EAAA5B,UAAAkC,SAAAC,QACAC,KAAA,KAAA,KAAA,KAGAC,EAAA,EACAF,EAAA,SACAR,EAAAW,QAAAN,EAAA,SAAAO,EAAArC,EAAAD,EAAAD,EAAAwC,GAaA,OAZAL,GAAAR,EAAAtC,MAAAgD,EAAAG,GAAAF,QAAAG,aAAAC,YACAL,EAAAG,EAAAD,EAAAI,OAEAzC,EACAiC,GAAA,cAAAjC,EAAA,iCACAD,EACAkC,GAAA,cAAAlC,EAAA,uBACAD,IACAmC,GAAA,OAAAnC,EAAA,YAIAuC,IAEAJ,GAAA,OAGAP,EAAAgB,WAAAT,EAAA,mBAAAA,EAAA,OAEAA,EAAA,4FAEAA,EAAA,gBAGA,IACAJ,EAAA,IAAAc,SAAAjB,EAAAgB,UAAA,MAAA,IAAAT,GACA,MAAAW,GAEA,MADAA,EAAAX,OAAAA,EACAW,EAGA,IAAApB,EAAA,SAAAqB,GACA,OAAAhB,EAAAX,KAAAX,KAAAsC,EAAAC,IAIAC,EAAArB,EAAAgB,UAAA,MAGA,OAFAlB,EAAAS,OAAA,YAAAc,EAAA,OAAAd,EAAA,IAEAT,OA0BA1C,EAAA,4BACA,WACA,SAAAkE,GACA,OAAAA,IAEAlE,EAAA,uBAAA,4BAAA,SAAAmE,GAAA,OAAAA","file":"../skylark-langx-funcs.js","sourcesContent":["define('skylark-langx-funcs/funcs',[\r\n  \"skylark-langx-ns/ns\",\r\n  \"skylark-langx-types\",\r\n  \"skylark-langx-objects\"\r\n],function(skylark,types,objects){\r\n\tvar mixin = objects.mixin,\r\n        slice = Array.prototype.slice,\r\n        isFunction = types.isFunction,\r\n        isString = types.isString;\r\n\r\n    function defer(fn) {\r\n        if (requestAnimationFrame) {\r\n            requestAnimationFrame(fn);\r\n        } else {\r\n            setTimeoutout(fn);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    function noop() {\r\n    }\r\n\r\n    function proxy(fn, context) {\r\n        var args = (2 in arguments) && slice.call(arguments, 2)\r\n        if (isFunction(fn)) {\r\n            var proxyFn = function() {\r\n                return fn.apply(context, args ? args.concat(slice.call(arguments)) : arguments);\r\n            }\r\n            return proxyFn;\r\n        } else if (isString(context)) {\r\n            if (args) {\r\n                args.unshift(fn[context], fn)\r\n                return proxy.apply(null, args)\r\n            } else {\r\n                return proxy(fn[context], fn);\r\n            }\r\n        } else {\r\n            throw new TypeError(\"expected function\");\r\n        }\r\n    }\r\n\r\n    function debounce(fn, wait) {\r\n        var timeout;\r\n        return function () {\r\n            var context = this, args = arguments;\r\n            var later = function () {\r\n                timeout = null;\r\n                fn.apply(context, args);\r\n            };\r\n            if (timeout) clearTimeout(timeout);\r\n            timeout = setTimeout(later, wait);\r\n        };\r\n    }\r\n   \r\n    var delegate = (function() {\r\n        // boodman/crockford delegation w/ cornford optimization\r\n        function TMP() {}\r\n        return function(obj, props) {\r\n            TMP.prototype = obj;\r\n            var tmp = new TMP();\r\n            TMP.prototype = null;\r\n            if (props) {\r\n                mixin(tmp, props);\r\n            }\r\n            return tmp; // Object\r\n        };\r\n    })();\r\n\r\n  var templateSettings = {\r\n    evaluate: /<%([\\s\\S]+?)%>/g,\r\n    interpolate: /<%=([\\s\\S]+?)%>/g,\r\n    escape: /<%-([\\s\\S]+?)%>/g\r\n  };\r\n\r\n\r\n  function template(text, settings, oldSettings) {\r\n    if (!settings && oldSettings) settings = oldSettings;\r\n    settings = objects.defaults({}, settings,templateSettings);\r\n\r\n    // Combine delimiters into one regular expression via alternation.\r\n    var matcher = RegExp([\r\n      (settings.escape || noMatch).source,\r\n      (settings.interpolate || noMatch).source,\r\n      (settings.evaluate || noMatch).source\r\n    ].join('|') + '|$', 'g');\r\n\r\n    // Compile the template source, escaping string literals appropriately.\r\n    var index = 0;\r\n    var source = \"__p+='\";\r\n    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {\r\n      source += text.slice(index, offset).replace(escapeRegExp, escapeChar);\r\n      index = offset + match.length;\r\n\r\n      if (escape) {\r\n        source += \"'+\\n((__t=(\" + escape + \"))==null?'':_.escape(__t))+\\n'\";\r\n      } else if (interpolate) {\r\n        source += \"'+\\n((__t=(\" + interpolate + \"))==null?'':__t)+\\n'\";\r\n      } else if (evaluate) {\r\n        source += \"';\\n\" + evaluate + \"\\n__p+='\";\r\n      }\r\n\r\n      // Adobe VMs need the match returned to produce the correct offset.\r\n      return match;\r\n    });\r\n    source += \"';\\n\";\r\n\r\n    // If a variable is not specified, place data values in local scope.\r\n    if (!settings.variable) source = 'with(obj||{}){\\n' + source + '}\\n';\r\n\r\n    source = \"var __t,__p='',__j=Array.prototype.join,\" +\r\n      \"print=function(){__p+=__j.call(arguments,'');};\\n\" +\r\n      source + 'return __p;\\n';\r\n\r\n    var render;\r\n    try {\r\n      render = new Function(settings.variable || 'obj', '_', source);\r\n    } catch (e) {\r\n      e.source = source;\r\n      throw e;\r\n    }\r\n\r\n    var template = function(data) {\r\n      return render.call(this, data, _);\r\n    };\r\n\r\n    // Provide the compiled source as a convenience for precompilation.\r\n    var argument = settings.variable || 'obj';\r\n    template.source = 'function(' + argument + '){\\n' + source + '}';\r\n\r\n    return template;\r\n  };\r\n\r\n    return skylark.attach(\"langx.funcs\",{\r\n        debounce: debounce,\r\n\r\n        delegate: delegate,\r\n\r\n        defer: defer,\r\n\r\n        noop : noop,\r\n\r\n        proxy: proxy,\r\n\r\n        returnTrue: function() {\r\n            return true;\r\n        },\r\n\r\n        returnFalse: function() {\r\n            return false;\r\n        },\r\n\r\n        templateSettings : templateSettings,\r\n        template : template\r\n    });\r\n});\ndefine('skylark-langx-funcs/main',[\r\n\t\"./funcs\"\r\n],function(funcs){\r\n\treturn funcs;\r\n});\ndefine('skylark-langx-funcs', ['skylark-langx-funcs/main'], function (main) { return main; });\n\n"]}