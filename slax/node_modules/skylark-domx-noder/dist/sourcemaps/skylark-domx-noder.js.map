{"version":3,"sources":["skylark-domx-noder.js"],"names":["define","skylark","langx","browser","isIE","navigator","userAgent","match","fragmentRE","singleTagRE","div","document","createElement","table","tableBody","tableRow","containers","tr","tbody","thead","tfoot","td","th","*","rootNodeRE","map","Array","prototype","slice","ensureNodes","nodes","copyByClone","isArrayLike","call","node","cloneNode","flatten","nodeName","elm","chkName","name","toLowerCase","undefined","enhancePlaceContent","placing","isFunction","apply","neddsFlattern","i","length","append","parentNode","appendChild","this","tag","props","parent","test","createElementNS","setAttribute","rxhtmlTag","isChildOf","directly","documentElement","contains","ownerDoc","nodeType","ownerDocument","noder","mixin","active","doc","el","activeElement","error","body","after","refNode","nextSibling","insertBefore","before","blur","clone","deep","self","each","getAttribs","attr","setAttrib","getAttrib","child","contents","contentDocument","childNodes","createFragment","html","trim","RegExp","$1","container","innerHTML","xml","split","newXml","edsplit","removeSelfClosingTags","dom","forEach","removeChild","createTextNode","text","empty","hasChildNodes","firstChild","fullScreen","exitFullScreen","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","requestFullScreen","focusable","element","hasTabindex","mapName","img","focusableIfVisible","fieldset","href","$","is","disabled","closest","visible","isString","replace","isNumber","isActive","elem","type","isDocument","DOCUMENT_NODE","isInDocument","isWindow","offsetParent","defaultView","getComputedStyle","position","ownerWindow","parentWindow","prepend","reflow","offsetHeight","remove","e","console","warn","children","oldNode","replaceChild","selectable","style","onselectstart","MozUserSelect","KhtmlUserSelect","unselectable","traverse","fn","len","reverse","wrapper","wrapperNode","wrapperInner","unwrap","isDoc","attach","main"],"mappings":"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","file":"../skylark-domx-noder.js","sourcesContent":["define('skylark-domx-noder/noder',[\r\n    \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-browser\"\r\n], function(skylark, langx, browser) {\r\n    var isIE = !!navigator.userAgent.match(/Trident/g) || !!navigator.userAgent.match(/MSIE/g),\r\n        fragmentRE = /^\\s*<(\\w+|!)[^>]*>/,\r\n        singleTagRE = /^<(\\w+)\\s*\\/?>(?:<\\/\\1>|)$/,\r\n        div = document.createElement(\"div\"),\r\n        table = document.createElement('table'),\r\n        tableBody = document.createElement('tbody'),\r\n        tableRow = document.createElement('tr'),\r\n        containers = {\r\n            'tr': tableBody,\r\n            'tbody': table,\r\n            'thead': table,\r\n            'tfoot': table,\r\n            'td': tableRow,\r\n            'th': tableRow,\r\n            '*': div\r\n        },\r\n        rootNodeRE = /^(?:body|html)$/i,\r\n        map = Array.prototype.map,\r\n        slice = Array.prototype.slice;\r\n\r\n    function ensureNodes(nodes, copyByClone) {\r\n        if (!langx.isArrayLike(nodes)) {\r\n            nodes = [nodes];\r\n        }\r\n        if (copyByClone) {\r\n            nodes = map.call(nodes, function(node) {\r\n                return node.cloneNode(true);\r\n            });\r\n        }\r\n        return langx.flatten(nodes);\r\n    }\r\n\r\n    function nodeName(elm, chkName) {\r\n        var name = elm.nodeName && elm.nodeName.toLowerCase();\r\n        if (chkName !== undefined) {\r\n            return name === chkName.toLowerCase();\r\n        }\r\n        return name;\r\n    };\r\n\r\n\r\n    function activeElement(doc) {\r\n        doc = doc || document;\r\n        var el;\r\n\r\n        // Support: IE 9 only\r\n        // IE9 throws an \"Unspecified error\" accessing document.activeElement from an <iframe>\r\n        try {\r\n            el = doc.activeElement;\r\n        } catch ( error ) {\r\n            el = doc.body;\r\n        }\r\n\r\n        // Support: IE 9 - 11 only\r\n        // IE may return null instead of an element\r\n        // Interestingly, this only seems to occur when NOT in an iframe\r\n        if ( !el ) {\r\n            el = doc.body;\r\n        }\r\n\r\n        // Support: IE 11 only\r\n        // IE11 returns a seemingly empty object in some cases when accessing\r\n        // document.activeElement from an <iframe>\r\n        if ( !el.nodeName ) {\r\n            el = doc.body;\r\n        }\r\n\r\n        return el;\r\n    };\r\n\r\n    function enhancePlaceContent(placing,node) {\r\n        if (langx.isFunction(placing)) {\r\n            return placing.apply(node,[]);\r\n        }\r\n        if (langx.isArrayLike(placing)) {\r\n            var neddsFlattern;\r\n            for (var i=0;i<placing.length;i++) {\r\n                if (langx.isFunction(placing[i])) {\r\n                    placing[i] = placing[i].apply(node,[]);\r\n                    if (langx.isArrayLike(placing[i])) {\r\n                        neddsFlattern = true;\r\n                    }\r\n                }\r\n            }\r\n            if (neddsFlattern) {\r\n                placing = langx.flatten(placing);\r\n            }\r\n        }\r\n        return placing;\r\n    }\r\n    function after(node, placing, copyByClone) {\r\n        placing = enhancePlaceContent(placing,node);\r\n        var refNode = node,\r\n            parent = refNode.parentNode;\r\n        if (parent) {\r\n            var nodes = ensureNodes(placing, copyByClone),\r\n                refNode = refNode.nextSibling;\r\n\r\n            for (var i = 0; i < nodes.length; i++) {\r\n                if (refNode) {\r\n                    parent.insertBefore(nodes[i], refNode);\r\n                } else {\r\n                    parent.appendChild(nodes[i]);\r\n                }\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    function append(node, placing, copyByClone) {\r\n        placing = enhancePlaceContent(placing,node);\r\n        var parentNode = node,\r\n            nodes = ensureNodes(placing, copyByClone);\r\n        for (var i = 0; i < nodes.length; i++) {\r\n            parentNode.appendChild(nodes[i]);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    function before(node, placing, copyByClone) {\r\n        placing = enhancePlaceContent(placing,node);\r\n        var refNode = node,\r\n            parent = refNode.parentNode;\r\n        if (parent) {\r\n            var nodes = ensureNodes(placing, copyByClone);\r\n            for (var i = 0; i < nodes.length; i++) {\r\n                parent.insertBefore(nodes[i], refNode);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    /*   \r\n     * Get the children of the specified node, including text and comment nodes.\r\n     * @param {HTMLElement} elm\r\n     */\r\n    function contents(elm) {\r\n        if (nodeName(elm, \"iframe\")) {\r\n            return elm.contentDocument;\r\n        }\r\n        return elm.childNodes;\r\n    }\r\n\r\n    /*   \r\n     * Create a element and set attributes on it.\r\n     * @param {HTMLElement} tag\r\n     * @param {props} props\r\n     * @param } parent\r\n     */\r\n    function createElement(tag, props, parent) {\r\n        var node;\r\n\r\n        if (/svg/i.test(tag)) {\r\n            node = document.createElementNS(\"http://www.w3.org/2000/svg\", tag)\r\n        } else {\r\n            node = document.createElement(tag);\r\n        }\r\n\r\n        if (props) {\r\n            for (var name in props) {\r\n                node.setAttribute(name, props[name]);\r\n            }\r\n        }\r\n        if (parent) {\r\n            append(parent, node);\r\n        }\r\n        return node;\r\n    }\r\n\r\nfunction removeSelfClosingTags(xml) {\r\n    var split = xml.split(\"/>\");\r\n    var newXml = \"\";\r\n    for (var i = 0; i < split.length - 1;i++) {\r\n        var edsplit = split[i].split(\"<\");\r\n        newXml += split[i] + \"></\" + edsplit[edsplit.length - 1].split(\" \")[0] + \">\";\r\n    }\r\n    return newXml + split[split.length-1];\r\n}\r\n\r\n    /*   \r\n     * Create a DocumentFragment from the HTML fragment.\r\n     * @param {String} html\r\n     */\r\n    function createFragment(html) {\r\n        // A special case optimization for a single tag\r\n        html = langx.trim(html);\r\n        if (singleTagRE.test(html)) {\r\n            return [createElement(RegExp.$1)];\r\n        }\r\n\r\n        var name = fragmentRE.test(html) && RegExp.$1\r\n        if (!(name in containers)) {\r\n            name = \"*\"\r\n        }\r\n        var container = containers[name];\r\n        container.innerHTML = removeSelfClosingTags(\"\" + html);\r\n        dom = slice.call(container.childNodes);\r\n\r\n        dom.forEach(function(node) {\r\n            container.removeChild(node);\r\n        })\r\n\r\n        return dom;\r\n    }\r\n\r\n    /*   \r\n     * Create a deep copy of the set of matched elements.\r\n     * @param {HTMLElement} node\r\n     * @param {Boolean} deep\r\n     */\r\n    function clone(node, deep) {\r\n        var self = this,\r\n            clone;\r\n\r\n        // TODO: Add feature detection here in the future\r\n        if (!isIE || node.nodeType !== 1 || deep) {\r\n            return node.cloneNode(deep);\r\n        }\r\n\r\n        // Make a HTML5 safe shallow copy\r\n        if (!deep) {\r\n            clone = document.createElement(node.nodeName);\r\n\r\n            // Copy attribs\r\n            each(self.getAttribs(node), function(attr) {\r\n                self.setAttrib(clone, attr.nodeName, self.getAttrib(node, attr.nodeName));\r\n            });\r\n\r\n            return clone;\r\n        }\r\n    }\r\n\r\n    /*   \r\n     * Check to see if a dom node is a descendant of another dom node .\r\n     * @param {String} node\r\n     * @param {Node} child\r\n     */\r\n    function contains(node, child) {\r\n        return isChildOf(child, node);\r\n    }\r\n\r\n    /*   \r\n     * Create a new Text node.\r\n     * @param {String} text\r\n     * @param {Node} child\r\n     */\r\n    function createTextNode(text) {\r\n        return document.createTextNode(text);\r\n    }\r\n\r\n    /*   \r\n     * Get the current document object.\r\n     */\r\n    function doc() {\r\n        return document;\r\n    }\r\n\r\n    /*   \r\n     * Remove all child nodes of the set of matched elements from the DOM.\r\n     * @param {Object} node\r\n     */\r\n    function empty(node) {\r\n        while (node.hasChildNodes()) {\r\n            var child = node.firstChild;\r\n            node.removeChild(child);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    var fulledEl = null;\r\n\r\n    function fullScreen(el) {\r\n        if (el === false) {\r\n            browser.exitFullScreen.apply(document);\r\n        } else if (el) {\r\n            browser.requestFullScreen.apply(el);\r\n            fulledEl = el;\r\n        } else {\r\n            return (\r\n                document.fullscreenElement ||\r\n                document.webkitFullscreenElement ||\r\n                document.mozFullScreenElement ||\r\n                document.msFullscreenElement\r\n            )\r\n        }\r\n    }\r\n\r\n\r\n    // Selectors\r\n    function focusable( element, hasTabindex ) {\r\n        var map, mapName, img, focusableIfVisible, fieldset,\r\n            nodeName = element.nodeName.toLowerCase();\r\n\r\n        if ( \"area\" === nodeName ) {\r\n            map = element.parentNode;\r\n            mapName = map.name;\r\n            if ( !element.href || !mapName || map.nodeName.toLowerCase() !== \"map\" ) {\r\n                return false;\r\n            }\r\n            img = $( \"img[usemap='#\" + mapName + \"']\" );\r\n            return img.length > 0 && img.is( \":visible\" );\r\n        }\r\n\r\n        if ( /^(input|select|textarea|button|object)$/.test( nodeName ) ) {\r\n            focusableIfVisible = !element.disabled;\r\n\r\n            if ( focusableIfVisible ) {\r\n\r\n                // Form controls within a disabled fieldset are disabled.\r\n                // However, controls within the fieldset's legend do not get disabled.\r\n                // Since controls generally aren't placed inside legends, we skip\r\n                // this portion of the check.\r\n                fieldset = $( element ).closest( \"fieldset\" )[ 0 ];\r\n                if ( fieldset ) {\r\n                    focusableIfVisible = !fieldset.disabled;\r\n                }\r\n            }\r\n        } else if ( \"a\" === nodeName ) {\r\n            focusableIfVisible = element.href || hasTabindex;\r\n        } else {\r\n            focusableIfVisible = hasTabindex;\r\n        }\r\n\r\n        return focusableIfVisible && $( element ).is( \":visible\" ) && visible( $( element ) );\r\n    };\r\n\r\n\r\n   var rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\\w:]+)[^>]*)\\/>/gi;\r\n \r\n    /*   \r\n     * Get the HTML contents of the first element in the set of matched elements.\r\n     * @param {HTMLElement} node\r\n     * @param {String} html\r\n     */\r\n    function html(node, html) {\r\n        if (html === undefined) {\r\n            return node.innerHTML;\r\n        } else {\r\n            this.empty(node);\r\n            html = html || \"\";\r\n            if (langx.isString(html)) {\r\n                html = html.replace( rxhtmlTag, \"<$1></$2>\" );\r\n            }\r\n            if (langx.isString(html) || langx.isNumber(html)) {               \r\n                node.innerHTML = html;\r\n            } else if (langx.isArrayLike(html)) {\r\n                for (var i = 0; i < html.length; i++) {\r\n                    node.appendChild(html[i]);\r\n                }\r\n            } else {\r\n                node.appendChild(html);\r\n            }\r\n\r\n            return this;\r\n        }\r\n    }\r\n\r\n\r\n    /*   \r\n     * Check to see if a dom node is a descendant of another dom node.\r\n     * @param {Node} node\r\n     * @param {Node} parent\r\n     * @param {Node} directly\r\n     */\r\n    function isChildOf(node, parent, directly) {\r\n        if (directly) {\r\n            return node.parentNode === parent;\r\n        }\r\n        if (document.documentElement.contains) {\r\n            return parent.contains(node);\r\n        }\r\n        while (node) {\r\n            if (parent === node) {\r\n                return true;\r\n            }\r\n\r\n            node = node.parentNode;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /*   \r\n     * Check to see if a dom node is a document.\r\n     * @param {Node} node\r\n     */\r\n    function isDocument(node) {\r\n        return node != null && node.nodeType == node.DOCUMENT_NODE\r\n    }\r\n\r\n    /*   \r\n     * Check to see if a dom node is in the document\r\n     * @param {Node} node\r\n     */\r\n    function isInDocument(node) {\r\n      return (node === document.body) ? true : document.body.contains(node);\r\n    }        \r\n\r\n    var blockNodes = [\"div\", \"p\", \"ul\", \"ol\", \"li\", \"blockquote\", \"hr\", \"pre\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"table\"];\r\n\r\n    function isBlockNode(node) {\r\n        if (!node || node.nodeType === 3) {\r\n          return false;\r\n        }\r\n        return new RegExp(\"^(\" + (blockNodes.join('|')) + \")$\").test(node.nodeName.toLowerCase());\r\n    }\r\n\r\n    function isActive (elem) {\r\n            return elem === document.activeElement && (elem.type || elem.href);\r\n    }\r\n\r\n    /*   \r\n     * Get the owner document object for the specified element.\r\n     * @param {Node} elm\r\n     */\r\n    function ownerDoc(elm) {\r\n        if (!elm) {\r\n            return document;\r\n        }\r\n\r\n        if (elm.nodeType == 9) {\r\n            return elm;\r\n        }\r\n\r\n        return elm.ownerDocument;\r\n    }\r\n\r\n    /*   \r\n     *\r\n     * @param {Node} elm\r\n     */\r\n    function ownerWindow(elm) {\r\n        var doc = ownerDoc(elm);\r\n        return doc.defaultView || doc.parentWindow;\r\n    }\r\n\r\n    /*   \r\n     * insert one or more nodes as the first children of the specified node.\r\n     * @param {Node} node\r\n     * @param {Node or ArrayLike} placing\r\n     * @param {Boolean Optional} copyByClone\r\n     */\r\n    function prepend(node, placing, copyByClone) {\r\n        var parentNode = node,\r\n            refNode = parentNode.firstChild,\r\n            nodes = ensureNodes(placing, copyByClone);\r\n        for (var i = 0; i < nodes.length; i++) {\r\n            if (refNode) {\r\n                parentNode.insertBefore(nodes[i], refNode);\r\n            } else {\r\n                parentNode.appendChild(nodes[i]);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /*   \r\n     *\r\n     * @param {Node} elm\r\n     */\r\n    function offsetParent(elm) {\r\n        var parent = elm.offsetParent || document.body;\r\n        while (parent && !rootNodeRE.test(parent.nodeName) && document.defaultView.getComputedStyle(parent).position == \"static\") {\r\n            parent = parent.offsetParent;\r\n        }\r\n        return parent;\r\n    }\r\n\r\n    /*   \r\n     * Remove the set of matched elements from the DOM.\r\n     * @param {Node} node\r\n     */\r\n    function remove(node) {\r\n        if (node && node.parentNode) {\r\n            try {\r\n                node.parentNode.removeChild(node);\r\n            } catch (e) {\r\n                console.warn(\"The node is already removed\", e);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    function removeChild(node,children) {\r\n        if (!langx.isArrayLike(children)) {\r\n            children = [children];\r\n        }\r\n        for (var i=0;i<children.length;i++) {\r\n            node.removeChild(children[i]);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    function scrollParent( elm, includeHidden ) {\r\n        var position = document.defaultView.getComputedStyle(elm).position,\r\n            excludeStaticParent = position === \"absolute\",\r\n            overflowRegex = includeHidden ? /(auto|scroll|hidden)/ : /(auto|scroll)/,\r\n            scrollParent = this.parents().filter( function() {\r\n                var parent = $( this );\r\n                if ( excludeStaticParent && parent.css( \"position\" ) === \"static\" ) {\r\n                    return false;\r\n                }\r\n                return overflowRegex.test( parent.css( \"overflow\" ) + parent.css( \"overflow-y\" ) +\r\n                    parent.css( \"overflow-x\" ) );\r\n            } ).eq( 0 );\r\n\r\n        return position === \"fixed\" || !scrollParent.length ?\r\n            $( this[ 0 ].ownerDocument || document ) :\r\n            scrollParent;\r\n    };\r\n\r\n\r\n    function reflow(elm) {\r\n        if (el == null) {\r\n          elm = document;\r\n        }\r\n        elm.offsetHeight;\r\n\r\n        return this;      \r\n    }\r\n\r\n    /*   \r\n     * Replace an old node with the specified node.\r\n     * @param {Node} node\r\n     * @param {Node} oldNode\r\n     */\r\n    function replace(node, oldNode) {\r\n        oldNode.parentNode.replaceChild(node, oldNode);\r\n        return this;\r\n    }\r\n\r\n\r\n    function selectable(elem, selectable) {\r\n        if (elem === undefined || elem.style === undefined)\r\n            return;\r\n        elem.onselectstart = selectable ? function () {\r\n            return false;\r\n        } : function () {\r\n        };\r\n        elem.style.MozUserSelect = selectable ? 'auto' : 'none';\r\n        elem.style.KhtmlUserSelect = selectable ? 'auto' : 'none';\r\n        elem.unselectable = selectable ? 'on' : 'off';\r\n    }\r\n\r\n    /*   \r\n     * traverse the specified node and its descendants, perform the callback function on each\r\n     * @param {Node} node\r\n     * @param {Function} fn\r\n     */\r\n    function traverse(node, fn) {\r\n        fn(node)\r\n        for (var i = 0, len = node.childNodes.length; i < len; i++) {\r\n            traverse(node.childNodes[i], fn);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /*   \r\n     *\r\n     * @param {Node} node\r\n     */\r\n    function reverse(node) {\r\n        var firstChild = node.firstChild;\r\n        for (var i = node.children.length - 1; i > 0; i--) {\r\n            if (i > 0) {\r\n                var child = node.children[i];\r\n                node.insertBefore(child, firstChild);\r\n            }\r\n        }\r\n    }\r\n\r\n    /*   \r\n     * Wrap an HTML structure around each element in the set of matched elements.\r\n     * @param {Node} node\r\n     * @param {Node} wrapperNode\r\n     */\r\n    function wrapper(node, wrapperNode) {\r\n        if (langx.isString(wrapperNode)) {\r\n            wrapperNode = this.createFragment(wrapperNode).firstChild;\r\n        }\r\n        node.parentNode.insertBefore(wrapperNode, node);\r\n        wrapperNode.appendChild(node);\r\n    }\r\n\r\n    /*   \r\n     * Wrap an HTML structure around the content of each element in the set of matched\r\n     * @param {Node} node\r\n     * @param {Node} wrapperNode\r\n     */\r\n    function wrapperInner(node, wrapperNode) {\r\n        var childNodes = slice.call(node.childNodes);\r\n        node.appendChild(wrapperNode);\r\n        for (var i = 0; i < childNodes.length; i++) {\r\n            wrapperNode.appendChild(childNodes[i]);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /*   \r\n     * Remove the parents of the set of matched elements from the DOM, leaving the matched\r\n     * @param {Node} node\r\n     */\r\n    function unwrap(node) {\r\n        var child, parent = node.parentNode;\r\n        if (parent) {\r\n            if (this.isDoc(parent.parentNode)) return;\r\n            parent.parentNode.insertBefore(node, parent);\r\n        }\r\n    }\r\n\r\n    function noder() {\r\n        return noder;\r\n    }\r\n\r\n    langx.mixin(noder, {\r\n        active  : activeElement,\r\n\r\n        after: after,\r\n\r\n        append: append,\r\n\r\n        before: before,\r\n\r\n        blur : function(el) {\r\n            el.blur();\r\n        },\r\n\r\n        body: function() {\r\n            return document.body;\r\n        },\r\n\r\n        clone: clone,\r\n\r\n        contains: contains,\r\n\r\n        contents: contents,\r\n\r\n        createElement: createElement,\r\n\r\n        createFragment: createFragment,\r\n\r\n     \r\n        createTextNode: createTextNode,\r\n\r\n        doc: doc,\r\n\r\n        empty: empty,\r\n\r\n        fullScreen: fullScreen,\r\n\r\n        focusable: focusable,\r\n\r\n        html: html,\r\n\r\n        isActive,\r\n\r\n        isChildOf: isChildOf,\r\n\r\n        isDocument: isDocument,\r\n\r\n        isInDocument: isInDocument,\r\n\r\n        isWindow: langx.isWindow,\r\n\r\n        nodeName : nodeName,\r\n\r\n        offsetParent: offsetParent,\r\n\r\n        ownerDoc: ownerDoc,\r\n\r\n        ownerWindow: ownerWindow,\r\n\r\n        prepend: prepend,\r\n\r\n        reflow: reflow,\r\n\r\n        remove: remove,\r\n\r\n        removeChild : removeChild,\r\n\r\n        replace: replace,\r\n\r\n        selectable,\r\n\r\n        traverse: traverse,\r\n\r\n        reverse: reverse,\r\n\r\n        wrapper: wrapper,\r\n\r\n        wrapperInner: wrapperInner,\r\n\r\n        unwrap: unwrap\r\n    });\r\n\r\n    return skylark.attach(\"domx.noder\" , noder);\r\n});\ndefine('skylark-domx-noder/main',[\r\n\t\"./noder\"\r\n],function(noder){\r\n\treturn noder;\r\n});\ndefine('skylark-domx-noder', ['skylark-domx-noder/main'], function (main) { return main; });\n\n"]}