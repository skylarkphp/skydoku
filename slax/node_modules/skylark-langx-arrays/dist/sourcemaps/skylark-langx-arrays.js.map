{"version":3,"sources":["skylark-langx-arrays.js"],"names":["define","skylark","types","objects","filter","Array","prototype","find","isArrayLike","baseFindIndex","array","predicate","fromIndex","fromRight","length","index","baseIsNaN","value","flatten","result","i","item","j","push","attach","baseIndexOf","compact","call","first","items","n","slice","func","grep","callback","out","each","inArray","indexOf","makeArray","obj","offset","startWith","concat","merge","second","l","undefined","forEach","arr","fn","map","elements","key","values","reduce","initialValue","uniq","idx","arrays","main"],"mappings":"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","file":"../skylark-langx-arrays.js","sourcesContent":["define('skylark-langx-arrays/arrays',[\r\n  \"skylark-langx-ns/ns\",\r\n  \"skylark-langx-types\",\r\n  \"skylark-langx-objects\"\r\n],function(skylark,types,objects){\r\n  var filter = Array.prototype.filter,\r\n      find = Array.prototype.find,\r\n    isArrayLike = types.isArrayLike;\r\n\r\n    /**\r\n     * The base implementation of `_.findIndex` and `_.findLastIndex` without\r\n     * support for iteratee shorthands.\r\n     *\r\n     * @param {Array} array The array to inspect.\r\n     * @param {Function} predicate The function invoked per iteration.\r\n     * @param {number} fromIndex The index to search from.\r\n     * @param {boolean} [fromRight] Specify iterating from right to left.\r\n     * @returns {number} Returns the index of the matched value, else `-1`.\r\n     */\r\n    function baseFindIndex(array, predicate, fromIndex, fromRight) {\r\n      var length = array.length,\r\n          index = fromIndex + (fromRight ? 1 : -1);\r\n\r\n      while ((fromRight ? index-- : ++index < length)) {\r\n        if (predicate(array[index], index, array)) {\r\n          return index;\r\n        }\r\n      }\r\n      return -1;\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.indexOf` without `fromIndex` bounds checks.\r\n     *\r\n     * @param {Array} array The array to inspect.\r\n     * @param {*} value The value to search for.\r\n     * @param {number} fromIndex The index to search from.\r\n     * @returns {number} Returns the index of the matched value, else `-1`.\r\n     */\r\n    function baseIndexOf(array, value, fromIndex) {\r\n      if (value !== value) {\r\n        return baseFindIndex(array, baseIsNaN, fromIndex);\r\n      }\r\n      var index = fromIndex - 1,\r\n          length = array.length;\r\n\r\n      while (++index < length) {\r\n        if (array[index] === value) {\r\n          return index;\r\n        }\r\n      }\r\n      return -1;\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `isNaN` without support for number objects.\r\n     *\r\n     * @private\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\r\n     */\r\n    function baseIsNaN(value) {\r\n      return value !== value;\r\n    }\r\n\r\n\r\n    function compact(array) {\r\n        return filter.call(array, function(item) {\r\n            return item != null;\r\n        });\r\n    }\r\n\r\n    function filter2(array,func) {\r\n      return filter.call(array,func);\r\n    }\r\n\r\n    function flatten(array) {\r\n        if (isArrayLike(array)) {\r\n            var result = [];\r\n            for (var i = 0; i < array.length; i++) {\r\n                var item = array[i];\r\n                if (isArrayLike(item)) {\r\n                    for (var j = 0; j < item.length; j++) {\r\n                        result.push(item[j]);\r\n                    }\r\n                } else {\r\n                    result.push(item);\r\n                }\r\n            }\r\n            return result;\r\n        } else {\r\n            return array;\r\n        }\r\n        //return array.length > 0 ? concat.apply([], array) : array;\r\n    }\r\n\r\n    function grep(array, callback) {\r\n        var out = [];\r\n\r\n        objects.each(array, function(i, item) {\r\n            if (callback(item, i)) {\r\n                out.push(item);\r\n            }\r\n        });\r\n\r\n        return out;\r\n    }\r\n\r\n    function inArray(item, array) {\r\n        if (!array) {\r\n            return -1;\r\n        }\r\n        var i;\r\n\r\n        if (array.indexOf) {\r\n            return array.indexOf(item);\r\n        }\r\n\r\n        i = array.length;\r\n        while (i--) {\r\n            if (array[i] === item) {\r\n                return i;\r\n            }\r\n        }\r\n\r\n        return -1;\r\n    }\r\n\r\n    function makeArray(obj, offset, startWith) {\r\n       if (isArrayLike(obj) ) {\r\n        return (startWith || []).concat(Array.prototype.slice.call(obj, offset || 0));\r\n      }\r\n\r\n      // array of single index\r\n      return [ obj ];             \r\n    }\r\n\r\n\r\n    function forEach (arr, fn) {\r\n      if (arr.forEach) return arr.forEach(fn)\r\n      for (var i = 0; i < arr.length; i++) fn(arr[i], i);\r\n    }\r\n\r\n    function map(elements, callback) {\r\n        var value, values = [],\r\n            i, key\r\n        if (isArrayLike(elements))\r\n            for (i = 0; i < elements.length; i++) {\r\n                value = callback.call(elements[i], elements[i], i);\r\n                if (value != null) values.push(value)\r\n            }\r\n        else\r\n            for (key in elements) {\r\n                value = callback.call(elements[key], elements[key], key);\r\n                if (value != null) values.push(value)\r\n            }\r\n        return flatten(values)\r\n    }\r\n\r\n\r\n    function merge( first, second ) {\r\n      var l = second.length,\r\n          i = first.length,\r\n          j = 0;\r\n\r\n      if ( typeof l === \"number\" ) {\r\n        for ( ; j < l; j++ ) {\r\n          first[ i++ ] = second[ j ];\r\n        }\r\n      } else {\r\n        while ( second[j] !== undefined ) {\r\n          first[ i++ ] = second[ j++ ];\r\n        }\r\n      }\r\n\r\n      first.length = i;\r\n\r\n      return first;\r\n    }\r\n\r\n    function reduce(array,callback,initialValue) {\r\n        return Array.prototype.reduce.call(array,callback,initialValue);\r\n    }\r\n\r\n    function uniq(array) {\r\n        return filter.call(array, function(item, idx) {\r\n            return array.indexOf(item) == idx;\r\n        })\r\n    }\r\n\r\n    function find2(array,func) {\r\n      return find.call(array,func);\r\n    }\r\n\r\n    return skylark.attach(\"langx.arrays\",{\r\n        baseFindIndex: baseFindIndex,\r\n\r\n        baseIndexOf : baseIndexOf,\r\n        \r\n        compact: compact,\r\n\r\n        first : function(items,n) {\r\n            if (n) {\r\n                return items.slice(0,n);\r\n            } else {\r\n                return items[0];\r\n            }\r\n        },\r\n\r\n        filter : filter2,\r\n\r\n        find : find2,\r\n        \r\n        flatten: flatten,\r\n\r\n        grep: grep,\r\n\r\n        inArray: inArray,\r\n\r\n        makeArray: makeArray,\r\n\r\n        merge : merge,\r\n\r\n        forEach : forEach,\r\n\r\n        map : map,\r\n        \r\n        reduce : reduce,\r\n\r\n        uniq : uniq\r\n\r\n    });\r\n});\ndefine('skylark-langx-arrays/main',[\r\n\t\"./arrays\"\r\n],function(arrays){\r\n\treturn arrays;\r\n});\ndefine('skylark-langx-arrays', ['skylark-langx-arrays/main'], function (main) { return main; });\n\n"]}