{"version":3,"sources":["data.js"],"names":["define","skylark","langx","finder","noder","map","Array","prototype","camelCase","filter","deserializeValue","capitalRE","propMap","tabindex","readonly","for","class","maxlength","cellspacing","cellpadding","rowspan","colspan","usemap","frameborder","contenteditable","valHooks","option","get","elem","val","getAttribute","text","match","join","select","value","i","options","index","selectedIndex","one","type","values","max","length","selected","disabled","parentNode","nodeName","push","set","optionSet","makeArray","inArray","attr","elm","name","undefined","setAttribute","this","attrName","hasAttribute","_store","confirm","store","each","attributes","indexOf","replace","_attributeData","_setData","data","dataAttrName","camelName","toLowerCase","_getData","cleanData","txt","textContent","hooks","ret","isArray","value1","datax","checked","pseudos","dataName","mixin","aria","pluck","nodes","property","call","prop","removeAttr","split","forEach","removeAttribute","removeData","names","isString","removeProp","attach"],"mappings":"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","file":"../data.js","sourcesContent":["define([\r\n    \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-finder\",\r\n    \"skylark-domx-noder\"\r\n], function(skylark, langx, finder,noder) {\r\n    var map = Array.prototype.map,\r\n        filter = Array.prototype.filter,\r\n        camelCase = langx.camelCase,\r\n        deserializeValue = langx.deserializeValue,\r\n\r\n        capitalRE = /([A-Z])/g,\r\n        propMap = {\r\n            'tabindex': 'tabIndex',\r\n            'readonly': 'readOnly',\r\n            'for': 'htmlFor',\r\n            'class': 'className',\r\n            'maxlength': 'maxLength',\r\n            'cellspacing': 'cellSpacing',\r\n            'cellpadding': 'cellPadding',\r\n            'rowspan': 'rowSpan',\r\n            'colspan': 'colSpan',\r\n            'usemap': 'useMap',\r\n            'frameborder': 'frameBorder',\r\n            'contenteditable': 'contentEditable'\r\n        };\r\n\r\n    // Strip and collapse whitespace according to HTML spec\r\n    function stripAndCollapse( value ) {\r\n      var tokens = value.match( /[^\\x20\\t\\r\\n\\f]+/g ) || [];\r\n      return tokens.join( \" \" );\r\n    }\r\n\r\n\r\n    var valHooks = {\r\n      option: {\r\n        get: function( elem ) {\r\n          var val = elem.getAttribute( \"value\" );\r\n          return val != null ?  val :  stripAndCollapse(text( elem ) );\r\n        }\r\n      },\r\n      select: {\r\n        get: function( elem ) {\r\n          var value, option, i,\r\n            options = elem.options,\r\n            index = elem.selectedIndex,\r\n            one = elem.type === \"select-one\",\r\n            values = one ? null : [],\r\n            max = one ? index + 1 : options.length;\r\n\r\n          if ( index < 0 ) {\r\n            i = max;\r\n\r\n          } else {\r\n            i = one ? index : 0;\r\n          }\r\n\r\n          // Loop through all the selected options\r\n          for ( ; i < max; i++ ) {\r\n            option = options[ i ];\r\n\r\n            if ( option.selected &&\r\n\r\n                // Don't return options that are disabled or in a disabled optgroup\r\n                !option.disabled &&\r\n                ( !option.parentNode.disabled ||\r\n                  !noder.nodeName( option.parentNode, \"optgroup\" ) ) ) {\r\n\r\n              // Get the specific value for the option\r\n              value = val(option);\r\n\r\n              // We don't need an array for one selects\r\n              if ( one ) {\r\n                return value;\r\n              }\r\n\r\n              // Multi-Selects return an array\r\n              values.push( value );\r\n            }\r\n          }\r\n\r\n          return values;\r\n        },\r\n\r\n        set: function( elem, value ) {\r\n          var optionSet, option,\r\n            options = elem.options,\r\n            values = langx.makeArray( value ),\r\n            i = options.length;\r\n\r\n          while ( i-- ) {\r\n            option = options[ i ];\r\n\r\n            /* eslint-disable no-cond-assign */\r\n\r\n            if ( option.selected =\r\n              langx.inArray( valHooks.option.get( option ), values ) > -1\r\n            ) {\r\n              optionSet = true;\r\n            }\r\n\r\n            /* eslint-enable no-cond-assign */\r\n          }\r\n\r\n          // Force browsers to behave consistently when non-matching value is set\r\n          if ( !optionSet ) {\r\n            elem.selectedIndex = -1;\r\n          }\r\n          return values;\r\n        }\r\n      }\r\n    };\r\n\r\n\r\n    // Radios and checkboxes getter/setter\r\n    langx.each( [ \"radio\", \"checkbox\" ], function() {\r\n      valHooks[ this ] = {\r\n        set: function( elem, value ) {\r\n          if ( langx.isArray( value ) ) {\r\n            return ( elem.checked = langx.inArray( val(elem), value ) > -1 );\r\n          }\r\n        }\r\n      };\r\n    });\r\n\r\n\r\n\r\n    /*\r\n     * Set property values\r\n     * @param {Object} elm  \r\n     * @param {String} name\r\n     * @param {String} value\r\n     */\r\n\r\n    function setAttribute(elm, name, value) {\r\n        if (value == null) {\r\n            elm.removeAttribute(name);\r\n        } else {\r\n            elm.setAttribute(name, value);\r\n        }\r\n    }\r\n\r\n    function aria(elm, name, value) {\r\n        return this.attr(elm, \"aria-\" + name, value);\r\n    }\r\n\r\n    /*\r\n     * Set property values\r\n     * @param {Object} elm  \r\n     * @param {String} name\r\n     * @param {String} value\r\n     */\r\n\r\n    function attr(elm, name, value) {\r\n        if (value === undefined) {\r\n            if (typeof name === \"object\") {\r\n                for (var attrName in name) {\r\n                    attr(elm, attrName, name[attrName]);\r\n                }\r\n                return this;\r\n            } else {\r\n                if (elm.hasAttribute && elm.hasAttribute(name)) {\r\n                    return elm.getAttribute(name);\r\n                }\r\n            }\r\n        } else {\r\n            elm.setAttribute(name, value);\r\n            return this;\r\n        }\r\n    }\r\n\r\n\r\n    /*\r\n     *  Read all \"data-*\" attributes from a node\r\n     * @param {Object} elm  \r\n     */\r\n\r\n    function _attributeData(elm) {\r\n        var store = {}\r\n        langx.each(elm.attributes || [], function(i, attr) {\r\n            if (attr.name.indexOf('data-') == 0) {\r\n                store[camelCase(attr.name.replace('data-', ''))] = deserializeValue(attr.value);\r\n            }\r\n        })\r\n        return store;\r\n    }\r\n\r\n    function _store(elm, confirm) {\r\n        var store = elm[\"_$_store\"];\r\n        if (!store && confirm) {\r\n            store = elm[\"_$_store\"] = _attributeData(elm);\r\n        }\r\n        return store;\r\n    }\r\n\r\n    function _getData(elm, name) {\r\n        if (name === undefined) {\r\n            return _store(elm, true);\r\n        } else {\r\n            var store = _store(elm);\r\n            if (store) {\r\n                if (name in store) {\r\n                    return store[name];\r\n                }\r\n                var camelName = camelCase(name);\r\n                if (camelName in store) {\r\n                    return store[camelName];\r\n                }\r\n            }\r\n            var attrName = 'data-' + name.replace(capitalRE, \"-$1\").toLowerCase()\r\n            return attr(elm, attrName);\r\n        }\r\n\r\n    }\r\n\r\n    function _setData(elm, name, value) {\r\n        var store = _store(elm, true);\r\n        store[camelCase(name)] = value;\r\n    }\r\n\r\n\r\n    /*\r\n     * xxx\r\n     * @param {Object} elm  \r\n     * @param {String} name\r\n     * @param {String} value\r\n     */\r\n    function data(elm, name, value) {\r\n\r\n        if (value === undefined) {\r\n            if (typeof name === \"object\") {\r\n                for (var dataAttrName in name) {\r\n                    _setData(elm, dataAttrName, name[dataAttrName]);\r\n                }\r\n                return this;\r\n            } else {\r\n                return _getData(elm, name);\r\n            }\r\n        } else {\r\n            _setData(elm, name, value);\r\n            return this;\r\n        }\r\n    } \r\n    /*\r\n     * Remove from the element all items that have not yet been run. \r\n     * @param {Object} elm  \r\n     */\r\n\r\n    function cleanData(elm) {\r\n        if (elm[\"_$_store\"]) {\r\n            delete elm[\"_$_store\"];\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Remove a previously-stored piece of data. \r\n     * @param {Object} elm  \r\n     * @param {Array} names\r\n     */\r\n    function removeData(elm, names) {\r\n        if (names) {\r\n            if (langx.isString(names)) {\r\n                names = names.split(/\\s+/);\r\n            }\r\n            var store = _store(elm, true);\r\n            names.forEach(function(name) {\r\n                delete store[name];\r\n            });            \r\n        } else {\r\n            cleanData(elm);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /*\r\n     * xxx \r\n     * @param {Object} elm  \r\n     * @param {Array} names\r\n     */\r\n    function pluck(nodes, property) {\r\n        return map.call(nodes, function(elm) {\r\n            return elm[property];\r\n        });\r\n    }\r\n\r\n    /*\r\n     * Get or set the value of an property for the specified element.\r\n     * @param {Object} elm  \r\n     * @param {String} name\r\n     * @param {String} value\r\n     */\r\n    function prop(elm, name, value) {\r\n        name = propMap[name] || name;\r\n        if (value === undefined) {\r\n            return elm[name];\r\n        } else {\r\n            elm[name] = value;\r\n            return this;\r\n        }\r\n    }\r\n\r\n    /*\r\n     * remove Attributes  \r\n     * @param {Object} elm  \r\n     * @param {String} name\r\n     */\r\n    function removeAttr(elm, name) {\r\n        name.split(' ').forEach(function(attr) {\r\n            setAttribute(elm, attr);\r\n        });\r\n        return this;\r\n    }\r\n\r\n\r\n    /*\r\n     * Remove the value of a property for the first element in the set of matched elements or set one or more properties for every matched element.\r\n     * @param {Object} elm  \r\n     * @param {String} name\r\n     */\r\n    function removeProp(elm, name) {\r\n        name.split(' ').forEach(function(prop) {\r\n            delete elm[prop];\r\n        });\r\n        return this;\r\n    }\r\n\r\n    /*   \r\n     * Get the combined text contents of each element in the set of matched elements, including their descendants, or set the text contents of the matched elements.  \r\n     * @param {Object} elm  \r\n     * @param {String} txt\r\n     */\r\n    function text(elm, txt) {\r\n        if (txt === undefined) {\r\n            return elm.textContent;\r\n        } else {\r\n            elm.textContent = txt == null ? '' : '' + txt;\r\n            return this;\r\n        }\r\n    }\r\n\r\n    /*   \r\n     * Get the current value of the first element in the set of matched elements or set the value of every matched element.\r\n     * @param {Object} elm  \r\n     * @param {String} value\r\n     */\r\n    function val(elm, value) {\r\n        var hooks = valHooks[ elm.type ] || valHooks[ elm.nodeName.toLowerCase() ];\r\n        if (value === undefined) {\r\n/*\r\n            if (elm.multiple) {\r\n                // select multiple values\r\n                var selectedOptions = filter.call(finder.find(elm, \"option\"), (function(option) {\r\n                    return option.selected;\r\n                }));\r\n                return pluck(selectedOptions, \"value\");\r\n            } else {\r\n                if (/input|textarea/i.test(elm.tagName)) {\r\n                  return elm.value;\r\n                }\r\n                return text(elm);\r\n            }\r\n*/\r\n\r\n          if ( hooks &&  \"get\" in hooks &&  ( ret = hooks.get( elm, \"value\" ) ) !== undefined ) {\r\n            return ret;\r\n          }\r\n\r\n          ret = elm.value;\r\n\r\n          // Handle most common string cases\r\n          if ( typeof ret === \"string\" ) {\r\n            return ret.replace( /\\r/g, \"\" );\r\n          }\r\n\r\n          // Handle cases where value is null/undef or number\r\n          return ret == null ? \"\" : ret;\r\n\r\n        } else {\r\n/*          \r\n            if (/input|textarea/i.test(elm.tagName)) {\r\n              elm.value = value;\r\n            } else {\r\n              text(elm,value);\r\n            }\r\n            return this;\r\n*/\r\n          // Treat null/undefined as \"\"; convert numbers to string\r\n          if ( value == null ) {\r\n            value = \"\";\r\n\r\n          } else if ( typeof value === \"number\" ) {\r\n            value += \"\";\r\n\r\n          } else if ( langx.isArray( value ) ) {\r\n            value = langx.map( value, function( value1 ) {\r\n              return value1 == null ? \"\" : value1 + \"\";\r\n            } );\r\n          }\r\n\r\n          // If set returns undefined, fall back to normal setting\r\n          if ( !hooks || !( \"set\" in hooks ) || hooks.set( elm, value, \"value\" ) === undefined ) {\r\n            elm.value = value;\r\n          }\r\n        }      \r\n    }\r\n\r\n\r\n    finder.pseudos.data = function( elem, i, match,dataName ) {\r\n        return !!data( elem, dataName || match[3]);\r\n    };\r\n   \r\n\r\n    function datax() {\r\n        return datax;\r\n    }\r\n\r\n    langx.mixin(datax, {\r\n        aria: aria,\r\n\r\n        attr: attr,\r\n\r\n        cleanData: cleanData,\r\n\r\n        data: data,\r\n\r\n        pluck: pluck,\r\n\r\n        prop: prop,\r\n\r\n        removeAttr: removeAttr,\r\n\r\n        removeData: removeData,\r\n\r\n        removeProp: removeProp,\r\n\r\n        text: text,\r\n\r\n        val: val,\r\n\r\n        valHooks : valHooks\r\n    });\r\n\r\n    return skylark.attach(\"domx.data\", datax);\r\n});"]}