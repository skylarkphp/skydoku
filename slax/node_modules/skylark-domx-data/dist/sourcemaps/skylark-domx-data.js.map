{"version":3,"sources":["skylark-domx-data.js"],"names":["define","skylark","langx","finder","noder","map","Array","prototype","camelCase","filter","deserializeValue","capitalRE","propMap","tabindex","readonly","for","class","maxlength","cellspacing","cellpadding","rowspan","colspan","usemap","frameborder","contenteditable","valHooks","option","get","elem","val","getAttribute","text","match","join","select","value","i","options","index","selectedIndex","one","type","values","max","length","selected","disabled","parentNode","nodeName","push","set","optionSet","makeArray","inArray","attr","elm","name","undefined","setAttribute","this","attrName","hasAttribute","_store","confirm","store","each","attributes","indexOf","replace","_attributeData","_setData","data","dataAttrName","camelName","toLowerCase","_getData","cleanData","txt","textContent","hooks","ret","isArray","value1","datax","checked","pseudos","dataName","mixin","aria","pluck","nodes","property","call","prop","removeAttr","split","forEach","removeAttribute","removeData","names","isString","removeProp","attach","velm","$","delegate","fn","wraps","wrapper_value","wrapper_name_value","wrapper_every_act","main"],"mappings":"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","file":"../skylark-domx-data.js","sourcesContent":["define('skylark-domx-data/data',[\r\n    \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-finder\",\r\n    \"skylark-domx-noder\"\r\n], function(skylark, langx, finder,noder) {\r\n    var map = Array.prototype.map,\r\n        filter = Array.prototype.filter,\r\n        camelCase = langx.camelCase,\r\n        deserializeValue = langx.deserializeValue,\r\n\r\n        capitalRE = /([A-Z])/g,\r\n        propMap = {\r\n            'tabindex': 'tabIndex',\r\n            'readonly': 'readOnly',\r\n            'for': 'htmlFor',\r\n            'class': 'className',\r\n            'maxlength': 'maxLength',\r\n            'cellspacing': 'cellSpacing',\r\n            'cellpadding': 'cellPadding',\r\n            'rowspan': 'rowSpan',\r\n            'colspan': 'colSpan',\r\n            'usemap': 'useMap',\r\n            'frameborder': 'frameBorder',\r\n            'contenteditable': 'contentEditable'\r\n        };\r\n\r\n    // Strip and collapse whitespace according to HTML spec\r\n    function stripAndCollapse( value ) {\r\n      var tokens = value.match( /[^\\x20\\t\\r\\n\\f]+/g ) || [];\r\n      return tokens.join( \" \" );\r\n    }\r\n\r\n\r\n    var valHooks = {\r\n      option: {\r\n        get: function( elem ) {\r\n          var val = elem.getAttribute( \"value\" );\r\n          return val != null ?  val :  stripAndCollapse(text( elem ) );\r\n        }\r\n      },\r\n      select: {\r\n        get: function( elem ) {\r\n          var value, option, i,\r\n            options = elem.options,\r\n            index = elem.selectedIndex,\r\n            one = elem.type === \"select-one\",\r\n            values = one ? null : [],\r\n            max = one ? index + 1 : options.length;\r\n\r\n          if ( index < 0 ) {\r\n            i = max;\r\n\r\n          } else {\r\n            i = one ? index : 0;\r\n          }\r\n\r\n          // Loop through all the selected options\r\n          for ( ; i < max; i++ ) {\r\n            option = options[ i ];\r\n\r\n            if ( option.selected &&\r\n\r\n                // Don't return options that are disabled or in a disabled optgroup\r\n                !option.disabled &&\r\n                ( !option.parentNode.disabled ||\r\n                  !noder.nodeName( option.parentNode, \"optgroup\" ) ) ) {\r\n\r\n              // Get the specific value for the option\r\n              value = val(option);\r\n\r\n              // We don't need an array for one selects\r\n              if ( one ) {\r\n                return value;\r\n              }\r\n\r\n              // Multi-Selects return an array\r\n              values.push( value );\r\n            }\r\n          }\r\n\r\n          return values;\r\n        },\r\n\r\n        set: function( elem, value ) {\r\n          var optionSet, option,\r\n            options = elem.options,\r\n            values = langx.makeArray( value ),\r\n            i = options.length;\r\n\r\n          while ( i-- ) {\r\n            option = options[ i ];\r\n\r\n            /* eslint-disable no-cond-assign */\r\n\r\n            if ( option.selected =\r\n              langx.inArray( valHooks.option.get( option ), values ) > -1\r\n            ) {\r\n              optionSet = true;\r\n            }\r\n\r\n            /* eslint-enable no-cond-assign */\r\n          }\r\n\r\n          // Force browsers to behave consistently when non-matching value is set\r\n          if ( !optionSet ) {\r\n            elem.selectedIndex = -1;\r\n          }\r\n          return values;\r\n        }\r\n      }\r\n    };\r\n\r\n\r\n    // Radios and checkboxes getter/setter\r\n    langx.each( [ \"radio\", \"checkbox\" ], function() {\r\n      valHooks[ this ] = {\r\n        set: function( elem, value ) {\r\n          if ( langx.isArray( value ) ) {\r\n            return ( elem.checked = langx.inArray( val(elem), value ) > -1 );\r\n          }\r\n        }\r\n      };\r\n    });\r\n\r\n\r\n\r\n    /*\r\n     * Set property values\r\n     * @param {Object} elm  \r\n     * @param {String} name\r\n     * @param {String} value\r\n     */\r\n\r\n    function setAttribute(elm, name, value) {\r\n        if (value == null) {\r\n            elm.removeAttribute(name);\r\n        } else {\r\n            elm.setAttribute(name, value);\r\n        }\r\n    }\r\n\r\n    function aria(elm, name, value) {\r\n        return this.attr(elm, \"aria-\" + name, value);\r\n    }\r\n\r\n    /*\r\n     * Set property values\r\n     * @param {Object} elm  \r\n     * @param {String} name\r\n     * @param {String} value\r\n     */\r\n\r\n    function attr(elm, name, value) {\r\n        if (value === undefined) {\r\n            if (typeof name === \"object\") {\r\n                for (var attrName in name) {\r\n                    attr(elm, attrName, name[attrName]);\r\n                }\r\n                return this;\r\n            } else {\r\n                if (elm.hasAttribute && elm.hasAttribute(name)) {\r\n                    return elm.getAttribute(name);\r\n                }\r\n            }\r\n        } else {\r\n            elm.setAttribute(name, value);\r\n            return this;\r\n        }\r\n    }\r\n\r\n\r\n    /*\r\n     *  Read all \"data-*\" attributes from a node\r\n     * @param {Object} elm  \r\n     */\r\n\r\n    function _attributeData(elm) {\r\n        var store = {}\r\n        langx.each(elm.attributes || [], function(i, attr) {\r\n            if (attr.name.indexOf('data-') == 0) {\r\n                store[camelCase(attr.name.replace('data-', ''))] = deserializeValue(attr.value);\r\n            }\r\n        })\r\n        return store;\r\n    }\r\n\r\n    function _store(elm, confirm) {\r\n        var store = elm[\"_$_store\"];\r\n        if (!store && confirm) {\r\n            store = elm[\"_$_store\"] = _attributeData(elm);\r\n        }\r\n        return store;\r\n    }\r\n\r\n    function _getData(elm, name) {\r\n        if (name === undefined) {\r\n            return _store(elm, true);\r\n        } else {\r\n            var store = _store(elm);\r\n            if (store) {\r\n                if (name in store) {\r\n                    return store[name];\r\n                }\r\n                var camelName = camelCase(name);\r\n                if (camelName in store) {\r\n                    return store[camelName];\r\n                }\r\n            }\r\n            var attrName = 'data-' + name.replace(capitalRE, \"-$1\").toLowerCase()\r\n            return attr(elm, attrName);\r\n        }\r\n\r\n    }\r\n\r\n    function _setData(elm, name, value) {\r\n        var store = _store(elm, true);\r\n        store[camelCase(name)] = value;\r\n    }\r\n\r\n\r\n    /*\r\n     * xxx\r\n     * @param {Object} elm  \r\n     * @param {String} name\r\n     * @param {String} value\r\n     */\r\n    function data(elm, name, value) {\r\n\r\n        if (value === undefined) {\r\n            if (typeof name === \"object\") {\r\n                for (var dataAttrName in name) {\r\n                    _setData(elm, dataAttrName, name[dataAttrName]);\r\n                }\r\n                return this;\r\n            } else {\r\n                return _getData(elm, name);\r\n            }\r\n        } else {\r\n            _setData(elm, name, value);\r\n            return this;\r\n        }\r\n    } \r\n    /*\r\n     * Remove from the element all items that have not yet been run. \r\n     * @param {Object} elm  \r\n     */\r\n\r\n    function cleanData(elm) {\r\n        if (elm[\"_$_store\"]) {\r\n            delete elm[\"_$_store\"];\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Remove a previously-stored piece of data. \r\n     * @param {Object} elm  \r\n     * @param {Array} names\r\n     */\r\n    function removeData(elm, names) {\r\n        if (names) {\r\n            if (langx.isString(names)) {\r\n                names = names.split(/\\s+/);\r\n            }\r\n            var store = _store(elm, true);\r\n            names.forEach(function(name) {\r\n                delete store[name];\r\n            });            \r\n        } else {\r\n            cleanData(elm);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /*\r\n     * xxx \r\n     * @param {Object} elm  \r\n     * @param {Array} names\r\n     */\r\n    function pluck(nodes, property) {\r\n        return map.call(nodes, function(elm) {\r\n            return elm[property];\r\n        });\r\n    }\r\n\r\n    /*\r\n     * Get or set the value of an property for the specified element.\r\n     * @param {Object} elm  \r\n     * @param {String} name\r\n     * @param {String} value\r\n     */\r\n    function prop(elm, name, value) {\r\n        name = propMap[name] || name;\r\n        if (value === undefined) {\r\n            return elm[name];\r\n        } else {\r\n            elm[name] = value;\r\n            return this;\r\n        }\r\n    }\r\n\r\n    /*\r\n     * remove Attributes  \r\n     * @param {Object} elm  \r\n     * @param {String} name\r\n     */\r\n    function removeAttr(elm, name) {\r\n        name.split(' ').forEach(function(attr) {\r\n            setAttribute(elm, attr);\r\n        });\r\n        return this;\r\n    }\r\n\r\n\r\n    /*\r\n     * Remove the value of a property for the first element in the set of matched elements or set one or more properties for every matched element.\r\n     * @param {Object} elm  \r\n     * @param {String} name\r\n     */\r\n    function removeProp(elm, name) {\r\n        name.split(' ').forEach(function(prop) {\r\n            delete elm[prop];\r\n        });\r\n        return this;\r\n    }\r\n\r\n    /*   \r\n     * Get the combined text contents of each element in the set of matched elements, including their descendants, or set the text contents of the matched elements.  \r\n     * @param {Object} elm  \r\n     * @param {String} txt\r\n     */\r\n    function text(elm, txt) {\r\n        if (txt === undefined) {\r\n            return elm.textContent;\r\n        } else {\r\n            elm.textContent = txt == null ? '' : '' + txt;\r\n            return this;\r\n        }\r\n    }\r\n\r\n    /*   \r\n     * Get the current value of the first element in the set of matched elements or set the value of every matched element.\r\n     * @param {Object} elm  \r\n     * @param {String} value\r\n     */\r\n    function val(elm, value) {\r\n        var hooks = valHooks[ elm.type ] || valHooks[ elm.nodeName.toLowerCase() ];\r\n        if (value === undefined) {\r\n/*\r\n            if (elm.multiple) {\r\n                // select multiple values\r\n                var selectedOptions = filter.call(finder.find(elm, \"option\"), (function(option) {\r\n                    return option.selected;\r\n                }));\r\n                return pluck(selectedOptions, \"value\");\r\n            } else {\r\n                if (/input|textarea/i.test(elm.tagName)) {\r\n                  return elm.value;\r\n                }\r\n                return text(elm);\r\n            }\r\n*/\r\n\r\n          if ( hooks &&  \"get\" in hooks &&  ( ret = hooks.get( elm, \"value\" ) ) !== undefined ) {\r\n            return ret;\r\n          }\r\n\r\n          ret = elm.value;\r\n\r\n          // Handle most common string cases\r\n          if ( typeof ret === \"string\" ) {\r\n            return ret.replace( /\\r/g, \"\" );\r\n          }\r\n\r\n          // Handle cases where value is null/undef or number\r\n          return ret == null ? \"\" : ret;\r\n\r\n        } else {\r\n/*          \r\n            if (/input|textarea/i.test(elm.tagName)) {\r\n              elm.value = value;\r\n            } else {\r\n              text(elm,value);\r\n            }\r\n            return this;\r\n*/\r\n          // Treat null/undefined as \"\"; convert numbers to string\r\n          if ( value == null ) {\r\n            value = \"\";\r\n\r\n          } else if ( typeof value === \"number\" ) {\r\n            value += \"\";\r\n\r\n          } else if ( langx.isArray( value ) ) {\r\n            value = langx.map( value, function( value1 ) {\r\n              return value1 == null ? \"\" : value1 + \"\";\r\n            } );\r\n          }\r\n\r\n          // If set returns undefined, fall back to normal setting\r\n          if ( !hooks || !( \"set\" in hooks ) || hooks.set( elm, value, \"value\" ) === undefined ) {\r\n            elm.value = value;\r\n          }\r\n        }      \r\n    }\r\n\r\n\r\n    finder.pseudos.data = function( elem, i, match,dataName ) {\r\n        return !!data( elem, dataName || match[3]);\r\n    };\r\n   \r\n\r\n    function datax() {\r\n        return datax;\r\n    }\r\n\r\n    langx.mixin(datax, {\r\n        aria: aria,\r\n\r\n        attr: attr,\r\n\r\n        cleanData: cleanData,\r\n\r\n        data: data,\r\n\r\n        pluck: pluck,\r\n\r\n        prop: prop,\r\n\r\n        removeAttr: removeAttr,\r\n\r\n        removeData: removeData,\r\n\r\n        removeProp: removeProp,\r\n\r\n        text: text,\r\n\r\n        val: val,\r\n\r\n        valHooks : valHooks\r\n    });\r\n\r\n    return skylark.attach(\"domx.data\", datax);\r\n});\ndefine('skylark-domx-data/main',[\r\n    \"./data\",\r\n    \"skylark-domx-velm\",\r\n    \"skylark-domx-query\"    \r\n],function(data,velm,$){\r\n    // from ./data\r\n    velm.delegate([\r\n        \"attr\",\r\n        \"data\",\r\n        \"prop\",\r\n        \"removeAttr\",\r\n        \"removeData\",\r\n        \"text\",\r\n        \"val\"\r\n    ], data);\r\n\r\n    $.fn.text = $.wraps.wrapper_value(data.text, data, data.text);\r\n\r\n    $.fn.attr = $.wraps.wrapper_name_value(data.attr, data, data.attr);\r\n\r\n    $.fn.removeAttr = $.wraps.wrapper_every_act(data.removeAttr, data);\r\n\r\n    $.fn.prop = $.wraps.wrapper_name_value(data.prop, data, data.prop);\r\n\r\n    $.fn.removeProp = $.wraps.wrapper_every_act(data.removeProp, data);\r\n\r\n    $.fn.data = $.wraps.wrapper_name_value(data.data, data, data.data);\r\n\r\n    $.fn.removeData = $.wraps.wrapper_every_act(data.removeData, data);\r\n\r\n    $.fn.val = $.wraps.wrapper_value(data.val, data, data.val);\r\n\r\n\r\n    return data;\r\n});\ndefine('skylark-domx-data', ['skylark-domx-data/main'], function (main) { return main; });\n\n"]}