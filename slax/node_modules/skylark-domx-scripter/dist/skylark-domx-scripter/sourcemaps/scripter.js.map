{"version":3,"sources":["scripter.js"],"names":["define","skylark","langx","noder","finder","head","document","getElementsByTagName","scriptsByUrl","scriptElementsById","count","rscriptType","scripter","preservedScriptAttributes","type","src","nonce","noModule","evaluate","code","node","doc","i","val","script","createElement","text","getAttribute","setAttribute","appendChild","parentNode","removeChild","this","mixin","loadJavaScript","url","loadedCallback","errorCallback","state","loadedCallbacks","errorCallbacks","push","onload","onerror","id","async","defer","startTime","Date","getTime","callbacks","length","deleteJavaScript","remove","html","value","result","undefined","scripts","querySelectorAll","node1","test","textContent","attach"],"mappings":";;;;;;;AAAAA,QACI,wBACA,sBACA,qBACA,uBACD,SAASC,EAASC,EAAOC,EAAOC,GAE/B,IAAIC,EAAOC,SAASC,qBAAqB,QAAQ,GAC7CC,KACAC,KACAC,EAAQ,EAERC,EAAc,qCAElB,SAASC,IACL,OAAOA,EAIX,IAAIC,GACAC,MAAM,EACNC,KAAK,EACLC,OAAO,EACPC,UAAU,GAGd,SAASC,EAASC,EAAKC,EAAMC,GAGzB,IAAIC,EAAGC,EACHC,GAHJH,EAAMA,GAAOf,UAGImB,cAAc,UAG/B,GADAD,EAAOE,KAAOP,EACTC,EACD,IAAME,KAAKT,GAYPU,EAAMH,EAAME,IAAOF,EAAKO,cAAgBP,EAAKO,aAAcL,KAEvDE,EAAOI,aAAcN,EAAGC,GAMpC,OAFAF,EAAIhB,KAAKwB,YAAaL,GAASM,WAAWC,YAAaP,GAEhDQ,KAyGX,OAtGA9B,EAAM+B,MAAMrB,GAORsB,eAAgB,SAASC,EAAKC,EAAgBC,GAC1C,IAAIb,EAAShB,EAAa2B,GAY1B,GAXKX,IACDA,EAAShB,EAAa2B,IAClBG,MAAO,EACPC,mBACAC,oBAIRhB,EAAOe,gBAAgBE,KAAKL,GAC5BZ,EAAOgB,eAAeC,KAAKJ,GAEN,IAAjBb,EAAOc,MACPd,EAAOJ,KAAKsB,cACT,IAAsB,IAAlBlB,EAAOc,MACdd,EAAOJ,KAAKuB,cACT,CACH,IAAIvB,EAAOI,EAAOJ,KAAOd,SAASmB,cAAc,UAC5CmB,EAAKpB,EAAOoB,GAAMlC,IAEtBU,EAAKN,KAAO,kBACZM,EAAKyB,OAAQ,EACbzB,EAAK0B,OAAQ,EACbC,WAAY,IAAIC,MAAOC,UACvB5C,EAAKwB,YAAYT,GAEjBA,EAAKsB,OAAS,WACNlB,EAAOc,MAAQ,EAKf,IAHA,IAAIY,EAAY1B,EAAOe,gBACnBjB,EAAI4B,EAAUC,OAEX7B,KACH4B,EAAU5B,KAEdE,EAAOe,mBACPf,EAAOgB,mBAEXpB,EAAKuB,QAAU,WACXnB,EAAOc,OAAS,EAIhB,IAHA,IAAIY,EAAY1B,EAAOgB,eACnBlB,EAAI4B,EAAUC,OAEX7B,KACH4B,EAAU5B,KAEdE,EAAOe,mBACPf,EAAOgB,mBAEfpB,EAAKL,IAAMoB,EAEX1B,EAAmBmC,GAAMxB,EAE7B,OAAOI,EAAOoB,IAMlBQ,iBAAkB,SAASR,GACvB,IAAIxB,EAAOX,EAAmBmC,GAC9B,GAAIxB,EAAM,CACN,IAAIe,EAAMf,EAAKL,IACfZ,EAAMkD,OAAOjC,UACNX,EAAmBmC,UACnBpC,EAAa2B,KAI5BjB,SAAWA,EAEXoC,KAAO,SAASlC,EAAKmC,GAEjB,IAAIC,EAASrD,EAAMmD,KAAKlC,EAAKmC,GAE7B,QAAcE,IAAVF,EAAqB,CAGrB,IAFA,IAAIG,EAAUtC,EAAKuC,iBAAiB,UAE3BrC,EAAG,EAAGA,EAAEoC,EAAQP,OAAQ7B,IAAK,CAClC,IAAIsC,EAAQF,EAAQpC,GAChBX,EAAYkD,KAAMD,EAAM9C,MAAQ,KAClCI,EAAS0C,EAAME,YAAYF,GAGjC,OAAO5B,KAEP,OAAOwB,KAQZvD,EAAQ8D,OAAO,gBAAiBnD","file":"../scripter.js","sourcesContent":["define([\r\n    \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-finder\"\r\n], function(skylark, langx, noder, finder) {\r\n\r\n    var head = document.getElementsByTagName('head')[0],\r\n        scriptsByUrl = {},\r\n        scriptElementsById = {},\r\n        count = 0;\r\n\r\n    var rscriptType = ( /^$|^module$|\\/(?:java|ecma)script/i );\r\n\r\n    function scripter() {\r\n        return scripter;\r\n    }\r\n\r\n\r\n    var preservedScriptAttributes = {\r\n        type: true,\r\n        src: true,\r\n        nonce: true,\r\n        noModule: true\r\n    };\r\n\r\n    function evaluate(code,node, doc ) {\r\n        doc = doc || document;\r\n\r\n        var i, val,\r\n            script = doc.createElement(\"script\");\r\n\r\n        script.text = code;\r\n        if ( node ) {\r\n            for ( i in preservedScriptAttributes ) {\r\n\r\n                // Support: Firefox 64+, Edge 18+\r\n                // Some browsers don't support the \"nonce\" property on scripts.\r\n                // On the other hand, just using `getAttribute` is not enough as\r\n                // the `nonce` attribute is reset to an empty string whenever it\r\n                // becomes browsing-context connected.\r\n                // See https://github.com/whatwg/html/issues/2369\r\n                // See https://html.spec.whatwg.org/#nonce-attributes\r\n                // The `node.getAttribute` check was added for the sake of\r\n                // `jQuery.globalEval` so that it can fake a nonce-containing node\r\n                // via an object.\r\n                val = node[ i ] || node.getAttribute && node.getAttribute( i );\r\n                if ( val ) {\r\n                    script.setAttribute( i, val );\r\n                }\r\n            }\r\n        }\r\n        doc.head.appendChild( script ).parentNode.removeChild( script );\r\n\r\n        return this;\r\n    }\r\n\r\n    langx.mixin(scripter, {\r\n        /*\r\n         * Load a script from a url into the document.\r\n         * @param {} url\r\n         * @param {} loadedCallback\r\n         * @param {} errorCallback\r\n         */\r\n        loadJavaScript: function(url, loadedCallback, errorCallback) {\r\n            var script = scriptsByUrl[url];\r\n            if (!script) {\r\n                script = scriptsByUrl[url] = {\r\n                    state: 0, //0:unload,1:loaded,-1:loaderror\r\n                    loadedCallbacks: [],\r\n                    errorCallbacks: []\r\n                }\r\n            }\r\n\r\n            script.loadedCallbacks.push(loadedCallback);\r\n            script.errorCallbacks.push(errorCallback);\r\n\r\n            if (script.state === 1) {\r\n                script.node.onload();\r\n            } else if (script.state === -1) {\r\n                script.node.onerror();\r\n            } else {\r\n                var node = script.node = document.createElement(\"script\"),\r\n                    id = script.id = (count++);\r\n\r\n                node.type = \"text/javascript\";\r\n                node.async = false;\r\n                node.defer = false;\r\n                startTime = new Date().getTime();\r\n                head.appendChild(node);\r\n\r\n                node.onload = function() {\r\n                        script.state = 1;\r\n\r\n                        var callbacks = script.loadedCallbacks,\r\n                            i = callbacks.length;\r\n\r\n                        while (i--) {\r\n                            callbacks[i]();\r\n                        }\r\n                        script.loadedCallbacks = [];\r\n                        script.errorCallbacks = [];\r\n                    },\r\n                    node.onerror = function() {\r\n                        script.state = -1;\r\n                        var callbacks = script.errorCallbacks,\r\n                            i = callbacks.length;\r\n\r\n                        while (i--) {\r\n                            callbacks[i]();\r\n                        }\r\n                        script.loadedCallbacks = [];\r\n                        script.errorCallbacks = [];\r\n                    };\r\n                node.src = url;\r\n\r\n                scriptElementsById[id] = node;\r\n            }\r\n            return script.id;\r\n        },\r\n        /*\r\n         * Remove the specified script from the document.\r\n         * @param {Number} id\r\n         */\r\n        deleteJavaScript: function(id) {\r\n            var node = scriptElementsById[id];\r\n            if (node) {\r\n                var url = node.src;\r\n                noder.remove(node);\r\n                delete scriptElementsById[id];\r\n                delete scriptsByUrl[url];\r\n            }\r\n        },\r\n\r\n        evaluate : evaluate,\r\n\r\n        html : function(node,value) {\r\n\r\n            var result = noder.html(node,value);\r\n\r\n            if (value !== undefined) {\r\n                var scripts = node.querySelectorAll('script');\r\n\r\n                for (var i =0; i<scripts.length; i++) {\r\n                    var node1 = scripts[i];\r\n                    if (rscriptType.test( node1.type || \"\" ) ) {\r\n                      evaluate(node1.textContent,node1);\r\n                    }\r\n                }       \r\n                return this;         \r\n            } else {\r\n                return result;\r\n            }\r\n\r\n\r\n\r\n        }\r\n    });\r\n\r\n    return skylark.attach(\"domx.scripter\", scripter);\r\n});"]}