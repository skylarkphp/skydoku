{"version":3,"sources":["skylark-widgets-colorpicker.js"],"names":["define","skylark","langx","browser","noder","eventer","finder","$","colors","Color","swt","Widget","noop","defaultOpts","beforeShow","move","change","show","hide","color","flat","showInput","allowEmpty","showButtons","clickoutFiresChange","showInitial","showPalette","showPaletteOnly","hideAfterPaletteSelect","togglePaletteOnly","showSelectionPalette","localStorageKey","appendTo","maxSelectionSize","cancelText","chooseText","togglePaletteMoreText","togglePaletteLessText","clearText","noColorSelectedText","preferredFormat","className","containerClassName","replacerClassName","showAlpha","theme","palette","selectionPalette","disabled","offset","pickers","replaceInput","join","markup","gradientFix","isIE","i","paletteTemplate","p","opts","html","length","current","tiny","c","toHsl","l","equals","formattedString","toString","swatchStyle","toRgbString","push","append","attr","ColorPicker","Evented","inherit","klassName","init","element","o","callbackContext","mixin","callbacks","bind","instanceOptions","resize","debounce","reflow","visible","isDragging","dragWidth","dragHeight","dragHelperHeight","slideHeight","alphaWidth","alphaSlideHelperWidth","slideHelperHeight","currentHue","currentSaturation","currentValue","currentAlpha","paletteArray","paletteLookup","slice","draggingClass","shiftMovementDirection","doc","ownerDocument","boundElement","body","container","addClass","pickerContainer","find","dragger","dragHelper","slider","slideHelper","alphaSliderInner","alphaSlider","alphaSlideHelper","textInput","paletteContainer","initialColorContainer","cancelButton","clearButton","chooseButton","toggleButton","isInput","is","isInputTypeColor","inputTypeColorSupport","shouldReplace","replacer","offsetElement","previewElement","initialColor","val","colorOnShow","currentPreferredFormat","isEmpty","applyOptions","text","isArray","j","rgb","toggleClass","updateSelectionPaletteFromStorage","window","localStorage","oldPalette","split","each","addColorToSelectionPalette","e","inArray","shift","drawPalette","currentColor","get","map","unique","reverse","getUniqueSelectionPalette","drawInitial","initial","dragStart","trigger","dragStop","removeClass","setFromTextInput","value","isValid","set","updateOriginalInput","toggle","event","create","isDefaultPrevented","hideAll","on","onkeydown","clickout","updateUI","keyCode","button","revert","off","ignoreFormatChange","newColor","newHsv","toHsv","h","s","v","a","getFormat","fromRatio","Math","round","format","updateHelperLocations","flatColor","css","toHexString","realColor","displayColor","realHex","realRgb","toRgb","realAlpha","gradient","toFilter","gradientType","dragX","dragY","max","min","top","left","alphaX","slideY","fireCallback","hasChanged","picker","input","dpWidth","dpHeight","inputHeight","docElem","viewWidth","viewHeight","offsetLeft","offsetTop","width","height","outerWidth","outerHeight","documentElement","clientWidth","scrollLeft","clientHeight","scrollTop","abs","bottom","right","disable","after","parent","stopPropagation","target","preventDefault","click","setTimeout","keydown","hasClass","draggable","shiftKey","parseFloat","oldDragX","oldDragY","furtherFromX","setValue","paletteElementClick","data","ignore","closest","paletteEvent","initialize","spect","option","optionName","optionValue","undefined","enable","coord","destroy","remove","id","func","obj","Array","prototype","args","call","arguments","apply","concat","onmove","onstart","onstop","document","dragging","maxHeight","maxWidth","hasTouch","duringDragEvents","prevent","returnValue","documentMode","stop","t0","originalEvent","touches","pageX","pageY","which","dataID","load","loadOpts","defaults","localization","palettes","fn","colorPicker","extra","this","method","Error","removeData","options","attach","main"],"mappings":"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","file":"../skylark-widgets-colorpicker.js","sourcesContent":["define('skylark-widgets-colorpicker/ColorPicker',[\r\n   \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-browser\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-eventer\",\r\n    \"skylark-domx-finder\",\r\n    \"skylark-domx-query\",\r\n    \"skylark-data-color/colors\",\r\n    \"skylark-data-color/Color\",\r\n    \"skylark-widgets-swt/swt\",\r\n    \"skylark-widgets-swt/Widget\"\r\n],function(skylark, langx, browser, noder, eventer,finder, $, colors, Color, swt, Widget) {\r\n    \"use strict\";\r\n\r\n    var noop = langx.noop;\r\n    // Spectrum Colorpicker v1.8.0\r\n    // https://github.com/bgrins/spectrum\r\n    // Author: Brian Grinstead\r\n    // License: MIT\r\n\r\n\r\n    var defaultOpts = {\r\n\r\n        // Callbacks\r\n        beforeShow: noop,\r\n        move: noop,\r\n        change: noop,\r\n        show: noop,\r\n        hide: noop,\r\n\r\n        // Options\r\n        color: false,\r\n        flat: false,\r\n        showInput: false,\r\n        allowEmpty: false,\r\n        showButtons: true,\r\n        clickoutFiresChange: true,\r\n        showInitial: false,\r\n        showPalette: false,\r\n        showPaletteOnly: false,\r\n        hideAfterPaletteSelect: false,\r\n        togglePaletteOnly: false,\r\n        showSelectionPalette: true,\r\n        localStorageKey: false,\r\n        appendTo: \"body\",\r\n        maxSelectionSize: 7,\r\n        cancelText: \"cancel\",\r\n        chooseText: \"choose\",\r\n        togglePaletteMoreText: \"more\",\r\n        togglePaletteLessText: \"less\",\r\n        clearText: \"Clear Color Selection\",\r\n        noColorSelectedText: \"No Color Selected\",\r\n        preferredFormat: false,\r\n        className: \"\", // Deprecated - use containerClassName and replacerClassName instead.\r\n        containerClassName: \"\",\r\n        replacerClassName: \"\",\r\n        showAlpha: false,\r\n        theme: \"sp-light\",\r\n        palette: [[\"#ffffff\", \"#000000\", \"#ff0000\", \"#ff8000\", \"#ffff00\", \"#008000\", \"#0000ff\", \"#4b0082\", \"#9400d3\"]],\r\n        selectionPalette: [],\r\n        disabled: false,\r\n        offset: null\r\n    },\r\n    pickers = [],\r\n    replaceInput = [\r\n        \"<div class='sp-replacer'>\",\r\n            \"<div class='sp-preview'><div class='sp-preview-inner'></div></div>\",\r\n            \"<div class='sp-dd'>&#9660;</div>\",\r\n        \"</div>\"\r\n    ].join(''),\r\n    markup = (function () {\r\n\r\n        // IE7-10 does not support gradients with multiple stops, so we need to simulate\r\n        //  that for the rainbow slider with 8 divs that each have a single gradient\r\n        var gradientFix = \"\";\r\n        if (browser.isIE) {\r\n            for (var i = 1; i <= 6; i++) {\r\n                gradientFix += \"<div class='sp-\" + i + \"'></div>\";\r\n            }\r\n        }\r\n\r\n        return [\r\n            \"<div class='sp-container sp-hidden'>\",\r\n                \"<div class='sp-palette-container'>\",\r\n                    \"<div class='sp-palette sp-thumb sp-cf'></div>\",\r\n                    \"<div class='sp-palette-button-container sp-cf'>\",\r\n                        \"<button type='button' class='sp-palette-toggle'></button>\",\r\n                    \"</div>\",\r\n                \"</div>\",\r\n                \"<div class='sp-picker-container'>\",\r\n                    \"<div class='sp-top sp-cf'>\",\r\n                        \"<div class='sp-fill'></div>\",\r\n                        \"<div class='sp-top-inner'>\",\r\n                            \"<div class='sp-color'>\",\r\n                                \"<div class='sp-sat'>\",\r\n                                    \"<div class='sp-val'>\",\r\n                                        \"<div class='sp-dragger'></div>\",\r\n                                    \"</div>\",\r\n                                \"</div>\",\r\n                            \"</div>\",\r\n                            \"<div class='sp-clear sp-clear-display'>\",\r\n                            \"</div>\",\r\n                            \"<div class='sp-hue'>\",\r\n                                \"<div class='sp-slider'></div>\",\r\n                                gradientFix,\r\n                            \"</div>\",\r\n                        \"</div>\",\r\n                        \"<div class='sp-alpha'><div class='sp-alpha-inner'><div class='sp-alpha-handle'></div></div></div>\",\r\n                    \"</div>\",\r\n                    \"<div class='sp-input-container sp-cf'>\",\r\n                        \"<input class='sp-input' type='text' spellcheck='false'  />\",\r\n                    \"</div>\",\r\n                    \"<div class='sp-initial sp-thumb sp-cf'></div>\",\r\n                    \"<div class='sp-button-container sp-cf'>\",\r\n                        \"<a class='sp-cancel' href='#'></a>\",\r\n                        \"<button type='button' class='sp-choose'></button>\",\r\n                    \"</div>\",\r\n                \"</div>\",\r\n            \"</div>\"\r\n        ].join(\"\");\r\n    })();\r\n\r\n    function paletteTemplate (p, color, className, opts) {\r\n        var html = [];\r\n        for (var i = 0; i < p.length; i++) {\r\n            var current = p[i];\r\n            if(current) {\r\n                var tiny = colors.Color(current);\r\n                var c = tiny.toHsl().l < 0.5 ? \"sp-thumb-el sp-thumb-dark\" : \"sp-thumb-el sp-thumb-light\";\r\n                c += (Color.equals(color, current)) ? \" sp-thumb-active\" : \"\";\r\n                var formattedString = tiny.toString(opts.preferredFormat || \"rgb\");\r\n                var swatchStyle = \"background-color:\" + tiny.toRgbString();\r\n                html.push('<span title=\"' + formattedString + '\" data-color=\"' + tiny.toRgbString() + '\" class=\"' + c + '\"><span class=\"sp-thumb-inner\" style=\"' + swatchStyle + ';\" /></span>');\r\n            } else {\r\n                var cls = 'sp-clear-display';\r\n                html.push($('<div />')\r\n                    .append($('<span data-color=\"\" style=\"background-color:transparent;\" class=\"' + cls + '\"></span>')\r\n                        .attr('title', opts.noColorSelectedText)\r\n                    )\r\n                    .html()\r\n                );\r\n            }\r\n        }\r\n        return \"<div class='sp-cf \" + className + \"'>\" + html.join('') + \"</div>\";\r\n    }\r\n\r\n    function hideAll() {\r\n        for (var i = 0; i < pickers.length; i++) {\r\n            if (pickers[i]) {\r\n                pickers[i].hide();\r\n            }\r\n        }\r\n    }\r\n\r\n    function instanceOptions(o, callbackContext) {\r\n        var opts = langx.mixin({}, defaultOpts, o);\r\n        opts.callbacks = {\r\n            'move': bind(opts.move, callbackContext),\r\n            'change': bind(opts.change, callbackContext),\r\n            'show': bind(opts.show, callbackContext),\r\n            'hide': bind(opts.hide, callbackContext),\r\n            'beforeShow': bind(opts.beforeShow, callbackContext)\r\n        };\r\n\r\n        return opts;\r\n    }\r\n\r\n    function init(element, o) {\r\n\r\n        var opts = instanceOptions(o, element),\r\n            flat = opts.flat,\r\n            showSelectionPalette = opts.showSelectionPalette,\r\n            localStorageKey = opts.localStorageKey,\r\n            theme = opts.theme,\r\n            callbacks = opts.callbacks,\r\n            resize = langx.debounce(reflow, 10),\r\n            visible = false,\r\n            isDragging = false,\r\n            dragWidth = 0,\r\n            dragHeight = 0,\r\n            dragHelperHeight = 0,\r\n            slideHeight = 0,\r\n            slideWidth = 0,\r\n            alphaWidth = 0,\r\n            alphaSlideHelperWidth = 0,\r\n            slideHelperHeight = 0,\r\n            currentHue = 0,\r\n            currentSaturation = 0,\r\n            currentValue = 0,\r\n            currentAlpha = 1,\r\n            palette = [],\r\n            paletteArray = [],\r\n            paletteLookup = {},\r\n            selectionPalette = opts.selectionPalette.slice(0),\r\n            maxSelectionSize = opts.maxSelectionSize,\r\n            draggingClass = \"sp-dragging\",\r\n            shiftMovementDirection = null;\r\n\r\n        var doc = element.ownerDocument,\r\n            body = doc.body,\r\n            boundElement = $(element),\r\n            disabled = false,\r\n            container = $(markup, doc).addClass(theme),\r\n            pickerContainer = container.find(\".sp-picker-container\"),\r\n            dragger = container.find(\".sp-color\"),\r\n            dragHelper = container.find(\".sp-dragger\"),\r\n            slider = container.find(\".sp-hue\"),\r\n            slideHelper = container.find(\".sp-slider\"),\r\n            alphaSliderInner = container.find(\".sp-alpha-inner\"),\r\n            alphaSlider = container.find(\".sp-alpha\"),\r\n            alphaSlideHelper = container.find(\".sp-alpha-handle\"),\r\n            textInput = container.find(\".sp-input\"),\r\n            paletteContainer = container.find(\".sp-palette\"),\r\n            initialColorContainer = container.find(\".sp-initial\"),\r\n            cancelButton = container.find(\".sp-cancel\"),\r\n            clearButton = container.find(\".sp-clear\"),\r\n            chooseButton = container.find(\".sp-choose\"),\r\n            toggleButton = container.find(\".sp-palette-toggle\"),\r\n            isInput = boundElement.is(\"input\"),\r\n            isInputTypeColor = isInput && boundElement.attr(\"type\") === \"color\" && inputTypeColorSupport(),\r\n            shouldReplace = isInput && !flat,\r\n            replacer = (shouldReplace) ? $(replaceInput).addClass(theme).addClass(opts.className).addClass(opts.replacerClassName) : $([]),\r\n            offsetElement = (shouldReplace) ? replacer : boundElement,\r\n            previewElement = replacer.find(\".sp-preview-inner\"),\r\n            initialColor = opts.color || (isInput && boundElement.val()),\r\n            colorOnShow = false,\r\n            currentPreferredFormat = opts.preferredFormat,\r\n            clickoutFiresChange = !opts.showButtons || opts.clickoutFiresChange,\r\n            isEmpty = !initialColor,\r\n            allowEmpty = opts.allowEmpty && !isInputTypeColor;\r\n\r\n        function applyOptions() {\r\n\r\n            if (opts.showPaletteOnly) {\r\n                opts.showPalette = true;\r\n            }\r\n\r\n            toggleButton.text(opts.showPaletteOnly ? opts.togglePaletteMoreText : opts.togglePaletteLessText);\r\n\r\n            if (opts.palette) {\r\n                palette = opts.palette.slice(0);\r\n                paletteArray = langx.isArray(palette[0]) ? palette : [palette];\r\n                paletteLookup = {};\r\n                for (var i = 0; i < paletteArray.length; i++) {\r\n                    for (var j = 0; j < paletteArray[i].length; j++) {\r\n                        var rgb = Color(paletteArray[i][j]).toRgbString();\r\n                        paletteLookup[rgb] = true;\r\n                    }\r\n                }\r\n            }\r\n\r\n            container.toggleClass(\"sp-flat\", flat);\r\n            container.toggleClass(\"sp-input-disabled\", !opts.showInput);\r\n            container.toggleClass(\"sp-alpha-enabled\", opts.showAlpha);\r\n            container.toggleClass(\"sp-clear-enabled\", allowEmpty);\r\n            container.toggleClass(\"sp-buttons-disabled\", !opts.showButtons);\r\n            container.toggleClass(\"sp-palette-buttons-disabled\", !opts.togglePaletteOnly);\r\n            container.toggleClass(\"sp-palette-disabled\", !opts.showPalette);\r\n            container.toggleClass(\"sp-palette-only\", opts.showPaletteOnly);\r\n            container.toggleClass(\"sp-initial-disabled\", !opts.showInitial);\r\n            container.addClass(opts.className).addClass(opts.containerClassName);\r\n\r\n            reflow();\r\n        }\r\n\r\n        function initialize() {\r\n\r\n            if (browser.isIE) {\r\n                container.find(\"*:not(input)\").attr(\"unselectable\", \"on\");\r\n            }\r\n\r\n            applyOptions();\r\n\r\n            if (shouldReplace) {\r\n                boundElement.after(replacer).hide();\r\n            }\r\n\r\n            if (!allowEmpty) {\r\n                clearButton.hide();\r\n            }\r\n\r\n            if (flat) {\r\n                boundElement.after(container).hide();\r\n            }\r\n            else {\r\n\r\n                var appendTo = opts.appendTo === \"parent\" ? boundElement.parent() : $(opts.appendTo);\r\n                if (appendTo.length !== 1) {\r\n                    appendTo = $(\"body\");\r\n                }\r\n\r\n                appendTo.append(container);\r\n            }\r\n\r\n            updateSelectionPaletteFromStorage();\r\n\r\n            offsetElement.on(\"click.ColorPicker touchstart.ColorPicker\", function (e) {\r\n                if (!disabled) {\r\n                    toggle();\r\n                }\r\n\r\n                e.stopPropagation();\r\n\r\n                if (!$(e.target).is(\"input\")) {\r\n                    e.preventDefault();\r\n                }\r\n            });\r\n\r\n            if(boundElement.is(\":disabled\") || (opts.disabled === true)) {\r\n                disable();\r\n            }\r\n\r\n            // Prevent clicks from bubbling up to document.  This would cause it to be hidden.\r\n            container.click(stopPropagation);\r\n\r\n            // Handle user typed input\r\n            textInput.change(setFromTextInput);\r\n            textInput.on(\"paste\", function () {\r\n                setTimeout(setFromTextInput, 1);\r\n            });\r\n            textInput.keydown(function (e) { if (e.keyCode == 13) { setFromTextInput(); } });\r\n\r\n            cancelButton.text(opts.cancelText);\r\n            cancelButton.on(\"click.ColorPicker\", function (e) {\r\n                e.stopPropagation();\r\n                e.preventDefault();\r\n                revert();\r\n                hide();\r\n            });\r\n\r\n            clearButton.attr(\"title\", opts.clearText);\r\n            clearButton.on(\"click.ColorPicker\", function (e) {\r\n                e.stopPropagation();\r\n                e.preventDefault();\r\n                isEmpty = true;\r\n                move();\r\n\r\n                if(flat) {\r\n                    //for the flat style, this is a change event\r\n                    updateOriginalInput(true);\r\n                }\r\n            });\r\n\r\n            chooseButton.text(opts.chooseText);\r\n            chooseButton.on(\"click.ColorPicker\", function (e) {\r\n                e.stopPropagation();\r\n                e.preventDefault();\r\n\r\n                if (browser.isIE && textInput.is(\":focus\")) {\r\n                    textInput.trigger('change');\r\n                }\r\n\r\n                if (isValid()) {\r\n                    updateOriginalInput(true);\r\n                    hide();\r\n                }\r\n            });\r\n\r\n            toggleButton.text(opts.showPaletteOnly ? opts.togglePaletteMoreText : opts.togglePaletteLessText);\r\n            toggleButton.on(\"click.spectrum\", function (e) {\r\n                e.stopPropagation();\r\n                e.preventDefault();\r\n\r\n                opts.showPaletteOnly = !opts.showPaletteOnly;\r\n\r\n                // To make sure the Picker area is drawn on the right, next to the\r\n                // Palette area (and not below the palette), first move the Palette\r\n                // to the left to make space for the picker, plus 5px extra.\r\n                // The 'applyOptions' function puts the whole container back into place\r\n                // and takes care of the button-text and the sp-palette-only CSS class.\r\n                if (!opts.showPaletteOnly && !flat) {\r\n                    container.css('left', '-=' + (pickerContainer.outerWidth(true) + 5));\r\n                }\r\n                applyOptions();\r\n            });\r\n\r\n            draggable(alphaSlider, function (dragX, dragY, e) {\r\n                currentAlpha = (dragX / alphaWidth);\r\n                isEmpty = false;\r\n                if (e.shiftKey) {\r\n                    currentAlpha = Math.round(currentAlpha * 10) / 10;\r\n                }\r\n\r\n                move();\r\n            }, dragStart, dragStop);\r\n\r\n            draggable(slider, function (dragX, dragY) {\r\n                currentHue = parseFloat(dragY / slideHeight);\r\n                isEmpty = false;\r\n                if (!opts.showAlpha) {\r\n                    currentAlpha = 1;\r\n                }\r\n                move();\r\n            }, dragStart, dragStop);\r\n\r\n            draggable(dragger, function (dragX, dragY, e) {\r\n\r\n                // shift+drag should snap the movement to either the x or y axis.\r\n                if (!e.shiftKey) {\r\n                    shiftMovementDirection = null;\r\n                }\r\n                else if (!shiftMovementDirection) {\r\n                    var oldDragX = currentSaturation * dragWidth;\r\n                    var oldDragY = dragHeight - (currentValue * dragHeight);\r\n                    var furtherFromX = Math.abs(dragX - oldDragX) > Math.abs(dragY - oldDragY);\r\n\r\n                    shiftMovementDirection = furtherFromX ? \"x\" : \"y\";\r\n                }\r\n\r\n                var setSaturation = !shiftMovementDirection || shiftMovementDirection === \"x\";\r\n                var setValue = !shiftMovementDirection || shiftMovementDirection === \"y\";\r\n\r\n                if (setSaturation) {\r\n                    currentSaturation = parseFloat(dragX / dragWidth);\r\n                }\r\n                if (setValue) {\r\n                    currentValue = parseFloat((dragHeight - dragY) / dragHeight);\r\n                }\r\n\r\n                isEmpty = false;\r\n                if (!opts.showAlpha) {\r\n                    currentAlpha = 1;\r\n                }\r\n\r\n                move();\r\n\r\n            }, dragStart, dragStop);\r\n\r\n            if (!!initialColor) {\r\n                set(initialColor);\r\n\r\n                // In case color was black - update the preview UI and set the format\r\n                // since the set function will not run (default color is black).\r\n                updateUI();\r\n                currentPreferredFormat = opts.preferredFormat || Color(initialColor).format;\r\n\r\n                addColorToSelectionPalette(initialColor);\r\n            }\r\n            else {\r\n                updateUI();\r\n            }\r\n\r\n            if (flat) {\r\n                show();\r\n            }\r\n\r\n            function paletteElementClick(e) {\r\n                if (e.data && e.data.ignore) {\r\n                    set($(e.target).closest(\".sp-thumb-el\").data(\"color\"));\r\n                    move();\r\n                }\r\n                else {\r\n                    set($(e.target).closest(\".sp-thumb-el\").data(\"color\"));\r\n                    move();\r\n\r\n                    // If the picker is going to close immediately, a palette selection\r\n                    // is a change.  Otherwise, it's a move only.\r\n                    if (opts.hideAfterPaletteSelect) {\r\n                        updateOriginalInput(true);\r\n                        hide();\r\n                    } else {\r\n                        updateOriginalInput();\r\n                    }\r\n                }\r\n\r\n                return false;\r\n            }\r\n\r\n            var paletteEvent = browser.isIE ? \"mousedown.ColorPicker\" : \"click.ColorPicker touchstart.ColorPicker\";\r\n            paletteContainer.on(paletteEvent, \".sp-thumb-el\", paletteElementClick);\r\n            initialColorContainer.on(paletteEvent, \".sp-thumb-el:nth-child(1)\", { ignore: true }, paletteElementClick);\r\n        }\r\n\r\n        function updateSelectionPaletteFromStorage() {\r\n\r\n            if (localStorageKey && window.localStorage) {\r\n\r\n                // Migrate old palettes over to new format.  May want to remove this eventually.\r\n                try {\r\n                    var oldPalette = window.localStorage[localStorageKey].split(\",#\");\r\n                    if (oldPalette.length > 1) {\r\n                        delete window.localStorage[localStorageKey];\r\n                        langx.each(oldPalette, function(i, c) {\r\n                             addColorToSelectionPalette(c);\r\n                        });\r\n                    }\r\n                }\r\n                catch(e) { }\r\n\r\n                try {\r\n                    selectionPalette = window.localStorage[localStorageKey].split(\";\");\r\n                }\r\n                catch (e) { }\r\n            }\r\n        }\r\n\r\n        function addColorToSelectionPalette(color) {\r\n            if (showSelectionPalette) {\r\n                var rgb = Color(color).toRgbString();\r\n                if (!paletteLookup[rgb] && langx.inArray(rgb, selectionPalette) === -1) {\r\n                    selectionPalette.push(rgb);\r\n                    while(selectionPalette.length > maxSelectionSize) {\r\n                        selectionPalette.shift();\r\n                    }\r\n                }\r\n\r\n                if (localStorageKey && window.localStorage) {\r\n                    try {\r\n                        window.localStorage[localStorageKey] = selectionPalette.join(\";\");\r\n                    }\r\n                    catch(e) { }\r\n                }\r\n            }\r\n        }\r\n\r\n        function getUniqueSelectionPalette() {\r\n            var unique = [];\r\n            if (opts.showPalette) {\r\n                for (var i = 0; i < selectionPalette.length; i++) {\r\n                    var rgb = Color(selectionPalette[i]).toRgbString();\r\n\r\n                    if (!paletteLookup[rgb]) {\r\n                        unique.push(selectionPalette[i]);\r\n                    }\r\n                }\r\n            }\r\n\r\n            return unique.reverse().slice(0, opts.maxSelectionSize);\r\n        }\r\n\r\n        function drawPalette() {\r\n\r\n            var currentColor = get();\r\n\r\n            var html = langx.map(paletteArray, function (palette, i) {\r\n                return paletteTemplate(palette, currentColor, \"sp-palette-row sp-palette-row-\" + i, opts);\r\n            });\r\n\r\n            updateSelectionPaletteFromStorage();\r\n\r\n            if (selectionPalette) {\r\n                html.push(paletteTemplate(getUniqueSelectionPalette(), currentColor, \"sp-palette-row sp-palette-row-selection\", opts));\r\n            }\r\n\r\n            paletteContainer.html(html.join(\"\"));\r\n        }\r\n\r\n        function drawInitial() {\r\n            if (opts.showInitial) {\r\n                var initial = colorOnShow;\r\n                var current = get();\r\n                initialColorContainer.html(paletteTemplate([initial, current], current, \"sp-palette-row-initial\", opts));\r\n            }\r\n        }\r\n\r\n        function dragStart() {\r\n            if (dragHeight <= 0 || dragWidth <= 0 || slideHeight <= 0) {\r\n                reflow();\r\n            }\r\n            isDragging = true;\r\n            container.addClass(draggingClass);\r\n            shiftMovementDirection = null;\r\n            boundElement.trigger('dragstart.ColorPicker', [ get() ]);\r\n        }\r\n\r\n        function dragStop() {\r\n            isDragging = false;\r\n            container.removeClass(draggingClass);\r\n            boundElement.trigger('dragstop.ColorPicker', [ get() ]);\r\n        }\r\n\r\n        function setFromTextInput() {\r\n\r\n            var value = textInput.val();\r\n\r\n            if ((value === null || value === \"\") && allowEmpty) {\r\n                set(null);\r\n                move();\r\n                updateOriginalInput();\r\n            }\r\n            else {\r\n                var tiny = Color(value);\r\n                if (tiny.isValid()) {\r\n                    set(tiny);\r\n                    move();\r\n                    updateOriginalInput();\r\n                }\r\n                else {\r\n                    textInput.addClass(\"sp-validation-error\");\r\n                }\r\n            }\r\n        }\r\n\r\n        function toggle() {\r\n            if (visible) {\r\n                hide();\r\n            }\r\n            else {\r\n                show();\r\n            }\r\n        }\r\n\r\n        function show() {\r\n            var event = eventer.create('beforeShow.ColorPicker');\r\n\r\n            if (visible) {\r\n                reflow();\r\n                return;\r\n            }\r\n\r\n            boundElement.trigger(event, [ get() ]);\r\n\r\n            if (callbacks.beforeShow(get()) === false || event.isDefaultPrevented()) {\r\n                return;\r\n            }\r\n\r\n            hideAll();\r\n            visible = true;\r\n\r\n            $(doc).on(\"keydown.ColorPicker\", onkeydown);\r\n            $(doc).on(\"click.ColorPicker\", clickout);\r\n            $(window).on(\"resize.ColorPicker\", resize);\r\n            replacer.addClass(\"sp-active\");\r\n            container.removeClass(\"sp-hidden\");\r\n\r\n            reflow();\r\n            updateUI();\r\n\r\n            colorOnShow = get();\r\n\r\n            drawInitial();\r\n            callbacks.show(colorOnShow);\r\n            boundElement.trigger('show.ColorPicker', [ colorOnShow ]);\r\n        }\r\n\r\n        function onkeydown(e) {\r\n            // Close on ESC\r\n            if (e.keyCode === 27) {\r\n                hide();\r\n            }\r\n        }\r\n\r\n        function clickout(e) {\r\n            // Return on right click.\r\n            if (e.button == 2) { return; }\r\n\r\n            // If a drag event was happening during the mouseup, don't hide\r\n            // on click.\r\n            if (isDragging) { return; }\r\n\r\n            if (clickoutFiresChange) {\r\n                updateOriginalInput(true);\r\n            }\r\n            else {\r\n                revert();\r\n            }\r\n            hide();\r\n        }\r\n\r\n        function hide() {\r\n            // Return if hiding is unnecessary\r\n            if (!visible || flat) { return; }\r\n            visible = false;\r\n\r\n            $(doc).off(\"keydown.ColorPicker\", onkeydown);\r\n            $(doc).off(\"click.ColorPicker\", clickout);\r\n            $(window).off(\"resize.ColorPicker\", resize);\r\n\r\n            replacer.removeClass(\"sp-active\");\r\n            container.addClass(\"sp-hidden\");\r\n\r\n            callbacks.hide(get());\r\n            boundElement.trigger('hide.ColorPicker', [ get() ]);\r\n        }\r\n\r\n        function revert() {\r\n            set(colorOnShow, true);\r\n            updateOriginalInput(true);\r\n        }\r\n\r\n        function set(color, ignoreFormatChange) {\r\n            if (Color.equals(color, get())) {\r\n                // Update UI just in case a validation error needs\r\n                // to be cleared.\r\n                updateUI();\r\n                return;\r\n            }\r\n\r\n            var newColor, newHsv;\r\n            if (!color && allowEmpty) {\r\n                isEmpty = true;\r\n            } else {\r\n                isEmpty = false;\r\n                newColor = colors.Color(color);\r\n                newHsv = newColor.toHsv();\r\n\r\n                currentHue = (newHsv.h % 360) / 360;\r\n                currentSaturation = newHsv.s;\r\n                currentValue = newHsv.v;\r\n                currentAlpha = newHsv.a;\r\n            }\r\n            updateUI();\r\n\r\n            if (newColor && newColor.isValid() && !ignoreFormatChange) {\r\n                currentPreferredFormat = opts.preferredFormat || newColor.getFormat();\r\n            }\r\n        }\r\n\r\n        function get(opts) {\r\n            opts = opts || { };\r\n\r\n            if (allowEmpty && isEmpty) {\r\n                return null;\r\n            }\r\n\r\n            return Color.fromRatio({\r\n                h: currentHue,\r\n                s: currentSaturation,\r\n                v: currentValue,\r\n                a: Math.round(currentAlpha * 1000) / 1000\r\n            }, { format: opts.format || currentPreferredFormat });\r\n        }\r\n\r\n        function isValid() {\r\n            return !textInput.hasClass(\"sp-validation-error\");\r\n        }\r\n\r\n        function move() {\r\n            updateUI();\r\n\r\n            callbacks.move(get());\r\n            boundElement.trigger('move.ColorPicker', [ get() ]);\r\n        }\r\n\r\n        function updateUI() {\r\n\r\n            textInput.removeClass(\"sp-validation-error\");\r\n\r\n            updateHelperLocations();\r\n\r\n            // Update dragger background color (gradients take care of saturation and value).\r\n            var flatColor = Color.fromRatio({ h: currentHue, s: 1, v: 1 });\r\n            dragger.css(\"background-color\", flatColor.toHexString());\r\n\r\n            // Get a format that alpha will be included in (hex and names ignore alpha)\r\n            var format = currentPreferredFormat;\r\n            if (currentAlpha < 1 && !(currentAlpha === 0 && format === \"name\")) {\r\n                if (format === \"hex\" || format === \"hex3\" || format === \"hex6\" || format === \"name\") {\r\n                    format = \"rgb\";\r\n                }\r\n            }\r\n\r\n            var realColor = get({ format: format }),\r\n                displayColor = '';\r\n\r\n             //reset background info for preview element\r\n            previewElement.removeClass(\"sp-clear-display\");\r\n            previewElement.css('background-color', 'transparent');\r\n\r\n            if (!realColor && allowEmpty) {\r\n                // Update the replaced elements background with icon indicating no color selection\r\n                previewElement.addClass(\"sp-clear-display\");\r\n            }\r\n            else {\r\n                var realHex = realColor.toHexString(),\r\n                    realRgb = realColor.toRgbString();\r\n\r\n                // Update the replaced elements background color (with actual selected color)\r\n                previewElement.css(\"background-color\", realRgb);\r\n\r\n                if (opts.showAlpha) {\r\n                    var rgb = realColor.toRgb();\r\n                    rgb.a = 0;\r\n                    var realAlpha = Color(rgb).toRgbString();\r\n                    var gradient = \"linear-gradient(left, \" + realAlpha + \", \" + realHex + \")\";\r\n\r\n                    if (browser.isIE) {\r\n                        alphaSliderInner.css(\"filter\", Color(realAlpha).toFilter({ gradientType: 1 }, realHex));\r\n                    }\r\n                    else {\r\n                        alphaSliderInner.css(\"background\", \"-webkit-\" + gradient);\r\n                        alphaSliderInner.css(\"background\", \"-moz-\" + gradient);\r\n                        alphaSliderInner.css(\"background\", \"-ms-\" + gradient);\r\n                        // Use current syntax gradient on unprefixed property.\r\n                        alphaSliderInner.css(\"background\",\r\n                            \"linear-gradient(to right, \" + realAlpha + \", \" + realHex + \")\");\r\n                    }\r\n                }\r\n\r\n                displayColor = realColor.toString(format);\r\n            }\r\n\r\n            // Update the text entry input as it changes happen\r\n            if (opts.showInput) {\r\n                textInput.val(displayColor);\r\n            }\r\n\r\n            if (opts.showPalette) {\r\n                drawPalette();\r\n            }\r\n\r\n            drawInitial();\r\n        }\r\n\r\n        function updateHelperLocations() {\r\n            var s = currentSaturation;\r\n            var v = currentValue;\r\n\r\n            if(allowEmpty && isEmpty) {\r\n                //if selected color is empty, hide the helpers\r\n                alphaSlideHelper.hide();\r\n                slideHelper.hide();\r\n                dragHelper.hide();\r\n            }\r\n            else {\r\n                //make sure helpers are visible\r\n                alphaSlideHelper.show();\r\n                slideHelper.show();\r\n                dragHelper.show();\r\n\r\n                // Where to show the little circle in that displays your current selected color\r\n                var dragX = s * dragWidth;\r\n                var dragY = dragHeight - (v * dragHeight);\r\n                dragX = Math.max(\r\n                    -dragHelperHeight,\r\n                    Math.min(dragWidth - dragHelperHeight, dragX - dragHelperHeight)\r\n                );\r\n                dragY = Math.max(\r\n                    -dragHelperHeight,\r\n                    Math.min(dragHeight - dragHelperHeight, dragY - dragHelperHeight)\r\n                );\r\n                dragHelper.css({\r\n                    \"top\": dragY + \"px\",\r\n                    \"left\": dragX + \"px\"\r\n                });\r\n\r\n                var alphaX = currentAlpha * alphaWidth;\r\n                alphaSlideHelper.css({\r\n                    \"left\": (alphaX - (alphaSlideHelperWidth / 2)) + \"px\"\r\n                });\r\n\r\n                // Where to show the bar that displays your current selected hue\r\n                var slideY = (currentHue) * slideHeight;\r\n                slideHelper.css({\r\n                    \"top\": (slideY - slideHelperHeight) + \"px\"\r\n                });\r\n            }\r\n        }\r\n\r\n        function updateOriginalInput(fireCallback) {\r\n            var color = get(),\r\n                displayColor = '',\r\n                hasChanged = !Color.equals(color, colorOnShow);\r\n\r\n            if (color) {\r\n                displayColor = color.toString(currentPreferredFormat);\r\n                // Update the selection palette with the current color\r\n                addColorToSelectionPalette(color);\r\n            }\r\n\r\n            if (isInput) {\r\n                boundElement.val(displayColor);\r\n            }\r\n\r\n            if (fireCallback && hasChanged) {\r\n                callbacks.change(color);\r\n                boundElement.trigger('change', [ color ]);\r\n            }\r\n        }\r\n\r\n        function reflow() {\r\n            if (!visible) {\r\n                return; // Calculations would be useless and wouldn't be reliable anyways\r\n            }\r\n            dragWidth = dragger.width();\r\n            dragHeight = dragger.height();\r\n            dragHelperHeight = dragHelper.height();\r\n            slideWidth = slider.width();\r\n            slideHeight = slider.height();\r\n            slideHelperHeight = slideHelper.height();\r\n            alphaWidth = alphaSlider.width();\r\n            alphaSlideHelperWidth = alphaSlideHelper.width();\r\n\r\n            if (!flat) {\r\n                container.css(\"position\", \"absolute\");\r\n                if (opts.offset) {\r\n                    container.offset(opts.offset);\r\n                } else {\r\n                    container.offset(getOffset(container, offsetElement));\r\n                }\r\n            }\r\n\r\n            updateHelperLocations();\r\n\r\n            if (opts.showPalette) {\r\n                drawPalette();\r\n            }\r\n\r\n            boundElement.trigger('reflow.ColorPicker');\r\n        }\r\n\r\n        function destroy() {\r\n            boundElement.show();\r\n            offsetElement.off(\"click.ColorPicker touchstart.ColorPicker\");\r\n            container.remove();\r\n            replacer.remove();\r\n            pickers[spect.id] = null;\r\n        }\r\n\r\n        function option(optionName, optionValue) {\r\n            if (optionName === undefined) {\r\n                return langx.mixin({}, opts);\r\n            }\r\n            if (optionValue === undefined) {\r\n                return opts[optionName];\r\n            }\r\n\r\n            opts[optionName] = optionValue;\r\n\r\n            if (optionName === \"preferredFormat\") {\r\n                currentPreferredFormat = opts.preferredFormat;\r\n            }\r\n            applyOptions();\r\n        }\r\n\r\n        function enable() {\r\n            disabled = false;\r\n            boundElement.attr(\"disabled\", false);\r\n            offsetElement.removeClass(\"sp-disabled\");\r\n        }\r\n\r\n        function disable() {\r\n            hide();\r\n            disabled = true;\r\n            boundElement.attr(\"disabled\", true);\r\n            offsetElement.addClass(\"sp-disabled\");\r\n        }\r\n\r\n        function setOffset(coord) {\r\n            opts.offset = coord;\r\n            reflow();\r\n        }\r\n\r\n        initialize();\r\n\r\n        var spect = {\r\n            show: show,\r\n            hide: hide,\r\n            toggle: toggle,\r\n            reflow: reflow,\r\n            option: option,\r\n            enable: enable,\r\n            disable: disable,\r\n            offset: setOffset,\r\n            set: function (c) {\r\n                set(c);\r\n                updateOriginalInput();\r\n            },\r\n            get: get,\r\n            destroy: destroy,\r\n            container: container\r\n        };\r\n\r\n        spect.id = pickers.push(spect) - 1;\r\n\r\n        return spect;\r\n    }\r\n\r\n    var ColorPicker = langx.Evented.inherit({\r\n        klassName : \"ColorPicker\",\r\n\r\n        init : init\r\n\r\n    });\r\n\r\n\r\n    /**\r\n    * checkOffset - get the offset below/above and left/right element depending on screen position\r\n    * Thanks https://github.com/jquery/jquery-ui/blob/master/ui/jquery.ui.datepicker.js\r\n    */\r\n    function getOffset(picker, input) {\r\n        var extraY = 0;\r\n        var dpWidth = picker.outerWidth();\r\n        var dpHeight = picker.outerHeight();\r\n        var inputHeight = input.outerHeight();\r\n        var doc = picker[0].ownerDocument;\r\n        var docElem = doc.documentElement;\r\n        var viewWidth = docElem.clientWidth + $(doc).scrollLeft();\r\n        var viewHeight = docElem.clientHeight + $(doc).scrollTop();\r\n        var offset = input.offset();\r\n        var offsetLeft = offset.left;\r\n        var offsetTop = offset.top;\r\n\r\n        offsetTop += inputHeight;\r\n\r\n        offsetLeft -=\r\n            Math.min(offsetLeft, (offsetLeft + dpWidth > viewWidth && viewWidth > dpWidth) ?\r\n            Math.abs(offsetLeft + dpWidth - viewWidth) : 0);\r\n\r\n        offsetTop -=\r\n            Math.min(offsetTop, ((offsetTop + dpHeight > viewHeight && viewHeight > dpHeight) ?\r\n            Math.abs(dpHeight + inputHeight - extraY) : extraY));\r\n\r\n        return {\r\n            top: offsetTop,\r\n            bottom: offset.bottom,\r\n            left: offsetLeft,\r\n            right: offset.right,\r\n            width: offset.width,\r\n            height: offset.height\r\n        };\r\n    }\r\n\r\n    /**\r\n    * stopPropagation - makes the code only doing this a little easier to read in line\r\n    */\r\n    function stopPropagation(e) {\r\n        e.stopPropagation();\r\n    }\r\n\r\n    /**\r\n    * Create a function bound to a given object\r\n    * Thanks to underscore.js\r\n    */\r\n    function bind(func, obj) {\r\n        var slice = Array.prototype.slice;\r\n        var args = slice.call(arguments, 2);\r\n        return function () {\r\n            return func.apply(obj, args.concat(slice.call(arguments)));\r\n        };\r\n    }\r\n\r\n    /**\r\n    * Lightweight drag helper.  Handles containment within the element, so that\r\n    * when dragging, the x is within [0,element.width] and y is within [0,element.height]\r\n    */\r\n    function draggable(element, onmove, onstart, onstop) {\r\n        onmove = onmove || function () { };\r\n        onstart = onstart || function () { };\r\n        onstop = onstop || function () { };\r\n        var doc = document;\r\n        var dragging = false;\r\n        var offset = {};\r\n        var maxHeight = 0;\r\n        var maxWidth = 0;\r\n        var hasTouch = ('ontouchstart' in window);\r\n\r\n        var duringDragEvents = {};\r\n        duringDragEvents[\"selectstart\"] = prevent;\r\n        duringDragEvents[\"dragstart\"] = prevent;\r\n        duringDragEvents[\"touchmove mousemove\"] = move;\r\n        duringDragEvents[\"touchend mouseup\"] = stop;\r\n\r\n        function prevent(e) {\r\n            if (e.stopPropagation) {\r\n                e.stopPropagation();\r\n            }\r\n            if (e.preventDefault) {\r\n                e.preventDefault();\r\n            }\r\n            e.returnValue = false;\r\n        }\r\n\r\n        function move(e) {\r\n            if (dragging) {\r\n                // Mouseup happened outside of window\r\n                if (browser.isIE && doc.documentMode < 9 && !e.button) {\r\n                    return stop();\r\n                }\r\n\r\n                var t0 = e.originalEvent && e.originalEvent.touches && e.originalEvent.touches[0];\r\n                var pageX = t0 && t0.pageX || e.pageX;\r\n                var pageY = t0 && t0.pageY || e.pageY;\r\n\r\n                var dragX = Math.max(0, Math.min(pageX - offset.left, maxWidth));\r\n                var dragY = Math.max(0, Math.min(pageY - offset.top, maxHeight));\r\n\r\n                if (hasTouch) {\r\n                    // Stop scrolling in iOS\r\n                    prevent(e);\r\n                }\r\n\r\n                onmove.apply(element, [dragX, dragY, e]);\r\n            }\r\n        }\r\n\r\n        function start(e) {\r\n            var rightclick = (e.which) ? (e.which == 3) : (e.button == 2);\r\n\r\n            if (!rightclick && !dragging) {\r\n                if (onstart.apply(element, arguments) !== false) {\r\n                    dragging = true;\r\n                    maxHeight = $(element).height();\r\n                    maxWidth = $(element).width();\r\n                    offset = $(element).offset();\r\n\r\n                    $(doc).on(duringDragEvents);\r\n                    $(doc.body).addClass(\"sp-dragging\");\r\n\r\n                    move(e);\r\n\r\n                    prevent(e);\r\n                }\r\n            }\r\n        }\r\n\r\n        function stop() {\r\n            if (dragging) {\r\n                $(doc).off(duringDragEvents);\r\n                $(doc.body).removeClass(\"sp-dragging\");\r\n\r\n                // Wait a tick before notifying observers to allow the click event\r\n                // to fire in Chrome.\r\n                setTimeout(function() {\r\n                    onstop.apply(element, arguments);\r\n                }, 0);\r\n            }\r\n            dragging = false;\r\n        }\r\n\r\n        $(element).on(\"touchstart mousedown\", start);\r\n    }\r\n\r\n    /**\r\n    * Define a query plugin\r\n    */\r\n    var dataID = \"ColorPicker.id\";\r\n    \r\n    function Plugin(opts, extra) {\r\n\r\n        if (typeof opts == \"string\") {\r\n\r\n            var returnValue = this;\r\n            var args = Array.prototype.slice.call( arguments, 1 );\r\n\r\n            this.each(function () {\r\n                var spect = pickers[$(this).data(dataID)];\r\n                if (spect) {\r\n                    var method = spect[opts];\r\n                    if (!method) {\r\n                        throw new Error( \"skylark-ui-colorpicker: no such method: '\" + opts + \"'\" );\r\n                    }\r\n\r\n                    if (opts == \"get\") {\r\n                        returnValue = spect.get();\r\n                    }\r\n                    else if (opts == \"container\") {\r\n                        returnValue = spect.container;\r\n                    }\r\n                    else if (opts == \"option\") {\r\n                        returnValue = spect.option.apply(spect, args);\r\n                    }\r\n                    else if (opts == \"destroy\") {\r\n                        spect.destroy();\r\n                        $(this).removeData(dataID);\r\n                    }\r\n                    else {\r\n                        method.apply(spect, args);\r\n                    }\r\n                }\r\n            });\r\n\r\n            return returnValue;\r\n        }\r\n\r\n        // Initializing a new instance of ColorPicker\r\n        return this.colorPicker(\"destroy\").each(function () {\r\n            var options = langx.mixin({}, $(this).data(), opts);\r\n            var spect = ColorPicker(this, options);\r\n            $(this).data(dataID, spect.id);\r\n        });\r\n    }\r\n\r\n    ColorPicker.load = true;\r\n    ColorPicker.loadOpts = {};\r\n    ColorPicker.draggable = draggable;\r\n    ColorPicker.defaults = defaultOpts;\r\n\r\n    ColorPicker.localization = { };\r\n    ColorPicker.palettes = { };\r\n\r\n    $.fn.colorPicker = Plugin;\r\n\r\n    return skylark.attach(\"ui.ColorPicker\",ColorPicker);\r\n\r\n});\r\n\ndefine('skylark-widgets-colorpicker/i18n/texts_ja',[\r\n\t\"../ColorPicker\"\r\n],function(ColorPicker) {\r\n    var localization = ColorPicker.localization[\"ja\"] = {\r\n        cancelText: \"中止\",\r\n        chooseText: \"選択\"\r\n    };\r\n\r\n    return localization;\r\n});\ndefine('skylark-widgets-colorpicker/i18n/texts_zh-cn',[\r\n\t\"../ColorPicker\"\r\n],function(ColorPicker) {\r\n    var localization = ColorPicker.localization[\"zh-cn\"] = {\r\n        cancelText: \"取消\",\r\n        chooseText: \"选择\",\r\n        clearText: \"清除\",\r\n        togglePaletteMoreText: \"更多选项\",\r\n        togglePaletteLessText: \"隐藏\",\r\n        noColorSelectedText: \"尚未选择任何颜色\"\r\n    };\r\n\r\n    return localization;\r\n\r\n});\r\n\ndefine('skylark-widgets-colorpicker/i18n/texts_zh-tw',[\r\n\t\"../ColorPicker\"\r\n],function(ColorPicker) {\r\n    var localization = ColorPicker.localization[\"zh-tw\"] = {\r\n        cancelText: \"取消\",\r\n        chooseText: \"選擇\",\r\n        clearText: \"清除\",\r\n        togglePaletteMoreText: \"更多選項\",\r\n        togglePaletteLessText: \"隱藏\",\r\n        noColorSelectedText: \"尚未選擇任何顏色\"\r\n    };\r\n\r\n    return localization;\r\n\r\n});\ndefine('skylark-widgets-colorpicker/main',[\r\n    \"./ColorPicker\",\r\n    \"./i18n/texts_ja\",\r\n    \"./i18n/texts_zh-cn\",\r\n    \"./i18n/texts_zh-tw\"\r\n], function(ColorPicker) {\r\n    return ColorPicker;\r\n});\r\n\ndefine('skylark-widgets-colorpicker', ['skylark-widgets-colorpicker/main'], function (main) { return main; });\n\n"]}