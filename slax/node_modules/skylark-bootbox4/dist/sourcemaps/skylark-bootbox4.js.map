{"version":3,"sources":["skylark-bootbox4.js"],"names":["define","skylark","langx","$","templates","dialog","header","footer","closeButton","form","inputs","text","textarea","email","select","checkbox","date","time","number","password","defaults","locale","backdrop","animate","className","show","container","bootbox","_t","key","locales","en","processCallback","e","callback","stopPropagation","preventDefault","preserveDialog","isFunction","call","modal","each","collection","iterator","index","value","mergeArguments","args","properties","extend","argn","length","options","Error","mapArguments","mergeDialogOptions","labels","baseOptions","buttons","createLabels","apply","validateButtons","i","j","arguments","argument","toLowerCase","toUpperCase","label","allowedButtons","undefined","join","alert","ok","onEscape","this","confirm","cancel","prompt","input","shouldShow","inputOptions","inputType","message","val","checkedItems","find","_","item","push","title","groups","isArray","option","elem","group","attr","append","values","prop","placeholder","pattern","maxlength","on","click","off","focus","total","obj","k","t","getKeyLength","button","type","sanitize","innerDialog","body","buttonStr","callbacks","fn","html","addClass","size","before","prepend","css","prependTo","after","target","remove","children","currentTarget","get","trigger","callbackKey","data","which","keyboard","setDefaults","hideAll","bg_BG","OK","CANCEL","CONFIRM","br","cs","da","de","el","es","et","fa","fi","fr","he","hu","hr","id","it","ja","lt","lv","nl","no","pl","pt","ru","sq","sv","th","tr","zh_CN","zh_TW","addLocale","name","v","removeLocale","setLocale","init","_$","attach","main"],"mappings":"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","file":"../skylark-bootbox4.js","sourcesContent":["define('skylark-bootbox4/bootbox',[\n  \"skylark-langx/skylark\",\n  \"skylark-langx/langx\",\n  \"skylark-domx-query\",\n  \"skylark-domx-data\",\n  \"skylark-domx-styler\"\n],function(skylark,langx,$) {\n\n  \"use strict\";\n\n  // the base DOM structure needed to create a modal\n  var templates = {\n    dialog:\n      \"<div class='bootbox modal' tabindex='-1' role='dialog'>\" +\n        \"<div class='modal-dialog'>\" +\n          \"<div class='modal-content'>\" +\n            \"<div class='modal-body'><div class='bootbox-body'></div></div>\" +\n          \"</div>\" +\n        \"</div>\" +\n      \"</div>\",\n    header:\n      \"<div class='modal-header'>\" +\n        \"<h4 class='modal-title'></h4>\" +\n      \"</div>\",\n    footer:\n      \"<div class='modal-footer'></div>\",\n    closeButton:\n      \"<button type='button' class='bootbox-close-button close' data-dismiss='modal' aria-hidden='true'>&times;</button>\",\n    form:\n      \"<form class='bootbox-form'></form>\",\n    inputs: {\n      text:\n        \"<input class='bootbox-input bootbox-input-text form-control' autocomplete=off type=text />\",\n      textarea:\n        \"<textarea class='bootbox-input bootbox-input-textarea form-control'></textarea>\",\n      email:\n        \"<input class='bootbox-input bootbox-input-email form-control' autocomplete='off' type='email' />\",\n      select:\n        \"<select class='bootbox-input bootbox-input-select form-control'></select>\",\n      checkbox:\n        \"<div class='checkbox'><label><input class='bootbox-input bootbox-input-checkbox' type='checkbox' /></label></div>\",\n      date:\n        \"<input class='bootbox-input bootbox-input-date form-control' autocomplete=off type='date' />\",\n      time:\n        \"<input class='bootbox-input bootbox-input-time form-control' autocomplete=off type='time' />\",\n      number:\n        \"<input class='bootbox-input bootbox-input-number form-control' autocomplete=off type='number' />\",\n      password:\n        \"<input class='bootbox-input bootbox-input-password form-control' autocomplete='off' type='password' />\"\n    }\n  };\n\n  var defaults = {\n    // default language\n    locale: \"en\",\n    // show backdrop or not. Default to static so user has to interact with dialog\n    backdrop: \"static\",\n    // animate the modal in/out\n    animate: true,\n    // additional class string applied to the top level dialog\n    className: null,\n    // whether or not to include a close button\n    closeButton: true,\n    // show the dialog immediately by default\n    show: true,\n    // dialog container\n    container: \"body\"\n  };\n\n  // our public object; augmented after our private API\n  var bootbox = {};\n\n  /**\n   * @private\n   */\n  function _t(key) {\n    var locale = locales[defaults.locale];\n    return locale ? locale[key] : locales.en[key];\n  }\n\n  function processCallback(e, dialog, callback) {\n    e.stopPropagation();\n    e.preventDefault();\n\n    // by default we assume a callback will get rid of the dialog,\n    // although it is given the opportunity to override this\n\n    // so, if the callback can be invoked and it *explicitly returns false*\n    // then we'll set a flag to keep the dialog active...\n    var preserveDialog = langx.isFunction(callback) && callback.call(dialog, e) === false;\n\n    // ... otherwise we'll bin it\n    if (!preserveDialog) {\n      dialog.modal(\"hide\");\n    }\n  }\n\n  function getKeyLength(obj) {\n    // @TODO defer to Object.keys(x).length if available?\n    var k, t = 0;\n    for (k in obj) {\n      t ++;\n    }\n    return t;\n  }\n\n  function each(collection, iterator) {\n    var index = 0;\n    langx.each(collection, function(key, value) {\n      iterator(key, value, index++);\n    });\n  }\n\n  function sanitize(options) {\n    var buttons;\n    var total;\n\n    if (typeof options !== \"object\") {\n      throw new Error(\"Please supply an object of options\");\n    }\n\n    if (!options.message) {\n      throw new Error(\"Please specify a message\");\n    }\n\n    // make sure any supplied options take precedence over defaults\n    options = langx.extend({}, defaults, options);\n\n    if (!options.buttons) {\n      options.buttons = {};\n    }\n\n    buttons = options.buttons;\n\n    total = getKeyLength(buttons);\n\n    each(buttons, function(key, button, index) {\n\n      if (langx.isFunction(button)) {\n        // short form, assume value is our callback. Since button\n        // isn't an object it isn't a reference either so re-assign it\n        button = buttons[key] = {\n          callback: button\n        };\n      }\n\n      // before any further checks make sure by now button is the correct type\n      if (langx.type(button) !== \"object\") {\n        throw new Error(\"button with key \" + key + \" must be an object\");\n      }\n\n      if (!button.label) {\n        // the lack of an explicit label means we'll assume the key is good enough\n        button.label = key;\n      }\n\n      if (!button.className) {\n        if (total <= 2 && index === total-1) {\n          // always add a primary to the main option in a two-button dialog\n          button.className = \"btn-primary\";\n        } else {\n          button.className = \"btn-default\";\n        }\n      }\n    });\n\n    return options;\n  }\n\n  /**\n   * map a flexible set of arguments into a single returned object\n   * if args.length is already one just return it, otherwise\n   * use the properties argument to map the unnamed args to\n   * object properties\n   * so in the latter case:\n   * mapArguments([\"foo\", langx.noop], [\"message\", \"callback\"])\n   * -> { message: \"foo\", callback: langx.noop }\n   */\n  function mapArguments(args, properties) {\n    var argn = args.length;\n    var options = {};\n\n    if (argn < 1 || argn > 2) {\n      throw new Error(\"Invalid argument length\");\n    }\n\n    if (argn === 2 || typeof args[0] === \"string\") {\n      options[properties[0]] = args[0];\n      options[properties[1]] = args[1];\n    } else {\n      options = args[0];\n    }\n\n    return options;\n  }\n\n  /**\n   * merge a set of default dialog options with user supplied arguments\n   */\n  function mergeArguments(defaults, args, properties) {\n    return langx.extend(\n      // deep merge\n      true,\n      // ensure the target is an empty, unreferenced object\n      {},\n      // the base options object for this type of dialog (often just buttons)\n      defaults,\n      // args could be an object or array; if it's an array properties will\n      // map it to a proper options object\n      mapArguments(\n        args,\n        properties\n      )\n    );\n  }\n\n  /**\n   * this entry-level method makes heavy use of composition to take a simple\n   * range of inputs and return valid options suitable for passing to bootbox.dialog\n   */\n  function mergeDialogOptions(className, labels, properties, args) {\n    //  build up a base set of dialog properties\n    var baseOptions = {\n      className: \"bootbox-\" + className,\n      buttons: createLabels.apply(null, labels)\n    };\n\n    // ensure the buttons properties generated, *after* merging\n    // with user args are still valid against the supplied labels\n    return validateButtons(\n      // merge the generated base properties with user supplied arguments\n      mergeArguments(\n        baseOptions,\n        args,\n        // if args.length > 1, properties specify how each arg maps to an object key\n        properties\n      ),\n      labels\n    );\n  }\n\n  /**\n   * from a given list of arguments return a suitable object of button labels\n   * all this does is normalise the given labels and translate them where possible\n   * e.g. \"ok\", \"confirm\" -> { ok: \"OK, cancel: \"Annuleren\" }\n   */\n  function createLabels() {\n    var buttons = {};\n\n    for (var i = 0, j = arguments.length; i < j; i++) {\n      var argument = arguments[i];\n      var key = argument.toLowerCase();\n      var value = argument.toUpperCase();\n\n      buttons[key] = {\n        label: _t(value)\n      };\n    }\n\n    return buttons;\n  }\n\n  function validateButtons(options, buttons) {\n    var allowedButtons = {};\n    each(buttons, function(key, value) {\n      allowedButtons[value] = true;\n    });\n\n    each(options.buttons, function(key) {\n      if (allowedButtons[key] === undefined) {\n        throw new Error(\"button key \" + key + \" is not allowed (options are \" + buttons.join(\"\\n\") + \")\");\n      }\n    });\n\n    return options;\n  }\n\n  bootbox.alert = function() {\n    var options;\n\n    options = mergeDialogOptions(\"alert\", [\"ok\"], [\"message\", \"callback\"], arguments);\n\n    if (options.callback && !langx.isFunction(options.callback)) {\n      throw new Error(\"alert requires callback property to be a function when provided\");\n    }\n\n    /**\n     * overrides\n     */\n    options.buttons.ok.callback = options.onEscape = function() {\n      if (langx.isFunction(options.callback)) {\n        return options.callback.call(this);\n      }\n      return true;\n    };\n\n    return bootbox.dialog(options);\n  };\n\n  bootbox.confirm = function() {\n    var options;\n\n    options = mergeDialogOptions(\"confirm\", [\"cancel\", \"confirm\"], [\"message\", \"callback\"], arguments);\n\n    /**\n     * overrides; undo anything the user tried to set they shouldn't have\n     */\n    options.buttons.cancel.callback = options.onEscape = function() {\n      return options.callback.call(this, false);\n    };\n\n    options.buttons.confirm.callback = function() {\n      return options.callback.call(this, true);\n    };\n\n    // confirm specific validation\n    if (!langx.isFunction(options.callback)) {\n      throw new Error(\"confirm requires a callback\");\n    }\n\n    return bootbox.dialog(options);\n  };\n\n  bootbox.prompt = function() {\n    var options;\n    var defaults;\n    var dialog;\n    var form;\n    var input;\n    var shouldShow;\n    var inputOptions;\n\n    // we have to create our form first otherwise\n    // its value is undefined when gearing up our options\n    // @TODO this could be solved by allowing message to\n    // be a function instead...\n    form = $(templates.form);\n\n    // prompt defaults are more complex than others in that\n    // users can override more defaults\n    // @TODO I don't like that prompt has to do a lot of heavy\n    // lifting which mergeDialogOptions can *almost* support already\n    // just because of 'value' and 'inputType' - can we refactor?\n    defaults = {\n      className: \"bootbox-prompt\",\n      buttons: createLabels(\"cancel\", \"confirm\"),\n      value: \"\",\n      inputType: \"text\"\n    };\n\n    options = validateButtons(\n      mergeArguments(defaults, arguments, [\"title\", \"callback\"]),\n      [\"cancel\", \"confirm\"]\n    );\n\n    // capture the user's show value; we always set this to false before\n    // spawning the dialog to give us a chance to attach some handlers to\n    // it, but we need to make sure we respect a preference not to show it\n    shouldShow = (options.show === undefined) ? true : options.show;\n\n    /**\n     * overrides; undo anything the user tried to set they shouldn't have\n     */\n    options.message = form;\n\n    options.buttons.cancel.callback = options.onEscape = function() {\n      return options.callback.call(this, null);\n    };\n\n    options.buttons.confirm.callback = function() {\n      var value;\n\n      switch (options.inputType) {\n        case \"text\":\n        case \"textarea\":\n        case \"email\":\n        case \"select\":\n        case \"date\":\n        case \"time\":\n        case \"number\":\n        case \"password\":\n          value = input.val();\n          break;\n\n        case \"checkbox\":\n          var checkedItems = input.find(\"input:checked\");\n\n          // we assume that checkboxes are always multiple,\n          // hence we default to an empty array\n          value = [];\n\n          each(checkedItems, function(_, item) {\n            value.push($(item).val());\n          });\n          break;\n      }\n\n      return options.callback.call(this, value);\n    };\n\n    options.show = false;\n\n    // prompt specific validation\n    if (!options.title) {\n      throw new Error(\"prompt requires a title\");\n    }\n\n    if (!langx.isFunction(options.callback)) {\n      throw new Error(\"prompt requires a callback\");\n    }\n\n    if (!templates.inputs[options.inputType]) {\n      throw new Error(\"invalid prompt type\");\n    }\n\n    // create the input based on the supplied type\n    input = $(templates.inputs[options.inputType]);\n\n    switch (options.inputType) {\n      case \"text\":\n      case \"textarea\":\n      case \"email\":\n      case \"date\":\n      case \"time\":\n      case \"number\":\n      case \"password\":\n        input.val(options.value);\n        break;\n\n      case \"select\":\n        var groups = {};\n        inputOptions = options.inputOptions || [];\n\n        if (!langx.isArray(inputOptions)) {\n          throw new Error(\"Please pass an array of input options\");\n        }\n\n        if (!inputOptions.length) {\n          throw new Error(\"prompt with select requires options\");\n        }\n\n        each(inputOptions, function(_, option) {\n\n          // assume the element to attach to is the input...\n          var elem = input;\n\n          if (option.value === undefined || option.text === undefined) {\n            throw new Error(\"given options in wrong format\");\n          }\n\n          // ... but override that element if this option sits in a group\n\n          if (option.group) {\n            // initialise group if necessary\n            if (!groups[option.group]) {\n              groups[option.group] = $(\"<optgroup/>\").attr(\"label\", option.group);\n            }\n\n            elem = groups[option.group];\n          }\n\n          elem.append(\"<option value='\" + option.value + \"'>\" + option.text + \"</option>\");\n        });\n\n        each(groups, function(_, group) {\n          input.append(group);\n        });\n\n        // safe to set a select's value as per a normal input\n        input.val(options.value);\n        break;\n\n      case \"checkbox\":\n        var values   = langx.isArray(options.value) ? options.value : [options.value];\n        inputOptions = options.inputOptions || [];\n\n        if (!inputOptions.length) {\n          throw new Error(\"prompt with checkbox requires options\");\n        }\n\n        if (!inputOptions[0].value || !inputOptions[0].text) {\n          throw new Error(\"given options in wrong format\");\n        }\n\n        // checkboxes have to nest within a containing element, so\n        // they break the rules a bit and we end up re-assigning\n        // our 'input' element to this container instead\n        input = $(\"<div/>\");\n\n        each(inputOptions, function(_, option) {\n          var checkbox = $(templates.inputs[options.inputType]);\n\n          checkbox.find(\"input\").attr(\"value\", option.value);\n          checkbox.find(\"label\").append(option.text);\n\n          // we've ensured values is an array so we can always iterate over it\n          each(values, function(_, value) {\n            if (value === option.value) {\n              checkbox.find(\"input\").prop(\"checked\", true);\n            }\n          });\n\n          input.append(checkbox);\n        });\n        break;\n    }\n\n    // @TODO provide an attributes option instead\n    // and simply map that as keys: vals\n    if (options.placeholder) {\n      input.attr(\"placeholder\", options.placeholder);\n    }\n\n    if (options.pattern) {\n      input.attr(\"pattern\", options.pattern);\n    }\n\n    if (options.maxlength) {\n      input.attr(\"maxlength\", options.maxlength);\n    }\n\n    // now place it in our form\n    form.append(input);\n\n    form.on(\"submit\", function(e) {\n      e.preventDefault();\n      // Fix for SammyJS (or similar JS routing library) hijacking the form post.\n      e.stopPropagation();\n      // @TODO can we actually click *the* button object instead?\n      // e.g. buttons.confirm.click() or similar\n      dialog.find(\".btn-primary\").click();\n    });\n\n    dialog = bootbox.dialog(options);\n\n    // clear the existing handler focusing the submit button...\n    dialog.off(\"shown.bs.modal\");\n\n    // ...and replace it with one focusing our input, if possible\n    dialog.on(\"shown.bs.modal\", function() {\n      // need the closure here since input isn't\n      // an object otherwise\n      input.focus();\n    });\n\n    if (shouldShow === true) {\n      dialog.modal(\"show\");\n    }\n\n    return dialog;\n  };\n\n  bootbox.dialog = function(options) {\n    options = sanitize(options);\n\n    var dialog = $(templates.dialog);\n    var innerDialog = dialog.find(\".modal-dialog\");\n    var body = dialog.find(\".modal-body\");\n    var buttons = options.buttons;\n    var buttonStr = \"\";\n    var callbacks = {\n      onEscape: options.onEscape\n    };\n\n    if ($.fn.modal === undefined) {\n      throw new Error(\n        \"$.fn.modal is not defined; please double check you have included \" +\n        \"the Bootstrap JavaScript library. See http://getbootstrap.com/javascript/ \" +\n        \"for more details.\"\n      );\n    }\n\n    each(buttons, function(key, button) {\n\n      // @TODO I don't like this string appending to itself; bit dirty. Needs reworking\n      // can we just build up button elements instead? slower but neater. Then button\n      // can just become a template too\n      buttonStr += \"<button data-bb-handler='\" + key + \"' type='button' class='btn \" + button.className + \"'>\" + button.label + \"</button>\";\n      callbacks[key] = button.callback;\n    });\n\n    body.find(\".bootbox-body\").html(options.message);\n\n    if (options.animate === true) {\n      dialog.addClass(\"fade\");\n    }\n\n    if (options.className) {\n      dialog.addClass(options.className);\n    }\n\n    if (options.size === \"large\") {\n      innerDialog.addClass(\"modal-lg\");\n    } else if (options.size === \"small\") {\n      innerDialog.addClass(\"modal-sm\");\n    }\n\n    if (options.title) {\n      body.before(templates.header);\n    }\n\n    if (options.closeButton) {\n      var closeButton = $(templates.closeButton);\n\n      if (options.title) {\n        dialog.find(\".modal-header\").prepend(closeButton);\n      } else {\n        closeButton.css(\"margin-top\", \"-10px\").prependTo(body);\n      }\n    }\n\n    if (options.title) {\n      dialog.find(\".modal-title\").html(options.title);\n    }\n\n    if (buttonStr.length) {\n      body.after(templates.footer);\n      dialog.find(\".modal-footer\").html(buttonStr);\n    }\n\n\n    /**\n     * Bootstrap event listeners; used handle extra\n     * setup & teardown required after the underlying\n     * modal has performed certain actions\n     */\n\n    dialog.on(\"hidden.bs.modal\", function(e) {\n      // ensure we don't accidentally intercept hidden events triggered\n      // by children of the current dialog. We shouldn't anymore now BS\n      // namespaces its events; but still worth doing\n      if (e.target === this) {\n        dialog.remove();\n      }\n    });\n\n    /*\n    dialog.on(\"show.bs.modal\", function() {\n      // sadly this doesn't work; show is called *just* before\n      // the backdrop is added so we'd need a setTimeout hack or\n      // otherwise... leaving in as would be nice\n      if (options.backdrop) {\n        dialog.next(\".modal-backdrop\").addClass(\"bootbox-backdrop\");\n      }\n    });\n    */\n\n    dialog.on(\"shown.bs.modal\", function() {\n      dialog.find(\".btn-primary:first\").focus();\n    });\n\n    /**\n     * Bootbox event listeners; experimental and may not last\n     * just an attempt to decouple some behaviours from their\n     * respective triggers\n     */\n\n    if (options.backdrop !== \"static\") {\n      // A boolean true/false according to the Bootstrap docs\n      // should show a dialog the user can dismiss by clicking on\n      // the background.\n      // We always only ever pass static/false to the actual\n      // $.modal function because with `true` we can't trap\n      // this event (the .modal-backdrop swallows it)\n      // However, we still want to sort of respect true\n      // and invoke the escape mechanism instead\n      dialog.on(\"click.dismiss.bs.modal\", function(e) {\n        // @NOTE: the target varies in >= 3.3.x releases since the modal backdrop\n        // moved *inside* the outer dialog rather than *alongside* it\n        if (dialog.children(\".modal-backdrop\").length) {\n          e.currentTarget = dialog.children(\".modal-backdrop\").get(0);\n        }\n\n        if (e.target !== e.currentTarget) {\n          return;\n        }\n\n        dialog.trigger(\"escape.close.bb\");\n      });\n    }\n\n    dialog.on(\"escape.close.bb\", function(e) {\n      if (callbacks.onEscape) {\n        processCallback(e, dialog, callbacks.onEscape);\n      }\n    });\n\n    /**\n     * Standard jQuery event listeners; used to handle user\n     * interaction with our dialog\n     */\n\n    dialog.on(\"click\", \".modal-footer button\", function(e) {\n      var callbackKey = $(this).data(\"bb-handler\");\n\n      processCallback(e, dialog, callbacks[callbackKey]);\n    });\n\n    dialog.on(\"click\", \".bootbox-close-button\", function(e) {\n      // onEscape might be falsy but that's fine; the fact is\n      // if the user has managed to click the close button we\n      // have to close the dialog, callback or not\n      processCallback(e, dialog, callbacks.onEscape);\n    });\n\n    dialog.on(\"keyup\", function(e) {\n      if (e.which === 27) {\n        dialog.trigger(\"escape.close.bb\");\n      }\n    });\n\n    // the remainder of this method simply deals with adding our\n    // dialogent to the DOM, augmenting it with Bootstrap's modal\n    // functionality and then giving the resulting object back\n    // to our caller\n\n    $(options.container).append(dialog);\n\n    dialog.modal({\n      backdrop: options.backdrop ? \"static\": false,\n      keyboard: false,\n      show: false\n    });\n\n    if (options.show) {\n      dialog.modal(\"show\");\n    }\n\n    // @TODO should we return the raw element here or should\n    // we wrap it in an object on which we can expose some neater\n    // methods, e.g. var d = bootbox.alert(); d.hide(); instead\n    // of d.modal(\"hide\");\n\n   /*\n    function BBDialog(elem) {\n      this.elem = elem;\n    }\n\n    BBDialog.prototype = {\n      hide: function() {\n        return this.elem.modal(\"hide\");\n      },\n      show: function() {\n        return this.elem.modal(\"show\");\n      }\n    };\n    */\n\n    return dialog;\n\n  };\n\n  bootbox.setDefaults = function() {\n    var values = {};\n\n    if (arguments.length === 2) {\n      // allow passing of single key/value...\n      values[arguments[0]] = arguments[1];\n    } else {\n      // ... and as an object too\n      values = arguments[0];\n    }\n\n    langx.extend(defaults, values);\n  };\n\n  bootbox.hideAll = function() {\n    $(\".bootbox\").modal(\"hide\");\n\n    return bootbox;\n  };\n\n\n  /**\n   * standard locales. Please add more according to ISO 639-1 standard. Multiple language variants are\n   * unlikely to be required. If this gets too large it can be split out into separate JS files.\n   */\n  var locales = {\n    bg_BG : {\n      OK      : \"Ок\",\n      CANCEL  : \"Отказ\",\n      CONFIRM : \"Потвърждавам\"\n    },\n    br : {\n      OK      : \"OK\",\n      CANCEL  : \"Cancelar\",\n      CONFIRM : \"Sim\"\n    },\n    cs : {\n      OK      : \"OK\",\n      CANCEL  : \"Zrušit\",\n      CONFIRM : \"Potvrdit\"\n    },\n    da : {\n      OK      : \"OK\",\n      CANCEL  : \"Annuller\",\n      CONFIRM : \"Accepter\"\n    },\n    de : {\n      OK      : \"OK\",\n      CANCEL  : \"Abbrechen\",\n      CONFIRM : \"Akzeptieren\"\n    },\n    el : {\n      OK      : \"Εντάξει\",\n      CANCEL  : \"Ακύρωση\",\n      CONFIRM : \"Επιβεβαίωση\"\n    },\n    en : {\n      OK      : \"OK\",\n      CANCEL  : \"Cancel\",\n      CONFIRM : \"OK\"\n    },\n    es : {\n      OK      : \"OK\",\n      CANCEL  : \"Cancelar\",\n      CONFIRM : \"Aceptar\"\n    },\n    et : {\n      OK      : \"OK\",\n      CANCEL  : \"Katkesta\",\n      CONFIRM : \"OK\"\n    },\n    fa : {\n      OK      : \"قبول\",\n      CANCEL  : \"لغو\",\n      CONFIRM : \"تایید\"\n    },\n    fi : {\n      OK      : \"OK\",\n      CANCEL  : \"Peruuta\",\n      CONFIRM : \"OK\"\n    },\n    fr : {\n      OK      : \"OK\",\n      CANCEL  : \"Annuler\",\n      CONFIRM : \"D'accord\"\n    },\n    he : {\n      OK      : \"אישור\",\n      CANCEL  : \"ביטול\",\n      CONFIRM : \"אישור\"\n    },\n    hu : {\n      OK      : \"OK\",\n      CANCEL  : \"Mégsem\",\n      CONFIRM : \"Megerősít\"\n    },\n    hr : {\n      OK      : \"OK\",\n      CANCEL  : \"Odustani\",\n      CONFIRM : \"Potvrdi\"\n    },\n    id : {\n      OK      : \"OK\",\n      CANCEL  : \"Batal\",\n      CONFIRM : \"OK\"\n    },\n    it : {\n      OK      : \"OK\",\n      CANCEL  : \"Annulla\",\n      CONFIRM : \"Conferma\"\n    },\n    ja : {\n      OK      : \"OK\",\n      CANCEL  : \"キャンセル\",\n      CONFIRM : \"確認\"\n    },\n    lt : {\n      OK      : \"Gerai\",\n      CANCEL  : \"Atšaukti\",\n      CONFIRM : \"Patvirtinti\"\n    },\n    lv : {\n      OK      : \"Labi\",\n      CANCEL  : \"Atcelt\",\n      CONFIRM : \"Apstiprināt\"\n    },\n    nl : {\n      OK      : \"OK\",\n      CANCEL  : \"Annuleren\",\n      CONFIRM : \"Accepteren\"\n    },\n    no : {\n      OK      : \"OK\",\n      CANCEL  : \"Avbryt\",\n      CONFIRM : \"OK\"\n    },\n    pl : {\n      OK      : \"OK\",\n      CANCEL  : \"Anuluj\",\n      CONFIRM : \"Potwierdź\"\n    },\n    pt : {\n      OK      : \"OK\",\n      CANCEL  : \"Cancelar\",\n      CONFIRM : \"Confirmar\"\n    },\n    ru : {\n      OK      : \"OK\",\n      CANCEL  : \"Отмена\",\n      CONFIRM : \"Применить\"\n    },\n    sq : {\n      OK : \"OK\",\n      CANCEL : \"Anulo\",\n      CONFIRM : \"Prano\"\n    },\n    sv : {\n      OK      : \"OK\",\n      CANCEL  : \"Avbryt\",\n      CONFIRM : \"OK\"\n    },\n    th : {\n      OK      : \"ตกลง\",\n      CANCEL  : \"ยกเลิก\",\n      CONFIRM : \"ยืนยัน\"\n    },\n    tr : {\n      OK      : \"Tamam\",\n      CANCEL  : \"İptal\",\n      CONFIRM : \"Onayla\"\n    },\n    zh_CN : {\n      OK      : \"OK\",\n      CANCEL  : \"取消\",\n      CONFIRM : \"确认\"\n    },\n    zh_TW : {\n      OK      : \"OK\",\n      CANCEL  : \"取消\",\n      CONFIRM : \"確認\"\n    }\n  };\n\n  bootbox.addLocale = function(name, values) {\n    langx.each([\"OK\", \"CANCEL\", \"CONFIRM\"], function(_, v) {\n      if (!values[v]) {\n        throw new Error(\"Please supply a translation for '\" + v + \"'\");\n      }\n    });\n\n    locales[name] = {\n      OK: values.OK,\n      CANCEL: values.CANCEL,\n      CONFIRM: values.CONFIRM\n    };\n\n    return bootbox;\n  };\n\n  bootbox.removeLocale = function(name) {\n    delete locales[name];\n\n    return bootbox;\n  };\n\n  bootbox.setLocale = function(name) {\n    return bootbox.setDefaults(\"locale\", name);\n  };\n\n  bootbox.init = function(_$) {\n    return init(_$ || $);\n  };\n\n  return skylark.attach(\"itg.bootbox\",bootbox);\n\n});\n\ndefine('skylark-bootbox4/main',[\r\n\t\"./bootbox\"\r\n],function(bootbox){\r\n\treturn bootbox;\r\n});\ndefine('skylark-bootbox4', ['skylark-bootbox4/main'], function (main) { return main; });\n\n"]}