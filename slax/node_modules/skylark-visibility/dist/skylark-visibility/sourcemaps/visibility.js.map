{"version":3,"sources":["visibility.js"],"names":["define","core","Visibility","lastTimer","every","interval","hiddenInterval","callback","_time","number","_timers","visible","hidden","_run","isSupported","_listen","stop","id","_stop","_timed","_wasHidden","change","_stopRun","runNow","timer","runner","last","Date","call","window","delay","setTimeout","setInterval","clearInterval","clearTimeout","event","isHidden","wasHidden","i"],"mappings":";;;;;;;AAAAA,QACI,UACF,SAASC,GACP,IAEwBC,EAFpBC,GAAa,EA0JjB,OAxJwBD,EAwJPD,GA/HFG,MAAQ,SAAUC,EAAUC,EAAgBC,GACnDL,EAAWM,QAELD,IACFA,EAAWD,EACXA,EAAiB,MAIrB,IAAIG,EADJN,GAAa,EAab,OAVAD,EAAWQ,QAAQD,IACfE,QAAUN,EACVO,OAAUN,EACVC,SAAUA,GAEdL,EAAWW,KAAKJ,GAAQ,GAEnBP,EAAWY,eACZZ,EAAWa,UAERN,GAWXP,EAAWc,KAAO,SAASC,GACvB,QAAMf,EAAWQ,QAAQO,KAGzBf,EAAWgB,MAAMD,UACVf,EAAWQ,QAAQO,IACnB,IAIXf,EAAWQ,WAGXR,EAAWM,MAAQ,WACVN,EAAWiB,SAGhBjB,EAAWiB,QAAa,EACxBjB,EAAWkB,WAAalB,EAAWU,SAEnCV,EAAWmB,OAAO,WACdnB,EAAWoB,WACXpB,EAAWkB,WAAalB,EAAWU,aAU3CV,EAAWW,KAAO,SAAUI,EAAIM,GAC5B,IAAIlB,EACAmB,EAAQtB,EAAWQ,QAAQO,GAE/B,GAAKf,EAAWU,SAAW,CACvB,GAAK,OAASY,EAAMZ,OAChB,OAEJP,EAAWmB,EAAMZ,YAEjBP,EAAWmB,EAAMb,QAGrB,IAAIc,EAAS,WACTD,EAAME,KAAO,IAAIC,KACjBH,EAAMjB,SAASqB,KAAKC,SAGxB,GAAKN,EAAS,CACV,IACIG,EADO,IAAIC,KACEH,EAAME,KAElBrB,EAAWqB,EACZF,EAAMM,MAAQC,WAAW,WACrBP,EAAMP,GAAKe,YAAYP,EAAQpB,GAC/BoB,KACDpB,EAAWqB,IAEdF,EAAMP,GAAKe,YAAYP,EAAQpB,GAC/BoB,UAIND,EAAMP,GAAKe,YAAYP,EAAQpB,IAKrCH,EAAWgB,MAAQ,SAAUD,GACzB,IAAIO,EAAQtB,EAAWQ,QAAQO,GAC/BgB,cAAcT,EAAMP,IACpBiB,aAAaV,EAAMM,cACZN,EAAMP,UACNO,EAAMM,OAIjB5B,EAAWoB,SAAW,SAAUa,GAC5B,IAAIC,EAAYlC,EAAWU,SACvByB,EAAYnC,EAAWkB,WAE3B,GAAMgB,IAAaC,IAAgBD,GAAYC,EAC3C,IAAM,IAAIC,KAAKpC,EAAWQ,QACtBR,EAAWgB,MAAMoB,GACjBpC,EAAWW,KAAKyB,GAAIF,IAKzBlC","file":"../visibility.js","sourcesContent":["define([\n    \"./core\"\n],function(core){\n    var lastTimer = -1;\n\n    var install = function (Visibility) {\n\n        // Run callback every `interval` milliseconds if page is visible and\n        // every `hiddenInterval` milliseconds if page is hidden.\n        //\n        //   Visibility.every(60 * 1000, 5 * 60 * 1000, function () {\n        //       checkNewMails();\n        //   });\n        //\n        // You can skip `hiddenInterval` and callback will be called only if\n        // page is visible.\n        //\n        //   Visibility.every(1000, function () {\n        //       updateCountdown();\n        //   });\n        //\n        // It is analog of `setInterval(callback, interval)` but use visibility\n        // state.\n        //\n        // It return timer ID, that you can use in `Visibility.stop(id)` to stop\n        // timer (`clearInterval` analog).\n        // Warning: timer ID is different from interval ID from `setInterval`,\n        // so don’t use it in `clearInterval`.\n        //\n        // On change state from hidden to visible timers will be execute.\n        Visibility.every = function (interval, hiddenInterval, callback) {\n            Visibility._time();\n\n            if ( !callback ) {\n                callback = hiddenInterval;\n                hiddenInterval = null;\n            }\n\n            lastTimer += 1;\n            var number = lastTimer;\n\n            Visibility._timers[number] = {\n                visible:  interval,\n                hidden:   hiddenInterval,\n                callback: callback\n            };\n            Visibility._run(number, false);\n\n            if ( Visibility.isSupported() ) {\n                Visibility._listen();\n            }\n            return number;\n        };\n\n        // Stop timer from `every` method by it ID (`every` method return it).\n        //\n        //   slideshow = Visibility.every(5 * 1000, function () {\n        //       changeSlide();\n        //   });\n        //   $('.stopSlideshow').click(function () {\n        //       Visibility.stop(slideshow);\n        //   });\n        Visibility.stop = function(id) {\n            if ( !Visibility._timers[id] ) {\n                return false;\n            }\n            Visibility._stop(id);\n            delete Visibility._timers[id];\n            return true;\n        };\n\n        // Callbacks and intervals added by `every` method.\n        Visibility._timers = { };\n\n        // Initialize variables on page loading.\n        Visibility._time = function () {\n            if ( Visibility._timed ) {\n                return;\n            }\n            Visibility._timed     = true;\n            Visibility._wasHidden = Visibility.hidden();\n\n            Visibility.change(function () {\n                Visibility._stopRun();\n                Visibility._wasHidden = Visibility.hidden();\n            });\n        };\n\n        // Try to run timer from every method by it’s ID. It will be use\n        // `interval` or `hiddenInterval` depending on visibility state.\n        // If page is hidden and `hiddenInterval` is null,\n        // it will not run timer.\n        //\n        // Argument `runNow` say, that timers must be execute now too.\n        Visibility._run = function (id, runNow) {\n            var interval,\n                timer = Visibility._timers[id];\n\n            if ( Visibility.hidden() ) {\n                if ( null === timer.hidden ) {\n                    return;\n                }\n                interval = timer.hidden;\n            } else {\n                interval = timer.visible;\n            }\n\n            var runner = function () {\n                timer.last = new Date();\n                timer.callback.call(window);\n            }\n\n            if ( runNow ) {\n                var now  = new Date();\n                var last = now - timer.last ;\n\n                if ( interval > last ) {\n                    timer.delay = setTimeout(function () {\n                        timer.id = setInterval(runner, interval);\n                        runner();\n                    }, interval - last);\n                } else {\n                    timer.id = setInterval(runner, interval);\n                    runner();\n                }\n\n            } else {\n              timer.id = setInterval(runner, interval);\n            }\n        };\n\n        // Stop timer from `every` method by it’s ID.\n        Visibility._stop = function (id) {\n            var timer = Visibility._timers[id];\n            clearInterval(timer.id);\n            clearTimeout(timer.delay);\n            delete timer.id;\n            delete timer.delay;\n        };\n\n        // Listener for `visibilitychange` event.\n        Visibility._stopRun = function (event) {\n            var isHidden  = Visibility.hidden(),\n                wasHidden = Visibility._wasHidden;\n\n            if ( (isHidden && !wasHidden) || (!isHidden && wasHidden) ) {\n                for ( var i in Visibility._timers ) {\n                    Visibility._stop(i);\n                    Visibility._run(i, !isHidden);\n                }\n            }\n        };\n\n        return Visibility;\n    }\n\n\n    return   install(core);\n    \n});\n"]}