{"version":3,"sources":["test/asyncjs/assert.js"],"names":["define","require","exports","module","oop","pSlice","Array","prototype","slice","assert","fail","actual","expected","message","operator","stackStartFunction","AssertionError","_deepEqual","Buffer","isBuffer","length","i","Date","getTime","a","b","isUndefinedOrNull","isArguments","call","key","ka","Object","keys","kb","e","sort","objEquiv","value","undefined","object","toString","expectedException","RegExp","test","_throws","shouldThrow","block","name","options","this","Error","captureStackTrace","inherits","toJSON","obj","JSON","stringify","join","__proto__","ok","equal","notEqual","deepEqual","notDeepEqual","strictEqual","notStrictEqual","throws","error","apply","concat","arguments","doesNotThrow","ifError","err"],"mappings":"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","file":"../../../test/asyncjs/assert.js","sourcesContent":["define(function(require, exports, module) {\r\n\r\n// http://wiki.commonjs.org/wiki/Unit_Testing/1.0\r\n//\r\n// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!\r\n//\r\n// Originally from narwhal.js (http://narwhaljs.org)\r\n// Copyright (c) 2009 Thomas Robinson <280north.com>\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a copy\r\n// of this software and associated documentation files (the 'Software'), to\r\n// deal in the Software without restriction, including without limitation the\r\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\r\n// sell copies of the Software, and to permit persons to whom the Software is\r\n// furnished to do so, subject to the following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included in\r\n// all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\r\n// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n// UTILITY\r\nvar oop = require(\"ace/lib/oop\");\r\nvar pSlice = Array.prototype.slice;\r\n\r\n// 1. The assert module provides functions that throw\r\n// AssertionError's when particular conditions are not met. The\r\n// assert module must conform to the following interface.\r\n\r\nvar assert = exports;\r\n\r\n// 2. The AssertionError is defined in assert.\r\n// new assert.AssertionError({ message: message,\r\n//                             actual: actual,\r\n//                             expected: expected })\r\n\r\nassert.AssertionError = function AssertionError(options) {\r\n  this.name = 'AssertionError';\r\n  this.message = options.message;\r\n  this.actual = options.actual;\r\n  this.expected = options.expected;\r\n  this.operator = options.operator;\r\n  var stackStartFunction = options.stackStartFunction || fail;\r\n\r\n  if (Error.captureStackTrace) {\r\n    Error.captureStackTrace(this, stackStartFunction);\r\n  }\r\n};\r\noop.inherits(assert.AssertionError, Error);\r\n\r\ntoJSON = function(obj) {\r\n    if (typeof JSON !== \"undefined\")\r\n        return JSON.stringify(obj);\r\n    else\r\n        return obj.toString();\r\n}\r\n\r\nassert.AssertionError.prototype.toString = function() {\r\n  if (this.message) {\r\n    return [this.name + ':', this.message].join(' ');\r\n  } else {\r\n    return [this.name + ':',\r\n            toJSON(this.expected),\r\n            this.operator,\r\n            toJSON(this.actual)].join(' ');\r\n  }\r\n};\r\n\r\n// assert.AssertionError instanceof Error\r\n\r\nassert.AssertionError.__proto__ = Error.prototype;\r\n\r\n// At present only the three keys mentioned above are used and\r\n// understood by the spec. Implementations or sub modules can pass\r\n// other keys to the AssertionError's constructor - they will be\r\n// ignored.\r\n\r\n// 3. All of the following functions must throw an AssertionError\r\n// when a corresponding condition is not met, with a message that\r\n// may be undefined if not provided.  All assertion methods provide\r\n// both the actual and expected values to the assertion error for\r\n// display purposes.\r\n\r\nfunction fail(actual, expected, message, operator, stackStartFunction) {\r\n  throw new assert.AssertionError({\r\n    message: message,\r\n    actual: actual,\r\n    expected: expected,\r\n    operator: operator,\r\n    stackStartFunction: stackStartFunction\r\n  });\r\n}\r\n\r\n// EXTENSION! allows for well behaved errors defined elsewhere.\r\nassert.fail = fail;\r\n\r\n// 4. Pure assertion tests whether a value is truthy, as determined\r\n// by !!guard.\r\n// assert.ok(guard, message_opt);\r\n// This statement is equivalent to assert.equal(true, guard,\r\n// message_opt);. To test strictly for the value true, use\r\n// assert.strictEqual(true, guard, message_opt);.\r\n\r\nassert.ok = function ok(value, message) {\r\n  if (!!!value) fail(value, true, message, '==', assert.ok);\r\n};\r\n\r\n// 5. The equality assertion tests shallow, coercive equality with\r\n// ==.\r\n// assert.equal(actual, expected, message_opt);\r\n\r\nassert.equal = function equal(actual, expected, message) {\r\n  if (actual != expected) fail(actual, expected, message, '==', assert.equal);\r\n};\r\n\r\n// 6. The non-equality assertion tests for whether two objects are not equal\r\n// with != assert.notEqual(actual, expected, message_opt);\r\n\r\nassert.notEqual = function notEqual(actual, expected, message) {\r\n  if (actual == expected) {\r\n    fail(actual, expected, message, '!=', assert.notEqual);\r\n  }\r\n};\r\n\r\n// 7. The equivalence assertion tests a deep equality relation.\r\n// assert.deepEqual(actual, expected, message_opt);\r\n\r\nassert.deepEqual = function deepEqual(actual, expected, message) {\r\n  if (!_deepEqual(actual, expected)) {\r\n    fail(actual, expected, message, 'deepEqual', assert.deepEqual);\r\n  }\r\n};\r\n\r\nfunction _deepEqual(actual, expected) {\r\n  // 7.1. All identical values are equivalent, as determined by ===.\r\n  if (actual === expected) {\r\n    return true;\r\n\r\n  } else if (typeof Buffer !== \"undefined\" && Buffer.isBuffer(actual) && Buffer.isBuffer(expected)) {\r\n    if (actual.length != expected.length) return false;\r\n\r\n    for (var i = 0; i < actual.length; i++) {\r\n      if (actual[i] !== expected[i]) return false;\r\n    }\r\n\r\n    return true;\r\n\r\n  // 7.2. If the expected value is a Date object, the actual value is\r\n  // equivalent if it is also a Date object that refers to the same time.\r\n  } else if (actual instanceof Date && expected instanceof Date) {\r\n    return actual.getTime() === expected.getTime();\r\n\r\n  // 7.3. Other pairs that do not both pass typeof value == 'object',\r\n  // equivalence is determined by ==.\r\n  } else if (typeof actual != 'object' && typeof expected != 'object') {\r\n    return actual == expected;\r\n\r\n  // 7.4. For all other Object pairs, including Array objects, equivalence is\r\n  // determined by having the same number of owned properties (as verified\r\n  // with Object.prototype.hasOwnProperty.call), the same set of keys\r\n  // (although not necessarily the same order), equivalent values for every\r\n  // corresponding key, and an identical 'prototype' property. Note: this\r\n  // accounts for both named and indexed properties on Arrays.\r\n  } else {\r\n    return objEquiv(actual, expected);\r\n  }\r\n}\r\n\r\nfunction isUndefinedOrNull(value) {\r\n  return value === null || value === undefined;\r\n}\r\n\r\nfunction isArguments(object) {\r\n  return Object.prototype.toString.call(object) == '[object Arguments]';\r\n}\r\n\r\nfunction objEquiv(a, b) {\r\n  if (isUndefinedOrNull(a) || isUndefinedOrNull(b))\r\n    return false;\r\n  // an identical 'prototype' property.\r\n  if (a.prototype !== b.prototype) return false;\r\n  //~~~I've managed to break Object.keys through screwy arguments passing.\r\n  //   Converting to array solves the problem.\r\n  if (isArguments(a)) {\r\n    if (!isArguments(b)) {\r\n      return false;\r\n    }\r\n    a = pSlice.call(a);\r\n    b = pSlice.call(b);\r\n    return _deepEqual(a, b);\r\n  }\r\n  try {\r\n    var ka = Object.keys(a),\r\n        kb = Object.keys(b),\r\n        key, i;\r\n  } catch (e) {//happens when one is a string literal and the other isn't\r\n    return false;\r\n  }\r\n  // having the same number of owned properties (keys incorporates\r\n  // hasOwnProperty)\r\n  if (ka.length != kb.length)\r\n    return false;\r\n  //the same set of keys (although not necessarily the same order),\r\n  ka.sort();\r\n  kb.sort();\r\n  //~~~cheap key test\r\n  for (i = ka.length - 1; i >= 0; i--) {\r\n    if (ka[i] != kb[i])\r\n      return false;\r\n  }\r\n  //equivalent values for every corresponding key, and\r\n  //~~~possibly expensive deep test\r\n  for (i = ka.length - 1; i >= 0; i--) {\r\n    key = ka[i];\r\n    if (!_deepEqual(a[key], b[key])) return false;\r\n  }\r\n  return true;\r\n}\r\n\r\n// 8. The non-equivalence assertion tests for any deep inequality.\r\n// assert.notDeepEqual(actual, expected, message_opt);\r\n\r\nassert.notDeepEqual = function notDeepEqual(actual, expected, message) {\r\n  if (_deepEqual(actual, expected)) {\r\n    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);\r\n  }\r\n};\r\n\r\n// 9. The strict equality assertion tests strict equality, as determined by ===.\r\n// assert.strictEqual(actual, expected, message_opt);\r\n\r\nassert.strictEqual = function strictEqual(actual, expected, message) {\r\n  if (actual !== expected) {\r\n    fail(actual, expected, message, '===', assert.strictEqual);\r\n  }\r\n};\r\n\r\n// 10. The strict non-equality assertion tests for strict inequality, as\r\n// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);\r\n\r\nassert.notStrictEqual = function notStrictEqual(actual, expected, message) {\r\n  if (actual === expected) {\r\n    fail(actual, expected, message, '!==', assert.notStrictEqual);\r\n  }\r\n};\r\n\r\nfunction expectedException(actual, expected) {\r\n  if (!actual || !expected) {\r\n    return false;\r\n  }\r\n\r\n  if (expected instanceof RegExp) {\r\n    return expected.test(actual);\r\n  } else if (actual instanceof expected) {\r\n    return true;\r\n  } else if (expected.call({}, actual) === true) {\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nfunction _throws(shouldThrow, block, expected, message) {\r\n  var actual;\r\n\r\n  if (typeof expected === 'string') {\r\n    message = expected;\r\n    expected = null;\r\n  }\r\n\r\n  try {\r\n    block();\r\n  } catch (e) {\r\n    actual = e;\r\n  }\r\n\r\n  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +\r\n            (message ? ' ' + message : '.');\r\n\r\n  if (shouldThrow && !actual) {\r\n    fail('Missing expected exception' + message);\r\n  }\r\n\r\n  if (!shouldThrow && expectedException(actual, expected)) {\r\n    fail('Got unwanted exception' + message);\r\n  }\r\n\r\n  if ((shouldThrow && actual && expected &&\r\n      !expectedException(actual, expected)) || (!shouldThrow && actual)) {\r\n    throw actual;\r\n  }\r\n}\r\n\r\n// 11. Expected to throw an error:\r\n// assert.throws(block, Error_opt, message_opt);\r\n\r\nassert.throws = function(block, /*optional*/error, /*optional*/message) {\r\n  _throws.apply(this, [true].concat(pSlice.call(arguments)));\r\n};\r\n\r\n// EXTENSION! This is annoying to write outside this module.\r\nassert.doesNotThrow = function(block, /*optional*/error, /*optional*/message) {\r\n  _throws.apply(this, [false].concat(pSlice.call(arguments)));\r\n};\r\n\r\nassert.ifError = function(err) { if (err) {throw err;}};\r\n\r\n});\r\n"]}