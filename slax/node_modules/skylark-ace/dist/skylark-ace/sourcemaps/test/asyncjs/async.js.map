{"version":3,"sources":["test/asyncjs/async.js"],"names":["define","require","exports","module","STOP","Generator","source","this","next","callback","map","mapper","makeAsync","err","value","constructor","filter","handler","takeIt","slice","begin","end","count","Infinity","reduce","initialValue","index","done","previousValue","reduceAll","currentValue","undefined","forEach","each","fn","some","condition","result","every","call","context","concat","generator","generators","push","apply","arguments","zip","list","gen","toArray","expand","inserter","spliced","toInsert","sort","compare","arrGen","self","arr","join","separator","$arrayOp","Array","prototype","reverse","arrayMethod","args","i","breakOnError","last","lastError","values","errors","length","e","construct","len","key","keys","range","start","stop","step","current","first","varargs","item","plugin","members","constructors"],"mappings":"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","file":"../../../test/asyncjs/async.js","sourcesContent":["/*!\r\n * async.js\r\n * Copyright(c) 2010 Fabian Jakobs <fabian.jakobs@web.de>\r\n * MIT Licensed\r\n */\r\n\r\ndefine(function(require, exports, module) {\r\n\r\nvar STOP = exports.STOP = {}\r\n\r\nexports.Generator = function(source) {\r\n    if (typeof source == \"function\")\r\n        this.source = {\r\n            next: source\r\n        }\r\n    else\r\n        this.source = source\r\n}\r\n\r\n;(function() {\r\n    this.next = function(callback) {\r\n        this.source.next(callback)\r\n    }\r\n\r\n    this.map = function(mapper) {\r\n        if (!mapper)\r\n            return this\r\n            \r\n        mapper = makeAsync(1, mapper)\r\n        \r\n        var source = this.source\r\n        this.next = function(callback) {\r\n            source.next(function(err, value) {\r\n                if (err)\r\n                    callback(err)\r\n                else {\r\n                    mapper(value, function(err, value) {\r\n                        if (err)\r\n                            callback(err)\r\n                        else\r\n                            callback(null, value)\r\n                    })\r\n                }\r\n            })\r\n        }\r\n        return new this.constructor(this)\r\n    }\r\n    \r\n    this.filter = function(filter) {\r\n        if (!filter)\r\n            return this\r\n            \r\n        filter = makeAsync(1, filter)\r\n        \r\n        var source = this.source\r\n        this.next = function(callback) {\r\n            source.next(function handler(err, value) {\r\n                if (err)\r\n                    callback(err)\r\n                else {\r\n                    filter(value, function(err, takeIt) {\r\n                        if (err)\r\n                            callback(err)\r\n                        else if (takeIt)\r\n                            callback(null, value)\r\n                        else\r\n                            source.next(handler)\r\n                    })\r\n                }\r\n            })\r\n        }\r\n        return new this.constructor(this)\r\n    }\r\n\r\n    this.slice = function(begin, end) {\r\n        var count = -1\r\n        if (!end || end < 0)\r\n            var end = Infinity\r\n        \r\n        var source = this.source\r\n        this.next = function(callback) {\r\n            source.next(function handler(err, value) {\r\n                count++\r\n                if (err)\r\n                    callback(err)\r\n                else if (count >= begin && count < end)\r\n                    callback(null, value)\r\n                else if (count >= end)\r\n                    callback(STOP)\r\n                else\r\n                    source.next(handler)\r\n            })\r\n        }\r\n        return new this.constructor(this)\r\n    }\r\n    \r\n    this.reduce = function(reduce, initialValue) {\r\n        reduce = makeAsync(3, reduce)\r\n\r\n        var index = 0\r\n        var done = false\r\n        var previousValue = initialValue\r\n        \r\n        var source = this.source\r\n        this.next = function(callback) {\r\n            if (done)\r\n                return callback(STOP)\r\n\r\n            if (initialValue === undefined) {\r\n                source.next(function(err, currentValue) {\r\n                    if (err)\r\n                        return callback(err, previousValue)\r\n                    \r\n                    previousValue = currentValue\r\n                    reduceAll()\r\n                })\r\n            }\r\n            else\r\n                reduceAll()\r\n\r\n            function reduceAll() {\r\n                source.next(function handler(err, currentValue) {                    \r\n                    if (err) {\r\n                        done = true\r\n                        if (err == STOP)                            \r\n                            return callback(null, previousValue)\r\n                        else\r\n                            return(err)\r\n                    }\r\n                    reduce(previousValue, currentValue, index++, function(err, value) {\r\n                        previousValue = value\r\n                        source.next(handler)\r\n                    })\r\n                })\r\n            }            \r\n        }\r\n        return new this.constructor(this)\r\n    }\r\n    \r\n    this.forEach =\r\n    this.each = function(fn) {\r\n        fn = makeAsync(1, fn)\r\n            \r\n        var source = this.source\r\n        this.next = function(callback) {\r\n            source.next(function handler(err, value) {\r\n                if (err) \r\n                    callback(err)\r\n                else {\r\n                    fn(value, function(err) {\r\n                        callback(err, value)\r\n                    })\r\n                }\r\n            })\r\n        }\r\n        return new this.constructor(this)\r\n    }\r\n    \r\n    this.some = function(condition) {\r\n        condition = makeAsync(1, condition)\r\n        \r\n        var source = this.source\r\n        var done = false\r\n        this.next = function(callback) {\r\n            if (done)\r\n                return callback(STOP)\r\n            \r\n            source.next(function handler(err, value) {\r\n                if (err)\r\n                    return callback(err)\r\n                    \r\n                condition(value, function(err, result) {\r\n                    if (err) {\r\n                        done = true\r\n                        if (err == STOP)\r\n                            callback(null, false)\r\n                        else\r\n                            callback(err)\r\n                    }                        \r\n                    else if (result) {\r\n                        done = true\r\n                        callback(null, true)\r\n                    }\r\n                    else \r\n                        source.next(handler)\r\n                })\r\n            })\r\n        }\r\n        return new this.constructor(this)\r\n    }\r\n    \r\n    this.every = function(condition) {\r\n        condition = makeAsync(1, condition)\r\n        \r\n        var source = this.source\r\n        var done = false\r\n        this.next = function(callback) {\r\n            if (done)\r\n                return callback(STOP)\r\n            \r\n            source.next(function handler(err, value) {\r\n                if (err)\r\n                    return callback(err)\r\n                    \r\n                condition(value, function(err, result) {\r\n                    if (err) {\r\n                        done = true\r\n                        if (err == STOP)\r\n                            callback(null, true)\r\n                        else\r\n                            callback(err)\r\n                    }                        \r\n                    else if (!result) {\r\n                        done = true\r\n                        callback(null, false)\r\n                    }\r\n                    else \r\n                        source.next(handler)\r\n                })\r\n            })\r\n        }\r\n        return new this.constructor(this)\r\n    }\r\n    \r\n    this.call = function(context) {\r\n        var source = this.source\r\n        return this.map(function(fn, next) {\r\n            fn = makeAsync(0, fn, context)\r\n            fn.call(context, function(err, value) {\r\n                next(err, value)\r\n            })\r\n        })\r\n    }\r\n    \r\n    this.concat = function(generator) {\r\n        var generators = [this]\r\n        generators.push.apply(generators, arguments)\r\n        var index = 0\r\n        var source = generators[index++]\r\n        \r\n        return new this.constructor(function(callback) {            \r\n            source.next(function handler(err, value) {\r\n                if (err) {\r\n                    if (err == STOP) {\r\n                        source = generators[index++]\r\n                        if (!source)\r\n                            return callback(STOP)\r\n                        else\r\n                            return source.next(handler)\r\n                    }\r\n                    else\r\n                        return callback(err)\r\n                }\r\n                else\r\n                    return callback(null, value)\r\n            })\r\n        })\r\n    }\r\n    \r\n    this.zip = function(generator) {\r\n        var generators = [this]\r\n        generators.push.apply(generators, arguments)\r\n        \r\n        return new this.constructor(function(callback) {\r\n            exports.list(generators)\r\n                .map(function(gen, next) {                    \r\n                    gen.next(next)\r\n                })\r\n                .toArray(callback)\r\n        })\r\n    }\r\n    \r\n    this.expand = function(inserter, constructor) {\r\n       if (!inserter)\r\n            return this\r\n            \r\n        var inserter = makeAsync(1, inserter)\r\n        var constructor = constructor || this.constructor\r\n        var source = this.source;\r\n        var spliced = null;\r\n        \r\n        return new constructor(function next(callback) {\r\n            if (!spliced) {\r\n                source.next(function(err, value) {\r\n                    if (err)\r\n                        return callback(err)\r\n                        \r\n                    inserter(value, function(err, toInsert) {\r\n                        if (err)\r\n                            return callback(err)\r\n                            \r\n                        spliced = toInsert                        \r\n                        next(callback)\r\n                    })\r\n\r\n                })\r\n            } \r\n            else {\r\n                spliced.next(function(err, value) {\r\n                    if (err == STOP) {\r\n                        spliced = null\r\n                        return next(callback)\r\n                    }\r\n                    else if (err)\r\n                        return callback(err)\r\n                    \r\n                    callback(err, value)\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    this.sort = function(compare) {\r\n        var self = this\r\n        var arrGen\r\n        this.next = function(callback) {\r\n            if (arrGen)\r\n                return arrGen.next(callback)\r\n\r\n            self.toArray(function(err, arr) {\r\n                if (err)\r\n                    callback(err)\r\n                else {\r\n                    arrGen = exports.list(arr.sort(compare))\r\n                    arrGen.next(callback)\r\n                }\r\n            })            \r\n        }\r\n        return new this.constructor(this)\r\n    }\r\n\r\n    this.join = function(separator) {\r\n        return this.$arrayOp(Array.prototype.join, separator !== undefined ? [separator] : null)\r\n    }\r\n    \r\n    this.reverse = function() {\r\n        return this.$arrayOp(Array.prototype.reverse)\r\n    }\r\n    \r\n    this.$arrayOp = function(arrayMethod, args) {\r\n        var self = this\r\n        var i = 0\r\n        this.next = function(callback) {\r\n            if (i++ > 0)\r\n                return callback(STOP)\r\n                \r\n            self.toArray(function(err, arr) {\r\n                if (err)\r\n                    callback(err, \"\")\r\n                else {\r\n                    if (args)\r\n                        callback(null, arrayMethod.apply(arr, args))\r\n                    else\r\n                        callback(null, arrayMethod.call(arr))\r\n                }\r\n            })\r\n        }\r\n        return new this.constructor(this)\r\n        \r\n    }\r\n    \r\n    this.end = function(breakOnError, callback) {\r\n        if (!callback) {\r\n            callback = arguments[0]\r\n            breakOnError = true\r\n        }\r\n\r\n        var source = this.source\r\n        var last\r\n        var lastError\r\n        source.next(function handler(err, value) {\r\n            if (err) {\r\n                if (err == STOP)\r\n                    callback && callback(lastError, last)\r\n                else if (!breakOnError) {\r\n                    lastError = err\r\n                    source.next(handler)\r\n                }\r\n                else\r\n                    callback && callback(err, value)\r\n            }\r\n            else  {\r\n                last = value\r\n                source.next(handler)\r\n            }\r\n        })\r\n    }\r\n\r\n    this.toArray = function(breakOnError, callback) {\r\n        if (!callback) {\r\n            callback = arguments[0]\r\n            breakOnError = true\r\n        }\r\n        \r\n        var values = []\r\n        var errors = []\r\n        var source = this.source\r\n        \r\n        source.next(function handler(err, value) {\r\n            if (err) {\r\n                if (err == STOP) {\r\n                    if (breakOnError)\r\n                        return callback(null, values)\r\n                    else {\r\n                        errors.length = values.length\r\n                        return callback(errors, values)\r\n                    }\r\n                }\r\n                else {\r\n                    if (breakOnError)\r\n                        return callback(err)\r\n                    else\r\n                        errors[values.length] = err\r\n                }\r\n            }\r\n\r\n            values.push(value)\r\n            source.next(handler)\r\n        })\r\n    }\r\n\r\n}).call(exports.Generator.prototype)\r\n\r\nvar makeAsync = exports.makeAsync = function(args, fn, context) {\r\n    if (fn.length > args) \r\n        return fn\r\n    else {\r\n        return function() {\r\n            var value\r\n            var next = arguments[args]\r\n            try {\r\n                value = fn.apply(context || this, arguments)\r\n            } catch(e) {\r\n                return next(e)\r\n            }\r\n            next(null, value)\r\n        }\r\n    }\r\n}\r\n\r\nexports.list = function(arr, construct) {\r\n    var construct = construct || exports.Generator\r\n    var i = 0\r\n    var len = arr.length\r\n    \r\n    return new construct(function(callback) {\r\n        if (i < len)\r\n            callback(null, arr[i++])\r\n        else\r\n            callback(STOP)\r\n    })\r\n}\r\n\r\nexports.values = function(map, construct) {\r\n    var values = []\r\n    for (var key in map) \r\n        values.push(map[key])\r\n        \r\n    return exports.list(values, construct)\r\n}\r\n\r\nexports.keys = function(map, construct) {\r\n    var keys = []\r\n    for (var key in map) \r\n        keys.push(key)\r\n        \r\n    return exports.list(keys, construct)\r\n}\r\n\r\n/*\r\n * range([start,] stop[, step]) -> generator of integers\r\n *\r\n * Return a generator containing an arithmetic progression of integers.\r\n * range(i, j) returns [i, i+1, i+2, ..., j-1] start (!) defaults to 0.\r\n * When step is given, it specifies the increment (or decrement).\r\n */ \r\nexports.range = function(start, stop, step, construct) {\r\n    var construct = construct || exports.Generator\r\n    start = start || 0\r\n    step = step || 1\r\n    \r\n    if (stop === undefined || stop === null)\r\n        stop = step > 0 ? Infinity : -Infinity\r\n        \r\n    var value = start\r\n    \r\n    return new construct(function(callback) {\r\n        if (step > 0 && value >= stop || step < 0 && value <= stop)\r\n            callback(STOP)\r\n        else {\r\n            var current = value\r\n            value += step\r\n            callback(null, current)\r\n        }\r\n    })\r\n}\r\n\r\nexports.concat = function(first, varargs) {\r\n    if (arguments.length > 1)\r\n        return first.concat.apply(first, Array.prototype.slice.call(arguments, 1))\r\n    else\r\n        return first\r\n}\r\n\r\nexports.zip = function(first, varargs) {\r\n    if (arguments.length > 1)\r\n        return first.zip.apply(first, Array.prototype.slice.call(arguments, 1))\r\n    else\r\n        return first.map(function(item, next) {\r\n            next(null, [item])\r\n        })\r\n}\r\n\r\n\r\nexports.plugin = function(members, constructors) {\r\n    if (members) {\r\n        for (var key in members) {\r\n            exports.Generator.prototype[key] = members[key]\r\n        }\r\n    }\r\n\r\n    if (constructors) {\r\n        for (var key in constructors) {\r\n            exports[key] = constructors[key]\r\n        }\r\n    }    \r\n}\r\n\r\n})\r\n"]}