{"version":3,"sources":["occur.js"],"names":["define","require","exports","module","oop","Search","Range","EditSession","SearchHighlight","Occur","inherits","this","enter","editor","options","needle","pos","getCursorPosition","displayOccurContent","translatedPos","originalToOccurPosition","session","moveCursorToPosition","exit","translatePosition","occurToOriginalPosition","displayOriginalContent","highlight","sess","regexp","$occurHighlight","addDynamicMarker","setRegexp","_emit","$originalSession","found","matchingLines","lines","map","foundLine","content","occurSession","join","$occur","$occurMatchingLines","setSession","$useEmacsStyleLineStart","re","nullPos","row","column","i","length","mixin","search","set","findAll","reduce","range","start","last","concat","getLine","call","prototype","importCssString"],"mappings":";;;;;;;AA8BAA,OAAO,SAASC,EAASC,EAASC,GAClC,aAEA,IAAIC,EAAMH,EAAQ,aAEdI,GADQJ,EAAQ,WAAWK,MAClBL,EAAQ,YAAYI,QAC7BE,EAAcN,EAAQ,kBAAkBM,YACxCC,EAAkBP,EAAQ,sBAAsBO,gBAiBpD,SAASC,KAETL,EAAIM,SAASD,EAAOJ,GAEpB,WAaIM,KAAKC,MAAQ,SAASC,EAAQC,GAC1B,IAAKA,EAAQC,OAAQ,OAAO,EAC5B,IAAIC,EAAMH,EAAOI,oBACjBN,KAAKO,oBAAoBL,EAAQC,GACjC,IAAIK,EAAgBR,KAAKS,wBAAwBP,EAAOQ,QAASL,GAEjE,OADAH,EAAOS,qBAAqBH,IACrB,GAYXR,KAAKY,KAAO,SAASV,EAAQC,GACzB,IAAIE,EAAMF,EAAQU,mBAAqBX,EAAOI,oBAC1CE,EAAgBH,GAAOL,KAAKc,wBAAwBZ,EAAOQ,QAASL,GAIxE,OAHAL,KAAKe,uBAAuBb,GACxBM,GACAN,EAAOS,qBAAqBH,IACzB,GAGXR,KAAKgB,UAAY,SAASC,EAAMC,IACnBD,EAAKE,gBAAkBF,EAAKE,iBAAmBF,EAAKG,iBACrD,IAAIvB,EAAgB,KAAM,sBAAuB,UACtDwB,UAAUH,GACbD,EAAKK,MAAM,qBAGftB,KAAKO,oBAAsB,SAASL,EAAQC,GAExCH,KAAKuB,iBAAmBrB,EAAOQ,QAC/B,IAAIc,EAAQxB,KAAKyB,cAAcvB,EAAOQ,QAASP,GAC3CuB,EAAQF,EAAMG,IAAI,SAASC,GAAa,OAAOA,EAAUC,UACzDC,EAAe,IAAIlC,EAAY8B,EAAMK,KAAK,OAC9CD,EAAaE,OAAShC,KACtB8B,EAAaG,oBAAsBT,EACnCtB,EAAOgC,WAAWJ,GAClB9B,KAAKmC,wBAA0BnC,KAAKuB,iBAAiBY,wBACrDL,EAAaK,wBAA0BnC,KAAKmC,wBAC5CnC,KAAKgB,UAAUc,EAAc3B,EAAQiC,IACrCN,EAAaR,MAAM,qBAGvBtB,KAAKe,uBAAyB,SAASb,GACnCA,EAAOgC,WAAWlC,KAAKuB,kBACvBvB,KAAKuB,iBAAiBY,wBAA0BnC,KAAKmC,yBAWzDnC,KAAKS,wBAA0B,SAASC,EAASL,GAC7C,IAAIqB,EAAQhB,EAAQuB,oBAChBI,GAAWC,IAAK,EAAGC,OAAQ,GAC/B,IAAKb,EAAO,OAAOW,EACnB,IAAK,IAAIG,EAAI,EAAGA,EAAId,EAAMe,OAAQD,IAC9B,GAAId,EAAMc,GAAGF,MAAQjC,EAAIiC,IACrB,OAAQA,IAAKE,EAAGD,OAAQlC,EAAIkC,QAEpC,OAAOF,GAUXrC,KAAKc,wBAA0B,SAASJ,EAASL,GAC7C,IAAIqB,EAAQhB,EAAQuB,oBACpB,OAAKP,GAAUA,EAAMrB,EAAIiC,MAEjBA,IAAKZ,EAAMrB,EAAIiC,KAAKA,IAAKC,OAAQlC,EAAIkC,QADlClC,GAIfL,KAAKyB,cAAgB,SAASf,EAASP,GAEnC,GADAA,EAAUV,EAAIiD,SAAUvC,IACnBO,IAAYP,EAAQC,OAAQ,SACjC,IAAIuC,EAAS,IAAIjD,EAEjB,OADAiD,EAAOC,IAAIzC,GACJwC,EAAOE,QAAQnC,GAASoC,OAAO,SAASpB,EAAOqB,GAClD,IAAIT,EAAMS,EAAMC,MAAMV,IAClBW,EAAOvB,EAAMA,EAAMe,OAAO,GAC9B,OAAOQ,GAAQA,EAAKX,MAAQA,EACxBZ,EACAA,EAAMwB,QAAQZ,IAAKA,EAAKT,QAASnB,EAAQyC,QAAQb,YAI9Dc,KAAKtD,EAAMuD,WAEJ/D,EAAQ,aACdgE,gBAAgB,iVAsBd,kCAEN/D,EAAQO,MAAQA","file":"../occur.js","sourcesContent":["/* ***** BEGIN LICENSE BLOCK *****\r\n * Distributed under the BSD license:\r\n *\r\n * Copyright (c) 2010, Ajax.org B.V.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *     * Redistributions of source code must retain the above copyright\r\n *       notice, this list of conditions and the following disclaimer.\r\n *     * Redistributions in binary form must reproduce the above copyright\r\n *       notice, this list of conditions and the following disclaimer in the\r\n *       documentation and/or other materials provided with the distribution.\r\n *     * Neither the name of Ajax.org B.V. nor the\r\n *       names of its contributors may be used to endorse or promote products\r\n *       derived from this software without specific prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\r\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY\r\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\r\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\r\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n *\r\n * ***** END LICENSE BLOCK ***** */\r\n\r\ndefine(function(require, exports, module) {\r\n\"use strict\";\r\n\r\nvar oop = require(\"./lib/oop\");\r\nvar Range = require(\"./range\").Range;\r\nvar Search = require(\"./search\").Search;\r\nvar EditSession = require(\"./edit_session\").EditSession;\r\nvar SearchHighlight = require(\"./search_highlight\").SearchHighlight;\r\n\r\n/**\r\n * @class Occur\r\n *\r\n * Finds all lines matching a search term in the current [[Document\r\n * `Document`]] and displays them instead of the original `Document`. Keeps\r\n * track of the mapping between the occur doc and the original doc.\r\n *\r\n **/\r\n\r\n\r\n/**\r\n * Creates a new `Occur` object.\r\n *\r\n * @constructor\r\n **/\r\nfunction Occur() {}\r\n\r\noop.inherits(Occur, Search);\r\n\r\n(function() {\r\n\r\n    /**\r\n     * Enables occur mode. expects that `options.needle` is a search term.\r\n     * This search term is used to filter out all the lines that include it\r\n     * and these are then used as the content of a new [[Document\r\n     * `Document`]]. The current cursor position of editor will be translated\r\n     * so that the cursor is on the matching row/column as it was before.\r\n     * @param {Editor} editor\r\n     * @param {Object} options options.needle should be a String\r\n     * @return {Boolean} Whether occur activation was successful\r\n     *\r\n     **/\r\n    this.enter = function(editor, options) {\r\n        if (!options.needle) return false;\r\n        var pos = editor.getCursorPosition();\r\n        this.displayOccurContent(editor, options);\r\n        var translatedPos = this.originalToOccurPosition(editor.session, pos);\r\n        editor.moveCursorToPosition(translatedPos);\r\n        return true;\r\n    };\r\n\r\n    /**\r\n     * Disables occur mode. Resets the [[Sessions `EditSession`]] [[Document\r\n     * `Document`]] back to the original doc. If options.translatePosition is\r\n     * truthy also maps the [[Editors `Editor`]] cursor position accordingly.\r\n     * @param {Editor} editor\r\n     * @param {Object} options options.translatePosition\r\n     * @return {Boolean} Whether occur deactivation was successful\r\n     *\r\n     **/\r\n    this.exit = function(editor, options) {\r\n        var pos = options.translatePosition && editor.getCursorPosition();\r\n        var translatedPos = pos && this.occurToOriginalPosition(editor.session, pos);\r\n        this.displayOriginalContent(editor);\r\n        if (translatedPos)\r\n            editor.moveCursorToPosition(translatedPos);\r\n        return true;\r\n    };\r\n\r\n    this.highlight = function(sess, regexp) {\r\n        var hl = sess.$occurHighlight = sess.$occurHighlight || sess.addDynamicMarker(\r\n                new SearchHighlight(null, \"ace_occur-highlight\", \"text\"));\r\n        hl.setRegexp(regexp);\r\n        sess._emit(\"changeBackMarker\"); // force highlight layer redraw\r\n    };\r\n\r\n    this.displayOccurContent = function(editor, options) {\r\n        // this.setSession(session || new EditSession(\"\"))\r\n        this.$originalSession = editor.session;\r\n        var found = this.matchingLines(editor.session, options);\r\n        var lines = found.map(function(foundLine) { return foundLine.content; });\r\n        var occurSession = new EditSession(lines.join('\\n'));\r\n        occurSession.$occur = this;\r\n        occurSession.$occurMatchingLines = found;\r\n        editor.setSession(occurSession);\r\n        this.$useEmacsStyleLineStart = this.$originalSession.$useEmacsStyleLineStart;\r\n        occurSession.$useEmacsStyleLineStart = this.$useEmacsStyleLineStart;\r\n        this.highlight(occurSession, options.re);\r\n        occurSession._emit('changeBackMarker');\r\n    };\r\n\r\n    this.displayOriginalContent = function(editor) {\r\n        editor.setSession(this.$originalSession);\r\n        this.$originalSession.$useEmacsStyleLineStart = this.$useEmacsStyleLineStart;\r\n    };\r\n\r\n    /**\r\n    * Translates the position from the original document to the occur lines in\r\n    * the document or the beginning if the doc {row: 0, column: 0} if not\r\n    * found.\r\n    * @param {EditSession} session The occur session\r\n    * @param {Object} pos The position in the original document\r\n    * @return {Object} position in occur doc\r\n    **/\r\n    this.originalToOccurPosition = function(session, pos) {\r\n        var lines = session.$occurMatchingLines;\r\n        var nullPos = {row: 0, column: 0};\r\n        if (!lines) return nullPos;\r\n        for (var i = 0; i < lines.length; i++) {\r\n            if (lines[i].row === pos.row)\r\n                return {row: i, column: pos.column};\r\n        }\r\n        return nullPos;\r\n    };\r\n\r\n    /**\r\n    * Translates the position from the occur document to the original document\r\n    * or `pos` if not found.\r\n    * @param {EditSession} session The occur session\r\n    * @param {Object} pos The position in the occur session document\r\n    * @return {Object} position\r\n    **/\r\n    this.occurToOriginalPosition = function(session, pos) {\r\n        var lines = session.$occurMatchingLines;\r\n        if (!lines || !lines[pos.row])\r\n            return pos;\r\n        return {row: lines[pos.row].row, column: pos.column};\r\n    };\r\n\r\n    this.matchingLines = function(session, options) {\r\n        options = oop.mixin({}, options);\r\n        if (!session || !options.needle) return [];\r\n        var search = new Search();\r\n        search.set(options);\r\n        return search.findAll(session).reduce(function(lines, range) {\r\n            var row = range.start.row;\r\n            var last = lines[lines.length-1];\r\n            return last && last.row === row ?\r\n                lines :\r\n                lines.concat({row: row, content: session.getLine(row)});\r\n        }, []);\r\n    };\r\n\r\n}).call(Occur.prototype);\r\n\r\nvar dom = require('./lib/dom');\r\ndom.importCssString(\".ace_occur-highlight {\\n\\\r\n    border-radius: 4px;\\n\\\r\n    background-color: rgba(87, 255, 8, 0.25);\\n\\\r\n    position: absolute;\\n\\\r\n    z-index: 4;\\n\\\r\n    box-sizing: border-box;\\n\\\r\n    box-shadow: 0 0 4px rgb(91, 255, 50);\\n\\\r\n}\\n\\\r\n.ace_dark .ace_occur-highlight {\\n\\\r\n    background-color: rgb(80, 140, 85);\\n\\\r\n    box-shadow: 0 0 4px rgb(60, 120, 70);\\n\\\r\n}\\n\", \"incremental-occur-highlighting\");\r\n\r\nexports.Occur = Occur;\r\n\r\n});\r\n"]}