{"version":3,"sources":["anchor.js"],"names":["define","require","exports","module","oop","EventEmitter","Anchor","doc","row","column","this","$onChange","onChange","bind","attach","setPosition","$pointsInOrder","point1","point2","equalPointsInOrder","bColIsAfter","implement","getPosition","$clipPositionToDocument","getDocument","document","$insertRight","delta","start","end","point","moveIfEqual","deltaIsInsert","action","deltaRowShift","deltaColShift","deltaStart","deltaEnd","$getTransformedPoint","noClip","pos","old","_signal","value","detach","removeEventListener","on","getLength","Math","max","getLine","length","min","call","prototype"],"mappings":"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","file":"../anchor.js","sourcesContent":["/* ***** BEGIN LICENSE BLOCK *****\r\n * Distributed under the BSD license:\r\n *\r\n * Copyright (c) 2010, Ajax.org B.V.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *     * Redistributions of source code must retain the above copyright\r\n *       notice, this list of conditions and the following disclaimer.\r\n *     * Redistributions in binary form must reproduce the above copyright\r\n *       notice, this list of conditions and the following disclaimer in the\r\n *       documentation and/or other materials provided with the distribution.\r\n *     * Neither the name of Ajax.org B.V. nor the\r\n *       names of its contributors may be used to endorse or promote products\r\n *       derived from this software without specific prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\r\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY\r\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\r\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\r\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n *\r\n * ***** END LICENSE BLOCK ***** */\r\n\r\ndefine(function(require, exports, module) {\r\n\"use strict\";\r\n\r\nvar oop = require(\"./lib/oop\");\r\nvar EventEmitter = require(\"./lib/event_emitter\").EventEmitter;\r\n\r\n/**\r\n *\r\n * Defines a floating pointer in the document. Whenever text is inserted or deleted before the cursor, the position of the anchor is updated.\r\n *\r\n * @class Anchor\r\n **/\r\n\r\n/**\r\n * Creates a new `Anchor` and associates it with a document.\r\n *\r\n * @param {Document} doc The document to associate with the anchor\r\n * @param {Number} row The starting row position\r\n * @param {Number} column The starting column position\r\n *\r\n * @constructor\r\n **/\r\n\r\nvar Anchor = exports.Anchor = function(doc, row, column) {\r\n    this.$onChange = this.onChange.bind(this);\r\n    this.attach(doc);\r\n    \r\n    if (typeof column == \"undefined\")\r\n        this.setPosition(row.row, row.column);\r\n    else\r\n        this.setPosition(row, column);\r\n};\r\n\r\n(function() {\r\n\r\n    oop.implement(this, EventEmitter);\r\n\r\n    /**\r\n     * Returns an object identifying the `row` and `column` position of the current anchor.\r\n     * @returns {Object}\r\n     **/\r\n    this.getPosition = function() {\r\n        return this.$clipPositionToDocument(this.row, this.column);\r\n    };\r\n\r\n    /**\r\n     *\r\n     * Returns the current document.\r\n     * @returns {Document}\r\n     **/\r\n    this.getDocument = function() {\r\n        return this.document;\r\n    };\r\n\r\n    /**\r\n     * experimental: allows anchor to stick to the next on the left\r\n     */\r\n    this.$insertRight = false;\r\n    /**\r\n     * Fires whenever the anchor position changes.\r\n     *\r\n     * Both of these objects have a `row` and `column` property corresponding to the position.\r\n     *\r\n     * Events that can trigger this function include [[Anchor.setPosition `setPosition()`]].\r\n     *\r\n     * @event change\r\n     * @param {Object} e  An object containing information about the anchor position. It has two properties:\r\n     *  - `old`: An object describing the old Anchor position\r\n     *  - `value`: An object describing the new Anchor position\r\n     *\r\n     **/\r\n    this.onChange = function(delta) {\r\n        if (delta.start.row == delta.end.row && delta.start.row != this.row)\r\n            return;\r\n\r\n        if (delta.start.row > this.row)\r\n            return;\r\n            \r\n        var point = $getTransformedPoint(delta, {row: this.row, column: this.column}, this.$insertRight);\r\n        this.setPosition(point.row, point.column, true);\r\n    };\r\n    \r\n    function $pointsInOrder(point1, point2, equalPointsInOrder) {\r\n        var bColIsAfter = equalPointsInOrder ? point1.column <= point2.column : point1.column < point2.column;\r\n        return (point1.row < point2.row) || (point1.row == point2.row && bColIsAfter);\r\n    }\r\n            \r\n    function $getTransformedPoint(delta, point, moveIfEqual) {\r\n        // Get delta info.\r\n        var deltaIsInsert = delta.action == \"insert\";\r\n        var deltaRowShift = (deltaIsInsert ? 1 : -1) * (delta.end.row    - delta.start.row);\r\n        var deltaColShift = (deltaIsInsert ? 1 : -1) * (delta.end.column - delta.start.column);\r\n        var deltaStart = delta.start;\r\n        var deltaEnd = deltaIsInsert ? deltaStart : delta.end; // Collapse insert range.\r\n        \r\n        // DELTA AFTER POINT: No change needed.\r\n        if ($pointsInOrder(point, deltaStart, moveIfEqual)) {\r\n            return {\r\n                row: point.row,\r\n                column: point.column\r\n            };\r\n        }\r\n        \r\n        // DELTA BEFORE POINT: Move point by delta shift.\r\n        if ($pointsInOrder(deltaEnd, point, !moveIfEqual)) {\r\n            return {\r\n                row: point.row + deltaRowShift,\r\n                column: point.column + (point.row == deltaEnd.row ? deltaColShift : 0)\r\n            };\r\n        }\r\n        \r\n        // DELTA ENVELOPS POINT (delete only): Move point to delta start.\r\n        // TODO warn if delta.action != \"remove\" ?\r\n        \r\n        return {\r\n            row: deltaStart.row,\r\n            column: deltaStart.column\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Sets the anchor position to the specified row and column. If `noClip` is `true`, the position is not clipped.\r\n     * @param {Number} row The row index to move the anchor to\r\n     * @param {Number} column The column index to move the anchor to\r\n     * @param {Boolean} noClip Identifies if you want the position to be clipped\r\n     *\r\n     **/\r\n    this.setPosition = function(row, column, noClip) {\r\n        var pos;\r\n        if (noClip) {\r\n            pos = {\r\n                row: row,\r\n                column: column\r\n            };\r\n        } else {\r\n            pos = this.$clipPositionToDocument(row, column);\r\n        }\r\n\r\n        if (this.row == pos.row && this.column == pos.column)\r\n            return;\r\n\r\n        var old = {\r\n            row: this.row,\r\n            column: this.column\r\n        };\r\n\r\n        this.row = pos.row;\r\n        this.column = pos.column;\r\n        this._signal(\"change\", {\r\n            old: old,\r\n            value: pos\r\n        });\r\n    };\r\n\r\n    /**\r\n     * When called, the `\"change\"` event listener is removed.\r\n     *\r\n     **/\r\n    this.detach = function() {\r\n        this.document.removeEventListener(\"change\", this.$onChange);\r\n    };\r\n    this.attach = function(doc) {\r\n        this.document = doc || this.document;\r\n        this.document.on(\"change\", this.$onChange);\r\n    };\r\n\r\n    /**\r\n     * Clips the anchor position to the specified row and column.\r\n     * @param {Number} row The row index to clip the anchor to\r\n     * @param {Number} column The column index to clip the anchor to\r\n     *\r\n     **/\r\n    this.$clipPositionToDocument = function(row, column) {\r\n        var pos = {};\r\n\r\n        if (row >= this.document.getLength()) {\r\n            pos.row = Math.max(0, this.document.getLength() - 1);\r\n            pos.column = this.document.getLine(pos.row).length;\r\n        }\r\n        else if (row < 0) {\r\n            pos.row = 0;\r\n            pos.column = 0;\r\n        }\r\n        else {\r\n            pos.row = row;\r\n            pos.column = Math.min(this.document.getLine(pos.row).length, Math.max(0, column));\r\n        }\r\n\r\n        if (column < 0)\r\n            pos.column = 0;\r\n\r\n        return pos;\r\n    };\r\n\r\n}).call(Anchor.prototype);\r\n\r\n});\r\n"]}