{"version":3,"sources":["lib/regexp.js"],"names":["define","require","exports","module","x","real","exec","RegExp","prototype","test","match","String","replace","split","compliantExecNpcg","undefined","call","compliantLastIndexIncrement","lastIndex","str","name","r2","regex","apply","this","arguments","length","array","item","from","Array","indexOf","i","source","global","ignoreCase","multiline","extended","sticky","slice","index","_xregexp","captureNames"],"mappings":";;;;;;;AAWAA,OAAO,SAASC,EAASC,EAASC,GAClC,aAMI,IASYC,EATRC,GACIC,KAAMC,OAAOC,UAAUF,KACvBG,KAAMF,OAAOC,UAAUC,KACvBC,MAAOC,OAAOH,UAAUE,MACxBE,QAASD,OAAOH,UAAUI,QAC1BC,MAAOF,OAAOH,UAAUK,OAE5BC,OAAsDC,IAAlCV,EAAKC,KAAKU,KAAK,OAAQ,IAAI,GAC/CC,GACQb,EAAI,KACRC,EAAKI,KAAKO,KAAKZ,EAAG,KACVA,EAAEc,WAGdD,GAA+BH,IAYnCP,OAAOC,UAAUF,KAAO,SAAUa,GAC9B,IACIC,EAAMC,EAgDWC,EAjDjBZ,EAAQL,EAAKC,KAAKiB,MAAMC,KAAMC,WAElC,GAAoB,iBAAT,GAAqBf,EAAO,CAenC,IAZKI,GAAqBJ,EAAMgB,OAAS,GAoDjD,SAAkBC,EAAOC,EAAMC,GAC3B,GAAIC,MAAMtB,UAAUuB,QAChB,OAAOJ,EAAMI,QAAQH,EAAMC,GAC/B,IAAK,IAAIG,EAAIH,GAAQ,EAAGG,EAAIL,EAAMD,OAAQM,IACtC,GAAIL,EAAMK,KAAOJ,EACb,OAAOI,EAEf,OAAQ,EA3D0CD,CAAQrB,EAAO,KAAO,IAChEW,EAAKd,OAAOiB,KAAKS,OAAQ5B,EAAKO,QAAQI,OA2CzBM,EA3C6CE,MA4CpDU,OAAa,IAAM,KACzBZ,EAAMa,WAAa,IAAM,KACzBb,EAAMc,UAAa,IAAM,KACzBd,EAAMe,SAAa,IAAM,KACzBf,EAAMgB,OAAa,IAAM,IAhDwC,IAAK,KAGtEjC,EAAKO,QAAQI,KAAKG,EAAIoB,MAAM7B,EAAM8B,OAAQnB,EAAI,WAC1C,IAAK,IAAIW,EAAI,EAAGA,EAAIP,UAAUC,OAAS,EAAGM,SACjBjB,IAAjBU,UAAUO,KACVtB,EAAMsB,QAAKjB,MAKvBS,KAAKiB,UAAYjB,KAAKiB,SAASC,aAC/B,IAAK,IAAIV,EAAI,EAAGA,EAAItB,EAAMgB,OAAQM,KAC9BZ,EAAOI,KAAKiB,SAASC,aAAaV,EAAI,MAEnCtB,EAAMU,GAAQV,EAAMsB,KAI1Bf,GAA+BO,KAAKU,SAAWxB,EAAM,GAAGgB,QAAWF,KAAKN,UAAYR,EAAM8B,OAC3FhB,KAAKN,YAEb,OAAOR,GAINO,IAEDV,OAAOC,UAAUC,KAAO,SAAUU,GAG9B,IAAIT,EAAQL,EAAKC,KAAKU,KAAKQ,KAAML,GAIjC,OAFIT,GAASc,KAAKU,SAAWxB,EAAM,GAAGgB,QAAWF,KAAKN,UAAYR,EAAM8B,OACpEhB,KAAKN,cACAR","file":"../../lib/regexp.js","sourcesContent":["/*\r\n *  Based on code from:\r\n *\r\n * XRegExp 1.5.0\r\n * (c) 2007-2010 Steven Levithan\r\n * MIT License\r\n * <http://xregexp.com>\r\n * Provides an augmented, extensible, cross-browser implementation of regular expressions,\r\n * including support for additional syntax, flags, and methods\r\n */\r\n \r\ndefine(function(require, exports, module) {\r\n\"use strict\";\r\n\r\n    //---------------------------------\r\n    //  Private variables\r\n    //---------------------------------\r\n\r\n    var real = {\r\n            exec: RegExp.prototype.exec,\r\n            test: RegExp.prototype.test,\r\n            match: String.prototype.match,\r\n            replace: String.prototype.replace,\r\n            split: String.prototype.split\r\n        },\r\n        compliantExecNpcg = real.exec.call(/()??/, \"\")[1] === undefined, // check `exec` handling of nonparticipating capturing groups\r\n        compliantLastIndexIncrement = function () {\r\n            var x = /^/g;\r\n            real.test.call(x, \"\");\r\n            return !x.lastIndex;\r\n        }();\r\n\r\n    if (compliantLastIndexIncrement && compliantExecNpcg)\r\n        return;\r\n\r\n    //---------------------------------\r\n    //  Overriden native methods\r\n    //---------------------------------\r\n\r\n    // Adds named capture support (with backreferences returned as `result.name`), and fixes two\r\n    // cross-browser issues per ES3:\r\n    // - Captured values for nonparticipating capturing groups should be returned as `undefined`,\r\n    //   rather than the empty string.\r\n    // - `lastIndex` should not be incremented after zero-length matches.\r\n    RegExp.prototype.exec = function (str) {\r\n        var match = real.exec.apply(this, arguments),\r\n            name, r2;\r\n        if ( typeof(str) == 'string' && match) {\r\n            // Fix browsers whose `exec` methods don't consistently return `undefined` for\r\n            // nonparticipating capturing groups\r\n            if (!compliantExecNpcg && match.length > 1 && indexOf(match, \"\") > -1) {\r\n                r2 = RegExp(this.source, real.replace.call(getNativeFlags(this), \"g\", \"\"));\r\n                // Using `str.slice(match.index)` rather than `match[0]` in case lookahead allowed\r\n                // matching due to characters outside the match\r\n                real.replace.call(str.slice(match.index), r2, function () {\r\n                    for (var i = 1; i < arguments.length - 2; i++) {\r\n                        if (arguments[i] === undefined)\r\n                            match[i] = undefined;\r\n                    }\r\n                });\r\n            }\r\n            // Attach named capture properties\r\n            if (this._xregexp && this._xregexp.captureNames) {\r\n                for (var i = 1; i < match.length; i++) {\r\n                    name = this._xregexp.captureNames[i - 1];\r\n                    if (name)\r\n                       match[name] = match[i];\r\n                }\r\n            }\r\n            // Fix browsers that increment `lastIndex` after zero-length matches\r\n            if (!compliantLastIndexIncrement && this.global && !match[0].length && (this.lastIndex > match.index))\r\n                this.lastIndex--;\r\n        }\r\n        return match;\r\n    };\r\n\r\n    // Don't override `test` if it won't change anything\r\n    if (!compliantLastIndexIncrement) {\r\n        // Fix browser bug in native method\r\n        RegExp.prototype.test = function (str) {\r\n            // Use the native `exec` to skip some processing overhead, even though the overriden\r\n            // `exec` would take care of the `lastIndex` fix\r\n            var match = real.exec.call(this, str);\r\n            // Fix browsers that increment `lastIndex` after zero-length matches\r\n            if (match && this.global && !match[0].length && (this.lastIndex > match.index))\r\n                this.lastIndex--;\r\n            return !!match;\r\n        };\r\n    }\r\n\r\n    //---------------------------------\r\n    //  Private helper functions\r\n    //---------------------------------\r\n\r\n    function getNativeFlags (regex) {\r\n        return (regex.global     ? \"g\" : \"\") +\r\n               (regex.ignoreCase ? \"i\" : \"\") +\r\n               (regex.multiline  ? \"m\" : \"\") +\r\n               (regex.extended   ? \"x\" : \"\") + // Proposed for ES4; included in AS3\r\n               (regex.sticky     ? \"y\" : \"\");\r\n    }\r\n\r\n    function indexOf (array, item, from) {\r\n        if (Array.prototype.indexOf) // Use the native array method if available\r\n            return array.indexOf(item, from);\r\n        for (var i = from || 0; i < array.length; i++) {\r\n            if (array[i] === item)\r\n                return i;\r\n        }\r\n        return -1;\r\n    }\r\n\r\n});\r\n"]}