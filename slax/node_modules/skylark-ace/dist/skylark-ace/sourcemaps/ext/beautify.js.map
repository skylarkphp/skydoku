{"version":3,"sources":["ext/beautify.js"],"names":["define","require","exports","module","TokenIterator","is","token","type","lastIndexOf","singletonTags","blockTags","beautify","session","nextToken","row","i","iterator","getCurrentToken","tabString","getTabString","breakBefore","spaceBefore","spaceAfter","code","value","tagName","depth","lastDepth","lastIndent","indent","unindent","roundDepth","curlyDepth","curRow","rowsToAdd","indentNextLine","inTag","inCSS","inBlock","levels","0","parents","trimNext","trim","trimLine","replace","trimCode","trimRight","getCurrentTokenRow","$rowTokens","stepForward","$modeId","indexOf","substr","match","trimLeft","length","doc","setValue","commands","name","exec","editor","bindKey"],"mappings":"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","file":"../../ext/beautify.js","sourcesContent":["/* ***** BEGIN LICENSE BLOCK *****\r\n * Distributed under the BSD license:\r\n *\r\n * Copyright (c) 2012, Ajax.org B.V.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *     * Redistributions of source code must retain the above copyright\r\n *       notice, this list of conditions and the following disclaimer.\r\n *     * Redistributions in binary form must reproduce the above copyright\r\n *       notice, this list of conditions and the following disclaimer in the\r\n *       documentation and/or other materials provided with the distribution.\r\n *     * Neither the name of Ajax.org B.V. nor the\r\n *       names of its contributors may be used to endorse or promote products\r\n *       derived from this software without specific prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\r\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY\r\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\r\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\r\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n *\r\n * ***** END LICENSE BLOCK ***** */\r\n\r\n// [WIP]\r\n\r\ndefine(function(require, exports, module) {\r\n\"use strict\";\r\nvar TokenIterator = require(\"../token_iterator\").TokenIterator;\r\n\r\nfunction is(token, type) {\r\n    return token.type.lastIndexOf(type + \".xml\") > -1;\r\n}\r\n\r\n// do not indent after singleton tags or <html>\r\nexports.singletonTags = [\"area\", \"base\", \"br\", \"col\", \"command\", \"embed\", \"hr\", \"html\", \"img\", \"input\", \"keygen\", \"link\", \"meta\", \"param\", \"source\", \"track\", \"wbr\"];\r\n\r\n// insert a line break after block level tags\r\nexports.blockTags = [\"article\", \"aside\", \"blockquote\", \"body\", \"div\", \"dl\", \"fieldset\", \"footer\", \"form\", \"head\", \"header\", \"html\", \"nav\", \"ol\", \"p\", \"script\", \"section\", \"style\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"ul\"];\r\n\r\nexports.beautify = function(session) {\r\n    var iterator = new TokenIterator(session, 0, 0);\r\n    var token = iterator.getCurrentToken();\r\n    var tabString = session.getTabString();\r\n    var singletonTags = exports.singletonTags;\r\n    var blockTags = exports.blockTags;\r\n    var nextToken;\r\n    var breakBefore = false;\r\n    var spaceBefore = false;\r\n    var spaceAfter = false;\r\n    var code = \"\";\r\n    var value = \"\";\r\n    var tagName = \"\";\r\n    var depth = 0;\r\n    var lastDepth = 0;\r\n    var lastIndent = 0;\r\n    var indent = 0;\r\n    var unindent = 0;\r\n    var roundDepth = 0;\r\n    var curlyDepth = 0;\r\n    var row;\r\n    var curRow = 0;\r\n    var rowsToAdd = 0;\r\n    var rowTokens = [];\r\n    var abort = false;\r\n    var i;\r\n    var indentNextLine = false;\r\n    var inTag = false;\r\n    var inCSS = false;\r\n    var inBlock = false;\r\n    var levels = {0: 0};\r\n    var parents = [];\r\n\r\n    var trimNext = function() {\r\n        if (nextToken && nextToken.value && nextToken.type !== 'string.regexp')\r\n            nextToken.value = nextToken.value.trim();\r\n    };\r\n\r\n    var trimLine = function() {\r\n        code = code.replace(/ +$/, \"\");\r\n    };\r\n\r\n    var trimCode = function() {\r\n        code = code.trimRight();\r\n        breakBefore = false;\r\n    };\r\n\r\n    while (token !== null) {\r\n        curRow = iterator.getCurrentTokenRow();\r\n        rowTokens = iterator.$rowTokens;\r\n        nextToken = iterator.stepForward();\r\n\r\n        if (typeof token !== \"undefined\") {\r\n            value = token.value;\r\n            unindent = 0;\r\n\r\n            // mode\r\n            inCSS = (tagName === \"style\" || session.$modeId === \"ace/mode/css\");\r\n\r\n            // in tag\r\n            if (is(token, \"tag-open\")) {\r\n                inTag = true;\r\n\r\n                // are we in a block tag\r\n                if (nextToken)\r\n                    inBlock = (blockTags.indexOf(nextToken.value) !== -1);\r\n\r\n                // html indentation\r\n                if (value === \"</\") {\r\n                    // line break before closing tag unless we just had one\r\n                    if (inBlock && !breakBefore && rowsToAdd < 1)\r\n                        rowsToAdd++;\r\n\r\n                    if (inCSS)\r\n                        rowsToAdd = 1;\r\n\r\n                    unindent = 1;\r\n                    inBlock = false;\r\n                }\r\n            } else if (is(token, \"tag-close\")) {\r\n                inTag = false;\r\n            // comments\r\n            } else if (is(token, \"comment.start\")) {\r\n                inBlock = true;\r\n            } else if (is(token, \"comment.end\")) {\r\n                inBlock = false;\r\n            }\r\n\r\n            // line break before }\r\n            if (!inTag && !rowsToAdd && token.type === \"paren.rparen\" && token.value.substr(0, 1) === \"}\") {\r\n                rowsToAdd++;\r\n            }\r\n\r\n            // add rows\r\n            if (curRow !== row) {\r\n                rowsToAdd = curRow;\r\n\r\n                if (row)\r\n                    rowsToAdd -= row;\r\n            }\r\n\r\n            if (rowsToAdd) {\r\n                trimCode();\r\n                for (; rowsToAdd > 0; rowsToAdd--)\r\n                    code += \"\\n\";\r\n\r\n                breakBefore = true;\r\n\r\n                // trim value if not in a comment or string\r\n                if (!is(token, \"comment\") && !token.type.match(/^(comment|string)$/))\r\n                   value = value.trimLeft();\r\n            }\r\n\r\n            if (value) {\r\n                // whitespace\r\n                if (token.type === \"keyword\" && value.match(/^(if|else|elseif|for|foreach|while|switch)$/)) {\r\n                    parents[depth] = value;\r\n\r\n                    trimNext();\r\n                    spaceAfter = true;\r\n\r\n                    // space before else, elseif\r\n                    if (value.match(/^(else|elseif)$/)) {\r\n                        if (code.match(/\\}[\\s]*$/)) {\r\n                            trimCode();\r\n                            spaceBefore = true;\r\n                        }\r\n                    }\r\n                // trim value after opening paren\r\n                } else if (token.type === \"paren.lparen\") {\r\n                    trimNext();\r\n\r\n                    // whitespace after {\r\n                    if (value.substr(-1) === \"{\") {\r\n                        spaceAfter = true;\r\n                        indentNextLine = false;\r\n\r\n                        if(!inTag)\r\n                            rowsToAdd = 1;\r\n                    }\r\n\r\n                    // ensure curly brace is preceeded by whitespace\r\n                    if (value.substr(0, 1) === \"{\") {\r\n                        spaceBefore = true;\r\n\r\n                        // collapse square and curly brackets together\r\n                        if (code.substr(-1) !== '[' && code.trimRight().substr(-1) === '[') {\r\n                            trimCode();\r\n                            spaceBefore = false;\r\n                        } else if (code.trimRight().substr(-1) === ')') {\r\n                            trimCode();\r\n                        } else {\r\n                            trimLine();\r\n                        }\r\n                    }\r\n                // remove space before closing paren\r\n                } else if (token.type === \"paren.rparen\") {\r\n                    unindent = 1;\r\n\r\n                    // ensure curly brace is preceeded by whitespace\r\n                    if (value.substr(0, 1) === \"}\") {\r\n                        if (parents[depth-1] === 'case')\r\n                            unindent++;\r\n\r\n                        if (code.trimRight().substr(-1) === '{') {\r\n                            trimCode();\r\n                        } else {\r\n                            spaceBefore = true;\r\n\r\n                            if (inCSS)\r\n                                rowsToAdd+=2;\r\n                        }\r\n                    }\r\n\r\n                    // collapse square and curly brackets together\r\n                    if (value.substr(0, 1) === \"]\") {\r\n                        if (code.substr(-1) !== '}' && code.trimRight().substr(-1) === '}') {\r\n                            spaceBefore = false;\r\n                            indent++;\r\n                            trimCode();\r\n                        }\r\n                    }\r\n\r\n                    // collapse round brackets together\r\n                    if (value.substr(0, 1) === \")\") {\r\n                        if (code.substr(-1) !== '(' && code.trimRight().substr(-1) === '(') {\r\n                            spaceBefore = false;\r\n                            indent++;\r\n                            trimCode();\r\n                        }\r\n                    }\r\n\r\n                    trimLine();\r\n                // add spaces around conditional operators\r\n                } else if ((token.type === \"keyword.operator\" || token.type === \"keyword\") && value.match(/^(=|==|===|!=|!==|&&|\\|\\||and|or|xor|\\+=|.=|>|>=|<|<=|=>)$/)) {\r\n                    trimCode();\r\n                    trimNext();\r\n                    spaceBefore = true;\r\n                    spaceAfter = true;\r\n                // remove space before semicolon\r\n                } else if (token.type === \"punctuation.operator\" && value === ';') {\r\n                    trimCode();\r\n                    trimNext();\r\n                    spaceAfter = true;\r\n\r\n                    if (inCSS)\r\n                        rowsToAdd++;\r\n                // space after colon or comma\r\n                } else if (token.type === \"punctuation.operator\" && value.match(/^(:|,)$/)) {\r\n                    trimCode();\r\n                    trimNext();\r\n\r\n                    // line break after commas in curly block\r\n                    if (value.match(/^(,)$/) && curlyDepth>0 && roundDepth===0) {\r\n                        rowsToAdd++;\r\n                    } else {\r\n                        spaceAfter = true;\r\n                        breakBefore = false;\r\n                    }\r\n                // ensure space before php closing tag\r\n                } else if (token.type === \"support.php_tag\" && value === \"?>\" && !breakBefore) {\r\n                    trimCode();\r\n                    spaceBefore = true;\r\n                // remove excess space before HTML attribute\r\n                } else if (is(token, \"attribute-name\") && code.substr(-1).match(/^\\s$/)) {\r\n                    spaceBefore = true;\r\n                // remove space around attribute equals\r\n                } else if (is(token, \"attribute-equals\")) {\r\n                    trimLine();\r\n                    trimNext();\r\n                // remove space before HTML closing tag\r\n                } else if (is(token, \"tag-close\")) {\r\n                    trimLine();\r\n                    if(value === \"/>\")\r\n                        spaceBefore = true;\r\n                }\r\n\r\n                // add indent to code unless multiline string or comment\r\n                if (breakBefore && !(token.type.match(/^(comment)$/) && !value.substr(0, 1).match(/^[/#]$/)) && !(token.type.match(/^(string)$/) && !value.substr(0, 1).match(/^['\"]$/))) {\r\n\r\n                    indent = lastIndent;\r\n\r\n                    if(depth > lastDepth) {\r\n                        indent++;\r\n\r\n                        for (i=depth; i > lastDepth; i--)\r\n                            levels[i] = indent;\r\n                    } else if(depth < lastDepth)\r\n                        indent = levels[depth];\r\n\r\n                    lastDepth = depth;\r\n                    lastIndent = indent;\r\n\r\n                    if(unindent)\r\n                        indent -= unindent;\r\n\r\n                    if (indentNextLine && !roundDepth) {\r\n                        indent++;\r\n                        indentNextLine = false;\r\n                    }\r\n\r\n                    for (i = 0; i < indent; i++)\r\n                        code += tabString;\r\n                }\r\n\r\n\r\n                if (token.type === \"keyword\" && value.match(/^(case|default)$/)) {\r\n                    parents[depth] = value;\r\n                    depth++;\r\n                }\r\n\r\n\r\n                if (token.type === \"keyword\" && value.match(/^(break)$/)) {\r\n                    if(parents[depth-1] && parents[depth-1].match(/^(case|default)$/)) {\r\n                        depth--;\r\n                    }\r\n                }\r\n\r\n                // indent one line after if or else\r\n                if (token.type === \"paren.lparen\") {\r\n                    roundDepth += (value.match(/\\(/g) || []).length;\r\n                    curlyDepth += (value.match(/\\{/g) || []).length;\r\n                    depth += value.length;\r\n                }\r\n\r\n                if (token.type === \"keyword\" && value.match(/^(if|else|elseif|for|while)$/)) {\r\n                    indentNextLine = true;\r\n                    roundDepth = 0;\r\n                } else if (!roundDepth && value.trim() && token.type !== \"comment\")\r\n                    indentNextLine = false;\r\n\r\n                if (token.type === \"paren.rparen\") {\r\n                    roundDepth -= (value.match(/\\)/g) || []).length;\r\n                    curlyDepth -= (value.match(/\\}/g) || []).length;\r\n\r\n                    for (i = 0; i < value.length; i++) {\r\n                        depth--;\r\n                        if(value.substr(i, 1)==='}' && parents[depth]==='case') {\r\n                            depth--;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // add to code\r\n                if (spaceBefore && !breakBefore) {\r\n                    trimLine();\r\n                    if (code.substr(-1) !== \"\\n\")\r\n                        code += \" \";\r\n                }\r\n\r\n                code += value;\r\n\r\n                if (spaceAfter)\r\n                    code += \" \";\r\n\r\n                breakBefore = false;\r\n                spaceBefore = false;\r\n                spaceAfter = false;\r\n\r\n                // line break after block tag or doctype\r\n                if ((is(token, \"tag-close\") && (inBlock || blockTags.indexOf(tagName) !== -1)) || (is(token, \"doctype\") && value === \">\")) {\r\n                    // undo linebreak if tag is immediately closed\r\n                    if (inBlock && nextToken && nextToken.value === \"</\")\r\n                        rowsToAdd = -1;\r\n                    else\r\n                        rowsToAdd = 1;\r\n                }\r\n\r\n                // html indentation\r\n                if (is(token, \"tag-open\") && value === \"</\") {\r\n                    depth--;\r\n                // indent after opening tag\r\n                } else if (is(token, \"tag-open\") && value === \"<\" && singletonTags.indexOf(nextToken.value) === -1) {\r\n                    depth++;\r\n                // remove indent if unknown singleton\r\n                } else if (is(token, \"tag-name\")) {\r\n                    tagName = value;\r\n                } else if (is(token, \"tag-close\") && value === \"/>\" && singletonTags.indexOf(tagName) === -1){\r\n                    depth--;\r\n                }\r\n\r\n                row = curRow;\r\n            }\r\n        }\r\n\r\n        token = nextToken;\r\n    }\r\n\r\n    code = code.trim();\r\n    session.doc.setValue(code);\r\n};\r\n\r\nexports.commands = [{\r\n    name: \"beautify\",\r\n    exec: function(editor) {\r\n        exports.beautify(editor.session);\r\n    },\r\n    bindKey: \"Ctrl-Shift-B\"\r\n}];\r\n\r\n});\r\n"]}