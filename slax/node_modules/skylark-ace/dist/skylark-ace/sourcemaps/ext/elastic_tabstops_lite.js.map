{"version":3,"sources":["ext/elastic_tabstops_lite.js"],"names":["define","require","exports","module","ElasticTabstopsLite","editor","this","$editor","self","changedRows","recordChanges","onAfterExec","processRows","onExec","onChange","delta","indexOf","start","row","push","end","rows","$inChange","checkedRows","r","rowCount","length","cellWidthObj","$findCellWidthsForBlock","cellWidths","$setBlockCellWidthsToMax","rowIndex","firstRow","w","l","widths","$adjustRow","rowIter","$cellWidthsForRow","unshift","numRows","session","getLength","selectionColumns","$selectionColumnsForRow","tabs","concat","$tabsForRow","map","el","slice","line","getLine","i","len","leftEdge","rightEdge","rightmostSelection","$rightmostSelectionInCell","cell","substring","Math","max","replace","selections","cursor","getCursorPosition","getSelection","isEmpty","column","blockStartRow","blockEndRow","maxWidth","startingNewBlock","columnInfo","$izip_longest","c","NaN","s","width","isNaN","j","console","error","cellRightEdge","rightmost","lengths","apply","match","rowTabs","re","exec","index","bias","location","expandedSet","$izip","it","difference","partialLine","substr","strippedPartialLine","ispaces","getDocument","insertInLine","Array","join","removeInLine","iterables","longest","iterablesLength","iLength","set","size","call","prototype","Editor","defineOptions","useElasticTabstops","val","elasticTabstops","commands","on","removeListener"],"mappings":"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","file":"../../ext/elastic_tabstops_lite.js","sourcesContent":["/* ***** BEGIN LICENSE BLOCK *****\r\n * Distributed under the BSD license:\r\n *\r\n * Copyright (c) 2012, Ajax.org B.V.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *     * Redistributions of source code must retain the above copyright\r\n *       notice, this list of conditions and the following disclaimer.\r\n *     * Redistributions in binary form must reproduce the above copyright\r\n *       notice, this list of conditions and the following disclaimer in the\r\n *       documentation and/or other materials provided with the distribution.\r\n *     * Neither the name of Ajax.org B.V. nor the\r\n *       names of its contributors may be used to endorse or promote products\r\n *       derived from this software without specific prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\r\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY\r\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\r\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\r\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n *\r\n * ***** END LICENSE BLOCK ***** */\r\n\r\ndefine(function(require, exports, module) {\r\n\"use strict\";\r\n\r\nvar ElasticTabstopsLite = function(editor) {\r\n    this.$editor = editor;\r\n    var self = this;\r\n    var changedRows = [];\r\n    var recordChanges = false;\r\n    this.onAfterExec = function() {\r\n        recordChanges = false;\r\n        self.processRows(changedRows);\r\n        changedRows = [];\r\n    };\r\n    this.onExec = function() {\r\n        recordChanges = true;\r\n    };\r\n    this.onChange = function(delta) {\r\n        if (recordChanges) {\r\n            if (changedRows.indexOf(delta.start.row) == -1)\r\n                changedRows.push(delta.start.row);\r\n            if (delta.end.row != delta.start.row)\r\n                changedRows.push(delta.end.row);\r\n        }\r\n    };\r\n};\r\n\r\n(function() {\r\n    this.processRows = function(rows) {\r\n        this.$inChange = true;\r\n        var checkedRows = [];\r\n\r\n        for (var r = 0, rowCount = rows.length; r < rowCount; r++) {\r\n            var row = rows[r];\r\n\r\n            if (checkedRows.indexOf(row) > -1)\r\n                continue;\r\n\r\n            var cellWidthObj = this.$findCellWidthsForBlock(row);\r\n            var cellWidths = this.$setBlockCellWidthsToMax(cellWidthObj.cellWidths);\r\n            var rowIndex = cellWidthObj.firstRow;\r\n\r\n            for (var w = 0, l = cellWidths.length; w < l; w++) {\r\n                var widths = cellWidths[w];\r\n                checkedRows.push(rowIndex);\r\n                this.$adjustRow(rowIndex, widths);\r\n                rowIndex++;\r\n            }\r\n        }\r\n        this.$inChange = false;\r\n    };\r\n\r\n    this.$findCellWidthsForBlock = function(row) {\r\n        var cellWidths = [], widths;\r\n\r\n        // starting row and backward\r\n        var rowIter = row;\r\n        while (rowIter >= 0) {\r\n            widths = this.$cellWidthsForRow(rowIter);\r\n            if (widths.length == 0)\r\n                break;\r\n\r\n            cellWidths.unshift(widths);\r\n            rowIter--;\r\n        }\r\n        var firstRow = rowIter + 1;\r\n\r\n        // forward (not including starting row)\r\n        rowIter = row;\r\n        var numRows = this.$editor.session.getLength();\r\n\r\n        while (rowIter < numRows - 1) {\r\n            rowIter++;\r\n\r\n            widths = this.$cellWidthsForRow(rowIter);\r\n            if (widths.length == 0)\r\n                break;\r\n\r\n            cellWidths.push(widths);\r\n        }\r\n\r\n        return { cellWidths: cellWidths, firstRow: firstRow };\r\n    };\r\n\r\n    this.$cellWidthsForRow = function(row) {\r\n        var selectionColumns = this.$selectionColumnsForRow(row);\r\n        // todo: support multicursor\r\n\r\n        var tabs = [-1].concat(this.$tabsForRow(row));\r\n        var widths = tabs.map(function(el) { return 0; } ).slice(1);\r\n        var line = this.$editor.session.getLine(row);\r\n\r\n        for (var i = 0, len = tabs.length - 1; i < len; i++) {\r\n            var leftEdge = tabs[i]+1;\r\n            var rightEdge = tabs[i+1];\r\n\r\n            var rightmostSelection = this.$rightmostSelectionInCell(selectionColumns, rightEdge);\r\n            var cell = line.substring(leftEdge, rightEdge);\r\n            widths[i] = Math.max(cell.replace(/\\s+$/g,'').length, rightmostSelection - leftEdge);\r\n        }\r\n\r\n        return widths;\r\n    };\r\n\r\n    this.$selectionColumnsForRow = function(row) {\r\n        var selections = [], cursor = this.$editor.getCursorPosition();\r\n        if (this.$editor.session.getSelection().isEmpty()) {\r\n            // todo: support multicursor\r\n            if (row == cursor.row)\r\n                selections.push(cursor.column);\r\n        }\r\n\r\n        return selections;\r\n    };\r\n\r\n    this.$setBlockCellWidthsToMax = function(cellWidths) {\r\n        var startingNewBlock = true, blockStartRow, blockEndRow, maxWidth;\r\n        var columnInfo = this.$izip_longest(cellWidths);\r\n\r\n        for (var c = 0, l = columnInfo.length; c < l; c++) {\r\n            var column = columnInfo[c];\r\n            if (!column.push) {\r\n                console.error(column);\r\n                continue;\r\n            }\r\n            // add an extra None to the end so that the end of the column automatically\r\n            // finishes a block\r\n            column.push(NaN);\r\n\r\n            for (var r = 0, s = column.length; r < s; r++) {\r\n                var width = column[r];\r\n                if (startingNewBlock) {\r\n                    blockStartRow = r;\r\n                    maxWidth = 0;\r\n                    startingNewBlock = false;\r\n                }\r\n                if (isNaN(width)) {\r\n                    // block ended\r\n                    blockEndRow = r;\r\n\r\n                    for (var j = blockStartRow; j < blockEndRow; j++) {\r\n                        cellWidths[j][c] = maxWidth;\r\n                    }\r\n                    startingNewBlock = true;\r\n                }\r\n\r\n                maxWidth = Math.max(maxWidth, width);\r\n            }\r\n        }\r\n\r\n        return cellWidths;\r\n    };\r\n\r\n    this.$rightmostSelectionInCell = function(selectionColumns, cellRightEdge) {\r\n        var rightmost = 0;\r\n\r\n        if (selectionColumns.length) {\r\n            var lengths = [];\r\n            for (var s = 0, length = selectionColumns.length; s < length; s++) {\r\n                if (selectionColumns[s] <= cellRightEdge)\r\n                    lengths.push(s);\r\n                else\r\n                    lengths.push(0);\r\n            }\r\n            rightmost = Math.max.apply(Math, lengths);\r\n        }\r\n\r\n        return rightmost;\r\n    };\r\n\r\n    this.$tabsForRow = function(row) {\r\n        var rowTabs = [], line = this.$editor.session.getLine(row),\r\n            re = /\\t/g, match;\r\n\r\n        while ((match = re.exec(line)) != null) {\r\n            rowTabs.push(match.index);\r\n        }\r\n\r\n        return rowTabs;\r\n    };\r\n\r\n    this.$adjustRow = function(row, widths) {\r\n        var rowTabs = this.$tabsForRow(row);\r\n\r\n        if (rowTabs.length == 0)\r\n            return;\r\n\r\n        var bias = 0, location = -1;\r\n\r\n        // this always only contains two elements, so we're safe in the loop below\r\n        var expandedSet = this.$izip(widths, rowTabs);\r\n\r\n        for (var i = 0, l = expandedSet.length; i < l; i++) {\r\n            var w = expandedSet[i][0], it = expandedSet[i][1];\r\n            location += 1 + w;\r\n            it += bias;\r\n            var difference = location - it;\r\n\r\n            if (difference == 0)\r\n                continue;\r\n\r\n            var partialLine = this.$editor.session.getLine(row).substr(0, it );\r\n            var strippedPartialLine = partialLine.replace(/\\s*$/g, \"\");\r\n            var ispaces = partialLine.length - strippedPartialLine.length;\r\n\r\n            if (difference > 0) {\r\n                // put the spaces after the tab and then delete the tab, so any insertion\r\n                // points behave as expected\r\n                this.$editor.session.getDocument().insertInLine({row: row, column: it + 1}, Array(difference + 1).join(\" \") + \"\\t\");\r\n                this.$editor.session.getDocument().removeInLine(row, it, it + 1);\r\n\r\n                bias += difference;\r\n            }\r\n\r\n            if (difference < 0 && ispaces >= -difference) {\r\n                this.$editor.session.getDocument().removeInLine(row, it + difference, it);\r\n                bias += difference;\r\n            }\r\n        }\r\n    };\r\n\r\n    // the is a (naive) Python port--but works for these purposes\r\n    this.$izip_longest = function(iterables) {\r\n        if (!iterables[0])\r\n            return [];\r\n        var longest = iterables[0].length;\r\n        var iterablesLength = iterables.length;\r\n\r\n        for (var i = 1; i < iterablesLength; i++) {\r\n            var iLength = iterables[i].length;\r\n            if (iLength > longest)\r\n                longest = iLength;\r\n        }\r\n\r\n        var expandedSet = [];\r\n\r\n        for (var l = 0; l < longest; l++) {\r\n            var set = [];\r\n            for (var i = 0; i < iterablesLength; i++) {\r\n                if (iterables[i][l] === \"\")\r\n                    set.push(NaN);\r\n                else\r\n                    set.push(iterables[i][l]);\r\n            }\r\n\r\n            expandedSet.push(set);\r\n        }\r\n\r\n\r\n        return expandedSet;\r\n    };\r\n\r\n    // an even more (naive) Python port\r\n    this.$izip = function(widths, tabs) {\r\n        // grab the shorter size\r\n        var size = widths.length >= tabs.length ? tabs.length : widths.length;\r\n\r\n        var expandedSet = [];\r\n        for (var i = 0; i < size; i++) {\r\n            var set = [ widths[i], tabs[i] ];\r\n            expandedSet.push(set);\r\n        }\r\n        return expandedSet;\r\n    };\r\n\r\n}).call(ElasticTabstopsLite.prototype);\r\n\r\nexports.ElasticTabstopsLite = ElasticTabstopsLite;\r\n\r\nvar Editor = require(\"../editor\").Editor;\r\nrequire(\"../config\").defineOptions(Editor.prototype, \"editor\", {\r\n    useElasticTabstops: {\r\n        set: function(val) {\r\n            if (val) {\r\n                if (!this.elasticTabstops)\r\n                    this.elasticTabstops = new ElasticTabstopsLite(this);\r\n                this.commands.on(\"afterExec\", this.elasticTabstops.onAfterExec);\r\n                this.commands.on(\"exec\", this.elasticTabstops.onExec);\r\n                this.on(\"change\", this.elasticTabstops.onChange);\r\n            } else if (this.elasticTabstops) {\r\n                this.commands.removeListener(\"afterExec\", this.elasticTabstops.onAfterExec);\r\n                this.commands.removeListener(\"exec\", this.elasticTabstops.onExec);\r\n                this.removeListener(\"change\", this.elasticTabstops.onChange);\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\n});"]}