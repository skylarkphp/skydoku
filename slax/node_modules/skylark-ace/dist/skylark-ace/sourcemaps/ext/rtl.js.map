{"version":3,"sources":["ext/rtl.js"],"names":["define","require","exports","module","commands","name","bindKey","win","mac","exec","editor","session","$bidiHandler","setRtlDirection","readOnly","Editor","onChangeSelection","e","lead","getSelection","isRtlLine","row","column","isMoveLeftOperation","moveCursorTo","getLine","length","isEmpty","setPosition","onCommandEmitted","commadEvent","test","command","onChange","delta","currentRow","start","action","lines","end","charAt","RLE","doc","$lines","updateLineDirection","renderer","cells","$textLayer","width","layerConfig","padding","forEach","cell","style","element","direction","textAlign","clearTextLayer","clear","cellCache","defineOptions","prototype","rtlText","set","val","this","on","addCommands","off","removeCommands","updateFull","rtl","$isRtl","setOption","seenBidi"],"mappings":"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","file":"../../ext/rtl.js","sourcesContent":["define(function(require, exports, module) {\r\n\"use strict\";\r\n/** simple statusbar **/\r\nvar dom = require(\"ace/lib/dom\");\r\nvar lang = require(\"ace/lib/lang\");\r\n\r\nvar commands = [{\r\n    name: \"leftToRight\",\r\n    bindKey: { win: \"Ctrl-Alt-Shift-L\", mac: \"Command-Alt-Shift-L\" },\r\n    exec: function(editor) {\r\n        editor.session.$bidiHandler.setRtlDirection(editor, false);\r\n    },\r\n    readOnly: true\r\n}, {\r\n    name: \"rightToLeft\",\r\n    bindKey: { win: \"Ctrl-Alt-Shift-R\",  mac: \"Command-Alt-Shift-R\" },\r\n    exec: function(editor) {\r\n        editor.session.$bidiHandler.setRtlDirection(editor, true);\r\n    },\r\n    readOnly: true\r\n}];\r\n\r\nvar Editor = require(\"../editor\").Editor;\r\nrequire(\"../config\").defineOptions(Editor.prototype, \"editor\", {\r\n    rtlText: {\r\n        set: function(val) {\r\n            if (val) {\r\n                this.on(\"change\", onChange);\r\n                this.on(\"changeSelection\", onChangeSelection);\r\n                this.renderer.on(\"afterRender\", updateLineDirection);\r\n                this.commands.on(\"exec\", onCommandEmitted);\r\n                this.commands.addCommands(commands);\r\n            } else {\r\n                this.off(\"change\", onChange);\r\n                this.off(\"changeSelection\", onChangeSelection);\r\n                this.renderer.off(\"afterRender\", updateLineDirection);\r\n                this.commands.off(\"exec\", onCommandEmitted);\r\n                this.commands.removeCommands(commands);\r\n                clearTextLayer(this.renderer);\r\n            }\r\n            this.renderer.updateFull();\r\n        }\r\n    },\r\n    rtl: {\r\n        set: function(val) {\r\n            this.session.$bidiHandler.$isRtl = val;\r\n            if (val) {\r\n                this.setOption(\"rtlText\", false);\r\n                this.renderer.on(\"afterRender\", updateLineDirection);\r\n                this.session.$bidiHandler.seenBidi = true;\r\n            } else {\r\n                this.renderer.off(\"afterRender\", updateLineDirection);\r\n                clearTextLayer(this.renderer);\r\n            }\r\n            this.renderer.updateFull();\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * Whenever the selection is changed, prevent cursor (lead) to be positioned at\r\n * position 0 of right-to-left line in order to maintain the RLE marker at this position.\r\n * When cursor reaches position 0, either advance it to position 1 of current line (default) \r\n * or to last position of previous line (if it comes from position 1 as the result of commands\r\n * mentioned in 'onCommandEmitted' event handler).\r\n * This serves few purposes:\r\n * - ensures cursor visual movement as if RLE mark doesn't exist.\r\n * - prevents character insertion before RLE mark.\r\n * - prevents RLE mark removal when 'delete' is pressed when cursot stays at position 0.         \r\n * - ensures RLE mark removal on line merge, when 'delete' is pressed and cursor stays \r\n *   at last position of previous line and when 'backspace' is pressed and cursor  stays at\r\n *   first position of current line. This is achived by hacking range boundaries on 'remove' operation.\r\n **/\r\nfunction onChangeSelection(e, editor) {\r\n    var lead = editor.getSelection().lead;\r\n    if (editor.session.$bidiHandler.isRtlLine(lead.row)) {\r\n        if (lead.column === 0) {\r\n            if (editor.session.$bidiHandler.isMoveLeftOperation && lead.row > 0) {\r\n                editor.getSelection().moveCursorTo(lead.row - 1, editor.session.getLine(lead.row - 1).length);\r\n            } else {\r\n                if (editor.getSelection().isEmpty())\r\n                    lead.column += 1;\r\n                else\r\n                    lead.setPosition(lead.row, lead.column + 1);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction onCommandEmitted(commadEvent) {\r\n    commadEvent.editor.session.$bidiHandler.isMoveLeftOperation = /gotoleft|selectleft|backspace|removewordleft/.test(commadEvent.command.name);\r\n}\r\n\r\n/**\r\n * Whenever the document is changed make sure that line break operatin\r\n * on right-to-left line (like pressing Enter or pasting multi-line text)\r\n * produces new right-to-left lines\r\n **/\r\nfunction onChange(delta, editor) {\r\n    var session = editor.session;\r\n    session.$bidiHandler.currentRow = null;\r\n    if (session.$bidiHandler.isRtlLine(delta.start.row) && delta.action === 'insert' && delta.lines.length > 1) {\r\n        for (var row = delta.start.row; row < delta.end.row; row++) {\r\n            if (session.getLine(row + 1).charAt(0) !== session.$bidiHandler.RLE)\r\n                session.doc.$lines[row + 1] = session.$bidiHandler.RLE + session.getLine(row + 1);\r\n        }\r\n    }\r\n}\r\n\r\nfunction updateLineDirection(e, renderer) {\r\n    var session = renderer.session;\r\n    var $bidiHandler = session.$bidiHandler;\r\n    var cells = renderer.$textLayer.$lines.cells;\r\n    var width = renderer.layerConfig.width - renderer.layerConfig.padding + \"px\";\r\n    cells.forEach(function(cell) {\r\n        var style = cell.element.style;\r\n        if ($bidiHandler && $bidiHandler.isRtlLine(cell.row)) {\r\n            style.direction = \"rtl\";\r\n            style.textAlign = \"right\";\r\n            style.width = width;\r\n        } else {\r\n            style.direction = \"\";\r\n            style.textAlign = \"\";\r\n            style.width = \"\";\r\n        }\r\n    });\r\n}\r\n\r\nfunction clearTextLayer(renderer) {\r\n    var lines = renderer.$textLayer.$lines;\r\n    lines.cells.forEach(clear);\r\n    lines.cellCache.forEach(clear);\r\n    function clear(cell) {\r\n        var style = cell.element.style;\r\n        style.direction = style.textAlign = style.width = \"\";\r\n    }\r\n}\r\n\r\n});\r\n"]}