{"version":3,"sources":["ext/emmet.js"],"names":["define","require","exports","module","emmet","emmetPath","HashHandler","Editor","snippetManager","Range","AceEmmetEditor","prototype","setupContext","editor","this","ace","indentation","session","getTabString","window","resources","setVariable","$syntax","getSyntax","getSelectionRange","range","doc","start","positionToIndex","end","createSelection","selection","setRange","indexToPosition","getCurrentLineRange","row","getCursorPosition","lineLength","getLine","length","index","column","getCaretPos","pos","setCaretPos","moveToPosition","getCurrentLine","replaceContent","value","noIndent","getContent","fromPoints","remove","$updateTabstops","insertSnippet","getValue","syntax","$modeId","split","pop","cursor","state","getState","getProfileName","profile","getVariable","getLines","join","search","mode","$mode","emmetConfig","prompt","title","getSelection","getTextRange","getFilePath","zeroBase","lastZero","ts","tabStops","settings","getVocabulary","tabstopOptions","tabstop","data","group","parseInt","isZero","placeholder","processText","result","escape","ch","variables","test","utils","common","replaceSubstring","keymap","expand_abbreviation","mac","win","match_pair_outward","match_pair_inward","matching_pair","next_edit_point","prev_edit_point","toggle_comment","split_join_tag","remove_tag","evaluate_math_expression","increment_number_by_1","decrement_number_by_1","increment_number_by_01","decrement_number_by_01","increment_number_by_10","decrement_number_by_10","select_next_item","select_previous_item","reflect_css_value","encode_decode_data_url","expand_abbreviation_with_tab","wrap_with_abbreviation","editorProxy","command","commands","runEmmetCommand","actions","action","isEmpty","lead","token","getTokenAt","type","setTimeout","run","e","load","bind","_signal","message","console","log","addCommand","name","bindKey","exec","multiSelectAction","updateCommands","enabled","keyBinding","addKeyboardHandler","removeKeyboardHandler","isSupportedMode","id","$id","isAvailable","isSupported","$modes","onChangeMode","target","enableEmmet","cb","loadModule","defineOptions","set","val","setCore"],"mappings":"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","file":"../../ext/emmet.js","sourcesContent":["/* ***** BEGIN LICENSE BLOCK *****\r\n * Distributed under the BSD license:\r\n *\r\n * Copyright (c) 2010, Ajax.org B.V.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *     * Redistributions of source code must retain the above copyright\r\n *       notice, this list of conditions and the following disclaimer.\r\n *     * Redistributions in binary form must reproduce the above copyright\r\n *       notice, this list of conditions and the following disclaimer in the\r\n *       documentation and/or other materials provided with the distribution.\r\n *     * Neither the name of Ajax.org B.V. nor the\r\n *       names of its contributors may be used to endorse or promote products\r\n *       derived from this software without specific prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\r\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY\r\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\r\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\r\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n *\r\n * ***** END LICENSE BLOCK ***** */\r\n\r\ndefine(function(require, exports, module) {\r\n\"use strict\";\r\nvar HashHandler = require(\"ace/keyboard/hash_handler\").HashHandler;\r\nvar Editor = require(\"ace/editor\").Editor;\r\nvar snippetManager = require(\"ace/snippets\").snippetManager;\r\nvar Range = require(\"ace/range\").Range;\r\nvar emmet, emmetPath;\r\n\r\n/**\r\n * Implementation of {@link IEmmetEditor} interface for Ace\r\n */\r\nfunction AceEmmetEditor() {}\r\n\r\nAceEmmetEditor.prototype = {\r\n    setupContext: function(editor) {\r\n        this.ace = editor;\r\n        this.indentation = editor.session.getTabString();\r\n        if (!emmet)\r\n            emmet = window.emmet;\r\n        var resources = emmet.resources || emmet.require(\"resources\");\r\n        resources.setVariable(\"indentation\", this.indentation);\r\n        this.$syntax = null;\r\n        this.$syntax = this.getSyntax();\r\n    },\r\n    /**\r\n     * Returns character indexes of selected text: object with <code>start</code>\r\n     * and <code>end</code> properties. If there's no selection, should return\r\n     * object with <code>start</code> and <code>end</code> properties referring\r\n     * to current caret position\r\n     * @return {Object}\r\n     * @example\r\n     * var selection = editor.getSelectionRange();\r\n     * alert(selection.start + ', ' + selection.end);\r\n     */\r\n    getSelectionRange: function() {\r\n        // TODO should start be caret position instead?\r\n        var range = this.ace.getSelectionRange();\r\n        var doc = this.ace.session.doc;\r\n        return {\r\n            start: doc.positionToIndex(range.start),\r\n            end: doc.positionToIndex(range.end)\r\n        };\r\n    },\r\n\r\n    /**\r\n     * Creates selection from <code>start</code> to <code>end</code> character\r\n     * indexes. If <code>end</code> is ommited, this method should place caret\r\n     * and <code>start</code> index\r\n     * @param {Number} start\r\n     * @param {Number} [end]\r\n     * @example\r\n     * editor.createSelection(10, 40);\r\n     *\r\n     * //move caret to 15th character\r\n     * editor.createSelection(15);\r\n     */\r\n    createSelection: function(start, end) {\r\n        var doc = this.ace.session.doc;\r\n        this.ace.selection.setRange({\r\n            start: doc.indexToPosition(start),\r\n            end: doc.indexToPosition(end)\r\n        });\r\n    },\r\n\r\n    /**\r\n     * Returns current line's start and end indexes as object with <code>start</code>\r\n     * and <code>end</code> properties\r\n     * @return {Object}\r\n     * @example\r\n     * var range = editor.getCurrentLineRange();\r\n     * alert(range.start + ', ' + range.end);\r\n     */\r\n    getCurrentLineRange: function() {\r\n        var ace = this.ace;\r\n        var row = ace.getCursorPosition().row;\r\n        var lineLength = ace.session.getLine(row).length;\r\n        var index = ace.session.doc.positionToIndex({row: row, column: 0});\r\n        return {\r\n            start: index,\r\n            end: index + lineLength\r\n        };\r\n    },\r\n\r\n    /**\r\n     * Returns current caret position\r\n     * @return {Number|null}\r\n     */\r\n    getCaretPos: function(){\r\n        var pos = this.ace.getCursorPosition();\r\n        return this.ace.session.doc.positionToIndex(pos);\r\n    },\r\n\r\n    /**\r\n     * Set new caret position\r\n     * @param {Number} index Caret position\r\n     */\r\n    setCaretPos: function(index){\r\n        var pos = this.ace.session.doc.indexToPosition(index);\r\n        this.ace.selection.moveToPosition(pos);\r\n    },\r\n\r\n    /**\r\n     * Returns content of current line\r\n     * @return {String}\r\n     */\r\n    getCurrentLine: function() {\r\n        var row = this.ace.getCursorPosition().row;\r\n        return this.ace.session.getLine(row);\r\n    },\r\n\r\n    /**\r\n     * Replace editor's content or it's part (from <code>start</code> to\r\n     * <code>end</code> index). If <code>value</code> contains\r\n     * <code>caret_placeholder</code>, the editor will put caret into\r\n     * this position. If you skip <code>start</code> and <code>end</code>\r\n     * arguments, the whole target's content will be replaced with\r\n     * <code>value</code>.\r\n     *\r\n     * If you pass <code>start</code> argument only,\r\n     * the <code>value</code> will be placed at <code>start</code> string\r\n     * index of current content.\r\n     *\r\n     * If you pass <code>start</code> and <code>end</code> arguments,\r\n     * the corresponding substring of current target's content will be\r\n     * replaced with <code>value</code>.\r\n     * @param {String} value Content you want to paste\r\n     * @param {Number} [start] Start index of editor's content\r\n     * @param {Number} [end] End index of editor's content\r\n     * @param {Boolean} [noIndent] Do not auto indent <code>value</code>\r\n     */\r\n    replaceContent: function(value, start, end, noIndent) {\r\n        if (end == null)\r\n            end = start == null ? this.getContent().length : start;\r\n        if (start == null)\r\n            start = 0;        \r\n        \r\n        var editor = this.ace;\r\n        var doc = editor.session.doc;\r\n        var range = Range.fromPoints(doc.indexToPosition(start), doc.indexToPosition(end));\r\n        editor.session.remove(range);\r\n        \r\n        range.end = range.start;\r\n        //editor.selection.setRange(range);\r\n        \r\n        value = this.$updateTabstops(value);\r\n        snippetManager.insertSnippet(editor, value);\r\n    },\r\n\r\n    /**\r\n     * Returns editor's content\r\n     * @return {String}\r\n     */\r\n    getContent: function(){\r\n        return this.ace.getValue();\r\n    },\r\n\r\n    /**\r\n     * Returns current editor's syntax mode\r\n     * @return {String}\r\n     */\r\n    getSyntax: function() {\r\n        if (this.$syntax)\r\n            return this.$syntax;\r\n        var syntax = this.ace.session.$modeId.split(\"/\").pop();\r\n        if (syntax == \"html\" || syntax == \"php\") {\r\n            var cursor = this.ace.getCursorPosition();\r\n            var state = this.ace.session.getState(cursor.row);\r\n            if (typeof state != \"string\")\r\n                state = state[0];\r\n            if (state) {\r\n                state = state.split(\"-\");\r\n                if (state.length > 1)\r\n                    syntax = state[0];\r\n                else if (syntax == \"php\")\r\n                    syntax = \"html\";\r\n            }\r\n        }\r\n        return syntax;\r\n    },\r\n\r\n    /**\r\n     * Returns current output profile name (@see emmet#setupProfile)\r\n     * @return {String}\r\n     */\r\n    getProfileName: function() {\r\n        var resources = emmet.resources || emmet.require(\"resources\");\r\n        switch (this.getSyntax()) {\r\n          case \"css\": return \"css\";\r\n          case \"xml\":\r\n          case \"xsl\":\r\n            return \"xml\";\r\n          case \"html\":\r\n            var profile = resources.getVariable(\"profile\");\r\n            // no forced profile, guess from content html or xhtml?\r\n            if (!profile)\r\n                profile = this.ace.session.getLines(0,2).join(\"\").search(/<!DOCTYPE[^>]+XHTML/i) != -1 ? \"xhtml\": \"html\";\r\n            return profile;\r\n          default:\r\n            var mode = this.ace.session.$mode;\r\n            return mode.emmetConfig && mode.emmetConfig.profile || \"xhtml\";\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Ask user to enter something\r\n     * @param {String} title Dialog title\r\n     * @return {String} Entered data\r\n     * @since 0.65\r\n     */\r\n    prompt: function(title) {\r\n        return prompt(title);\r\n    },\r\n\r\n    /**\r\n     * Returns current selection\r\n     * @return {String}\r\n     * @since 0.65\r\n     */\r\n    getSelection: function() {\r\n        return this.ace.session.getTextRange();\r\n    },\r\n\r\n    /**\r\n     * Returns current editor's file path\r\n     * @return {String}\r\n     * @since 0.65\r\n     */\r\n    getFilePath: function() {\r\n        return \"\";\r\n    },\r\n    \r\n    // update tabstops: make sure all caret placeholders are unique\r\n    // by default, abbreviation parser generates all unlinked (un-mirrored)\r\n    // tabstops as ${0}, so we have upgrade all caret tabstops with unique\r\n    // positions but make sure that all other tabstops are not linked accidentally\r\n    // based on https://github.com/sergeche/emmet-sublime/blob/master/editor.js#L119-L171\r\n    $updateTabstops: function(value) {\r\n        var base = 1000;\r\n        var zeroBase = 0;\r\n        var lastZero = null;\r\n        var ts = emmet.tabStops || emmet.require('tabStops');\r\n        var resources = emmet.resources || emmet.require(\"resources\");\r\n        var settings = resources.getVocabulary(\"user\");\r\n        var tabstopOptions = {\r\n            tabstop: function(data) {\r\n                var group = parseInt(data.group, 10);\r\n                var isZero = group === 0;\r\n                if (isZero)\r\n                    group = ++zeroBase;\r\n                else\r\n                    group += base;\r\n\r\n                var placeholder = data.placeholder;\r\n                if (placeholder) {\r\n                    // recursively update nested tabstops\r\n                    placeholder = ts.processText(placeholder, tabstopOptions);\r\n                }\r\n\r\n                var result = '${' + group + (placeholder ? ':' + placeholder : '') + '}';\r\n\r\n                if (isZero) {\r\n                    lastZero = [data.start, result];\r\n                }\r\n\r\n                return result;\r\n            },\r\n            escape: function(ch) {\r\n                if (ch == '$') return '\\\\$';\r\n                if (ch == '\\\\') return '\\\\\\\\';\r\n                return ch;\r\n            }\r\n        };\r\n\r\n        value = ts.processText(value, tabstopOptions);\r\n\r\n        if (settings.variables['insert_final_tabstop'] && !/\\$\\{0\\}$/.test(value)) {\r\n            value += '${0}';\r\n        } else if (lastZero) {\r\n            var common = emmet.utils ? emmet.utils.common : emmet.require('utils');\r\n            value = common.replaceSubstring(value, '${0}', lastZero[0], lastZero[1]);\r\n        }\r\n        \r\n        return value;\r\n    }\r\n};\r\n\r\n\r\nvar keymap = {\r\n    expand_abbreviation: {\"mac\": \"ctrl+alt+e\", \"win\": \"alt+e\"},\r\n    match_pair_outward: {\"mac\": \"ctrl+d\", \"win\": \"ctrl+,\"},\r\n    match_pair_inward: {\"mac\": \"ctrl+j\", \"win\": \"ctrl+shift+0\"},\r\n    matching_pair: {\"mac\": \"ctrl+alt+j\", \"win\": \"alt+j\"},\r\n    next_edit_point: \"alt+right\",\r\n    prev_edit_point: \"alt+left\",\r\n    toggle_comment: {\"mac\": \"command+/\", \"win\": \"ctrl+/\"},\r\n    split_join_tag: {\"mac\": \"shift+command+'\", \"win\": \"shift+ctrl+`\"},\r\n    remove_tag: {\"mac\": \"command+'\", \"win\": \"shift+ctrl+;\"},\r\n    evaluate_math_expression: {\"mac\": \"shift+command+y\", \"win\": \"shift+ctrl+y\"},\r\n    increment_number_by_1: \"ctrl+up\",\r\n    decrement_number_by_1: \"ctrl+down\",\r\n    increment_number_by_01: \"alt+up\",\r\n    decrement_number_by_01: \"alt+down\",\r\n    increment_number_by_10: {\"mac\": \"alt+command+up\", \"win\": \"shift+alt+up\"},\r\n    decrement_number_by_10: {\"mac\": \"alt+command+down\", \"win\": \"shift+alt+down\"},\r\n    select_next_item: {\"mac\": \"shift+command+.\", \"win\": \"shift+ctrl+.\"},\r\n    select_previous_item: {\"mac\": \"shift+command+,\", \"win\": \"shift+ctrl+,\"},\r\n    reflect_css_value: {\"mac\": \"shift+command+r\", \"win\": \"shift+ctrl+r\"},\r\n\r\n    encode_decode_data_url: {\"mac\": \"shift+ctrl+d\", \"win\": \"ctrl+'\"},\r\n    // update_image_size: {\"mac\": \"shift+ctrl+i\", \"win\": \"ctrl+u\"},\r\n    // expand_as_you_type: \"ctrl+alt+enter\",\r\n    // wrap_as_you_type: {\"mac\": \"shift+ctrl+g\", \"win\": \"shift+ctrl+g\"},\r\n    expand_abbreviation_with_tab: \"Tab\",\r\n    wrap_with_abbreviation: {\"mac\": \"shift+ctrl+a\", \"win\": \"shift+ctrl+a\"}\r\n};\r\n\r\nvar editorProxy = new AceEmmetEditor();\r\nexports.commands = new HashHandler();\r\nexports.runEmmetCommand = function runEmmetCommand(editor) {\r\n    try {\r\n        editorProxy.setupContext(editor);\r\n        var actions = emmet.actions || emmet.require(\"actions\");\r\n    \r\n        if (this.action == \"expand_abbreviation_with_tab\") {\r\n            if (!editor.selection.isEmpty())\r\n                return false;\r\n            var pos = editor.selection.lead;\r\n            var token = editor.session.getTokenAt(pos.row, pos.column);\r\n            if (token && /\\btag\\b/.test(token.type))\r\n                return false;\r\n        }\r\n        \r\n        if (this.action == \"wrap_with_abbreviation\") {\r\n            // without setTimeout prompt doesn't work on firefox\r\n            return setTimeout(function() {\r\n                actions.run(\"wrap_with_abbreviation\", editorProxy);\r\n            }, 0);\r\n        }\r\n        \r\n        var result = actions.run(this.action, editorProxy);\r\n    } catch(e) {\r\n        if (!emmet) {\r\n            exports.load(runEmmetCommand.bind(this, editor));\r\n            return true;\r\n        }\r\n        editor._signal(\"changeStatus\", typeof e == \"string\" ? e : e.message);\r\n        console.log(e);\r\n        result = false;\r\n    }\r\n    return result;\r\n};\r\n\r\nfor (var command in keymap) {\r\n    exports.commands.addCommand({\r\n        name: \"emmet:\" + command,\r\n        action: command,\r\n        bindKey: keymap[command],\r\n        exec: exports.runEmmetCommand,\r\n        multiSelectAction: \"forEach\"\r\n    });\r\n}\r\n\r\nexports.updateCommands = function(editor, enabled) {\r\n    if (enabled) {\r\n        editor.keyBinding.addKeyboardHandler(exports.commands);\r\n    } else {\r\n        editor.keyBinding.removeKeyboardHandler(exports.commands);\r\n    }\r\n};\r\n\r\nexports.isSupportedMode = function(mode) {\r\n    if (!mode) return false;\r\n    if (mode.emmetConfig) return true;\r\n    var id = mode.$id || mode;\r\n    return /css|less|scss|sass|stylus|html|php|twig|ejs|handlebars/.test(id);\r\n};\r\n\r\nexports.isAvailable = function(editor, command) {\r\n    if (/(evaluate_math_expression|expand_abbreviation)$/.test(command))\r\n        return true;\r\n    var mode = editor.session.$mode;\r\n    var isSupported = exports.isSupportedMode(mode);\r\n    if (isSupported && mode.$modes) {\r\n        // TODO refactor mode delegates to make this simpler\r\n        try {\r\n            editorProxy.setupContext(editor);\r\n            if (/js|php/.test(editorProxy.getSyntax()))\r\n                isSupported = false;\r\n        } catch(e) {}\r\n    }\r\n    return isSupported;\r\n};\r\n\r\nvar onChangeMode = function(e, target) {\r\n    var editor = target;\r\n    if (!editor)\r\n        return;\r\n    var enabled = exports.isSupportedMode(editor.session.$mode);\r\n    if (e.enableEmmet === false)\r\n        enabled = false;\r\n    if (enabled)\r\n        exports.load();\r\n    exports.updateCommands(editor, enabled);\r\n};\r\n\r\nexports.load = function(cb) {\r\n    if (typeof emmetPath == \"string\") {\r\n        require(\"ace/config\").loadModule(emmetPath, function() {\r\n            emmetPath = null;\r\n            cb && cb();\r\n        });\r\n    }\r\n};\r\n\r\nexports.AceEmmetEditor = AceEmmetEditor;\r\nrequire(\"ace/config\").defineOptions(Editor.prototype, \"editor\", {\r\n    enableEmmet: {\r\n        set: function(val) {\r\n            this[val ? \"on\" : \"removeListener\"](\"changeMode\", onChangeMode);\r\n            onChangeMode({enableEmmet: !!val}, this);\r\n        },\r\n        value: true\r\n    }\r\n});\r\n\r\nexports.setCore = function(e) {\r\n    if (typeof e == \"string\")\r\n       emmetPath = e;\r\n    else\r\n       emmet = e;\r\n};\r\n});\r\n\r\n"]}