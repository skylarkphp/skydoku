{"version":3,"sources":["ext/language_tools.js"],"names":["define","require","exports","module","snippetManager","Autocomplete","config","lang","util","textCompleter","keyWordCompleter","getCompletions","editor","session","pos","prefix","callback","$mode","completer","state","getState","row","snippetCompleter","scopes","token","getTokenAt","column","type","match","push","getActiveScopes","snippetMap","completions","forEach","scope","snippets","i","length","s","caption","name","tabTrigger","snippet","content","meta","this","getDocTooltip","item","docHTML","escapeHTML","join","completers","setCompleters","val","apply","addCompleter","expandSnippet","exec","expandWithTab","bindKey","onChangeMode","e","loadSnippetsForMode","mode","id","$id","files","loadSnippetFile","modes","snippetFilePath","replace","loadModule","m","snippetText","parseSnippetFile","register","includeScopes","x","doLiveAutocomplete","hasCompleter","activated","command","getCompletionPrefix","detach","autoInsert","showPopup","Editor","defineOptions","prototype","enableBasicAutocompletion","set","Array","isArray","commands","addCommand","startCommand","removeCommand","value","enableLiveAutocompletion","on","removeListener","enableSnippets","off"],"mappings":"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","file":"../../ext/language_tools.js","sourcesContent":["/* ***** BEGIN LICENSE BLOCK *****\r\n * Distributed under the BSD license:\r\n *\r\n * Copyright (c) 2012, Ajax.org B.V.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *     * Redistributions of source code must retain the above copyright\r\n *       notice, this list of conditions and the following disclaimer.\r\n *     * Redistributions in binary form must reproduce the above copyright\r\n *       notice, this list of conditions and the following disclaimer in the\r\n *       documentation and/or other materials provided with the distribution.\r\n *     * Neither the name of Ajax.org B.V. nor the\r\n *       names of its contributors may be used to endorse or promote products\r\n *       derived from this software without specific prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\r\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY\r\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\r\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\r\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n *\r\n * ***** END LICENSE BLOCK ***** */\r\n\r\ndefine(function(require, exports, module) {\r\n\"use strict\";\r\n\r\nvar snippetManager = require(\"../snippets\").snippetManager;\r\nvar Autocomplete = require(\"../autocomplete\").Autocomplete;\r\nvar config = require(\"../config\");\r\nvar lang = require(\"../lib/lang\");\r\nvar util = require(\"../autocomplete/util\");\r\n\r\nvar textCompleter = require(\"../autocomplete/text_completer\");\r\nvar keyWordCompleter = {\r\n    getCompletions: function(editor, session, pos, prefix, callback) {\r\n        if (session.$mode.completer) {\r\n            return session.$mode.completer.getCompletions(editor, session, pos, prefix, callback);\r\n        }\r\n        var state = editor.session.getState(pos.row);\r\n        var completions = session.$mode.getCompletions(state, session, pos, prefix);\r\n        callback(null, completions);\r\n    }\r\n};\r\n\r\nvar snippetCompleter = {\r\n    getCompletions: function(editor, session, pos, prefix, callback) {\r\n        var scopes = [];\r\n\r\n        // set scope to html-tag if we're inside an html tag\r\n        var token = session.getTokenAt(pos.row, pos.column);\r\n        if (token && token.type.match(/(tag-name|tag-open|tag-whitespace|attribute-name|attribute-value)\\.xml$/))\r\n            scopes.push('html-tag');\r\n        else\r\n            scopes = snippetManager.getActiveScopes(editor);\r\n\r\n        var snippetMap = snippetManager.snippetMap;\r\n        var completions = [];\r\n        scopes.forEach(function(scope) {\r\n            var snippets = snippetMap[scope] || [];\r\n            for (var i = snippets.length; i--;) {\r\n                var s = snippets[i];\r\n                var caption = s.name || s.tabTrigger;\r\n                if (!caption)\r\n                    continue;\r\n                completions.push({\r\n                    caption: caption,\r\n                    snippet: s.content,\r\n                    meta: s.tabTrigger && !s.name ? s.tabTrigger + \"\\u21E5 \" : \"snippet\",\r\n                    type: \"snippet\"\r\n                });\r\n            }\r\n        }, this);\r\n        callback(null, completions);\r\n    },\r\n    getDocTooltip: function(item) {\r\n        if (item.type == \"snippet\" && !item.docHTML) {\r\n            item.docHTML = [\r\n                \"<b>\", lang.escapeHTML(item.caption), \"</b>\", \"<hr></hr>\",\r\n                lang.escapeHTML(item.snippet)\r\n            ].join(\"\");\r\n        }\r\n    }\r\n};\r\n\r\nvar completers = [snippetCompleter, textCompleter, keyWordCompleter];\r\n// Modifies list of default completers\r\nexports.setCompleters = function(val) {\r\n    completers.length = 0;\r\n    if (val) completers.push.apply(completers, val);\r\n};\r\nexports.addCompleter = function(completer) {\r\n    completers.push(completer);\r\n};\r\n\r\n// Exports existing completer so that user can construct his own set of completers.\r\nexports.textCompleter = textCompleter;\r\nexports.keyWordCompleter = keyWordCompleter;\r\nexports.snippetCompleter = snippetCompleter;\r\n\r\nvar expandSnippet = {\r\n    name: \"expandSnippet\",\r\n    exec: function(editor) {\r\n        return snippetManager.expandWithTab(editor);\r\n    },\r\n    bindKey: \"Tab\"\r\n};\r\n\r\nvar onChangeMode = function(e, editor) {\r\n    loadSnippetsForMode(editor.session.$mode);\r\n};\r\n\r\nvar loadSnippetsForMode = function(mode) {\r\n    var id = mode.$id;\r\n    if (!snippetManager.files)\r\n        snippetManager.files = {};\r\n    loadSnippetFile(id);\r\n    if (mode.modes)\r\n        mode.modes.forEach(loadSnippetsForMode);\r\n};\r\n\r\nvar loadSnippetFile = function(id) {\r\n    if (!id || snippetManager.files[id])\r\n        return;\r\n    var snippetFilePath = id.replace(\"mode\", \"snippets\");\r\n    snippetManager.files[id] = {};\r\n    config.loadModule(snippetFilePath, function(m) {\r\n        if (m) {\r\n            snippetManager.files[id] = m;\r\n            if (!m.snippets && m.snippetText)\r\n                m.snippets = snippetManager.parseSnippetFile(m.snippetText);\r\n            snippetManager.register(m.snippets || [], m.scope);\r\n            if (m.includeScopes) {\r\n                snippetManager.snippetMap[m.scope].includeScopes = m.includeScopes;\r\n                m.includeScopes.forEach(function(x) {\r\n                    loadSnippetFile(\"ace/mode/\" + x);\r\n                });\r\n            }\r\n        }\r\n    });\r\n};\r\n\r\nvar doLiveAutocomplete = function(e) {\r\n    var editor = e.editor;\r\n    var hasCompleter = editor.completer && editor.completer.activated;\r\n\r\n    // We don't want to autocomplete with no prefix\r\n    if (e.command.name === \"backspace\") {\r\n        if (hasCompleter && !util.getCompletionPrefix(editor))\r\n            editor.completer.detach();\r\n    }\r\n    else if (e.command.name === \"insertstring\") {\r\n        var prefix = util.getCompletionPrefix(editor);\r\n        // Only autocomplete if there's a prefix that can be matched\r\n        if (prefix && !hasCompleter) {\r\n            if (!editor.completer) {\r\n                // Create new autocompleter\r\n                editor.completer = new Autocomplete();\r\n            }\r\n            // Disable autoInsert\r\n            editor.completer.autoInsert = false;\r\n            editor.completer.showPopup(editor);\r\n        }\r\n    }\r\n};\r\n\r\nvar Editor = require(\"../editor\").Editor;\r\nrequire(\"../config\").defineOptions(Editor.prototype, \"editor\", {\r\n    enableBasicAutocompletion: {\r\n        set: function(val) {\r\n            if (val) {\r\n                if (!this.completers)\r\n                    this.completers = Array.isArray(val)? val: completers;\r\n                this.commands.addCommand(Autocomplete.startCommand);\r\n            } else {\r\n                this.commands.removeCommand(Autocomplete.startCommand);\r\n            }\r\n        },\r\n        value: false\r\n    },\r\n    /**\r\n     * Enable live autocomplete. If the value is an array, it is assumed to be an array of completers\r\n     * and will use them instead of the default completers.\r\n     */\r\n    enableLiveAutocompletion: {\r\n        set: function(val) {\r\n            if (val) {\r\n                if (!this.completers)\r\n                    this.completers = Array.isArray(val)? val: completers;\r\n                // On each change automatically trigger the autocomplete\r\n                this.commands.on('afterExec', doLiveAutocomplete);\r\n            } else {\r\n                this.commands.removeListener('afterExec', doLiveAutocomplete);\r\n            }\r\n        },\r\n        value: false\r\n    },\r\n    enableSnippets: {\r\n        set: function(val) {\r\n            if (val) {\r\n                this.commands.addCommand(expandSnippet);\r\n                this.on(\"changeMode\", onChangeMode);\r\n                onChangeMode(null, this);\r\n            } else {\r\n                this.commands.removeCommand(expandSnippet);\r\n                this.off(\"changeMode\", onChangeMode);\r\n            }\r\n        },\r\n        value: false\r\n    }\r\n});\r\n});\r\n"]}