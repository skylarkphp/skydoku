{"version":3,"sources":["ext/statusbar.js"],"names":["define","require","exports","module","dom","lang","StatusBar","editor","parentNode","this","element","createElement","className","style","cssText","appendChild","statusUpdate","delayedCall","updateStatus","bind","schedule","on","status","add","str","separator","push","keyBinding","getStatusText","commands","recording","sel","selection","c","lead","isEmpty","r","getSelectionRange","end","row","start","column","rangeCount","pop","textContent","join","call","prototype"],"mappings":";;;;;;;AAAAA,OAAO,SAASC,EAASC,EAASC,GAClC,aAEA,IAAIC,EAAMH,EAAQ,eACdI,EAAOJ,EAAQ,gBAEfK,EAAY,SAASC,EAAQC,GAC7BC,KAAKC,QAAUN,EAAIO,cAAc,OACjCF,KAAKC,QAAQE,UAAY,uBACzBH,KAAKC,QAAQG,MAAMC,QAAU,yBAC7BN,EAAWO,YAAYN,KAAKC,SAE5B,IAAIM,EAAeX,EAAKY,YAAY,WAChCR,KAAKS,aAAaX,IACpBY,KAAKV,OAAOW,SAASD,KAAK,KAAM,KAElCZ,EAAOc,GAAG,eAAgBL,GAC1BT,EAAOc,GAAG,kBAAmBL,GAC7BT,EAAOc,GAAG,mBAAoBL,KAGlC,WACIP,KAAKS,aAAe,SAASX,GACzB,IAAIe,KACJ,SAASC,EAAIC,EAAKC,GACdD,GAAOF,EAAOI,KAAKF,EAAKC,GAAa,KAGzCF,EAAIhB,EAAOoB,WAAWC,cAAcrB,IAChCA,EAAOsB,SAASC,WAChBP,EAAI,OAER,IAAIQ,EAAMxB,EAAOyB,UACbC,EAAIF,EAAIG,KAEZ,IAAKH,EAAII,UAAW,CAChB,IAAIC,EAAI7B,EAAO8B,oBACfd,EAAI,KAAOa,EAAEE,IAAIC,IAAMH,EAAEI,MAAMD,KAAO,KAAOH,EAAEE,IAAIG,OAASL,EAAEI,MAAMC,QAAU,IAAK,KAEvFlB,EAAIU,EAAEM,IAAM,IAAMN,EAAEQ,OAAQ,KACxBV,EAAIW,YACJnB,EAAI,IAAMQ,EAAIW,WAAa,IAAK,KACpCpB,EAAOqB,MACPlC,KAAKC,QAAQkC,YAActB,EAAOuB,KAAK,OAE5CC,KAAKxC,EAAUyC,WAElB7C,EAAQI,UAAYA","file":"../../ext/statusbar.js","sourcesContent":["define(function(require, exports, module) {\r\n\"use strict\";\r\n/** simple statusbar **/\r\nvar dom = require(\"ace/lib/dom\");\r\nvar lang = require(\"ace/lib/lang\");\r\n\r\nvar StatusBar = function(editor, parentNode) {\r\n    this.element = dom.createElement(\"div\");\r\n    this.element.className = \"ace_status-indicator\";\r\n    this.element.style.cssText = \"display: inline-block;\";\r\n    parentNode.appendChild(this.element);\r\n\r\n    var statusUpdate = lang.delayedCall(function(){\r\n        this.updateStatus(editor);\r\n    }.bind(this)).schedule.bind(null, 100);\r\n    \r\n    editor.on(\"changeStatus\", statusUpdate);\r\n    editor.on(\"changeSelection\", statusUpdate);\r\n    editor.on(\"keyboardActivity\", statusUpdate);\r\n};\r\n\r\n(function(){\r\n    this.updateStatus = function(editor) {\r\n        var status = [];\r\n        function add(str, separator) {\r\n            str && status.push(str, separator || \"|\");\r\n        }\r\n\r\n        add(editor.keyBinding.getStatusText(editor));\r\n        if (editor.commands.recording)\r\n            add(\"REC\");\r\n        \r\n        var sel = editor.selection;\r\n        var c = sel.lead;\r\n        \r\n        if (!sel.isEmpty()) {\r\n            var r = editor.getSelectionRange();\r\n            add(\"(\" + (r.end.row - r.start.row) + \":\"  +(r.end.column - r.start.column) + \")\", \" \");\r\n        }\r\n        add(c.row + \":\" + c.column, \" \");        \r\n        if (sel.rangeCount)\r\n            add(\"[\" + sel.rangeCount + \"]\", \" \");\r\n        status.pop();\r\n        this.element.textContent = status.join(\"\");\r\n    };\r\n}).call(StatusBar.prototype);\r\n\r\nexports.StatusBar = StatusBar;\r\n\r\n});"]}