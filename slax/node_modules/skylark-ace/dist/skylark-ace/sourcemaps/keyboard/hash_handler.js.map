{"version":3,"sources":["keyboard/hash_handler.js"],"names":["define","require","exports","module","keyUtil","useragent","KEY_MODS","HashHandler","config","platform","this","isMac","commands","commandKeyBinding","addCommands","$singleCommand","MultiHashHandler","call","prototype","getPosition","command","bindKey","position","isDefault","addCommand","name","removeCommand","_buildKeyHash","keepCommand","ckb","keyId","cmdGroup","Array","isArray","i","indexOf","splice","length","key","undefined","exec","split","forEach","keyPart","chain","parts","pop","binding","parseKeys","id","hashId","_addCommandToBinding","Object","keys","removeCommands","bindKeys","keyList","toLowerCase","filter","x","keyCode","FUNCTION_KEYS","toUpperCase","modifier","console","error","findKeyCommand","keyString","handleKeyboard","data","$keyChain","slice","getStatusText","editor"],"mappings":"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","file":"../../keyboard/hash_handler.js","sourcesContent":["/* ***** BEGIN LICENSE BLOCK *****\r\n * Distributed under the BSD license:\r\n *\r\n * Copyright (c) 2010, Ajax.org B.V.\r\n * All rights reserved.\r\n * \r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *     * Redistributions of source code must retain the above copyright\r\n *       notice, this list of conditions and the following disclaimer.\r\n *     * Redistributions in binary form must reproduce the above copyright\r\n *       notice, this list of conditions and the following disclaimer in the\r\n *       documentation and/or other materials provided with the distribution.\r\n *     * Neither the name of Ajax.org B.V. nor the\r\n *       names of its contributors may be used to endorse or promote products\r\n *       derived from this software without specific prior written permission.\r\n * \r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\r\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY\r\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\r\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\r\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n *\r\n * ***** END LICENSE BLOCK ***** */\r\n\r\ndefine(function(require, exports, module) {\r\n\"use strict\";\r\n\r\nvar keyUtil = require(\"../lib/keys\");\r\nvar useragent = require(\"../lib/useragent\");\r\nvar KEY_MODS = keyUtil.KEY_MODS;\r\n\r\nfunction HashHandler(config, platform) {\r\n    this.platform = platform || (useragent.isMac ? \"mac\" : \"win\");\r\n    this.commands = {};\r\n    this.commandKeyBinding = {};\r\n    this.addCommands(config);\r\n    this.$singleCommand = true;\r\n}\r\n\r\nfunction MultiHashHandler(config, platform) {\r\n    HashHandler.call(this, config, platform);\r\n    this.$singleCommand = false;\r\n}\r\n\r\nMultiHashHandler.prototype = HashHandler.prototype;\r\n\r\n(function() {\r\n    \r\n\r\n    this.addCommand = function(command) {\r\n        if (this.commands[command.name])\r\n            this.removeCommand(command);\r\n\r\n        this.commands[command.name] = command;\r\n\r\n        if (command.bindKey)\r\n            this._buildKeyHash(command);\r\n    };\r\n\r\n    this.removeCommand = function(command, keepCommand) {\r\n        var name = command && (typeof command === 'string' ? command : command.name);\r\n        command = this.commands[name];\r\n        if (!keepCommand)\r\n            delete this.commands[name];\r\n\r\n        // exhaustive search is brute force but since removeCommand is\r\n        // not a performance critical operation this should be OK\r\n        var ckb = this.commandKeyBinding;\r\n        for (var keyId in ckb) {\r\n            var cmdGroup = ckb[keyId];\r\n            if (cmdGroup == command) {\r\n                delete ckb[keyId];\r\n            } else if (Array.isArray(cmdGroup)) {\r\n                var i = cmdGroup.indexOf(command);\r\n                if (i != -1) {\r\n                    cmdGroup.splice(i, 1);\r\n                    if (cmdGroup.length == 1)\r\n                        ckb[keyId] = cmdGroup[0];\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    this.bindKey = function(key, command, position) {\r\n        if (typeof key == \"object\" && key) {\r\n            if (position == undefined)\r\n                position = key.position;\r\n            key = key[this.platform];\r\n        }\r\n        if (!key)\r\n            return;\r\n        if (typeof command == \"function\")\r\n            return this.addCommand({exec: command, bindKey: key, name: command.name || key});\r\n        \r\n        key.split(\"|\").forEach(function(keyPart) {\r\n            var chain = \"\";\r\n            if (keyPart.indexOf(\" \") != -1) {\r\n                var parts = keyPart.split(/\\s+/);\r\n                keyPart = parts.pop();\r\n                parts.forEach(function(keyPart) {\r\n                    var binding = this.parseKeys(keyPart);\r\n                    var id = KEY_MODS[binding.hashId] + binding.key;\r\n                    chain += (chain ? \" \" : \"\") + id;\r\n                    this._addCommandToBinding(chain, \"chainKeys\");\r\n                }, this);\r\n                chain += \" \";\r\n            }\r\n            var binding = this.parseKeys(keyPart);\r\n            var id = KEY_MODS[binding.hashId] + binding.key;\r\n            this._addCommandToBinding(chain + id, command, position);\r\n        }, this);\r\n    };\r\n    \r\n    function getPosition(command) {\r\n        return typeof command == \"object\" && command.bindKey\r\n            && command.bindKey.position \r\n            || (command.isDefault ? -100 : 0);\r\n    }\r\n    this._addCommandToBinding = function(keyId, command, position) {\r\n        var ckb = this.commandKeyBinding, i;\r\n        if (!command) {\r\n            delete ckb[keyId];\r\n        } else if (!ckb[keyId] || this.$singleCommand) {\r\n            ckb[keyId] = command;\r\n        } else {\r\n            if (!Array.isArray(ckb[keyId])) {\r\n                ckb[keyId] = [ckb[keyId]];\r\n            } else if ((i = ckb[keyId].indexOf(command)) != -1) {\r\n                ckb[keyId].splice(i, 1);\r\n            }\r\n            \r\n            if (typeof position != \"number\") {\r\n                position = getPosition(command);\r\n            }\r\n\r\n            var commands = ckb[keyId];\r\n            for (i = 0; i < commands.length; i++) {\r\n                var other = commands[i];\r\n                var otherPos = getPosition(other);\r\n                if (otherPos > position)\r\n                    break;\r\n            }\r\n            commands.splice(i, 0, command);\r\n        }\r\n    };\r\n\r\n    this.addCommands = function(commands) {\r\n        commands && Object.keys(commands).forEach(function(name) {\r\n            var command = commands[name];\r\n            if (!command)\r\n                return;\r\n            \r\n            if (typeof command === \"string\")\r\n                return this.bindKey(command, name);\r\n\r\n            if (typeof command === \"function\")\r\n                command = { exec: command };\r\n\r\n            if (typeof command !== \"object\")\r\n                return;\r\n\r\n            if (!command.name)\r\n                command.name = name;\r\n\r\n            this.addCommand(command);\r\n        }, this);\r\n    };\r\n\r\n    this.removeCommands = function(commands) {\r\n        Object.keys(commands).forEach(function(name) {\r\n            this.removeCommand(commands[name]);\r\n        }, this);\r\n    };\r\n\r\n    this.bindKeys = function(keyList) {\r\n        Object.keys(keyList).forEach(function(key) {\r\n            this.bindKey(key, keyList[key]);\r\n        }, this);\r\n    };\r\n\r\n    this._buildKeyHash = function(command) {\r\n        this.bindKey(command.bindKey, command);\r\n    };\r\n\r\n    // accepts keys in the form ctrl+Enter or ctrl-Enter\r\n    // keys without modifiers or shift only \r\n    this.parseKeys = function(keys) {\r\n        var parts = keys.toLowerCase().split(/[\\-\\+]([\\-\\+])?/).filter(function(x){return x;});\r\n        var key = parts.pop();\r\n\r\n        var keyCode = keyUtil[key];\r\n        if (keyUtil.FUNCTION_KEYS[keyCode])\r\n            key = keyUtil.FUNCTION_KEYS[keyCode].toLowerCase();\r\n        else if (!parts.length)\r\n            return {key: key, hashId: -1};\r\n        else if (parts.length == 1 && parts[0] == \"shift\")\r\n            return {key: key.toUpperCase(), hashId: -1};\r\n\r\n        var hashId = 0;\r\n        for (var i = parts.length; i--;) {\r\n            var modifier = keyUtil.KEY_MODS[parts[i]];\r\n            if (modifier == null) {\r\n                if (typeof console != \"undefined\")\r\n                    console.error(\"invalid modifier \" + parts[i] + \" in \" + keys);\r\n                return false;\r\n            }\r\n            hashId |= modifier;\r\n        }\r\n        return {key: key, hashId: hashId};\r\n    };\r\n\r\n    this.findKeyCommand = function findKeyCommand(hashId, keyString) {\r\n        var key = KEY_MODS[hashId] + keyString;\r\n        return this.commandKeyBinding[key];\r\n    };\r\n\r\n    this.handleKeyboard = function(data, hashId, keyString, keyCode) {\r\n        if (keyCode < 0) return;\r\n        var key = KEY_MODS[hashId] + keyString;\r\n        var command = this.commandKeyBinding[key];\r\n        if (data.$keyChain) {\r\n            data.$keyChain += \" \" + key;\r\n            command = this.commandKeyBinding[data.$keyChain] || command;\r\n        }\r\n        \r\n        if (command) {\r\n            if (command == \"chainKeys\" || command[command.length - 1] == \"chainKeys\") {\r\n                data.$keyChain = data.$keyChain || key;\r\n                return {command: \"null\"};\r\n            }\r\n        }\r\n        \r\n        if (data.$keyChain) {\r\n            if ((!hashId || hashId == 4) && keyString.length == 1)\r\n                data.$keyChain = data.$keyChain.slice(0, -key.length - 1); // wait for input\r\n            else if (hashId == -1 || keyCode > 0)\r\n                data.$keyChain = \"\"; // reset keyChain\r\n        }\r\n        return {command: command};\r\n    };\r\n    \r\n    this.getStatusText = function(editor, data) {\r\n        return data.$keyChain || \"\";\r\n    };\r\n\r\n}).call(HashHandler.prototype);\r\n\r\nexports.HashHandler = HashHandler;\r\nexports.MultiHashHandler = MultiHashHandler;\r\n});\r\n"]}