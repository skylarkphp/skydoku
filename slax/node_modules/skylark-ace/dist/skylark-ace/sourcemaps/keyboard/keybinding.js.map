{"version":3,"sources":["keyboard/keybinding.js"],"names":["define","require","exports","module","keyUtil","event","KeyBinding","editor","this","$editor","$data","$handlers","setDefaultHandler","commands","kb","removeKeyboardHandler","$defaultHandler","addKeyboardHandler","setKeyboardHandler","h","length","pos","handleKeyboard","i","indexOf","splice","undefined","push","attach","detach","getKeyboardHandler","getStatusText","data","map","filter","Boolean","join","$callKeyboardHandlers","hashId","keyString","keyCode","e","toExecute","success","command","exec","args","passEvent","stopEvent","_signal","onCommandKey","keyCodeToString","onTextInput","text","call","prototype"],"mappings":";;;;;;;AA8BAA,OAAO,SAASC,EAASC,EAASC,GAClC,aAEA,IAAIC,EAAWH,EAAQ,eACnBI,EAAQJ,EAAQ,gBAEhBK,EAAa,SAASC,GACtBC,KAAKC,QAAUF,EACfC,KAAKE,OAASH,OAAQA,GACtBC,KAAKG,aACLH,KAAKI,kBAAkBL,EAAOM,YAGlC,WACIL,KAAKI,kBAAoB,SAASE,GAC9BN,KAAKO,sBAAsBP,KAAKQ,iBAChCR,KAAKQ,gBAAkBF,EACvBN,KAAKS,mBAAmBH,EAAI,IAGhCN,KAAKU,mBAAqB,SAASJ,GAC/B,IAAIK,EAAIX,KAAKG,UACb,GAAIQ,EAAEA,EAAEC,OAAS,IAAMN,EAAvB,CAGA,KAAOK,EAAEA,EAAEC,OAAS,IAAMD,EAAEA,EAAEC,OAAS,IAAMZ,KAAKQ,iBAC9CR,KAAKO,sBAAsBI,EAAEA,EAAEC,OAAS,IAE5CZ,KAAKS,mBAAmBH,EAAI,KAGhCN,KAAKS,mBAAqB,SAASH,EAAIO,GACnC,GAAKP,EAAL,CAEiB,mBAANA,GAAqBA,EAAGQ,iBAC/BR,EAAGQ,eAAiBR,GACxB,IAAIS,EAAIf,KAAKG,UAAUa,QAAQV,IACrB,GAANS,GACAf,KAAKG,UAAUc,OAAOF,EAAG,QAElBG,GAAPL,EACAb,KAAKG,UAAUgB,KAAKb,GAEpBN,KAAKG,UAAUc,OAAOJ,EAAK,EAAGP,IAExB,GAANS,GAAWT,EAAGc,QACdd,EAAGc,OAAOpB,KAAKC,WAGvBD,KAAKO,sBAAwB,SAASD,GAClC,IAAIS,EAAIf,KAAKG,UAAUa,QAAQV,GAC/B,OAAU,GAANS,IAEJf,KAAKG,UAAUc,OAAOF,EAAG,GACzBT,EAAGe,QAAUf,EAAGe,OAAOrB,KAAKC,UACrB,IAGXD,KAAKsB,mBAAqB,WACtB,OAAOtB,KAAKG,UAAUH,KAAKG,UAAUS,OAAS,IAGlDZ,KAAKuB,cAAgB,WACjB,IAAIC,EAAOxB,KAAKE,MACZH,EAASyB,EAAKzB,OAClB,OAAOC,KAAKG,UAAUsB,IAAI,SAASd,GAC/B,OAAOA,EAAEY,eAAiBZ,EAAEY,cAAcxB,EAAQyB,IAAS,KAC5DE,OAAOC,SAASC,KAAK,MAG5B5B,KAAK6B,sBAAwB,SAASC,EAAQC,EAAWC,EAASC,GAK9D,IAJA,IAAIC,EACAC,GAAU,EACV9B,EAAWL,KAAKC,QAAQI,SAEnBU,EAAIf,KAAKG,UAAUS,OAAQG,QAChCmB,EAAYlC,KAAKG,UAAUY,GAAGD,eAC1Bd,KAAKE,MAAO4B,EAAQC,EAAWC,EAASC,KAEzBC,EAAUE,WAKzBD,EADqB,QAArBD,EAAUE,SAGA/B,EAASgC,KAAKH,EAAUE,QAASpC,KAAKC,QAASiC,EAAUI,KAAML,KAG9DA,IAAgB,GAAXH,GACO,GAAvBI,EAAUK,WAAoD,GAA/BL,EAAUE,QAAQG,WAEjD1C,EAAM2C,UAAUP,GAEhBE,MAYR,OARKA,IAAsB,GAAXL,IACZI,GAAaE,QAAS,gBACtBD,EAAU9B,EAASgC,KAAK,eAAgBrC,KAAKC,QAAS8B,IAGtDI,GAAWnC,KAAKC,QAAQwC,SACxBzC,KAAKC,QAAQwC,QAAQ,mBAAoBP,GAEtCC,GAGXnC,KAAK0C,aAAe,SAAST,EAAGH,EAAQE,GACpC,IAAID,EAAYnC,EAAQ+C,gBAAgBX,GACxChC,KAAK6B,sBAAsBC,EAAQC,EAAWC,EAASC,IAG3DjC,KAAK4C,YAAc,SAASC,GACxB7C,KAAK6B,uBAAuB,EAAGgB,MAGpCC,KAAKhD,EAAWiD,WAEnBrD,EAAQI,WAAaA","file":"../../keyboard/keybinding.js","sourcesContent":["/* ***** BEGIN LICENSE BLOCK *****\r\n * Distributed under the BSD license:\r\n *\r\n * Copyright (c) 2010, Ajax.org B.V.\r\n * All rights reserved.\r\n * \r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *     * Redistributions of source code must retain the above copyright\r\n *       notice, this list of conditions and the following disclaimer.\r\n *     * Redistributions in binary form must reproduce the above copyright\r\n *       notice, this list of conditions and the following disclaimer in the\r\n *       documentation and/or other materials provided with the distribution.\r\n *     * Neither the name of Ajax.org B.V. nor the\r\n *       names of its contributors may be used to endorse or promote products\r\n *       derived from this software without specific prior written permission.\r\n * \r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\r\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY\r\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\r\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\r\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n *\r\n * ***** END LICENSE BLOCK ***** */\r\n\r\ndefine(function(require, exports, module) {\r\n\"use strict\";\r\n\r\nvar keyUtil  = require(\"../lib/keys\");\r\nvar event = require(\"../lib/event\");\r\n\r\nvar KeyBinding = function(editor) {\r\n    this.$editor = editor;\r\n    this.$data = {editor: editor};\r\n    this.$handlers = [];\r\n    this.setDefaultHandler(editor.commands);\r\n};\r\n\r\n(function() {\r\n    this.setDefaultHandler = function(kb) {\r\n        this.removeKeyboardHandler(this.$defaultHandler);\r\n        this.$defaultHandler = kb;\r\n        this.addKeyboardHandler(kb, 0);\r\n    };\r\n\r\n    this.setKeyboardHandler = function(kb) {\r\n        var h = this.$handlers;\r\n        if (h[h.length - 1] == kb)\r\n            return;\r\n\r\n        while (h[h.length - 1] && h[h.length - 1] != this.$defaultHandler)\r\n            this.removeKeyboardHandler(h[h.length - 1]);\r\n\r\n        this.addKeyboardHandler(kb, 1);\r\n    };\r\n\r\n    this.addKeyboardHandler = function(kb, pos) {\r\n        if (!kb)\r\n            return;\r\n        if (typeof kb == \"function\" && !kb.handleKeyboard)\r\n            kb.handleKeyboard = kb;\r\n        var i = this.$handlers.indexOf(kb);\r\n        if (i != -1)\r\n            this.$handlers.splice(i, 1);\r\n\r\n        if (pos == undefined)\r\n            this.$handlers.push(kb);\r\n        else\r\n            this.$handlers.splice(pos, 0, kb);\r\n\r\n        if (i == -1 && kb.attach)\r\n            kb.attach(this.$editor);\r\n    };\r\n\r\n    this.removeKeyboardHandler = function(kb) {\r\n        var i = this.$handlers.indexOf(kb);\r\n        if (i == -1)\r\n            return false;\r\n        this.$handlers.splice(i, 1);\r\n        kb.detach && kb.detach(this.$editor);\r\n        return true;\r\n    };\r\n\r\n    this.getKeyboardHandler = function() {\r\n        return this.$handlers[this.$handlers.length - 1];\r\n    };\r\n    \r\n    this.getStatusText = function() {\r\n        var data = this.$data;\r\n        var editor = data.editor;\r\n        return this.$handlers.map(function(h) {\r\n            return h.getStatusText && h.getStatusText(editor, data) || \"\";\r\n        }).filter(Boolean).join(\" \");\r\n    };\r\n\r\n    this.$callKeyboardHandlers = function(hashId, keyString, keyCode, e) {\r\n        var toExecute;\r\n        var success = false;\r\n        var commands = this.$editor.commands;\r\n\r\n        for (var i = this.$handlers.length; i--;) {\r\n            toExecute = this.$handlers[i].handleKeyboard(\r\n                this.$data, hashId, keyString, keyCode, e\r\n            );\r\n            if (!toExecute || !toExecute.command)\r\n                continue;\r\n            \r\n            // allow keyboardHandler to consume keys\r\n            if (toExecute.command == \"null\") {\r\n                success = true;\r\n            } else {\r\n                success = commands.exec(toExecute.command, this.$editor, toExecute.args, e);\r\n            }\r\n            // do not stop input events to not break repeating\r\n            if (success && e && hashId != -1 && \r\n                toExecute.passEvent != true && toExecute.command.passEvent != true\r\n            ) {\r\n                event.stopEvent(e);\r\n            }\r\n            if (success)\r\n                break;\r\n        }\r\n        \r\n        if (!success && hashId == -1) {\r\n            toExecute = {command: \"insertstring\"};\r\n            success = commands.exec(\"insertstring\", this.$editor, keyString);\r\n        }\r\n        \r\n        if (success && this.$editor._signal)\r\n            this.$editor._signal(\"keyboardActivity\", toExecute);\r\n        \r\n        return success;\r\n    };\r\n\r\n    this.onCommandKey = function(e, hashId, keyCode) {\r\n        var keyString = keyUtil.keyCodeToString(keyCode);\r\n        this.$callKeyboardHandlers(hashId, keyString, keyCode, e);\r\n    };\r\n\r\n    this.onTextInput = function(text) {\r\n        this.$callKeyboardHandlers(-1, text);\r\n    };\r\n\r\n}).call(KeyBinding.prototype);\r\n\r\nexports.KeyBinding = KeyBinding;\r\n});\r\n"]}