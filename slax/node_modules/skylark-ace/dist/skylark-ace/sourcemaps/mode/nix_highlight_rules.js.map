{"version":3,"sources":["mode/nix_highlight_rules.js"],"names":["define","require","exports","module","oop","TextHighlightRules","NixHighlightRules","keywordMapper","this","createKeywordMapper","constant.language.nix","keyword.control.nix","keyword.declaration.nix","$rules","start","token","regex","next","push","val","stack","charAt","comment","defaultToken","qqdoc","qqstring","qstring","normalizeRules","inherits"],"mappings":";;;;;;;AAAAA,OAAO,SAASC,EAASC,EAASC,GAC9B,aAEA,IAAIC,EAAMH,EAAQ,cACdI,EAAqBJ,EAAQ,0BAA0BI,mBAEvDC,EAAoB,WAEpB,IAIIC,EAAgBC,KAAKC,qBACrBC,wBALmB,aAMnBC,sBALiB,mCAMjBC,0BALqB,cAMtB,cAEHJ,KAAKK,QACDC,QACQC,MAAO,UACPC,MAAO,SAEPD,MAAO,UACPC,MAAO,OACPC,KAAM,YAENF,MAAO,WACPC,MAAO,YAEPA,MAAO,kBACPD,OAAQ,qCAERC,MAAO,qBACPD,OAAQ,gDAERC,MAAO,IACPD,MAAO,oCAEPA,MAAO,SACPC,MAAO,KACPC,KAAM,UAENF,MAAO,SACPC,MAAO,IACPC,KAAM,YAENF,MAAO,SACPC,MAAO,IACPE,KAAM,aAENH,MAAO,mBACPC,MAAO,yBAEPD,MAAO,mBACPC,MAAO,oDAEPD,MAAOR,EACPS,MAAO,gCAEPA,MAAO,IACPD,MAAO,SAASI,EAAKL,EAAOM,GACxB,OAAOA,EAAM,IAA4B,KAAtBA,EAAM,GAAGC,OAAO,GAAY,2BAA6B,QAEhFJ,KAAM,QAEdK,UACIP,MAAO,UACPC,MAAO,SACPC,KAAM,UAENM,aAAc,YAElBC,QAEQT,MAAO,2BACPC,MAAO,OACPE,KAAM,UAENH,MAAO,SACPC,MAAO,KACPC,KAAM,QAENM,aAAc,WAEtBE,WAEQV,MAAO,2BACPC,MAAO,OACPE,KAAM,UAENH,MAAO,SACPC,MAAO,IACPC,KAAM,QAENM,aAAc,WAEtBG,UAEQX,MAAO,2BACPC,MAAO,OACPE,KAAM,UAENH,MAAO,SACPC,MAAO,IACPC,KAAM,QAENM,aAAc,YAI1Bf,KAAKmB,kBAGTvB,EAAIwB,SAAStB,EAAmBD,GAEhCH,EAAQI,kBAAoBA","file":"../../mode/nix_highlight_rules.js","sourcesContent":["define(function(require, exports, module) {\r\n    \"use strict\";\r\n\r\n    var oop = require(\"../lib/oop\");\r\n    var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\r\n\r\n    var NixHighlightRules = function() {\r\n\r\n        var constantLanguage = \"true|false\";\r\n        var keywordControl = \"with|import|if|else|then|inherit\";\r\n        var keywordDeclaration = \"let|in|rec\";\r\n\r\n        var keywordMapper = this.createKeywordMapper({\r\n            \"constant.language.nix\": constantLanguage,\r\n            \"keyword.control.nix\": keywordControl,\r\n            \"keyword.declaration.nix\": keywordDeclaration\r\n        }, \"identifier\");\r\n\r\n        this.$rules = {\r\n            \"start\": [{\r\n                    token: \"comment\",\r\n                    regex: /#.*$/\r\n                }, {\r\n                    token: \"comment\",\r\n                    regex: /\\/\\*/,\r\n                    next: \"comment\"\r\n                }, {\r\n                    token: \"constant\",\r\n                    regex: \"<[^>]+>\"\r\n                }, {\r\n                    regex: \"(==|!=|<=?|>=?)\",\r\n                    token: [\"keyword.operator.comparison.nix\"]\r\n                }, {\r\n                    regex: \"((?:[+*/%-]|\\\\~)=)\",\r\n                    token: [\"keyword.operator.assignment.arithmetic.nix\"]\r\n                }, {\r\n                    regex: \"=\",\r\n                    token: \"keyword.operator.assignment.nix\"\r\n                }, {\r\n                    token: \"string\",\r\n                    regex: \"''\",\r\n                    next: \"qqdoc\"\r\n                }, {\r\n                    token: \"string\",\r\n                    regex: \"'\",\r\n                    next: \"qstring\"\r\n                }, {\r\n                    token: \"string\",\r\n                    regex: '\"',\r\n                    push: \"qqstring\"\r\n                }, {\r\n                    token: \"constant.numeric\", // hex\r\n                    regex: \"0[xX][0-9a-fA-F]+\\\\b\"\r\n                }, {\r\n                    token: \"constant.numeric\", // float\r\n                    regex: \"[+-]?\\\\d+(?:(?:\\\\.\\\\d*)?(?:[eE][+-]?\\\\d+)?)?\\\\b\"\r\n                }, {\r\n                    token: keywordMapper,\r\n                    regex: \"[a-zA-Z_$][a-zA-Z0-9_$]*\\\\b\"\r\n                }, {\r\n                    regex: \"}\",\r\n                    token: function(val, start, stack) {\r\n                        return stack[1] && stack[1].charAt(0) == \"q\" ? \"constant.language.escape\" : \"text\";\r\n                    },\r\n                    next: \"pop\"\r\n                }],\r\n            \"comment\": [{\r\n                token: \"comment\", // closing comment\r\n                regex: \"\\\\*\\\\/\",\r\n                next: \"start\"\r\n            }, {\r\n                defaultToken: \"comment\"\r\n            }],\r\n            \"qqdoc\": [\r\n                {\r\n                    token: \"constant.language.escape\",\r\n                    regex: /\\$\\{/,\r\n                    push: \"start\"\r\n                }, {\r\n                    token: \"string\",\r\n                    regex: \"''\",\r\n                    next: \"pop\"\r\n                }, {\r\n                    defaultToken: \"string\"\r\n                }],\r\n            \"qqstring\": [\r\n                {\r\n                    token: \"constant.language.escape\",\r\n                    regex: /\\$\\{/,\r\n                    push: \"start\"\r\n                }, {\r\n                    token: \"string\",\r\n                    regex: '\"',\r\n                    next: \"pop\"\r\n                }, {\r\n                    defaultToken: \"string\"\r\n                }],\r\n            \"qstring\": [\r\n                {\r\n                    token: \"constant.language.escape\",\r\n                    regex: /\\$\\{/,\r\n                    push: \"start\"\r\n                }, {\r\n                    token: \"string\",\r\n                    regex: \"'\",\r\n                    next: \"pop\"\r\n                }, {\r\n                    defaultToken: \"string\"\r\n                }]\r\n        };\r\n\r\n        this.normalizeRules();\r\n    };\r\n\r\n    oop.inherits(NixHighlightRules, TextHighlightRules);\r\n\r\n    exports.NixHighlightRules = NixHighlightRules;\r\n});"]}