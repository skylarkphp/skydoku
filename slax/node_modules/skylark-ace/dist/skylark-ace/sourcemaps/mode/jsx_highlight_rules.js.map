{"version":3,"sources":["mode/jsx_highlight_rules.js"],"names":["define","require","exports","module","oop","lang","DocCommentHighlightRules","TextHighlightRules","JsxHighlightRules","keywords","arrayToMap","split","buildinConstants","reserved","this","$rules","start","token","regex","getStartRule","next","value","hasOwnProperty","test","comment","defaultToken","embedRules","getEndRule","inherits"],"mappings":";;;;;;;AAAAA,OAAO,SAASC,EAASC,EAASC,GAClC,IAAIC,EAAMH,EAAQ,cACdI,EAAOJ,EAAQ,eACfK,EAA2BL,EAAQ,iCAAiCK,yBACpEC,EAAqBN,EAAQ,0BAA0BM,mBAEvDC,EAAoB,WACpB,IAAIC,EAAWJ,EAAKK,WAChB,4RAKeC,MAAM,MAGrBC,EAAmBP,EAAKK,WACxB,2DAA6DC,MAAM,MAGnEE,EAAWR,EAAKK,WAChB,gHAGoDC,MAAM,MAK9DG,KAAKC,QACDC,QAEQC,MAAQ,UACRC,MAAQ,aAEZZ,EAAyBa,aAAa,cAElCF,MAAQ,UACRC,MAAQ,SACRE,KAAO,YAEPH,MAAQ,gBACRC,MAAQ,iFAERD,MAAQ,SACRC,MAAQ,uCAERD,MAAQ,SACRC,MAAQ,uCAERD,MAAQ,mBACRC,MAAQ,yBAERD,MAAQ,mBACRC,MAAQ,oDAERD,MAAQ,4BACRC,MAAQ,sBAERD,OACI,eACA,OACA,wBAEJC,MAAQ,gDAERD,MAAQ,SAASI,GACb,MAAa,QAATA,EACO,oBACO,YAATA,EACE,eACFZ,EAASa,eAAeD,IAAUR,EAASS,eAAeD,GACxD,UACFT,EAAiBU,eAAeD,GAC9B,oBACF,yBAAyBE,KAAKF,GAC5B,yBAEA,cAIfH,MAvDO,8BAyDPD,MAAQ,mBACRC,MAAQ,iKAERD,MAAQ,uBACRC,MAAQ,wBAERD,MAAQ,eACRC,MAAQ,WAERD,MAAQ,eACRC,MAAQ,aAERD,MAAQ,OACRC,MAAQ,SAGhBM,UAEQP,MAAQ,UACRC,MAAQ,SACRE,KAAO,UAEPK,aAAe,aAK3BX,KAAKY,WAAWpB,EAA0B,QACpCA,EAAyBqB,WAAW,YAG9CvB,EAAIwB,SAASpB,EAAmBD,GAEhCL,EAAQM,kBAAoBA","file":"../../mode/jsx_highlight_rules.js","sourcesContent":["define(function(require, exports, module) {\r\nvar oop = require(\"../lib/oop\");\r\nvar lang = require(\"../lib/lang\");\r\nvar DocCommentHighlightRules = require(\"./doc_comment_highlight_rules\").DocCommentHighlightRules;\r\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\r\n\r\nvar JsxHighlightRules = function() {\r\n    var keywords = lang.arrayToMap(\r\n        (\"break|do|instanceof|typeof|case|else|new|var|catch|finally|return|void|continue|for|switch|default|while|function|this|\" +\r\n         \"if|throw|\" +\r\n         \"delete|in|try|\" +\r\n         \"class|extends|super|import|from|into|implements|interface|static|mixin|override|abstract|final|\" +\r\n         \"number|int|string|boolean|variant|\" +\r\n         \"log|assert\").split(\"|\")\r\n    );\r\n    \r\n    var buildinConstants = lang.arrayToMap(\r\n        (\"null|true|false|NaN|Infinity|__FILE__|__LINE__|undefined\").split(\"|\")\r\n    );\r\n    \r\n    var reserved = lang.arrayToMap(\r\n        (\"debugger|with|\" +\r\n         \"const|export|\" +\r\n         \"let|private|public|yield|protected|\" +\r\n         \"extern|native|as|operator|__fake__|__readonly__\").split(\"|\")\r\n    );\r\n    \r\n    var identifierRe = \"[a-zA-Z_][a-zA-Z0-9_]*\\\\b\";\r\n    \r\n    this.$rules = {\r\n        \"start\" : [\r\n            {\r\n                token : \"comment\",\r\n                regex : \"\\\\/\\\\/.*$\"\r\n            },\r\n            DocCommentHighlightRules.getStartRule(\"doc-start\"),\r\n            {\r\n                token : \"comment\", // multi line comment\r\n                regex : \"\\\\/\\\\*\",\r\n                next : \"comment\"\r\n            }, {\r\n                token : \"string.regexp\",\r\n                regex : \"[/](?:(?:\\\\[(?:\\\\\\\\]|[^\\\\]])+\\\\])|(?:\\\\\\\\/|[^\\\\]/]))*[/]\\\\w*\\\\s*(?=[).,;]|$)\"\r\n            }, {\r\n                token : \"string\", // single line\r\n                regex : '[\"](?:(?:\\\\\\\\.)|(?:[^\"\\\\\\\\]))*?[\"]'\r\n            }, {\r\n                token : \"string\", // single line\r\n                regex : \"['](?:(?:\\\\\\\\.)|(?:[^'\\\\\\\\]))*?[']\"\r\n            }, {\r\n                token : \"constant.numeric\", // hex\r\n                regex : \"0[xX][0-9a-fA-F]+\\\\b\"\r\n            }, {\r\n                token : \"constant.numeric\", // float\r\n                regex : \"[+-]?\\\\d+(?:(?:\\\\.\\\\d*)?(?:[eE][+-]?\\\\d+)?)?\\\\b\"\r\n            }, {\r\n                token : \"constant.language.boolean\",\r\n                regex : \"(?:true|false)\\\\b\"\r\n            }, {\r\n                token : [\r\n                    \"storage.type\",\r\n                    \"text\",\r\n                    \"entity.name.function\"\r\n                ],\r\n                regex : \"(function)(\\\\s+)(\" + identifierRe + \")\"\r\n            }, {\r\n                token : function(value) {\r\n                    if (value == \"this\")\r\n                        return \"variable.language\";\r\n                    else if (value == \"function\")\r\n                        return \"storage.type\";\r\n                    else if (keywords.hasOwnProperty(value) || reserved.hasOwnProperty(value))\r\n                        return \"keyword\";\r\n                    else if (buildinConstants.hasOwnProperty(value))\r\n                        return \"constant.language\";\r\n                    else if (/^_?[A-Z][a-zA-Z0-9_]*$/.test(value))\r\n                        return \"language.support.class\";\r\n                    else\r\n                        return \"identifier\";\r\n                },\r\n                // TODO: Unicode escape sequences\r\n                // TODO: Unicode identifiers\r\n                regex : identifierRe\r\n            }, {\r\n                token : \"keyword.operator\",\r\n                regex : \"!|%|&|\\\\*|\\\\-\\\\-|\\\\-|\\\\+\\\\+|\\\\+|~|==|=|!=|<=|>=|<<=|>>=|>>>=|<>|<|>|!|&&|\\\\|\\\\||\\\\?\\\\:|\\\\*=|%=|\\\\+=|\\\\-=|&=|\\\\^=|\\\\b(?:in|instanceof|new|delete|typeof|void)\"\r\n            }, {\r\n                token : \"punctuation.operator\",\r\n                regex : \"\\\\?|\\\\:|\\\\,|\\\\;|\\\\.\"\r\n            }, {\r\n                token : \"paren.lparen\",\r\n                regex : \"[[({<]\"\r\n            }, {\r\n                token : \"paren.rparen\",\r\n                regex : \"[\\\\])}>]\"\r\n            }, {\r\n                token : \"text\",\r\n                regex : \"\\\\s+\"\r\n            }\r\n        ],\r\n        \"comment\" : [\r\n            {\r\n                token : \"comment\", // closing comment\r\n                regex : \"\\\\*\\\\/\",\r\n                next : \"start\"\r\n            }, {\r\n                defaultToken : \"comment\"\r\n            }\r\n        ]\r\n    };\r\n    \r\n    this.embedRules(DocCommentHighlightRules, \"doc-\",\r\n        [ DocCommentHighlightRules.getEndRule(\"start\") ]);\r\n};\r\n\r\noop.inherits(JsxHighlightRules, TextHighlightRules);\r\n\r\nexports.JsxHighlightRules = JsxHighlightRules;\r\n});"]}