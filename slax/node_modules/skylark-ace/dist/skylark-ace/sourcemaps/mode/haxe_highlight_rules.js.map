{"version":3,"sources":["mode/haxe_highlight_rules.js"],"names":["define","require","exports","module","oop","DocCommentHighlightRules","TextHighlightRules","HaxeHighlightRules","keywordMapper","this","createKeywordMapper","variable.language","keyword","constant.language","$rules","start","token","regex","getStartRule","next","comment","defaultToken","embedRules","getEndRule","inherits"],"mappings":";;;;;;;AAAAA,OAAO,SAASC,EAASC,EAASC,GAClC,aAEA,IAAIC,EAAMH,EAAQ,cAEdI,EAA2BJ,EAAQ,iCAAiCI,yBACpEC,EAAqBL,EAAQ,0BAA0BK,mBAEvDC,EAAqB,WAErB,IAQIC,EAAgBC,KAAKC,qBACrBC,oBAAqB,OACrBC,QAVW,4TAWXC,oBAPmB,mBAQpB,cAKHJ,KAAKK,QACDC,QAEQC,MAAQ,UACRC,MAAQ,aAEZZ,EAAyBa,aAAa,cAElCF,MAAQ,UACRC,MAAQ,SACRE,KAAO,YAEPH,MAAQ,gBACRC,MAAQ,iFAERD,MAAQ,SACRC,MAAQ,uCAERD,MAAQ,SACRC,MAAQ,uCAERD,MAAQ,mBACRC,MAAQ,yBAERD,MAAQ,mBACRC,MAAQ,oDAERD,MAAQ,4BACRC,MAAQ,sBAERD,MAAQR,EAGRS,MAAQ,gCAERD,MAAQ,mBACRC,MAAQ,6KAERD,MAAQ,uBACRC,MAAQ,wBAERD,MAAQ,eACRC,MAAQ,WAERD,MAAQ,eACRC,MAAQ,aAERD,MAAQ,OACRC,MAAQ,SAGhBG,UAEQJ,MAAQ,UACRC,MAAQ,SACRE,KAAO,UAEPE,aAAe,aAK3BZ,KAAKa,WAAWjB,EAA0B,QACpCA,EAAyBkB,WAAW,YAG9CnB,EAAIoB,SAASjB,EAAoBD,GAEjCJ,EAAQK,mBAAqBA","file":"../../mode/haxe_highlight_rules.js","sourcesContent":["define(function(require, exports, module) {\r\n\"use strict\";\r\n\r\nvar oop = require(\"../lib/oop\");\r\n\r\nvar DocCommentHighlightRules = require(\"./doc_comment_highlight_rules\").DocCommentHighlightRules;\r\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\r\n\r\nvar HaxeHighlightRules = function() {\r\n\r\n    var keywords = (\r\n        \"break|case|cast|catch|class|continue|default|else|enum|extends|for|function|if|implements|import|in|inline|interface|new|override|package|private|public|return|static|super|switch|this|throw|trace|try|typedef|untyped|var|while|Array|Void|Bool|Int|UInt|Float|Dynamic|String|List|Hash|IntHash|Error|Unknown|Type|Std\"\r\n    );\r\n\r\n    var buildinConstants = (\r\n        \"null|true|false\"\r\n    );\r\n\r\n    var keywordMapper = this.createKeywordMapper({\r\n        \"variable.language\": \"this\",\r\n        \"keyword\": keywords,\r\n        \"constant.language\": buildinConstants\r\n    }, \"identifier\");\r\n\r\n    // regexp must not have capturing parentheses. Use (?:) instead.\r\n    // regexps are ordered -> the first match is used\r\n\r\n    this.$rules = {\r\n        \"start\" : [\r\n            {\r\n                token : \"comment\",\r\n                regex : \"\\\\/\\\\/.*$\"\r\n            },\r\n            DocCommentHighlightRules.getStartRule(\"doc-start\"),\r\n            {\r\n                token : \"comment\", // multi line comment\r\n                regex : \"\\\\/\\\\*\",\r\n                next : \"comment\"\r\n            }, {\r\n                token : \"string.regexp\",\r\n                regex : \"[/](?:(?:\\\\[(?:\\\\\\\\]|[^\\\\]])+\\\\])|(?:\\\\\\\\/|[^\\\\]/]))*[/]\\\\w*\\\\s*(?=[).,;]|$)\"\r\n            }, {\r\n                token : \"string\", // single line\r\n                regex : '[\"](?:(?:\\\\\\\\.)|(?:[^\"\\\\\\\\]))*?[\"]'\r\n            }, {\r\n                token : \"string\", // single line\r\n                regex : \"['](?:(?:\\\\\\\\.)|(?:[^'\\\\\\\\]))*?[']\"\r\n            }, {\r\n                token : \"constant.numeric\", // hex\r\n                regex : \"0[xX][0-9a-fA-F]+\\\\b\"\r\n            }, {\r\n                token : \"constant.numeric\", // float\r\n                regex : \"[+-]?\\\\d+(?:(?:\\\\.\\\\d*)?(?:[eE][+-]?\\\\d+)?)?\\\\b\"\r\n            }, {\r\n                token : \"constant.language.boolean\",\r\n                regex : \"(?:true|false)\\\\b\"\r\n            }, {\r\n                token : keywordMapper,\r\n                // TODO: Unicode escape sequences\r\n                // TODO: Unicode identifiers\r\n                regex : \"[a-zA-Z_$][a-zA-Z0-9_$]*\\\\b\"\r\n            }, {\r\n                token : \"keyword.operator\",\r\n                regex : \"!|\\\\$|%|&|\\\\*|\\\\-\\\\-|\\\\-|\\\\+\\\\+|\\\\+|~|===|==|=|!=|!==|<=|>=|<<=|>>=|>>>=|<>|<|>|!|&&|\\\\|\\\\||\\\\?\\\\:|\\\\*=|%=|\\\\+=|\\\\-=|&=|\\\\^=|\\\\b(?:in|instanceof|new|delete|typeof|void)\"\r\n            }, {\r\n                token : \"punctuation.operator\",\r\n                regex : \"\\\\?|\\\\:|\\\\,|\\\\;|\\\\.\"\r\n            }, {\r\n                token : \"paren.lparen\",\r\n                regex : \"[[({<]\"\r\n            }, {\r\n                token : \"paren.rparen\",\r\n                regex : \"[\\\\])}>]\"\r\n            }, {\r\n                token : \"text\",\r\n                regex : \"\\\\s+\"\r\n            }\r\n        ],\r\n        \"comment\" : [\r\n            {\r\n                token : \"comment\", // closing comment\r\n                regex : \"\\\\*\\\\/\",\r\n                next : \"start\"\r\n            }, {\r\n                defaultToken : \"comment\"\r\n            }\r\n        ]\r\n    };\r\n\r\n    this.embedRules(DocCommentHighlightRules, \"doc-\",\r\n        [ DocCommentHighlightRules.getEndRule(\"start\") ]);\r\n};\r\n\r\noop.inherits(HaxeHighlightRules, TextHighlightRules);\r\n\r\nexports.HaxeHighlightRules = HaxeHighlightRules;\r\n});\r\n"]}