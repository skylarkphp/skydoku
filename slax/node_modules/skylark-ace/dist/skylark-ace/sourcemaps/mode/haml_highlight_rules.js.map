{"version":3,"sources":["mode/haml_highlight_rules.js"],"names":["define","require","exports","module","oop","HtmlHighlightRules","RubyExports","RubyHighlightRules","HamlHighlightRules","call","this","$rules","start","token","regex","next","qString","qqString","tString","constantNumericHex","constantNumericFloat","constantOtherSymbol","element_class","element_attributes","embedded_ruby","instanceVariable","getKeywords","comment","normalizeRules","inherits"],"mappings":";;;;;;;AAAAA,OAAO,SAASC,EAASC,EAASC,GAClC,aAEA,IAAIC,EAAMH,EAAQ,cACdI,EAAqBJ,EAAQ,0BAA0BI,mBACvDC,EAAcL,EAAQ,0BACtBM,EAAqBD,EAAYC,mBAEjCC,EAAqB,WAIrBH,EAAmBI,KAAKC,MAExBA,KAAKC,QACDC,QAEQC,MAAO,gBACPC,MAAO,OACPC,KAAM,YAGNF,MAAO,gBACPC,MAAO,QACPC,KAAM,YAGNF,MAAO,eACPC,MAAO,YAGPD,MAAO,eACPC,MAAO,YAGPD,MAAO,wBACPC,MAAO,+BAEXR,EAAYU,QACZV,EAAYW,SACZX,EAAYY,SAERL,MAAO,gBACPC,MAAO,gBAGPD,MAAO,oCACPC,MAAO,aAGPD,MAAO,iCACPC,MAAO,UACPC,KAAM,iBAEVT,EAAYa,mBACZb,EAAYc,qBACZd,EAAYe,qBAERR,MAAO,OACPC,MAAO,QACPC,KAAM,kBAGdO,gBAEQT,MAAO,oCACPC,MAAO,aAGPD,MAAO,sBACPC,MAAO,KACPC,KAAM,sBAEVT,EAAYe,qBAERR,MAAO,QACPC,MAAO,iCACPC,KAAM,UAGdQ,oBACIjB,EAAYe,oBACZf,EAAYU,QACZV,EAAYW,SACZX,EAAYY,QACZZ,EAAYa,mBACZb,EAAYc,sBAERP,MAAO,sBACPC,MAAO,OACPC,KAAM,UAGdS,eACIlB,EAAYa,mBACZb,EAAYc,qBACZd,EAAYmB,iBACZnB,EAAYU,QACZV,EAAYW,SACZX,EAAYY,SAERL,MAAQ,gBACRC,MAAQ,uBAGRD,OAAQ,IAAIN,GAAqBmB,cACjCZ,MAAQ,gCAGRD,OAAS,UAAW,OAAQ,QAC5BC,MAAQ,+BACRC,KAAQ,UAGRF,OAAS,QACTC,MAAQ,KACRC,KAAQ,UAGRF,OAAS,QACTC,MAAQ,kBACRC,KAAQ,UAGhBY,UAEQd,MAAO,gBACPC,MAAO,KACPC,KAAM,UAGNF,MAAO,gBACPC,MAAO,WAMnBJ,KAAKkB,kBAGTxB,EAAIyB,SAASrB,EAAoBH,GAEjCH,EAAQM,mBAAqBA","file":"../../mode/haml_highlight_rules.js","sourcesContent":["define(function(require, exports, module) {\r\n\"use strict\";\r\n\r\nvar oop = require(\"../lib/oop\");\r\nvar HtmlHighlightRules = require(\"./html_highlight_rules\").HtmlHighlightRules;\r\nvar RubyExports = require(\"./ruby_highlight_rules\");\r\nvar RubyHighlightRules = RubyExports.RubyHighlightRules;\r\n\r\nvar HamlHighlightRules = function() {\r\n\r\n    // regexp must not have capturing parentheses. Use (?:) instead.\r\n    // regexps are ordered -> the first match is used\r\n    HtmlHighlightRules.call(this);\r\n\r\n    this.$rules = {\r\n        \"start\": [\r\n            {\r\n                token: \"comment.block\", // multiline HTML comment\r\n                regex: /^\\/$/,\r\n                next: \"comment\"\r\n            },\r\n            {\r\n                token: \"comment.block\", // multiline HAML comment\r\n                regex: /^\\-#$/,\r\n                next: \"comment\"\r\n            },\r\n            {\r\n                token: \"comment.line\", // HTML comment\r\n                regex: /\\/\\s*.*/\r\n            },\r\n            {\r\n                token: \"comment.line\", // HAML comment\r\n                regex: /-#\\s*.*/\r\n            },\r\n            {\r\n                token: \"keyword.other.doctype\",\r\n                regex: \"^!!!\\\\s*(?:[a-zA-Z0-9-_]+)?\"\r\n            },\r\n            RubyExports.qString,\r\n            RubyExports.qqString,\r\n            RubyExports.tString,\r\n            {\r\n                token: \"meta.tag.haml\",\r\n                regex: /(%[\\w:\\-]+)/\r\n            },\r\n            {\r\n                token: \"keyword.attribute-name.class.haml\",\r\n                regex: /\\.[\\w-]+/\r\n            },\r\n            {\r\n                token: \"keyword.attribute-name.id.haml\",\r\n                regex: /#[\\w-]+/,\r\n                next: \"element_class\"\r\n            },\r\n            RubyExports.constantNumericHex,\r\n            RubyExports.constantNumericFloat,\r\n            RubyExports.constantOtherSymbol,\r\n            {\r\n                token: \"text\",\r\n                regex: /=|-|~/,\r\n                next: \"embedded_ruby\"\r\n            }\r\n        ],\r\n        \"element_class\": [\r\n            {\r\n                token: \"keyword.attribute-name.class.haml\",\r\n                regex: /\\.[\\w-]+/\r\n            },\r\n            {\r\n                token: \"punctuation.section\",\r\n                regex: /\\{/,\r\n                next: \"element_attributes\"\r\n            },\r\n            RubyExports.constantOtherSymbol,\r\n            {\r\n                token: \"empty\",\r\n                regex: \"$|(?!\\\\.|#|\\\\{|\\\\[|=|-|~|\\\\/])\",\r\n                next: \"start\"\r\n            }\r\n        ],\r\n        \"element_attributes\": [\r\n            RubyExports.constantOtherSymbol,\r\n            RubyExports.qString,\r\n            RubyExports.qqString,\r\n            RubyExports.tString,\r\n            RubyExports.constantNumericHex,\r\n            RubyExports.constantNumericFloat,\r\n            {\r\n                token: \"punctuation.section\",\r\n                regex: /$|\\}/,\r\n                next: \"start\"\r\n            }\r\n        ],\r\n        \"embedded_ruby\": [\r\n            RubyExports.constantNumericHex,\r\n            RubyExports.constantNumericFloat,\r\n            RubyExports.instanceVariable,\r\n            RubyExports.qString,\r\n            RubyExports.qqString,\r\n            RubyExports.tString,\r\n            {\r\n                token : \"support.class\", // class name\r\n                regex : \"[A-Z][a-zA-Z_\\\\d]+\"\r\n            },\r\n            {\r\n                token : new RubyHighlightRules().getKeywords(),\r\n                regex : \"[a-zA-Z_$][a-zA-Z0-9_$]*\\\\b\"\r\n            },\r\n            {\r\n                token : [\"keyword\", \"text\", \"text\"],\r\n                regex : \"(?:do|\\\\{)(?: \\\\|[^|]+\\\\|)?$\",\r\n                next  : \"start\"\r\n            },\r\n            {\r\n                token : [\"text\"],\r\n                regex : \"^$\",\r\n                next  : \"start\"\r\n            },\r\n            {\r\n                token : [\"text\"],\r\n                regex : \"^(?!.*\\\\|\\\\s*$)\",\r\n                next  : \"start\"\r\n            }\r\n        ],\r\n        \"comment\": [\r\n            {\r\n                token: \"comment.block\",\r\n                regex: /^$/,\r\n                next: \"start\"\r\n            },\r\n            {\r\n                token: \"comment.block\", // comment spanning the whole line\r\n                regex: /\\s+.*/\r\n            }\r\n        ]\r\n\r\n    };\r\n\r\n    this.normalizeRules();\r\n};\r\n\r\noop.inherits(HamlHighlightRules, HtmlHighlightRules);\r\n\r\nexports.HamlHighlightRules = HamlHighlightRules;\r\n});\r\n"]}