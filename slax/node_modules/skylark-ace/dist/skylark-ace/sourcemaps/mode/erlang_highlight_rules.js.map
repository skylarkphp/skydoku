{"version":3,"sources":["mode/erlang_highlight_rules.js"],"names":["define","require","exports","module","oop","TextHighlightRules","ErlangHighlightRules","this","$rules","start","include","#atom","token","regex","push","next","defaultToken","#behaviour-directive","#binary","#character","#comment","push_","#define-directive","#directive","#everything-else","#expression","#function","#function-call","#import-export-directive","#internal-expression-punctuation","#internal-function-list","#internal-function-parts","#internal-record-body","#internal-type-specifiers","#keyword","#list","#macro-directive","#macro-usage","#module-directive","#number","#parenthesized-expression","#record-directive","#record-usage","#string","#symbolic-operator","#textual-operator","#tuple","#variable","normalizeRules","metaData","comment","fileTypes","keyEquivalent","name","scopeName","inherits"],"mappings":";;;;;;;AAoCAA,OAAO,SAASC,QAASC,QAASC,QAClC,aAEA,IAAIC,EAAMH,QAAQ,cACdI,EAAqBJ,QAAQ,0BAA0BI,mBAEvDC,EAAuB,WAIvBC,KAAKC,QAAWC,QACTC,QAAS,sBACTA,QAAS,6BACTA,QAAS,yBACTA,QAAS,sBACTA,QAAS,sBACTA,QAAS,qBACTA,QAAS,eACTA,QAAS,cACTA,QAAS,qBACdC,UACKC,MAAO,6CACPC,MAAO,IACPC,OACKF,MAAO,2CACPC,MAAO,IACPE,KAAM,QACNH,OACG,uCACA,sCACA,uCACA,sCACA,uCACHC,MAAO,6DACPD,MAAO,8BAA+BC,MAAO,eAC7CG,aAAc,iDACnBJ,MAAO,wCACPC,MAAO,wBACZI,yBACKL,OACG,kCACA,6CACA,kCACA,6CACA,kCACA,iDACA,kCACA,qDACA,kCACA,+CACA,kCACA,4CACHC,MAAO,4FACZK,YACKN,MAAO,6CACPC,MAAO,KACPC,OACKF,MAAO,2CACPC,MAAO,KACPE,KAAM,QACNH,OACG,sCACA,2CACHC,MAAO,YACPH,QAAS,8BACTA,QAAS,qBACTM,aAAc,mCACxBG,eACKP,OACG,0CACA,uCACA,mCACA,uCACA,mCACA,oCACHC,MAAO,kEACPD,MAAO,mCACPC,MAAO,kBACPD,OACG,0CACA,6BACHC,MAAO,eACPD,MAAO,mCAAoCC,MAAO,UACvDO,aACKR,MAAO,wCACPC,MAAO,OACPQ,QACKT,MAAO,iCACPC,MAAO,IACPE,KAAM,QACNC,aAAc,qCACxBM,sBACKV,OACG,+BACA,6CACA,+BACA,0CACA,+BACA,iDACA,+BACA,+CACA,+BACA,2CACHC,MAAO,qEACPC,OACKF,OACG,+CACA,+BACA,4CACHC,MAAO,mBACPE,KAAM,QACNL,QAAS,qBACTM,aAAc,mCACnBJ,MAAO,+BACPC,MAAO,uDACPC,OACKF,OACG,+CACA,+BACA,4CACHC,MAAO,mBACPE,KAAM,QACNH,OACG,OACA,6CACA,OACA,0CACA,OACA,iDACA,OACA,+CACA,OACA,kDACHC,MAAO,uEACPC,OACKF,OACG,+CACA,OACA,2CACHC,MAAO,iBACPE,KAAM,QACNH,MAAO,0CAA2CC,MAAO,MACzDH,QAAS,uBACdE,MAAO,sCACPC,MAAO,4BACPH,QAAS,qBACTM,aAAc,mCACxBO,eACKX,OACG,wBACA,6CACA,wBACA,mCACA,wBACA,kDACHC,MAAO,oDACPC,OACKF,OACG,+CACA,wBACA,4CACHC,MAAO,oBACPE,KAAM,QACNL,QAAS,qBACTM,aAAc,4BACnBJ,OACG,wBACA,6CACA,wBACA,mCACA,wBACA,4CACHC,MAAO,qDACZW,qBACKd,QAAS,aACTA,QAAS,kBACTA,QAAS,iBACTA,QAAS,gBACTA,QAAS,aACTA,QAAS,sBACTA,QAAS,mBACTA,QAAS,WACTA,QAAS,UACTA,QAAS,YACTA,QAAS,8BACTA,QAAS,eACTA,QAAS,YACTA,QAAS,UACTA,QAAS,YACTA,QAAS,uBACTA,QAAS,cACde,gBACKb,MAAO,4BACPC,MAAO,WACPC,OACKF,MAAO,6BACPC,MAAO,YACPE,KAAM,QACNL,QAAS,qCACTA,QAAS,qBACTM,aAAc,gCACnBJ,MAAO,8BACPC,MAAO,aACPC,OACKF,MAAO,6BACPC,MAAO,YACPE,KAAM,QACNL,QAAS,qCACTA,QAAS,qBACTM,aAAc,kCACnBJ,MAAO,iCACPC,MAAO,gBACPC,OACKF,MAAO,6BACPC,MAAO,YACPE,KAAM,QACNL,QAAS,qCACTA,QAAS,qBACTM,aAAc,qCACnBJ,OACG,6BACA,OACA,uCACA,OACA,+CACA,OACA,8BACA,OACA,+CACHC,MAAO,0FACPD,MAAO,6BACPC,MAAO,YACPC,OACKF,MAAO,6BACPC,MAAO,YACPE,KAAM,QACNH,MAAO,OACPC,MAAO,UACPC,OACKF,MAAO,uCACPC,MAAO,kBACPE,KAAM,QACNL,QAAS,+BACdA,QAAS,qBACTM,aAAc,iCACnBJ,MAAO,6BACPC,MAAO,YACPC,OACKF,MAAO,6BACPC,MAAO,YACPE,KAAM,QACNL,QAAS,qCACTA,QAAS,qBACTM,aAAc,iCACnBJ,MAAO,+BACPC,MAAO,cACPC,OACKF,MAAO,6BACPC,MAAO,YACPE,KAAM,QACNL,QAAS,qCACTA,QAAS,qBACTM,aAAc,mCACnBJ,MAAO,+BACPC,MAAO,cACPC,OACKF,MAAO,6BACPC,MAAO,YACPE,KAAM,QACNL,QAAS,qBACTM,aAAc,mCACxBU,cACKd,OACG,uBACA,yCACA,wBACHC,MAAO,oDACPC,OACKF,MAAO,yCACPC,MAAO,MACPE,KAAM,QACNH,OAAS,OAAQ,8BAA+B,QAChDC,MAAO,sDACPD,MAAO,OACPC,MAAO,UACPC,OACKF,MAAO,uCACPC,MAAO,YACPE,KAAM,QACNL,QAAS,8BACTA,QAAS,+BACdA,QAAS,qBACTM,aAAc,2BACxBW,mBACKf,MAAO,4BACPC,MAAO,6FACPC,OACKF,MAAO,+CACPC,MAAO,MACPE,KAAM,QACNH,OACG,uCACA,OACA,+CACA,OACA,oCACA,OACA,kDACHC,MAAO,8NACPC,OACKF,MAAO,OAAQC,MAAO,UAAWE,KAAM,QACvCH,MAAO,0CAA2CC,MAAO,MACzDH,QAAS,uBACdE,OACG,uCACA,OACA,+CACA,OACA,8BACA,OACA,kDACHC,MAAO,4FACPC,OACKF,MAAO,OAAQC,MAAO,UAAWE,KAAM,QACvCH,MAAO,0CAA2CC,MAAO,MACzDH,QAAS,uBACdM,aAAc,gCACxBY,6BACKhB,OACG,+BACA,6CACA,+BACA,0CACA,+BACA,iDACA,+BACA,uCACA,+BACA,2CACHC,MAAO,kFACPC,OACKF,OACG,+CACA,+BACA,4CACHC,MAAO,mBACPE,KAAM,QACNL,QAAS,4BACTM,aAAc,mCACnBJ,OACG,+BACA,6CACA,+BACA,0CACA,+BACA,kDACHC,MAAO,sCACPC,OACKF,OACG,+CACA,+BACA,4CACHC,MAAO,mBACPE,KAAM,QACNL,QAAS,4BACTM,aAAc,mCACxBa,qCACKjB,OACG,gDACA,uCACA,4CACHC,MAAO,iBACZiB,4BACKlB,MAAO,2CACPC,MAAO,MACPC,OACKF,MAAO,yCACPC,MAAO,MACPE,KAAM,QACNH,OACG,8BACA,OACA,+CACHC,MAAO,yCACPC,OACKF,MAAO,oCACPC,MAAO,YACPE,KAAM,QACNL,QAAS,uBACdA,QAAS,qBACTM,aAAc,0CACxBe,6BACKnB,MAAO,OACPC,MAAO,UACPC,OACKF,MAAO,gDACPC,MAAO,KACPE,KAAM,QACNH,MAAO,iDACPC,MAAO,MACPC,OACKF,MAAO,+CACPC,MAAO,MACPE,KAAM,QACNH,MAAO,0CAA2CC,MAAO,MACzDH,QAAS,uBACdE,MAAO,sCAAuCC,MAAO,QACrDH,QAAS,uBACdE,MAAO,2CACPC,MAAO,MACPH,QAAS,qBACdsB,0BACKpB,MAAO,mDACPC,MAAO,MACPC,OACKF,MAAO,+BACPC,MAAO,UACPE,KAAM,QACNH,OACG,8BACA,yCACA,OACA,sCACHC,MAAO,oDACPC,OACKF,MAAO,4CACPC,MAAO,YACPE,KAAM,QACNL,QAAS,uBACdE,OACG,8BACA,OACA,6CACHC,MAAO,gDACPH,QAAS,qBACTM,aAAc,mCACxBiB,8BACKrB,MAAO,0CACPC,MAAO,IACPC,OACKF,MAAO,OAAQC,MAAO,aAAcE,KAAM,QAC1CH,OACG,sBACA,qCACA,qCACA,+BACA,gDACHC,MAAO,mGACjBqB,aACKtB,MAAO,yBACPC,MAAO,mFACZsB,UACKvB,MAAO,2CACPC,MAAO,MACPC,OACKF,MAAO,yCACPC,MAAO,MACPE,KAAM,QACNH,MAAO,oCACPC,MAAO,iBACPH,QAAS,qBACTM,aAAc,iCACxBoB,qBACKxB,OACG,8BACA,6CACA,8BACA,yCACA,8BACA,iDACA,8BACA,oCACA,8BACA,+CACA,8BACA,4CACHC,MAAO,mFACPD,OACG,+BACA,6CACA,+BACA,0CACA,+BACA,iDACA,+BACA,oCACA,+BACA,+CACA,+BACA,4CACHC,MAAO,oFACPD,OACG,8BACA,6CACA,8BACA,yCACA,8BACA,iDACA,8BACA,oCACA,8BACA,+CACA,8BACA,4CACHC,MAAO,mFACZwB,iBACKzB,OACG,gCACA,0BACA,qCACHC,MAAO,oCACZyB,sBACK1B,OACG,+BACA,6CACA,+BACA,0CACA,+BACA,iDACA,+BACA,kDACA,+BACA,+CACA,+BACA,4CACHC,MAAO,yFACZ0B,YACK3B,MAAO,OACPC,MAAO,UACPC,OACKF,MAAO,OAAQC,MAAO,UAAWE,KAAM,QACvCH,OACG,gCACA,6CACA,gCACA,+CACHC,MAAO,8CACPD,OACG,yCACA,4CACA,0CACHC,MAAO,mBACPD,OACG,yCACA,4CACA,0CACHC,MAAO,mBACPD,OACG,yCACA,4CACA,0CACHC,MAAO,mBACPD,OACG,yCACA,4CACA,0CACHC,MAAO,mBACPD,OACG,yCACA,4CACA,0CACHC,MAAO,mBACPD,OACG,yCACA,4CACA,0CACHC,MAAO,mBACPD,OACG,wCACA,4CACA,yCACHC,MAAO,mBACPD,OACG,yCACA,4CACA,0CACHC,MAAO,mBACPD,OACG,0CACA,4CACA,2CACHC,MAAO,kBACPD,OACG,0CACA,4CACA,2CACHC,MAAO,sBACPD,OACG,0CACA,4CACA,2CACHC,MAAO,0BACPD,OACG,0CACA,4CACA,2CACHC,MAAO,0BACPD,OACG,0CACA,4CACA,2CACHC,MAAO,0BACPD,OACG,0CACA,4CACA,2CACHC,MAAO,0BACPD,OACG,8CACA,4CACA,+CACHC,MAAO,0BACPD,OACG,0CACA,4CACA,2CACHC,MAAO,0BACPD,OACG,0CACA,4CACA,2CACHC,MAAO,0BACPD,OACG,0CACA,4CACA,2CACHC,MAAO,0BACPD,OACG,0CACA,4CACA,2CACHC,MAAO,0BACPD,OACG,0CACA,4CACA,2CACHC,MAAO,0BACPD,OACG,0CACA,4CACA,2CACHC,MAAO,0BACPD,OACG,0CACA,4CACA,2CACHC,MAAO,0BACPD,OACG,0CACA,4CACA,2CACHC,MAAO,0BACPD,OACG,0CACA,4CACA,2CACHC,MAAO,0BACPD,OACG,0CACA,4CACA,2CACHC,MAAO,0BACPD,OACG,0CACA,4CACA,2CACHC,MAAO,0BACPD,OACG,0CACA,4CACA,2CACHC,MAAO,0BACPD,OACG,0CACA,4CACA,2CACHC,MAAO,0BACPD,OACG,0CACA,4CACA,2CACHC,MAAO,0BACPD,OACG,0CACA,4CACA,2CACHC,MAAO,0BACPD,OACG,0CACA,4CACA,2CACHC,MAAO,0BACPD,OACG,0CACA,4CACA,2CACHC,MAAO,0BACPD,OACG,0CACA,4CACA,2CACHC,MAAO,0BACPD,OACG,0CACA,4CACA,2CACHC,MAAO,0BACPD,OACG,0CACA,4CACA,2CACHC,MAAO,0BACPD,MAAO,iCACPC,MAAO,sBACPD,MAAO,0CACPC,MAAO,WACjB2B,8BACK5B,MAAO,8CACPC,MAAO,MACPC,OACKF,MAAO,4CACPC,MAAO,MACPE,KAAM,QACNL,QAAS,qBACTM,aAAc,oCACxByB,sBACK7B,OACG,+BACA,6CACA,+BACA,0CACA,+BACA,iDACA,+BACA,kDACA,+BACA,2CACHC,MAAO,kFACPC,OACKF,OACG,iDACA,+BACA,+CACA,+BACA,4CACHC,MAAO,8BACPE,KAAM,QACNL,QAAS,0BACTM,aAAc,mCACxB0B,kBACK9B,OACG,iCACA,2BACA,uCACA,2BACA,4CACA,2BACA,+BACHC,MAAO,yFACPD,OACG,iCACA,2BACA,wCACHC,MAAO,yCACPC,OACKF,MAAO,iDACPC,MAAO,MACPE,KAAM,QACNL,QAAS,0BACTM,aAAc,+BACxB2B,YACK/B,MAAO,6CACPC,MAAO,IACPC,OACKF,MAAO,2CACPC,MAAO,IACPE,KAAM,QACNH,OACG,uCACA,mCACA,uCACA,mCACA,oCACHC,MAAO,6DACPD,MAAO,gCAAiCC,MAAO,eAC/CD,OACG,4CACA,iDACA,oCACA,iDACA,iDACA,oCACA,iDACA,iDACA,iDACA,oCACA,qCACHC,MAAO,4GACPD,OACG,4CACA,iDACA,oCACA,qCACHC,MAAO,6CACPD,MAAO,gCAAiCC,MAAO,QAC/CG,aAAc,kCACxB4B,uBACKhC,MAAO,mCACPC,MAAO,4DACZgC,sBACKjC,MAAO,kCACPC,MAAO,+EACZiC,WACKlC,MAAO,4CACPC,MAAO,MACPC,OACKF,MAAO,0CACPC,MAAO,MACPE,KAAM,QACNH,MAAO,qCAAsCC,MAAO,MACpDH,QAAS,qBACTM,aAAc,kCACxB+B,cACKnC,OAAS,wBAAyB,oCAClCC,MAAO,+CAEdN,KAAKyC,kBAGT1C,EAAqB2C,UAAaC,QAAS,oTACrCC,WAAa,MAAO,OACpBC,cAAe,MACfC,KAAM,SACNC,UAAW,iBAGjBlD,EAAImD,SAASjD,EAAsBD,GAEnCH,QAAQI,qBAAuBA","file":"../../mode/erlang_highlight_rules.js","sourcesContent":["/* ***** BEGIN LICENSE BLOCK *****\r\n * Distributed under the BSD license:\r\n *\r\n * Copyright (c) 2012, Ajax.org B.V.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *     * Redistributions of source code must retain the above copyright\r\n *       notice, this list of conditions and the following disclaimer.\r\n *     * Redistributions in binary form must reproduce the above copyright\r\n *       notice, this list of conditions and the following disclaimer in the\r\n *       documentation and/or other materials provided with the distribution.\r\n *     * Neither the name of Ajax.org B.V. nor the\r\n *       names of its contributors may be used to endorse or promote products\r\n *       derived from this software without specific prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\r\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY\r\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\r\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\r\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n *\r\n * ***** END LICENSE BLOCK ***** */\r\n\r\n/* This file was autogenerated from tm bundles\\erlang.tmbundle\\Syntaxes\\Erlang.plist (uuid: ) */\r\n/****************************************************************************************\r\n * IT MIGHT NOT BE PERFECT ...But it's a good start from an existing *.tmlanguage file. *\r\n * fileTypes                                                                            *\r\n ****************************************************************************************/\r\n\r\ndefine(function(require, exports, module) {\r\n\"use strict\";\r\n\r\nvar oop = require(\"../lib/oop\");\r\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\r\n\r\nvar ErlangHighlightRules = function() {\r\n    // regexp must not have capturing parentheses. Use (?:) instead.\r\n    // regexps are ordered -> the first match is used\r\n\r\n    this.$rules = { start: \r\n       [ { include: '#module-directive' },\r\n         { include: '#import-export-directive' },\r\n         { include: '#behaviour-directive' },\r\n         { include: '#record-directive' },\r\n         { include: '#define-directive' },\r\n         { include: '#macro-directive' },\r\n         { include: '#directive' },\r\n         { include: '#function' },\r\n         { include: '#everything-else' } ],\r\n      '#atom': \r\n       [ { token: 'punctuation.definition.symbol.begin.erlang',\r\n           regex: '\\'',\r\n           push: \r\n            [ { token: 'punctuation.definition.symbol.end.erlang',\r\n                regex: '\\'',\r\n                next: 'pop' },\r\n              { token: \r\n                 [ 'punctuation.definition.escape.erlang',\r\n                   'constant.other.symbol.escape.erlang',\r\n                   'punctuation.definition.escape.erlang',\r\n                   'constant.other.symbol.escape.erlang',\r\n                   'constant.other.symbol.escape.erlang' ],\r\n                regex: '(\\\\\\\\)(?:([bdefnrstv\\\\\\\\\\'\"])|(\\\\^)([@-_])|([0-7]{1,3}))' },\r\n              { token: 'invalid.illegal.atom.erlang', regex: '\\\\\\\\\\\\^?.?' },\r\n              { defaultToken: 'constant.other.symbol.quoted.single.erlang' } ] },\r\n         { token: 'constant.other.symbol.unquoted.erlang',\r\n           regex: '[a-z][a-zA-Z\\\\d@_]*' } ],\r\n      '#behaviour-directive': \r\n       [ { token: \r\n            [ 'meta.directive.behaviour.erlang',\r\n              'punctuation.section.directive.begin.erlang',\r\n              'meta.directive.behaviour.erlang',\r\n              'keyword.control.directive.behaviour.erlang',\r\n              'meta.directive.behaviour.erlang',\r\n              'punctuation.definition.parameters.begin.erlang',\r\n              'meta.directive.behaviour.erlang',\r\n              'entity.name.type.class.behaviour.definition.erlang',\r\n              'meta.directive.behaviour.erlang',\r\n              'punctuation.definition.parameters.end.erlang',\r\n              'meta.directive.behaviour.erlang',\r\n              'punctuation.section.directive.end.erlang' ],\r\n           regex: '^(\\\\s*)(-)(\\\\s*)(behaviour)(\\\\s*)(\\\\()(\\\\s*)([a-z][a-zA-Z\\\\d@_]*)(\\\\s*)(\\\\))(\\\\s*)(\\\\.)' } ],\r\n      '#binary': \r\n       [ { token: 'punctuation.definition.binary.begin.erlang',\r\n           regex: '<<',\r\n           push: \r\n            [ { token: 'punctuation.definition.binary.end.erlang',\r\n                regex: '>>',\r\n                next: 'pop' },\r\n              { token: \r\n                 [ 'punctuation.separator.binary.erlang',\r\n                   'punctuation.separator.value-size.erlang' ],\r\n                regex: '(,)|(:)' },\r\n              { include: '#internal-type-specifiers' },\r\n              { include: '#everything-else' },\r\n              { defaultToken: 'meta.structure.binary.erlang' } ] } ],\r\n      '#character': \r\n       [ { token: \r\n            [ 'punctuation.definition.character.erlang',\r\n              'punctuation.definition.escape.erlang',\r\n              'constant.character.escape.erlang',\r\n              'punctuation.definition.escape.erlang',\r\n              'constant.character.escape.erlang',\r\n              'constant.character.escape.erlang' ],\r\n           regex: '(\\\\$)(\\\\\\\\)(?:([bdefnrstv\\\\\\\\\\'\"])|(\\\\^)([@-_])|([0-7]{1,3}))' },\r\n         { token: 'invalid.illegal.character.erlang',\r\n           regex: '\\\\$\\\\\\\\\\\\^?.?' },\r\n         { token: \r\n            [ 'punctuation.definition.character.erlang',\r\n              'constant.character.erlang' ],\r\n           regex: '(\\\\$)(\\\\S)' },\r\n         { token: 'invalid.illegal.character.erlang', regex: '\\\\$.?' } ],\r\n      '#comment': \r\n       [ { token: 'punctuation.definition.comment.erlang',\r\n           regex: '%.*$',\r\n           push_: \r\n            [ { token: 'comment.line.percentage.erlang',\r\n                regex: '$',\r\n                next: 'pop' },\r\n              { defaultToken: 'comment.line.percentage.erlang' } ] } ],\r\n      '#define-directive': \r\n       [ { token: \r\n            [ 'meta.directive.define.erlang',\r\n              'punctuation.section.directive.begin.erlang',\r\n              'meta.directive.define.erlang',\r\n              'keyword.control.directive.define.erlang',\r\n              'meta.directive.define.erlang',\r\n              'punctuation.definition.parameters.begin.erlang',\r\n              'meta.directive.define.erlang',\r\n              'entity.name.function.macro.definition.erlang',\r\n              'meta.directive.define.erlang',\r\n              'punctuation.separator.parameters.erlang' ],\r\n           regex: '^(\\\\s*)(-)(\\\\s*)(define)(\\\\s*)(\\\\()(\\\\s*)([a-zA-Z\\\\d@_]+)(\\\\s*)(,)',\r\n           push: \r\n            [ { token: \r\n                 [ 'punctuation.definition.parameters.end.erlang',\r\n                   'meta.directive.define.erlang',\r\n                   'punctuation.section.directive.end.erlang' ],\r\n                regex: '(\\\\))(\\\\s*)(\\\\.)',\r\n                next: 'pop' },\r\n              { include: '#everything-else' },\r\n              { defaultToken: 'meta.directive.define.erlang' } ] },\r\n         { token: 'meta.directive.define.erlang',\r\n           regex: '(?=^\\\\s*-\\\\s*define\\\\s*\\\\(\\\\s*[a-zA-Z\\\\d@_]+\\\\s*\\\\()',\r\n           push: \r\n            [ { token: \r\n                 [ 'punctuation.definition.parameters.end.erlang',\r\n                   'meta.directive.define.erlang',\r\n                   'punctuation.section.directive.end.erlang' ],\r\n                regex: '(\\\\))(\\\\s*)(\\\\.)',\r\n                next: 'pop' },\r\n              { token: \r\n                 [ 'text',\r\n                   'punctuation.section.directive.begin.erlang',\r\n                   'text',\r\n                   'keyword.control.directive.define.erlang',\r\n                   'text',\r\n                   'punctuation.definition.parameters.begin.erlang',\r\n                   'text',\r\n                   'entity.name.function.macro.definition.erlang',\r\n                   'text',\r\n                   'punctuation.definition.parameters.begin.erlang' ],\r\n                regex: '^(\\\\s*)(-)(\\\\s*)(define)(\\\\s*)(\\\\()(\\\\s*)([a-zA-Z\\\\d@_]+)(\\\\s*)(\\\\()',\r\n                push: \r\n                 [ { token: \r\n                      [ 'punctuation.definition.parameters.end.erlang',\r\n                        'text',\r\n                        'punctuation.separator.parameters.erlang' ],\r\n                     regex: '(\\\\))(\\\\s*)(,)',\r\n                     next: 'pop' },\r\n                   { token: 'punctuation.separator.parameters.erlang', regex: ',' },\r\n                   { include: '#everything-else' } ] },\r\n              { token: 'punctuation.separator.define.erlang',\r\n                regex: '\\\\|\\\\||\\\\||:|;|,|\\\\.|->' },\r\n              { include: '#everything-else' },\r\n              { defaultToken: 'meta.directive.define.erlang' } ] } ],\r\n      '#directive': \r\n       [ { token: \r\n            [ 'meta.directive.erlang',\r\n              'punctuation.section.directive.begin.erlang',\r\n              'meta.directive.erlang',\r\n              'keyword.control.directive.erlang',\r\n              'meta.directive.erlang',\r\n              'punctuation.definition.parameters.begin.erlang' ],\r\n           regex: '^(\\\\s*)(-)(\\\\s*)([a-z][a-zA-Z\\\\d@_]*)(\\\\s*)(\\\\(?)',\r\n           push: \r\n            [ { token: \r\n                 [ 'punctuation.definition.parameters.end.erlang',\r\n                   'meta.directive.erlang',\r\n                   'punctuation.section.directive.end.erlang' ],\r\n                regex: '(\\\\)?)(\\\\s*)(\\\\.)',\r\n                next: 'pop' },\r\n              { include: '#everything-else' },\r\n              { defaultToken: 'meta.directive.erlang' } ] },\r\n         { token: \r\n            [ 'meta.directive.erlang',\r\n              'punctuation.section.directive.begin.erlang',\r\n              'meta.directive.erlang',\r\n              'keyword.control.directive.erlang',\r\n              'meta.directive.erlang',\r\n              'punctuation.section.directive.end.erlang' ],\r\n           regex: '^(\\\\s*)(-)(\\\\s*)([a-z][a-zA-Z\\\\d@_]*)(\\\\s*)(\\\\.)' } ],\r\n      '#everything-else': \r\n       [ { include: '#comment' },\r\n         { include: '#record-usage' },\r\n         { include: '#macro-usage' },\r\n         { include: '#expression' },\r\n         { include: '#keyword' },\r\n         { include: '#textual-operator' },\r\n         { include: '#function-call' },\r\n         { include: '#tuple' },\r\n         { include: '#list' },\r\n         { include: '#binary' },\r\n         { include: '#parenthesized-expression' },\r\n         { include: '#character' },\r\n         { include: '#number' },\r\n         { include: '#atom' },\r\n         { include: '#string' },\r\n         { include: '#symbolic-operator' },\r\n         { include: '#variable' } ],\r\n      '#expression': \r\n       [ { token: 'keyword.control.if.erlang',\r\n           regex: '\\\\bif\\\\b',\r\n           push: \r\n            [ { token: 'keyword.control.end.erlang',\r\n                regex: '\\\\bend\\\\b',\r\n                next: 'pop' },\r\n              { include: '#internal-expression-punctuation' },\r\n              { include: '#everything-else' },\r\n              { defaultToken: 'meta.expression.if.erlang' } ] },\r\n         { token: 'keyword.control.case.erlang',\r\n           regex: '\\\\bcase\\\\b',\r\n           push: \r\n            [ { token: 'keyword.control.end.erlang',\r\n                regex: '\\\\bend\\\\b',\r\n                next: 'pop' },\r\n              { include: '#internal-expression-punctuation' },\r\n              { include: '#everything-else' },\r\n              { defaultToken: 'meta.expression.case.erlang' } ] },\r\n         { token: 'keyword.control.receive.erlang',\r\n           regex: '\\\\breceive\\\\b',\r\n           push: \r\n            [ { token: 'keyword.control.end.erlang',\r\n                regex: '\\\\bend\\\\b',\r\n                next: 'pop' },\r\n              { include: '#internal-expression-punctuation' },\r\n              { include: '#everything-else' },\r\n              { defaultToken: 'meta.expression.receive.erlang' } ] },\r\n         { token: \r\n            [ 'keyword.control.fun.erlang',\r\n              'text',\r\n              'entity.name.type.class.module.erlang',\r\n              'text',\r\n              'punctuation.separator.module-function.erlang',\r\n              'text',\r\n              'entity.name.function.erlang',\r\n              'text',\r\n              'punctuation.separator.function-arity.erlang' ],\r\n           regex: '\\\\b(fun)(\\\\s*)(?:([a-z][a-zA-Z\\\\d@_]*)(\\\\s*)(:)(\\\\s*))?([a-z][a-zA-Z\\\\d@_]*)(\\\\s*)(/)' },\r\n         { token: 'keyword.control.fun.erlang',\r\n           regex: '\\\\bfun\\\\b',\r\n           push: \r\n            [ { token: 'keyword.control.end.erlang',\r\n                regex: '\\\\bend\\\\b',\r\n                next: 'pop' },\r\n              { token: 'text',\r\n                regex: '(?=\\\\()',\r\n                push: \r\n                 [ { token: 'punctuation.separator.clauses.erlang',\r\n                     regex: ';|(?=\\\\bend\\\\b)',\r\n                     next: 'pop' },\r\n                   { include: '#internal-function-parts' } ] },\r\n              { include: '#everything-else' },\r\n              { defaultToken: 'meta.expression.fun.erlang' } ] },\r\n         { token: 'keyword.control.try.erlang',\r\n           regex: '\\\\btry\\\\b',\r\n           push: \r\n            [ { token: 'keyword.control.end.erlang',\r\n                regex: '\\\\bend\\\\b',\r\n                next: 'pop' },\r\n              { include: '#internal-expression-punctuation' },\r\n              { include: '#everything-else' },\r\n              { defaultToken: 'meta.expression.try.erlang' } ] },\r\n         { token: 'keyword.control.begin.erlang',\r\n           regex: '\\\\bbegin\\\\b',\r\n           push: \r\n            [ { token: 'keyword.control.end.erlang',\r\n                regex: '\\\\bend\\\\b',\r\n                next: 'pop' },\r\n              { include: '#internal-expression-punctuation' },\r\n              { include: '#everything-else' },\r\n              { defaultToken: 'meta.expression.begin.erlang' } ] },\r\n         { token: 'keyword.control.query.erlang',\r\n           regex: '\\\\bquery\\\\b',\r\n           push: \r\n            [ { token: 'keyword.control.end.erlang',\r\n                regex: '\\\\bend\\\\b',\r\n                next: 'pop' },\r\n              { include: '#everything-else' },\r\n              { defaultToken: 'meta.expression.query.erlang' } ] } ],\r\n      '#function': \r\n       [ { token: \r\n            [ 'meta.function.erlang',\r\n              'entity.name.function.definition.erlang',\r\n              'meta.function.erlang' ],\r\n           regex: '^(\\\\s*)([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')(\\\\s*)(?=\\\\()',\r\n           push: \r\n            [ { token: 'punctuation.terminator.function.erlang',\r\n                regex: '\\\\.',\r\n                next: 'pop' },\r\n              { token: [ 'text', 'entity.name.function.erlang', 'text' ],\r\n                regex: '^(\\\\s*)([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')(\\\\s*)(?=\\\\()' },\r\n              { token: 'text',\r\n                regex: '(?=\\\\()',\r\n                push: \r\n                 [ { token: 'punctuation.separator.clauses.erlang',\r\n                     regex: ';|(?=\\\\.)',\r\n                     next: 'pop' },\r\n                   { include: '#parenthesized-expression' },\r\n                   { include: '#internal-function-parts' } ] },\r\n              { include: '#everything-else' },\r\n              { defaultToken: 'meta.function.erlang' } ] } ],\r\n      '#function-call': \r\n       [ { token: 'meta.function-call.erlang',\r\n           regex: '(?=(?:[a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')\\\\s*(?:\\\\(|:\\\\s*(?:[a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')\\\\s*\\\\())',\r\n           push: \r\n            [ { token: 'punctuation.definition.parameters.end.erlang',\r\n                regex: '\\\\)',\r\n                next: 'pop' },\r\n              { token: \r\n                 [ 'entity.name.type.class.module.erlang',\r\n                   'text',\r\n                   'punctuation.separator.module-function.erlang',\r\n                   'text',\r\n                   'entity.name.function.guard.erlang',\r\n                   'text',\r\n                   'punctuation.definition.parameters.begin.erlang' ],\r\n                regex: '(?:(erlang)(\\\\s*)(:)(\\\\s*))?(is_atom|is_binary|is_constant|is_float|is_function|is_integer|is_list|is_number|is_pid|is_port|is_reference|is_tuple|is_record|abs|element|hd|length|node|round|self|size|tl|trunc)(\\\\s*)(\\\\()',\r\n                push: \r\n                 [ { token: 'text', regex: '(?=\\\\))', next: 'pop' },\r\n                   { token: 'punctuation.separator.parameters.erlang', regex: ',' },\r\n                   { include: '#everything-else' } ] },\r\n              { token: \r\n                 [ 'entity.name.type.class.module.erlang',\r\n                   'text',\r\n                   'punctuation.separator.module-function.erlang',\r\n                   'text',\r\n                   'entity.name.function.erlang',\r\n                   'text',\r\n                   'punctuation.definition.parameters.begin.erlang' ],\r\n                regex: '(?:([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')(\\\\s*)(:)(\\\\s*))?([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')(\\\\s*)(\\\\()',\r\n                push: \r\n                 [ { token: 'text', regex: '(?=\\\\))', next: 'pop' },\r\n                   { token: 'punctuation.separator.parameters.erlang', regex: ',' },\r\n                   { include: '#everything-else' } ] },\r\n              { defaultToken: 'meta.function-call.erlang' } ] } ],\r\n      '#import-export-directive': \r\n       [ { token: \r\n            [ 'meta.directive.import.erlang',\r\n              'punctuation.section.directive.begin.erlang',\r\n              'meta.directive.import.erlang',\r\n              'keyword.control.directive.import.erlang',\r\n              'meta.directive.import.erlang',\r\n              'punctuation.definition.parameters.begin.erlang',\r\n              'meta.directive.import.erlang',\r\n              'entity.name.type.class.module.erlang',\r\n              'meta.directive.import.erlang',\r\n              'punctuation.separator.parameters.erlang' ],\r\n           regex: '^(\\\\s*)(-)(\\\\s*)(import)(\\\\s*)(\\\\()(\\\\s*)([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')(\\\\s*)(,)',\r\n           push: \r\n            [ { token: \r\n                 [ 'punctuation.definition.parameters.end.erlang',\r\n                   'meta.directive.import.erlang',\r\n                   'punctuation.section.directive.end.erlang' ],\r\n                regex: '(\\\\))(\\\\s*)(\\\\.)',\r\n                next: 'pop' },\r\n              { include: '#internal-function-list' },\r\n              { defaultToken: 'meta.directive.import.erlang' } ] },\r\n         { token: \r\n            [ 'meta.directive.export.erlang',\r\n              'punctuation.section.directive.begin.erlang',\r\n              'meta.directive.export.erlang',\r\n              'keyword.control.directive.export.erlang',\r\n              'meta.directive.export.erlang',\r\n              'punctuation.definition.parameters.begin.erlang' ],\r\n           regex: '^(\\\\s*)(-)(\\\\s*)(export)(\\\\s*)(\\\\()',\r\n           push: \r\n            [ { token: \r\n                 [ 'punctuation.definition.parameters.end.erlang',\r\n                   'meta.directive.export.erlang',\r\n                   'punctuation.section.directive.end.erlang' ],\r\n                regex: '(\\\\))(\\\\s*)(\\\\.)',\r\n                next: 'pop' },\r\n              { include: '#internal-function-list' },\r\n              { defaultToken: 'meta.directive.export.erlang' } ] } ],\r\n      '#internal-expression-punctuation': \r\n       [ { token: \r\n            [ 'punctuation.separator.clause-head-body.erlang',\r\n              'punctuation.separator.clauses.erlang',\r\n              'punctuation.separator.expressions.erlang' ],\r\n           regex: '(->)|(;)|(,)' } ],\r\n      '#internal-function-list': \r\n       [ { token: 'punctuation.definition.list.begin.erlang',\r\n           regex: '\\\\[',\r\n           push: \r\n            [ { token: 'punctuation.definition.list.end.erlang',\r\n                regex: '\\\\]',\r\n                next: 'pop' },\r\n              { token: \r\n                 [ 'entity.name.function.erlang',\r\n                   'text',\r\n                   'punctuation.separator.function-arity.erlang' ],\r\n                regex: '([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')(\\\\s*)(/)',\r\n                push: \r\n                 [ { token: 'punctuation.separator.list.erlang',\r\n                     regex: ',|(?=\\\\])',\r\n                     next: 'pop' },\r\n                   { include: '#everything-else' } ] },\r\n              { include: '#everything-else' },\r\n              { defaultToken: 'meta.structure.list.function.erlang' } ] } ],\r\n      '#internal-function-parts': \r\n       [ { token: 'text',\r\n           regex: '(?=\\\\()',\r\n           push: \r\n            [ { token: 'punctuation.separator.clause-head-body.erlang',\r\n                regex: '->',\r\n                next: 'pop' },\r\n              { token: 'punctuation.definition.parameters.begin.erlang',\r\n                regex: '\\\\(',\r\n                push: \r\n                 [ { token: 'punctuation.definition.parameters.end.erlang',\r\n                     regex: '\\\\)',\r\n                     next: 'pop' },\r\n                   { token: 'punctuation.separator.parameters.erlang', regex: ',' },\r\n                   { include: '#everything-else' } ] },\r\n              { token: 'punctuation.separator.guards.erlang', regex: ',|;' },\r\n              { include: '#everything-else' } ] },\r\n         { token: 'punctuation.separator.expressions.erlang',\r\n           regex: ',' },\r\n         { include: '#everything-else' } ],\r\n      '#internal-record-body': \r\n       [ { token: 'punctuation.definition.class.record.begin.erlang',\r\n           regex: '\\\\{',\r\n           push: \r\n            [ { token: 'meta.structure.record.erlang',\r\n                regex: '(?=\\\\})',\r\n                next: 'pop' },\r\n              { token: \r\n                 [ 'variable.other.field.erlang',\r\n                   'variable.language.omitted.field.erlang',\r\n                   'text',\r\n                   'keyword.operator.assignment.erlang' ],\r\n                regex: '(?:([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')|(_))(\\\\s*)(=|::)',\r\n                push: \r\n                 [ { token: 'punctuation.separator.class.record.erlang',\r\n                     regex: ',|(?=\\\\})',\r\n                     next: 'pop' },\r\n                   { include: '#everything-else' } ] },\r\n              { token: \r\n                 [ 'variable.other.field.erlang',\r\n                   'text',\r\n                   'punctuation.separator.class.record.erlang' ],\r\n                regex: '([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')(\\\\s*)((?:,)?)' },\r\n              { include: '#everything-else' },\r\n              { defaultToken: 'meta.structure.record.erlang' } ] } ],\r\n      '#internal-type-specifiers': \r\n       [ { token: 'punctuation.separator.value-type.erlang',\r\n           regex: '/',\r\n           push: \r\n            [ { token: 'text', regex: '(?=,|:|>>)', next: 'pop' },\r\n              { token: \r\n                 [ 'storage.type.erlang',\r\n                   'storage.modifier.signedness.erlang',\r\n                   'storage.modifier.endianness.erlang',\r\n                   'storage.modifier.unit.erlang',\r\n                   'punctuation.separator.type-specifiers.erlang' ],\r\n                regex: '(integer|float|binary|bytes|bitstring|bits)|(signed|unsigned)|(big|little|native)|(unit)|(-)' } ] } ],\r\n      '#keyword': \r\n       [ { token: 'keyword.control.erlang',\r\n           regex: '\\\\b(?:after|begin|case|catch|cond|end|fun|if|let|of|query|try|receive|when)\\\\b' } ],\r\n      '#list': \r\n       [ { token: 'punctuation.definition.list.begin.erlang',\r\n           regex: '\\\\[',\r\n           push: \r\n            [ { token: 'punctuation.definition.list.end.erlang',\r\n                regex: '\\\\]',\r\n                next: 'pop' },\r\n              { token: 'punctuation.separator.list.erlang',\r\n                regex: '\\\\||\\\\|\\\\||,' },\r\n              { include: '#everything-else' },\r\n              { defaultToken: 'meta.structure.list.erlang' } ] } ],\r\n      '#macro-directive': \r\n       [ { token: \r\n            [ 'meta.directive.ifdef.erlang',\r\n              'punctuation.section.directive.begin.erlang',\r\n              'meta.directive.ifdef.erlang',\r\n              'keyword.control.directive.ifdef.erlang',\r\n              'meta.directive.ifdef.erlang',\r\n              'punctuation.definition.parameters.begin.erlang',\r\n              'meta.directive.ifdef.erlang',\r\n              'entity.name.function.macro.erlang',\r\n              'meta.directive.ifdef.erlang',\r\n              'punctuation.definition.parameters.end.erlang',\r\n              'meta.directive.ifdef.erlang',\r\n              'punctuation.section.directive.end.erlang' ],\r\n           regex: '^(\\\\s*)(-)(\\\\s*)(ifdef)(\\\\s*)(\\\\()(\\\\s*)([a-zA-Z\\\\d@_]+)(\\\\s*)(\\\\))(\\\\s*)(\\\\.)' },\r\n         { token: \r\n            [ 'meta.directive.ifndef.erlang',\r\n              'punctuation.section.directive.begin.erlang',\r\n              'meta.directive.ifndef.erlang',\r\n              'keyword.control.directive.ifndef.erlang',\r\n              'meta.directive.ifndef.erlang',\r\n              'punctuation.definition.parameters.begin.erlang',\r\n              'meta.directive.ifndef.erlang',\r\n              'entity.name.function.macro.erlang',\r\n              'meta.directive.ifndef.erlang',\r\n              'punctuation.definition.parameters.end.erlang',\r\n              'meta.directive.ifndef.erlang',\r\n              'punctuation.section.directive.end.erlang' ],\r\n           regex: '^(\\\\s*)(-)(\\\\s*)(ifndef)(\\\\s*)(\\\\()(\\\\s*)([a-zA-Z\\\\d@_]+)(\\\\s*)(\\\\))(\\\\s*)(\\\\.)' },\r\n         { token: \r\n            [ 'meta.directive.undef.erlang',\r\n              'punctuation.section.directive.begin.erlang',\r\n              'meta.directive.undef.erlang',\r\n              'keyword.control.directive.undef.erlang',\r\n              'meta.directive.undef.erlang',\r\n              'punctuation.definition.parameters.begin.erlang',\r\n              'meta.directive.undef.erlang',\r\n              'entity.name.function.macro.erlang',\r\n              'meta.directive.undef.erlang',\r\n              'punctuation.definition.parameters.end.erlang',\r\n              'meta.directive.undef.erlang',\r\n              'punctuation.section.directive.end.erlang' ],\r\n           regex: '^(\\\\s*)(-)(\\\\s*)(undef)(\\\\s*)(\\\\()(\\\\s*)([a-zA-Z\\\\d@_]+)(\\\\s*)(\\\\))(\\\\s*)(\\\\.)' } ],\r\n      '#macro-usage': \r\n       [ { token: \r\n            [ 'keyword.operator.macro.erlang',\r\n              'meta.macro-usage.erlang',\r\n              'entity.name.function.macro.erlang' ],\r\n           regex: '(\\\\?\\\\??)(\\\\s*)([a-zA-Z\\\\d@_]+)' } ],\r\n      '#module-directive': \r\n       [ { token: \r\n            [ 'meta.directive.module.erlang',\r\n              'punctuation.section.directive.begin.erlang',\r\n              'meta.directive.module.erlang',\r\n              'keyword.control.directive.module.erlang',\r\n              'meta.directive.module.erlang',\r\n              'punctuation.definition.parameters.begin.erlang',\r\n              'meta.directive.module.erlang',\r\n              'entity.name.type.class.module.definition.erlang',\r\n              'meta.directive.module.erlang',\r\n              'punctuation.definition.parameters.end.erlang',\r\n              'meta.directive.module.erlang',\r\n              'punctuation.section.directive.end.erlang' ],\r\n           regex: '^(\\\\s*)(-)(\\\\s*)(module)(\\\\s*)(\\\\()(\\\\s*)([a-z][a-zA-Z\\\\d@_]*)(\\\\s*)(\\\\))(\\\\s*)(\\\\.)' } ],\r\n      '#number': \r\n       [ { token: 'text',\r\n           regex: '(?=\\\\d)',\r\n           push: \r\n            [ { token: 'text', regex: '(?!\\\\d)', next: 'pop' },\r\n              { token: \r\n                 [ 'constant.numeric.float.erlang',\r\n                   'punctuation.separator.integer-float.erlang',\r\n                   'constant.numeric.float.erlang',\r\n                   'punctuation.separator.float-exponent.erlang' ],\r\n                regex: '(\\\\d+)(\\\\.)(\\\\d+)((?:[eE][\\\\+\\\\-]?\\\\d+)?)' },\r\n              { token: \r\n                 [ 'constant.numeric.integer.binary.erlang',\r\n                   'punctuation.separator.base-integer.erlang',\r\n                   'constant.numeric.integer.binary.erlang' ],\r\n                regex: '(2)(#)([0-1]+)' },\r\n              { token: \r\n                 [ 'constant.numeric.integer.base-3.erlang',\r\n                   'punctuation.separator.base-integer.erlang',\r\n                   'constant.numeric.integer.base-3.erlang' ],\r\n                regex: '(3)(#)([0-2]+)' },\r\n              { token: \r\n                 [ 'constant.numeric.integer.base-4.erlang',\r\n                   'punctuation.separator.base-integer.erlang',\r\n                   'constant.numeric.integer.base-4.erlang' ],\r\n                regex: '(4)(#)([0-3]+)' },\r\n              { token: \r\n                 [ 'constant.numeric.integer.base-5.erlang',\r\n                   'punctuation.separator.base-integer.erlang',\r\n                   'constant.numeric.integer.base-5.erlang' ],\r\n                regex: '(5)(#)([0-4]+)' },\r\n              { token: \r\n                 [ 'constant.numeric.integer.base-6.erlang',\r\n                   'punctuation.separator.base-integer.erlang',\r\n                   'constant.numeric.integer.base-6.erlang' ],\r\n                regex: '(6)(#)([0-5]+)' },\r\n              { token: \r\n                 [ 'constant.numeric.integer.base-7.erlang',\r\n                   'punctuation.separator.base-integer.erlang',\r\n                   'constant.numeric.integer.base-7.erlang' ],\r\n                regex: '(7)(#)([0-6]+)' },\r\n              { token: \r\n                 [ 'constant.numeric.integer.octal.erlang',\r\n                   'punctuation.separator.base-integer.erlang',\r\n                   'constant.numeric.integer.octal.erlang' ],\r\n                regex: '(8)(#)([0-7]+)' },\r\n              { token: \r\n                 [ 'constant.numeric.integer.base-9.erlang',\r\n                   'punctuation.separator.base-integer.erlang',\r\n                   'constant.numeric.integer.base-9.erlang' ],\r\n                regex: '(9)(#)([0-8]+)' },\r\n              { token: \r\n                 [ 'constant.numeric.integer.decimal.erlang',\r\n                   'punctuation.separator.base-integer.erlang',\r\n                   'constant.numeric.integer.decimal.erlang' ],\r\n                regex: '(10)(#)(\\\\d+)' },\r\n              { token: \r\n                 [ 'constant.numeric.integer.base-11.erlang',\r\n                   'punctuation.separator.base-integer.erlang',\r\n                   'constant.numeric.integer.base-11.erlang' ],\r\n                regex: '(11)(#)([\\\\daA]+)' },\r\n              { token: \r\n                 [ 'constant.numeric.integer.base-12.erlang',\r\n                   'punctuation.separator.base-integer.erlang',\r\n                   'constant.numeric.integer.base-12.erlang' ],\r\n                regex: '(12)(#)([\\\\da-bA-B]+)' },\r\n              { token: \r\n                 [ 'constant.numeric.integer.base-13.erlang',\r\n                   'punctuation.separator.base-integer.erlang',\r\n                   'constant.numeric.integer.base-13.erlang' ],\r\n                regex: '(13)(#)([\\\\da-cA-C]+)' },\r\n              { token: \r\n                 [ 'constant.numeric.integer.base-14.erlang',\r\n                   'punctuation.separator.base-integer.erlang',\r\n                   'constant.numeric.integer.base-14.erlang' ],\r\n                regex: '(14)(#)([\\\\da-dA-D]+)' },\r\n              { token: \r\n                 [ 'constant.numeric.integer.base-15.erlang',\r\n                   'punctuation.separator.base-integer.erlang',\r\n                   'constant.numeric.integer.base-15.erlang' ],\r\n                regex: '(15)(#)([\\\\da-eA-E]+)' },\r\n              { token: \r\n                 [ 'constant.numeric.integer.hexadecimal.erlang',\r\n                   'punctuation.separator.base-integer.erlang',\r\n                   'constant.numeric.integer.hexadecimal.erlang' ],\r\n                regex: '(16)(#)([\\\\da-fA-F]+)' },\r\n              { token: \r\n                 [ 'constant.numeric.integer.base-17.erlang',\r\n                   'punctuation.separator.base-integer.erlang',\r\n                   'constant.numeric.integer.base-17.erlang' ],\r\n                regex: '(17)(#)([\\\\da-gA-G]+)' },\r\n              { token: \r\n                 [ 'constant.numeric.integer.base-18.erlang',\r\n                   'punctuation.separator.base-integer.erlang',\r\n                   'constant.numeric.integer.base-18.erlang' ],\r\n                regex: '(18)(#)([\\\\da-hA-H]+)' },\r\n              { token: \r\n                 [ 'constant.numeric.integer.base-19.erlang',\r\n                   'punctuation.separator.base-integer.erlang',\r\n                   'constant.numeric.integer.base-19.erlang' ],\r\n                regex: '(19)(#)([\\\\da-iA-I]+)' },\r\n              { token: \r\n                 [ 'constant.numeric.integer.base-20.erlang',\r\n                   'punctuation.separator.base-integer.erlang',\r\n                   'constant.numeric.integer.base-20.erlang' ],\r\n                regex: '(20)(#)([\\\\da-jA-J]+)' },\r\n              { token: \r\n                 [ 'constant.numeric.integer.base-21.erlang',\r\n                   'punctuation.separator.base-integer.erlang',\r\n                   'constant.numeric.integer.base-21.erlang' ],\r\n                regex: '(21)(#)([\\\\da-kA-K]+)' },\r\n              { token: \r\n                 [ 'constant.numeric.integer.base-22.erlang',\r\n                   'punctuation.separator.base-integer.erlang',\r\n                   'constant.numeric.integer.base-22.erlang' ],\r\n                regex: '(22)(#)([\\\\da-lA-L]+)' },\r\n              { token: \r\n                 [ 'constant.numeric.integer.base-23.erlang',\r\n                   'punctuation.separator.base-integer.erlang',\r\n                   'constant.numeric.integer.base-23.erlang' ],\r\n                regex: '(23)(#)([\\\\da-mA-M]+)' },\r\n              { token: \r\n                 [ 'constant.numeric.integer.base-24.erlang',\r\n                   'punctuation.separator.base-integer.erlang',\r\n                   'constant.numeric.integer.base-24.erlang' ],\r\n                regex: '(24)(#)([\\\\da-nA-N]+)' },\r\n              { token: \r\n                 [ 'constant.numeric.integer.base-25.erlang',\r\n                   'punctuation.separator.base-integer.erlang',\r\n                   'constant.numeric.integer.base-25.erlang' ],\r\n                regex: '(25)(#)([\\\\da-oA-O]+)' },\r\n              { token: \r\n                 [ 'constant.numeric.integer.base-26.erlang',\r\n                   'punctuation.separator.base-integer.erlang',\r\n                   'constant.numeric.integer.base-26.erlang' ],\r\n                regex: '(26)(#)([\\\\da-pA-P]+)' },\r\n              { token: \r\n                 [ 'constant.numeric.integer.base-27.erlang',\r\n                   'punctuation.separator.base-integer.erlang',\r\n                   'constant.numeric.integer.base-27.erlang' ],\r\n                regex: '(27)(#)([\\\\da-qA-Q]+)' },\r\n              { token: \r\n                 [ 'constant.numeric.integer.base-28.erlang',\r\n                   'punctuation.separator.base-integer.erlang',\r\n                   'constant.numeric.integer.base-28.erlang' ],\r\n                regex: '(28)(#)([\\\\da-rA-R]+)' },\r\n              { token: \r\n                 [ 'constant.numeric.integer.base-29.erlang',\r\n                   'punctuation.separator.base-integer.erlang',\r\n                   'constant.numeric.integer.base-29.erlang' ],\r\n                regex: '(29)(#)([\\\\da-sA-S]+)' },\r\n              { token: \r\n                 [ 'constant.numeric.integer.base-30.erlang',\r\n                   'punctuation.separator.base-integer.erlang',\r\n                   'constant.numeric.integer.base-30.erlang' ],\r\n                regex: '(30)(#)([\\\\da-tA-T]+)' },\r\n              { token: \r\n                 [ 'constant.numeric.integer.base-31.erlang',\r\n                   'punctuation.separator.base-integer.erlang',\r\n                   'constant.numeric.integer.base-31.erlang' ],\r\n                regex: '(31)(#)([\\\\da-uA-U]+)' },\r\n              { token: \r\n                 [ 'constant.numeric.integer.base-32.erlang',\r\n                   'punctuation.separator.base-integer.erlang',\r\n                   'constant.numeric.integer.base-32.erlang' ],\r\n                regex: '(32)(#)([\\\\da-vA-V]+)' },\r\n              { token: \r\n                 [ 'constant.numeric.integer.base-33.erlang',\r\n                   'punctuation.separator.base-integer.erlang',\r\n                   'constant.numeric.integer.base-33.erlang' ],\r\n                regex: '(33)(#)([\\\\da-wA-W]+)' },\r\n              { token: \r\n                 [ 'constant.numeric.integer.base-34.erlang',\r\n                   'punctuation.separator.base-integer.erlang',\r\n                   'constant.numeric.integer.base-34.erlang' ],\r\n                regex: '(34)(#)([\\\\da-xA-X]+)' },\r\n              { token: \r\n                 [ 'constant.numeric.integer.base-35.erlang',\r\n                   'punctuation.separator.base-integer.erlang',\r\n                   'constant.numeric.integer.base-35.erlang' ],\r\n                regex: '(35)(#)([\\\\da-yA-Y]+)' },\r\n              { token: \r\n                 [ 'constant.numeric.integer.base-36.erlang',\r\n                   'punctuation.separator.base-integer.erlang',\r\n                   'constant.numeric.integer.base-36.erlang' ],\r\n                regex: '(36)(#)([\\\\da-zA-Z]+)' },\r\n              { token: 'invalid.illegal.integer.erlang',\r\n                regex: '\\\\d+#[\\\\da-zA-Z]+' },\r\n              { token: 'constant.numeric.integer.decimal.erlang',\r\n                regex: '\\\\d+' } ] } ],\r\n      '#parenthesized-expression': \r\n       [ { token: 'punctuation.section.expression.begin.erlang',\r\n           regex: '\\\\(',\r\n           push: \r\n            [ { token: 'punctuation.section.expression.end.erlang',\r\n                regex: '\\\\)',\r\n                next: 'pop' },\r\n              { include: '#everything-else' },\r\n              { defaultToken: 'meta.expression.parenthesized' } ] } ],\r\n      '#record-directive': \r\n       [ { token: \r\n            [ 'meta.directive.record.erlang',\r\n              'punctuation.section.directive.begin.erlang',\r\n              'meta.directive.record.erlang',\r\n              'keyword.control.directive.import.erlang',\r\n              'meta.directive.record.erlang',\r\n              'punctuation.definition.parameters.begin.erlang',\r\n              'meta.directive.record.erlang',\r\n              'entity.name.type.class.record.definition.erlang',\r\n              'meta.directive.record.erlang',\r\n              'punctuation.separator.parameters.erlang' ],\r\n           regex: '^(\\\\s*)(-)(\\\\s*)(record)(\\\\s*)(\\\\()(\\\\s*)([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')(\\\\s*)(,)',\r\n           push: \r\n            [ { token: \r\n                 [ 'punctuation.definition.class.record.end.erlang',\r\n                   'meta.directive.record.erlang',\r\n                   'punctuation.definition.parameters.end.erlang',\r\n                   'meta.directive.record.erlang',\r\n                   'punctuation.section.directive.end.erlang' ],\r\n                regex: '(\\\\})(\\\\s*)(\\\\))(\\\\s*)(\\\\.)',\r\n                next: 'pop' },\r\n              { include: '#internal-record-body' },\r\n              { defaultToken: 'meta.directive.record.erlang' } ] } ],\r\n      '#record-usage': \r\n       [ { token: \r\n            [ 'keyword.operator.record.erlang',\r\n              'meta.record-usage.erlang',\r\n              'entity.name.type.class.record.erlang',\r\n              'meta.record-usage.erlang',\r\n              'punctuation.separator.record-field.erlang',\r\n              'meta.record-usage.erlang',\r\n              'variable.other.field.erlang' ],\r\n           regex: '(#)(\\\\s*)([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')(\\\\s*)(\\\\.)(\\\\s*)([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')' },\r\n         { token: \r\n            [ 'keyword.operator.record.erlang',\r\n              'meta.record-usage.erlang',\r\n              'entity.name.type.class.record.erlang' ],\r\n           regex: '(#)(\\\\s*)([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')',\r\n           push: \r\n            [ { token: 'punctuation.definition.class.record.end.erlang',\r\n                regex: '\\\\}',\r\n                next: 'pop' },\r\n              { include: '#internal-record-body' },\r\n              { defaultToken: 'meta.record-usage.erlang' } ] } ],\r\n      '#string': \r\n       [ { token: 'punctuation.definition.string.begin.erlang',\r\n           regex: '\"',\r\n           push: \r\n            [ { token: 'punctuation.definition.string.end.erlang',\r\n                regex: '\"',\r\n                next: 'pop' },\r\n              { token: \r\n                 [ 'punctuation.definition.escape.erlang',\r\n                   'constant.character.escape.erlang',\r\n                   'punctuation.definition.escape.erlang',\r\n                   'constant.character.escape.erlang',\r\n                   'constant.character.escape.erlang' ],\r\n                regex: '(\\\\\\\\)(?:([bdefnrstv\\\\\\\\\\'\"])|(\\\\^)([@-_])|([0-7]{1,3}))' },\r\n              { token: 'invalid.illegal.string.erlang', regex: '\\\\\\\\\\\\^?.?' },\r\n              { token: \r\n                 [ 'punctuation.definition.placeholder.erlang',\r\n                   'punctuation.separator.placeholder-parts.erlang',\r\n                   'constant.other.placeholder.erlang',\r\n                   'punctuation.separator.placeholder-parts.erlang',\r\n                   'punctuation.separator.placeholder-parts.erlang',\r\n                   'constant.other.placeholder.erlang',\r\n                   'punctuation.separator.placeholder-parts.erlang',\r\n                   'punctuation.separator.placeholder-parts.erlang',\r\n                   'punctuation.separator.placeholder-parts.erlang',\r\n                   'constant.other.placeholder.erlang',\r\n                   'constant.other.placeholder.erlang' ],\r\n                regex: '(~)(?:((?:\\\\-)?)(\\\\d+)|(\\\\*))?(?:(\\\\.)(?:(\\\\d+)|(\\\\*)))?(?:(\\\\.)(?:(\\\\*)|(.)))?([~cfegswpWPBX#bx\\\\+ni])' },\r\n              { token: \r\n                 [ 'punctuation.definition.placeholder.erlang',\r\n                   'punctuation.separator.placeholder-parts.erlang',\r\n                   'constant.other.placeholder.erlang',\r\n                   'constant.other.placeholder.erlang' ],\r\n                regex: '(~)((?:\\\\*)?)((?:\\\\d+)?)([~du\\\\-#fsacl])' },\r\n              { token: 'invalid.illegal.string.erlang', regex: '~.?' },\r\n              { defaultToken: 'string.quoted.double.erlang' } ] } ],\r\n      '#symbolic-operator': \r\n       [ { token: 'keyword.operator.symbolic.erlang',\r\n           regex: '\\\\+\\\\+|\\\\+|--|-|\\\\*|/=|/|=/=|=:=|==|=<|=|<-|<|>=|>|!|::' } ],\r\n      '#textual-operator': \r\n       [ { token: 'keyword.operator.textual.erlang',\r\n           regex: '\\\\b(?:andalso|band|and|bxor|xor|bor|orelse|or|bnot|not|bsl|bsr|div|rem)\\\\b' } ],\r\n      '#tuple': \r\n       [ { token: 'punctuation.definition.tuple.begin.erlang',\r\n           regex: '\\\\{',\r\n           push: \r\n            [ { token: 'punctuation.definition.tuple.end.erlang',\r\n                regex: '\\\\}',\r\n                next: 'pop' },\r\n              { token: 'punctuation.separator.tuple.erlang', regex: ',' },\r\n              { include: '#everything-else' },\r\n              { defaultToken: 'meta.structure.tuple.erlang' } ] } ],\r\n      '#variable': \r\n       [ { token: [ 'variable.other.erlang', 'variable.language.omitted.erlang' ],\r\n           regex: '(_[a-zA-Z\\\\d@_]+|[A-Z][a-zA-Z\\\\d@_]*)|(_)' } ] };\r\n    \r\n    this.normalizeRules();\r\n};\r\n\r\nErlangHighlightRules.metaData = { comment: 'The recognition of function definitions and compiler directives (such as module, record and macro definitions) requires that each of the aforementioned constructs must be the first string inside a line (except for whitespace).  Also, the function/module/record/macro names must be given unquoted.  -- desp',\r\n      fileTypes: [ 'erl', 'hrl' ],\r\n      keyEquivalent: '^~E',\r\n      name: 'Erlang',\r\n      scopeName: 'source.erlang' };\r\n\r\n\r\noop.inherits(ErlangHighlightRules, TextHighlightRules);\r\n\r\nexports.ErlangHighlightRules = ErlangHighlightRules;\r\n});\r\n"]}