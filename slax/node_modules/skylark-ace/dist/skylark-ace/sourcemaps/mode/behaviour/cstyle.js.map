{"version":3,"sources":["mode/behaviour/cstyle.js"],"names":["define","require","exports","module","context","oop","Behaviour","TokenIterator","lang","SAFE_INSERT_IN_TOKENS","SAFE_INSERT_BEFORE_TOKENS","contextCache","defaultQuotes","\"","'","initContext","editor","id","multiSelect","selection","index","rangeCount","autoInsertedBrackets","autoInsertedRow","autoInsertedLineEnd","maybeInsertedBrackets","maybeInsertedRow","maybeInsertedLineStart","maybeInsertedLineEnd","getWrapped","selected","opening","closing","rowDiff","end","row","start","text","column","CstyleBehaviour","options","this","add","state","action","session","cursor","getCursorPosition","line","doc","getLine","getSelectionRange","getTextRange","getWrapBehavioursEnabled","isSaneInsertion","test","inMultiSelectMode","braces","recordAutoInsert","recordMaybeInsert","substring","$findOpeningBracket","isAutoInsertedClosing","popAutoInsertedClosing","isMaybeInsertedClosing","stringRepeat","clearMaybeInsertedClosing","openBracePos","findMatchingBracket","next_indent","$getIndent","indent","getTabString","length","range","isMultiLine","quotes","$mode","$quotes","lineCommentStart","indexOf","quote","leftChar","rightChar","token","getTokenAt","rightToken","type","pair","stringBefore","stringAfter","wordRe","tokenRe","lastIndex","isWordBefore","isWordAfter","hasOwnProperty","iterator","$matchTokenType","getCurrentToken","iterator2","stepForward","getCurrentTokenRow","types","bracket","substr","inherits"],"mappings":"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","file":"../../../mode/behaviour/cstyle.js","sourcesContent":["/* ***** BEGIN LICENSE BLOCK *****\r\n * Distributed under the BSD license:\r\n *\r\n * Copyright (c) 2010, Ajax.org B.V.\r\n * All rights reserved.\r\n * \r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *     * Redistributions of source code must retain the above copyright\r\n *       notice, this list of conditions and the following disclaimer.\r\n *     * Redistributions in binary form must reproduce the above copyright\r\n *       notice, this list of conditions and the following disclaimer in the\r\n *       documentation and/or other materials provided with the distribution.\r\n *     * Neither the name of Ajax.org B.V. nor the\r\n *       names of its contributors may be used to endorse or promote products\r\n *       derived from this software without specific prior written permission.\r\n * \r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\r\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY\r\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\r\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\r\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n *\r\n * ***** END LICENSE BLOCK ***** */\r\n\r\ndefine(function(require, exports, module) {\r\n\"use strict\";\r\n\r\nvar oop = require(\"../../lib/oop\");\r\nvar Behaviour = require(\"../behaviour\").Behaviour;\r\nvar TokenIterator = require(\"../../token_iterator\").TokenIterator;\r\nvar lang = require(\"../../lib/lang\");\r\n\r\nvar SAFE_INSERT_IN_TOKENS =\r\n    [\"text\", \"paren.rparen\", \"punctuation.operator\"];\r\nvar SAFE_INSERT_BEFORE_TOKENS =\r\n    [\"text\", \"paren.rparen\", \"punctuation.operator\", \"comment\"];\r\n\r\nvar context;\r\nvar contextCache = {};\r\nvar defaultQuotes = {'\"' : '\"', \"'\" : \"'\"};\r\n\r\nvar initContext = function(editor) {\r\n    var id = -1;\r\n    if (editor.multiSelect) {\r\n        id = editor.selection.index;\r\n        if (contextCache.rangeCount != editor.multiSelect.rangeCount)\r\n            contextCache = {rangeCount: editor.multiSelect.rangeCount};\r\n    }\r\n    if (contextCache[id])\r\n        return context = contextCache[id];\r\n    context = contextCache[id] = {\r\n        autoInsertedBrackets: 0,\r\n        autoInsertedRow: -1,\r\n        autoInsertedLineEnd: \"\",\r\n        maybeInsertedBrackets: 0,\r\n        maybeInsertedRow: -1,\r\n        maybeInsertedLineStart: \"\",\r\n        maybeInsertedLineEnd: \"\"\r\n    };\r\n};\r\n\r\nvar getWrapped = function(selection, selected, opening, closing) {\r\n    var rowDiff = selection.end.row - selection.start.row;\r\n    return {\r\n        text: opening + selected + closing,\r\n        selection: [\r\n                0,\r\n                selection.start.column + 1,\r\n                rowDiff,\r\n                selection.end.column + (rowDiff ? 0 : 1)\r\n            ]\r\n    };\r\n};\r\n\r\nvar CstyleBehaviour = function(options) {\r\n    this.add(\"braces\", \"insertion\", function(state, action, editor, session, text) {\r\n        var cursor = editor.getCursorPosition();\r\n        var line = session.doc.getLine(cursor.row);\r\n        if (text == '{') {\r\n            initContext(editor);\r\n            var selection = editor.getSelectionRange();\r\n            var selected = session.doc.getTextRange(selection);\r\n            if (selected !== \"\" && selected !== \"{\" && editor.getWrapBehavioursEnabled()) {\r\n                return getWrapped(selection, selected, '{', '}');\r\n            } else if (CstyleBehaviour.isSaneInsertion(editor, session)) {\r\n                if (/[\\]\\}\\)]/.test(line[cursor.column]) || editor.inMultiSelectMode || options && options.braces) {\r\n                    CstyleBehaviour.recordAutoInsert(editor, session, \"}\");\r\n                    return {\r\n                        text: '{}',\r\n                        selection: [1, 1]\r\n                    };\r\n                } else {\r\n                    CstyleBehaviour.recordMaybeInsert(editor, session, \"{\");\r\n                    return {\r\n                        text: '{',\r\n                        selection: [1, 1]\r\n                    };\r\n                }\r\n            }\r\n        } else if (text == '}') {\r\n            initContext(editor);\r\n            var rightChar = line.substring(cursor.column, cursor.column + 1);\r\n            if (rightChar == '}') {\r\n                var matching = session.$findOpeningBracket('}', {column: cursor.column + 1, row: cursor.row});\r\n                if (matching !== null && CstyleBehaviour.isAutoInsertedClosing(cursor, line, text)) {\r\n                    CstyleBehaviour.popAutoInsertedClosing();\r\n                    return {\r\n                        text: '',\r\n                        selection: [1, 1]\r\n                    };\r\n                }\r\n            }\r\n        } else if (text == \"\\n\" || text == \"\\r\\n\") {\r\n            initContext(editor);\r\n            var closing = \"\";\r\n            if (CstyleBehaviour.isMaybeInsertedClosing(cursor, line)) {\r\n                closing = lang.stringRepeat(\"}\", context.maybeInsertedBrackets);\r\n                CstyleBehaviour.clearMaybeInsertedClosing();\r\n            }\r\n            var rightChar = line.substring(cursor.column, cursor.column + 1);\r\n            if (rightChar === '}') {\r\n                var openBracePos = session.findMatchingBracket({row: cursor.row, column: cursor.column+1}, '}');\r\n                if (!openBracePos)\r\n                     return null;\r\n                var next_indent = this.$getIndent(session.getLine(openBracePos.row));\r\n            } else if (closing) {\r\n                var next_indent = this.$getIndent(line);\r\n            } else {\r\n                CstyleBehaviour.clearMaybeInsertedClosing();\r\n                return;\r\n            }\r\n            var indent = next_indent + session.getTabString();\r\n\r\n            return {\r\n                text: '\\n' + indent + '\\n' + next_indent + closing,\r\n                selection: [1, indent.length, 1, indent.length]\r\n            };\r\n        } else {\r\n            CstyleBehaviour.clearMaybeInsertedClosing();\r\n        }\r\n    });\r\n\r\n    this.add(\"braces\", \"deletion\", function(state, action, editor, session, range) {\r\n        var selected = session.doc.getTextRange(range);\r\n        if (!range.isMultiLine() && selected == '{') {\r\n            initContext(editor);\r\n            var line = session.doc.getLine(range.start.row);\r\n            var rightChar = line.substring(range.end.column, range.end.column + 1);\r\n            if (rightChar == '}') {\r\n                range.end.column++;\r\n                return range;\r\n            } else {\r\n                context.maybeInsertedBrackets--;\r\n            }\r\n        }\r\n    });\r\n\r\n    this.add(\"parens\", \"insertion\", function(state, action, editor, session, text) {\r\n        if (text == '(') {\r\n            initContext(editor);\r\n            var selection = editor.getSelectionRange();\r\n            var selected = session.doc.getTextRange(selection);\r\n            if (selected !== \"\" && editor.getWrapBehavioursEnabled()) {\r\n                return getWrapped(selection, selected, '(', ')');\r\n            } else if (CstyleBehaviour.isSaneInsertion(editor, session)) {\r\n                CstyleBehaviour.recordAutoInsert(editor, session, \")\");\r\n                return {\r\n                    text: '()',\r\n                    selection: [1, 1]\r\n                };\r\n            }\r\n        } else if (text == ')') {\r\n            initContext(editor);\r\n            var cursor = editor.getCursorPosition();\r\n            var line = session.doc.getLine(cursor.row);\r\n            var rightChar = line.substring(cursor.column, cursor.column + 1);\r\n            if (rightChar == ')') {\r\n                var matching = session.$findOpeningBracket(')', {column: cursor.column + 1, row: cursor.row});\r\n                if (matching !== null && CstyleBehaviour.isAutoInsertedClosing(cursor, line, text)) {\r\n                    CstyleBehaviour.popAutoInsertedClosing();\r\n                    return {\r\n                        text: '',\r\n                        selection: [1, 1]\r\n                    };\r\n                }\r\n            }\r\n        }\r\n    });\r\n\r\n    this.add(\"parens\", \"deletion\", function(state, action, editor, session, range) {\r\n        var selected = session.doc.getTextRange(range);\r\n        if (!range.isMultiLine() && selected == '(') {\r\n            initContext(editor);\r\n            var line = session.doc.getLine(range.start.row);\r\n            var rightChar = line.substring(range.start.column + 1, range.start.column + 2);\r\n            if (rightChar == ')') {\r\n                range.end.column++;\r\n                return range;\r\n            }\r\n        }\r\n    });\r\n\r\n    this.add(\"brackets\", \"insertion\", function(state, action, editor, session, text) {\r\n        if (text == '[') {\r\n            initContext(editor);\r\n            var selection = editor.getSelectionRange();\r\n            var selected = session.doc.getTextRange(selection);\r\n            if (selected !== \"\" && editor.getWrapBehavioursEnabled()) {\r\n                return getWrapped(selection, selected, '[', ']');\r\n            } else if (CstyleBehaviour.isSaneInsertion(editor, session)) {\r\n                CstyleBehaviour.recordAutoInsert(editor, session, \"]\");\r\n                return {\r\n                    text: '[]',\r\n                    selection: [1, 1]\r\n                };\r\n            }\r\n        } else if (text == ']') {\r\n            initContext(editor);\r\n            var cursor = editor.getCursorPosition();\r\n            var line = session.doc.getLine(cursor.row);\r\n            var rightChar = line.substring(cursor.column, cursor.column + 1);\r\n            if (rightChar == ']') {\r\n                var matching = session.$findOpeningBracket(']', {column: cursor.column + 1, row: cursor.row});\r\n                if (matching !== null && CstyleBehaviour.isAutoInsertedClosing(cursor, line, text)) {\r\n                    CstyleBehaviour.popAutoInsertedClosing();\r\n                    return {\r\n                        text: '',\r\n                        selection: [1, 1]\r\n                    };\r\n                }\r\n            }\r\n        }\r\n    });\r\n\r\n    this.add(\"brackets\", \"deletion\", function(state, action, editor, session, range) {\r\n        var selected = session.doc.getTextRange(range);\r\n        if (!range.isMultiLine() && selected == '[') {\r\n            initContext(editor);\r\n            var line = session.doc.getLine(range.start.row);\r\n            var rightChar = line.substring(range.start.column + 1, range.start.column + 2);\r\n            if (rightChar == ']') {\r\n                range.end.column++;\r\n                return range;\r\n            }\r\n        }\r\n    });\r\n\r\n    this.add(\"string_dquotes\", \"insertion\", function(state, action, editor, session, text) {\r\n        var quotes = session.$mode.$quotes || defaultQuotes;\r\n        if (text.length == 1 && quotes[text]) {\r\n            if (this.lineCommentStart && this.lineCommentStart.indexOf(text) != -1) \r\n                return;\r\n            initContext(editor);\r\n            var quote = text;\r\n            var selection = editor.getSelectionRange();\r\n            var selected = session.doc.getTextRange(selection);\r\n            if (selected !== \"\" && (selected.length != 1 || !quotes[selected]) && editor.getWrapBehavioursEnabled()) {\r\n                return getWrapped(selection, selected, quote, quote);\r\n            } else if (!selected) {\r\n                var cursor = editor.getCursorPosition();\r\n                var line = session.doc.getLine(cursor.row);\r\n                var leftChar = line.substring(cursor.column-1, cursor.column);\r\n                var rightChar = line.substring(cursor.column, cursor.column + 1);\r\n                \r\n                var token = session.getTokenAt(cursor.row, cursor.column);\r\n                var rightToken = session.getTokenAt(cursor.row, cursor.column + 1);\r\n                // We're escaped.\r\n                if (leftChar == \"\\\\\" && token && /escape/.test(token.type))\r\n                    return null;\r\n                \r\n                var stringBefore = token && /string|escape/.test(token.type);\r\n                var stringAfter = !rightToken || /string|escape/.test(rightToken.type);\r\n                \r\n                var pair;\r\n                if (rightChar == quote) {\r\n                    pair = stringBefore !== stringAfter;\r\n                    if (pair && /string\\.end/.test(rightToken.type))\r\n                        pair = false;\r\n                } else {\r\n                    if (stringBefore && !stringAfter)\r\n                        return null; // wrap string with different quote\r\n                    if (stringBefore && stringAfter)\r\n                        return null; // do not pair quotes inside strings\r\n                    var wordRe = session.$mode.tokenRe;\r\n                    wordRe.lastIndex = 0;\r\n                    var isWordBefore = wordRe.test(leftChar);\r\n                    wordRe.lastIndex = 0;\r\n                    var isWordAfter = wordRe.test(leftChar);\r\n                    if (isWordBefore || isWordAfter)\r\n                        return null; // before or after alphanumeric\r\n                    if (rightChar && !/[\\s;,.})\\]\\\\]/.test(rightChar))\r\n                        return null; // there is rightChar and it isn't closing\r\n                    pair = true;\r\n                }\r\n                return {\r\n                    text: pair ? quote + quote : \"\",\r\n                    selection: [1,1]\r\n                };\r\n            }\r\n        }\r\n    });\r\n\r\n    this.add(\"string_dquotes\", \"deletion\", function(state, action, editor, session, range) {\r\n        var quotes = session.$mode.$quotes || defaultQuotes;\r\n\r\n        var selected = session.doc.getTextRange(range);\r\n        if (!range.isMultiLine() && quotes.hasOwnProperty(selected)) {\r\n            initContext(editor);\r\n            var line = session.doc.getLine(range.start.row);\r\n            var rightChar = line.substring(range.start.column + 1, range.start.column + 2);\r\n            if (rightChar == selected) {\r\n                range.end.column++;\r\n                return range;\r\n            }\r\n        }\r\n    });\r\n\r\n};\r\n\r\n    \r\nCstyleBehaviour.isSaneInsertion = function(editor, session) {\r\n    var cursor = editor.getCursorPosition();\r\n    var iterator = new TokenIterator(session, cursor.row, cursor.column);\r\n    \r\n    // Don't insert in the middle of a keyword/identifier/lexical\r\n    if (!this.$matchTokenType(iterator.getCurrentToken() || \"text\", SAFE_INSERT_IN_TOKENS)) {\r\n        // Look ahead in case we're at the end of a token\r\n        var iterator2 = new TokenIterator(session, cursor.row, cursor.column + 1);\r\n        if (!this.$matchTokenType(iterator2.getCurrentToken() || \"text\", SAFE_INSERT_IN_TOKENS))\r\n            return false;\r\n    }\r\n    \r\n    // Only insert in front of whitespace/comments\r\n    iterator.stepForward();\r\n    return iterator.getCurrentTokenRow() !== cursor.row ||\r\n        this.$matchTokenType(iterator.getCurrentToken() || \"text\", SAFE_INSERT_BEFORE_TOKENS);\r\n};\r\n\r\nCstyleBehaviour.$matchTokenType = function(token, types) {\r\n    return types.indexOf(token.type || token) > -1;\r\n};\r\n\r\nCstyleBehaviour.recordAutoInsert = function(editor, session, bracket) {\r\n    var cursor = editor.getCursorPosition();\r\n    var line = session.doc.getLine(cursor.row);\r\n    // Reset previous state if text or context changed too much\r\n    if (!this.isAutoInsertedClosing(cursor, line, context.autoInsertedLineEnd[0]))\r\n        context.autoInsertedBrackets = 0;\r\n    context.autoInsertedRow = cursor.row;\r\n    context.autoInsertedLineEnd = bracket + line.substr(cursor.column);\r\n    context.autoInsertedBrackets++;\r\n};\r\n\r\nCstyleBehaviour.recordMaybeInsert = function(editor, session, bracket) {\r\n    var cursor = editor.getCursorPosition();\r\n    var line = session.doc.getLine(cursor.row);\r\n    if (!this.isMaybeInsertedClosing(cursor, line))\r\n        context.maybeInsertedBrackets = 0;\r\n    context.maybeInsertedRow = cursor.row;\r\n    context.maybeInsertedLineStart = line.substr(0, cursor.column) + bracket;\r\n    context.maybeInsertedLineEnd = line.substr(cursor.column);\r\n    context.maybeInsertedBrackets++;\r\n};\r\n\r\nCstyleBehaviour.isAutoInsertedClosing = function(cursor, line, bracket) {\r\n    return context.autoInsertedBrackets > 0 &&\r\n        cursor.row === context.autoInsertedRow &&\r\n        bracket === context.autoInsertedLineEnd[0] &&\r\n        line.substr(cursor.column) === context.autoInsertedLineEnd;\r\n};\r\n\r\nCstyleBehaviour.isMaybeInsertedClosing = function(cursor, line) {\r\n    return context.maybeInsertedBrackets > 0 &&\r\n        cursor.row === context.maybeInsertedRow &&\r\n        line.substr(cursor.column) === context.maybeInsertedLineEnd &&\r\n        line.substr(0, cursor.column) == context.maybeInsertedLineStart;\r\n};\r\n\r\nCstyleBehaviour.popAutoInsertedClosing = function() {\r\n    context.autoInsertedLineEnd = context.autoInsertedLineEnd.substr(1);\r\n    context.autoInsertedBrackets--;\r\n};\r\n\r\nCstyleBehaviour.clearMaybeInsertedClosing = function() {\r\n    if (context) {\r\n        context.maybeInsertedBrackets = 0;\r\n        context.maybeInsertedRow = -1;\r\n    }\r\n};\r\n\r\n\r\n\r\noop.inherits(CstyleBehaviour, Behaviour);\r\n\r\nexports.CstyleBehaviour = CstyleBehaviour;\r\n});\r\n"]}