{"version":3,"sources":["mode/behaviour/liquid.js"],"names":["define","require","exports","module","oop","Behaviour","XmlBehaviour","TokenIterator","is","token","type","lastIndexOf","LiquidBehaviour","call","this","add","state","action","editor","session","text","position","getSelectionRange","start","iterator","row","column","getCurrentToken","stepBackward","value","trim","tokenEndColumn","getCurrentTokenColumn","length","nextToken","stepForward","test","getLine","slice","tokenRow","getCurrentTokenRow","tokenColumn","element","substring","voidElements","hasOwnProperty","toLowerCase","selection","inherits"],"mappings":";;;;;;;AA8BAA,OAAO,SAASC,QAASC,QAASC,QAC9B,aAEA,IAAIC,EAAMH,QAAQ,iBACdI,EAAYJ,QAAQ,gBAAgBI,UACpCC,EAAeL,QAAQ,SAASK,aAChCC,EAAgBN,QAAQ,wBAAwBM,cACzCN,QAAQ,kBAEnB,SAASO,EAAGC,EAAOC,GACf,OAAOD,GAASA,EAAMC,KAAKC,YAAYD,EAAO,SAAW,EAG7D,IAAIE,EAAkB,WAClBN,EAAaO,KAAKC,MAClBA,KAAKC,IAAI,sBAAsB,YAAa,SAAUC,EAAOC,EAAQC,EAAQC,EAASC,GAClF,GAAY,KAARA,EAAa,CACb,IAAIC,EAAWH,EAAOI,oBAAoBC,MACtCC,EAAW,IAAIjB,EAAcY,EAASE,EAASI,IAAKJ,EAASK,QAC7DjB,EAAQe,EAASG,mBAAqBH,EAASI,eAGnD,IAAKnB,KAAmC,MAAvBA,EAAMoB,MAAMC,QAAkBtB,EAAGC,EAAO,aAAeD,EAAGC,EAAO,mBAAqBD,EAAGC,EAAO,mBAAqBD,EAAGC,EAAO,qBAAuBD,EAAGC,EAAO,oBAC7K,OAGJ,GAAID,EAAGC,EAAO,6BACV,OAEJ,GAAID,EAAGC,EAAO,mBAAoB,CAC9B,IAAIsB,EAAiBP,EAASQ,wBAA0BvB,EAAMoB,MAAMI,OACpE,GAAIZ,EAASK,OAASK,EAClB,OACJ,GAAIV,EAASK,QAAUK,EAAgB,CACnC,IAAIG,EAAYV,EAASW,cAEzB,GAAID,GAAa1B,EAAG0B,EAAW,mBAC3B,OACJV,EAASI,gBAIjB,GAAI,SAASQ,KAAKjB,EAAQkB,QAAQhB,EAASI,MAAO,OAClD,GAAI,QAAQW,KAAKjB,EAAQkB,QAAQhB,EAASI,KAAKa,MAAMjB,EAASK,SAC1D,OAGJ,KAAsB,kBAAdjB,EAAMC,MAEV,GAAmB,OADnBD,EAAQe,EAASI,gBACPC,MAAe,CACrB,KAGuB,mBAFnBpB,EAAQe,EAASW,eAEPzB,MAEH,GAA0B,KAAtBD,EAAMoB,MAAMC,OAAe,CAClCrB,EAAQ,KACR,MAGR,MAGR,IAAKA,EAAQ,OACb,IAAI8B,EAAWf,EAASgB,qBACpBC,EAAcjB,EAASQ,wBAG3B,GAAIxB,EAAGgB,EAASI,eAAgB,gBAChC,OAEA,IAAIc,EAAUjC,EAAMoB,MAIpB,GAHIU,GAAYlB,EAASI,MACrBiB,EAAUA,EAAQC,UAAU,EAAGtB,EAASK,OAASe,IAEjD3B,KAAK8B,aAAaC,eAAeH,EAAQI,eACxC,OACL,OACG1B,KAAM,UAAiBsB,EAAU,MACjCK,WAAY,EAAG,QAO9B3C,EAAI4C,SAASpC,EAAiBP,GAE9BH,QAAQU,gBAAkBA","file":"../../../mode/behaviour/liquid.js","sourcesContent":["/* ***** BEGIN LICENSE BLOCK *****\r\n * Distributed under the BSD license:\r\n *\r\n * Copyright (c) 2010, Ajax.org B.V.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *     * Redistributions of source code must retain the above copyright\r\n *       notice, this list of conditions and the following disclaimer.\r\n *     * Redistributions in binary form must reproduce the above copyright\r\n *       notice, this list of conditions and the following disclaimer in the\r\n *       documentation and/or other materials provided with the distribution.\r\n *     * Neither the name of Ajax.org B.V. nor the\r\n *       names of its contributors may be used to endorse or promote products\r\n *       derived from this software without specific prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\r\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY\r\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\r\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\r\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n *\r\n * ***** END LICENSE BLOCK ***** */\r\n\r\ndefine(function(require, exports, module) {\r\n    \"use strict\";\r\n    \r\n    var oop = require(\"../../lib/oop\");\r\n    var Behaviour = require(\"../behaviour\").Behaviour;\r\n    var XmlBehaviour = require(\"./xml\").XmlBehaviour;\r\n    var TokenIterator = require(\"../../token_iterator\").TokenIterator;\r\n    var lang = require(\"../../lib/lang\");\r\n    \r\n    function is(token, type) {\r\n        return token && token.type.lastIndexOf(type + \".xml\") > -1;\r\n    }\r\n    \r\n    var LiquidBehaviour = function () {\r\n        XmlBehaviour.call(this);\r\n        this.add(\"autoBraceTagClosing\",\"insertion\", function (state, action, editor, session, text) {\r\n            if (text == '}') {\r\n                var position = editor.getSelectionRange().start;\r\n                var iterator = new TokenIterator(session, position.row, position.column);\r\n                var token = iterator.getCurrentToken() || iterator.stepBackward();\r\n\r\n                // exit if we're not in a tag\r\n                if (!token || !( token.value.trim() === '%' || is(token, \"tag-name\") || is(token, \"tag-whitespace\") || is(token, \"attribute-name\") || is(token, \"attribute-equals\") || is(token, \"attribute-value\")))\r\n                    return;\r\n    \r\n                // exit if we're inside of a quoted attribute value\r\n                if (is(token, \"reference.attribute-value\"))\r\n                    return;\r\n\r\n                if (is(token, \"attribute-value\")) {\r\n                    var tokenEndColumn = iterator.getCurrentTokenColumn() + token.value.length;\r\n                    if (position.column < tokenEndColumn)\r\n                        return;\r\n                    if (position.column == tokenEndColumn) {\r\n                        var nextToken = iterator.stepForward();\r\n                        // TODO also handle non-closed string at the end of the line\r\n                        if (nextToken && is(nextToken, \"attribute-value\"))\r\n                            return;\r\n                        iterator.stepBackward();\r\n                    }\r\n                }\r\n                // exit if the tag is empty \r\n                if (/{%\\s*%/.test(session.getLine(position.row))) return;\r\n                if (/^\\s*}/.test(session.getLine(position.row).slice(position.column)))\r\n                    return;\r\n\r\n                // find tag name\r\n                while (!token.type != 'keyword.block') {\r\n                    token = iterator.stepBackward();\r\n                    if (token.value == '{%') {\r\n                        while(true) {\r\n                            token = iterator.stepForward();\r\n\r\n                            if (token.type === 'keyword.block') {\r\n                                break;\r\n                            } else if (token.value.trim() == '%') {\r\n                                token = null;\r\n                                break;\r\n                            }\r\n                        }\r\n                        break; \r\n                    }\r\n                }\r\n                if (!token ) return ;\r\n                var tokenRow = iterator.getCurrentTokenRow();\r\n                var tokenColumn = iterator.getCurrentTokenColumn();\r\n\r\n                // exit if the tag is ending\r\n                if (is(iterator.stepBackward(), \"end-tag-open\"))\r\n                return;\r\n                \r\n                var element = token.value;\r\n                if (tokenRow == position.row)\r\n                    element = element.substring(0, position.column - tokenColumn);\r\n    \r\n                if (this.voidElements.hasOwnProperty(element.toLowerCase()))\r\n                     return;\r\n                return {\r\n                   text: \"}\" + \"{% end\" + element + \" %}\",\r\n                   selection: [1, 1]\r\n                };\r\n            }\r\n        });\r\n    \r\n    };\r\n\r\n    oop.inherits(LiquidBehaviour, Behaviour);\r\n    \r\n    exports.LiquidBehaviour = LiquidBehaviour;\r\n    });\r\n    "]}