{"version":3,"sources":["mode/dot.js"],"names":["define","require","exports","module","oop","TextMode","Mode","MatchingBraceOutdent","DotHighlightRules","DotFoldMode","FoldMode","this","HighlightRules","$outdent","foldingRules","$behaviour","$defaultBehaviour","inherits","lineCommentStart","blockComment","start","end","getNextLineIndent","state","line","tab","indent","$getIndent","tokenizedLine","getTokenizer","getLineTokens","tokens","length","type","match","checkOutdent","input","autoOutdent","doc","row","$id","call","prototype"],"mappings":";;;;;;;AAAAA,OAAO,SAASC,EAASC,EAASC,GAClC,aAEA,IAAIC,EAAMH,EAAQ,cACdI,EAAWJ,EAAQ,UAAUK,KAC7BC,EAAuBN,EAAQ,4BAA4BM,qBAC3DC,EAAoBP,EAAQ,yBAAyBO,kBACrDC,EAAcR,EAAQ,oBAAoBS,SAE1CJ,EAAO,WACPK,KAAKC,eAAiBJ,EACtBG,KAAKE,SAAW,IAAIN,EACpBI,KAAKG,aAAe,IAAIL,EACxBE,KAAKI,WAAaJ,KAAKK,mBAE3BZ,EAAIa,SAASX,EAAMD,GAEnB,WAEIM,KAAKO,kBAAoB,KAAM,KAC/BP,KAAKQ,cAAgBC,MAAO,KAAMC,IAAK,MAEvCV,KAAKW,kBAAoB,SAASC,EAAOC,EAAMC,GAC3C,IAAIC,EAASf,KAAKgB,WAAWH,GAEzBI,EAAgBjB,KAAKkB,eAAeC,cAAcN,EAAMD,GACxDQ,EAASH,EAAcG,OACZH,EAAcL,MAE7B,GAAIQ,EAAOC,QAA0C,WAAhCD,EAAOA,EAAOC,OAAO,GAAGC,KACzC,OAAOP,EAGE,SAATH,IACYC,EAAKU,MAAM,qCAEnBR,GAAUD,IAIlB,OAAOC,GAGXf,KAAKwB,aAAe,SAASZ,EAAOC,EAAMY,GACtC,OAAOzB,KAAKE,SAASsB,aAAaX,EAAMY,IAG5CzB,KAAK0B,YAAc,SAASd,EAAOe,EAAKC,GACpC5B,KAAKE,SAASwB,YAAYC,EAAKC,IAGnC5B,KAAK6B,IAAM,gBACZC,KAAKnC,EAAKoC,WAEbxC,EAAQI,KAAOA","file":"../../mode/dot.js","sourcesContent":["define(function(require, exports, module) {\r\n\"use strict\";\r\n\r\nvar oop = require(\"../lib/oop\");\r\nvar TextMode = require(\"./text\").Mode;\r\nvar MatchingBraceOutdent = require(\"./matching_brace_outdent\").MatchingBraceOutdent;\r\nvar DotHighlightRules = require(\"./dot_highlight_rules\").DotHighlightRules;\r\nvar DotFoldMode = require(\"./folding/cstyle\").FoldMode;\r\n\r\nvar Mode = function() {\r\n    this.HighlightRules = DotHighlightRules;\r\n    this.$outdent = new MatchingBraceOutdent();\r\n    this.foldingRules = new DotFoldMode();\r\n    this.$behaviour = this.$defaultBehaviour;\r\n};\r\noop.inherits(Mode, TextMode);\r\n\r\n(function() {\r\n\r\n    this.lineCommentStart = [\"//\", \"#\"];\r\n    this.blockComment = {start: \"/*\", end: \"*/\"};\r\n\r\n    this.getNextLineIndent = function(state, line, tab) {\r\n        var indent = this.$getIndent(line);\r\n\r\n        var tokenizedLine = this.getTokenizer().getLineTokens(line, state);\r\n        var tokens = tokenizedLine.tokens;\r\n        var endState = tokenizedLine.state;\r\n\r\n        if (tokens.length && tokens[tokens.length-1].type == \"comment\") {\r\n            return indent;\r\n        }\r\n\r\n        if (state == \"start\") {\r\n            var match = line.match(/^.*(?:\\bcase\\b.*:|[\\{\\(\\[])\\s*$/);\r\n            if (match) {\r\n                indent += tab;\r\n            }\r\n        }\r\n\r\n        return indent;\r\n    };\r\n\r\n    this.checkOutdent = function(state, line, input) {\r\n        return this.$outdent.checkOutdent(line, input);\r\n    };\r\n\r\n    this.autoOutdent = function(state, doc, row) {\r\n        this.$outdent.autoOutdent(doc, row);\r\n    };\r\n\r\n    this.$id = \"ace/mode/dot\";\r\n}).call(Mode.prototype);\r\n\r\nexports.Mode = Mode;\r\n});\r\n"]}