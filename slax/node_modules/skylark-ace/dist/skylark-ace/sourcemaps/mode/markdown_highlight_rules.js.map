{"version":3,"sources":["mode/markdown_highlight_rules.js"],"names":["define","require","exports","module","modes","$modes","oop","lang","TextHighlightRules","HtmlHighlightRules","escaped","ch","escapeRegExp","MarkdownHighlightRules","call","this","codeBlockStartRule","token","regex","onMatch","value","state","stack","line","m","match","language","exec","unshift","next","codeBlockRules","embedState","indent","endMarker","length","splice","shift","data","getTokenizer","getLineTokens","slice","tokens","$rules","include","addRules","basic","allowBlock","header","defaultToken","listblock-start","listblock","noEscape","blockquote","githubblock","normalizeRules","inherits"],"mappings":"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","file":"../../mode/markdown_highlight_rules.js","sourcesContent":["/* ***** BEGIN LICENSE BLOCK *****\r\n * Distributed under the BSD license:\r\n *\r\n * Copyright (c) 2010, Ajax.org B.V.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *     * Redistributions of source code must retain the above copyright\r\n *       notice, this list of conditions and the following disclaimer.\r\n *     * Redistributions in binary form must reproduce the above copyright\r\n *       notice, this list of conditions and the following disclaimer in the\r\n *       documentation and/or other materials provided with the distribution.\r\n *     * Neither the name of Ajax.org B.V. nor the\r\n *       names of its contributors may be used to endorse or promote products\r\n *       derived from this software without specific prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\r\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY\r\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\r\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\r\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n *\r\n * ***** END LICENSE BLOCK ***** */\r\n\r\ndefine(function(require, exports, module) {\r\n\"use strict\";\r\n\r\nvar modes = require(\"../config\").$modes;\r\n\r\nvar oop = require(\"../lib/oop\");\r\nvar lang = require(\"../lib/lang\");\r\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\r\nvar HtmlHighlightRules = require(\"./html_highlight_rules\").HtmlHighlightRules;\r\n\r\nvar escaped = function(ch) {\r\n    return \"(?:[^\" + lang.escapeRegExp(ch) + \"\\\\\\\\]|\\\\\\\\.)*\";\r\n};\r\n\r\nvar MarkdownHighlightRules = function() {\r\n    HtmlHighlightRules.call(this);\r\n    // regexp must not have capturing parentheses\r\n    // regexps are ordered -> the first match is used\r\n    var codeBlockStartRule = {\r\n        token : \"support.function\",\r\n        regex : /^\\s*(```+[^`]*|~~~+[^~]*)$/,\r\n        onMatch: function(value, state, stack, line) {\r\n            var m = value.match(/^(\\s*)([`~]+)(.*)/);\r\n            var language = /[\\w-]+|$/.exec(m[3])[0];\r\n            // TODO lazy-load modes\r\n            if (!modes[language])\r\n                language = \"\";\r\n            stack.unshift(\"githubblock\", [], [m[1], m[2], language], state);\r\n            return this.token;\r\n        },\r\n        next  : \"githubblock\"\r\n    };\r\n    var codeBlockRules = [{\r\n        token : \"support.function\",\r\n        regex : \".*\",\r\n        onMatch: function(value, state, stack, line) {\r\n            var embedState = stack[1];\r\n            var indent = stack[2][0];\r\n            var endMarker = stack[2][1];\r\n            var language = stack[2][2];\r\n            \r\n            var m = /^(\\s*)(`+|~+)\\s*$/.exec(value);\r\n            if (\r\n                m && m[1].length < indent.length + 3\r\n                && m[2].length >= endMarker.length && m[2][0] == endMarker[0]\r\n            ) {\r\n                stack.splice(0, 3);\r\n                this.next = stack.shift();\r\n                return this.token;\r\n            }\r\n            this.next = \"\";\r\n            if (language && modes[language]) {\r\n                var data = modes[language].getTokenizer().getLineTokens(value, embedState.slice(0));\r\n                stack[1] = data.state;\r\n                return data.tokens;\r\n            }\r\n            return this.token;\r\n        }\r\n    }];\r\n\r\n    this.$rules[\"start\"].unshift({\r\n        token : \"empty_line\",\r\n        regex : '^$',\r\n        next: \"allowBlock\"\r\n    }, { // h1\r\n        token: \"markup.heading.1\",\r\n        regex: \"^=+(?=\\\\s*$)\"\r\n    }, { // h2\r\n        token: \"markup.heading.2\",\r\n        regex: \"^\\\\-+(?=\\\\s*$)\"\r\n    }, {\r\n        token : function(value) {\r\n            return \"markup.heading.\" + value.length;\r\n        },\r\n        regex : /^#{1,6}(?=\\s|$)/,\r\n        next : \"header\"\r\n    },\r\n    codeBlockStartRule,\r\n    { // block quote\r\n        token : \"string.blockquote\",\r\n        regex : \"^\\\\s*>\\\\s*(?:[*+-]|\\\\d+\\\\.)?\\\\s+\",\r\n        next  : \"blockquote\"\r\n    }, { // HR * - _\r\n        token : \"constant\",\r\n        regex : \"^ {0,2}(?:(?: ?\\\\* ?){3,}|(?: ?\\\\- ?){3,}|(?: ?\\\\_ ?){3,})\\\\s*$\",\r\n        next: \"allowBlock\"\r\n    }, { // list\r\n        token : \"markup.list\",\r\n        regex : \"^\\\\s{0,3}(?:[*+-]|\\\\d+\\\\.)\\\\s+\",\r\n        next  : \"listblock-start\"\r\n    }, {\r\n        include : \"basic\"\r\n    });\r\n\r\n    this.addRules({\r\n        \"basic\" : [{\r\n            token : \"constant.language.escape\",\r\n            regex : /\\\\[\\\\`*_{}\\[\\]()#+\\-.!]/\r\n        }, { // code span `\r\n            token : \"support.function\",\r\n            regex : \"(`+)(.*?[^`])(\\\\1)\"\r\n        }, { // reference\r\n            token : [\"text\", \"constant\", \"text\", \"url\", \"string\", \"text\"],\r\n            regex : \"^([ ]{0,3}\\\\[)([^\\\\]]+)(\\\\]:\\\\s*)([^ ]+)(\\\\s*(?:[\\\"][^\\\"]+[\\\"])?(\\\\s*))$\"\r\n        }, { // link by reference\r\n            token : [\"text\", \"string\", \"text\", \"constant\", \"text\"],\r\n            regex : \"(\\\\[)(\" + escaped(\"]\") + \")(\\\\]\\\\s*\\\\[)(\"+ escaped(\"]\") + \")(\\\\])\"\r\n        }, { // link by url\r\n            token : [\"text\", \"string\", \"text\", \"markup.underline\", \"string\", \"text\"],\r\n            regex : \"(\\\\!?\\\\[)(\" +                                        // [\r\n                    escaped(\"]\") +                                    // link text or alt text\r\n                    \")(\\\\]\\\\()\"+                                      // ](\r\n                    '((?:[^\\\\)\\\\s\\\\\\\\]|\\\\\\\\.|\\\\s(?=[^\"]))*)' +        // href or image\r\n                    '(\\\\s*\"' +  escaped('\"') + '\"\\\\s*)?' +            // \"title\"\r\n                    \"(\\\\))\"                                           // )\r\n        }, { // strong ** __\r\n            token : \"string.strong\",\r\n            regex : \"([*]{2}|[_]{2}(?=\\\\S))(.*?\\\\S[*_]*)(\\\\1)\"\r\n        }, { // emphasis * _\r\n            token : \"string.emphasis\",\r\n            regex : \"([*]|[_](?=\\\\S))(.*?\\\\S[*_]*)(\\\\1)\"\r\n        }, { //\r\n            token : [\"text\", \"url\", \"text\"],\r\n            regex : \"(<)(\"+\r\n                      \"(?:https?|ftp|dict):[^'\\\">\\\\s]+\"+\r\n                      \"|\"+\r\n                      \"(?:mailto:)?[-.\\\\w]+\\\\@[-a-z0-9]+(?:\\\\.[-a-z0-9]+)*\\\\.[a-z]+\"+\r\n                    \")(>)\"\r\n        }],\r\n\r\n        // code block\r\n        \"allowBlock\": [\r\n            {token : \"support.function\", regex : \"^ {4}.+\", next : \"allowBlock\"},\r\n            {token : \"empty_line\", regex : '^$', next: \"allowBlock\"},\r\n            {token : \"empty\", regex : \"\", next : \"start\"}\r\n        ],\r\n\r\n        \"header\" : [{\r\n            regex: \"$\",\r\n            next : \"start\"\r\n        }, {\r\n            include: \"basic\"\r\n        }, {\r\n            defaultToken : \"heading\"\r\n        } ],\r\n\r\n        \"listblock-start\" : [{\r\n            token : \"support.variable\",\r\n            regex : /(?:\\[[ x]\\])?/,\r\n            next  : \"listblock\"\r\n        }],\r\n\r\n        \"listblock\" : [ { // Lists only escape on completely blank lines.\r\n            token : \"empty_line\",\r\n            regex : \"^$\",\r\n            next  : \"start\"\r\n        }, { // list\r\n            token : \"markup.list\",\r\n            regex : \"^\\\\s{0,3}(?:[*+-]|\\\\d+\\\\.)\\\\s+\",\r\n            next  : \"listblock-start\"\r\n        }, {\r\n            include : \"basic\", noEscape: true\r\n        },\r\n        codeBlockStartRule,\r\n        {\r\n            defaultToken : \"list\" //do not use markup.list to allow stling leading `*` differntly\r\n        } ],\r\n\r\n        \"blockquote\" : [ { // Blockquotes only escape on blank lines.\r\n            token : \"empty_line\",\r\n            regex : \"^\\\\s*$\",\r\n            next  : \"start\"\r\n        }, { // block quote\r\n            token : \"string.blockquote\",\r\n            regex : \"^\\\\s*>\\\\s*(?:[*+-]|\\\\d+\\\\.)?\\\\s+\",\r\n            next  : \"blockquote\"\r\n        }, {\r\n            include : \"basic\", noEscape: true\r\n        }, {\r\n            defaultToken : \"string.blockquote\"\r\n        } ],\r\n\r\n        \"githubblock\" : codeBlockRules\r\n    });\r\n\r\n    this.normalizeRules();\r\n};\r\noop.inherits(MarkdownHighlightRules, TextHighlightRules);\r\n\r\nexports.MarkdownHighlightRules = MarkdownHighlightRules;\r\n});\r\n"]}