{"version":3,"sources":["mode/logiql_highlight_rules.js"],"names":["define","require","exports","module","oop","TextHighlightRules","LogiQLHighlightRules","this","$rules","start","token","regex","push","next","defaultToken","comment","include","normalizeRules","inherits"],"mappings":";;;;;;;AAgCAA,OAAO,SAASC,EAASC,EAASC,GAClC,aAEA,IAAIC,EAAMH,EAAQ,cACdI,EAAqBJ,EAAQ,0BAA0BI,mBAEvDC,EAAuB,WAIvBC,KAAKC,QAAWC,QACTC,MAAO,gBACPC,MAAO,OACPC,OACKF,MAAO,gBAAiBC,MAAO,OAAQE,KAAM,QAC7CC,aAAc,oBAGnBJ,MAAO,iBACPC,MAAO,SAGPD,MAAO,mBACPC,MAAO,4CAIPD,MAAO,SACPC,MAAO,IACPC,OACKF,MAAO,SAAUC,MAAO,IAAKE,KAAM,QACnCC,aAAc,aAGnBJ,MAAO,oBACPC,MAAO,uBAGPD,MAAO,6BACPC,MAAO,8BAGPD,MAAO,gBAAiBC,MAAO,KAAOI,QAAS,eAC/CL,MAAO,gBAAiBC,MAAO,SAAOI,QAAS,uBAC/CL,MAAO,gBAAiBC,MAAO,KAAOI,QAAS,SAC/CL,MAAO,gBAAiBC,MAAO,MAAOI,QAAS,iBAC/CL,MAAO,cAAiBC,MAAO,MAAOI,QAAS,eAC/CL,MAAO,gBAAiBC,MAAO,IAAOI,QAAS,aAC/CL,MAAO,gBAAiBC,MAAO,IAAOI,QAAS,gBAC/CL,MAAO,gBAAiBC,MAAO,IAAOI,QAAS,gBAC/CL,MAAO,mBAAoBC,MAAO,eAAgBI,QAAS,aAC3DL,MAAO,gBAAiBC,MAAO,IAAKI,QAAS,aAC7CL,MAAO,mBAAoBC,MAAO,cAAeI,QAAS,0BAC1DL,MAAO,UAAWC,MAAO,KAAMI,QAAS,gBACxCL,MAAO,mBACPC,MAAO,iBACPC,OACKI,QAAS,UACTN,MAAO,mBACPC,MAAO,KACPE,KAAM,UAGXH,MAAO,mBACPC,MAAO,sBAGPD,OAAS,eAAgB,QACzBC,MAAO,gEAGPD,MAAO,cACPC,MAAO,8DAGPD,MAAO,qBACPC,MAAO,8DAIdJ,KAAKU,kBAGTb,EAAIc,SAASZ,EAAsBD,GAEnCH,EAAQI,qBAAuBA","file":"../../mode/logiql_highlight_rules.js","sourcesContent":["/* ***** BEGIN LICENSE BLOCK *****\r\n * Distributed under the BSD license:\r\n *\r\n * Copyright (c) 2012, Ajax.org B.V.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *     * Redistributions of source code must retain the above copyright\r\n *       notice, this list of conditions and the following disclaimer.\r\n *     * Redistributions in binary form must reproduce the above copyright\r\n *       notice, this list of conditions and the following disclaimer in the\r\n *       documentation and/or other materials provided with the distribution.\r\n *     * Neither the name of Ajax.org B.V. nor the\r\n *       names of its contributors may be used to endorse or promote products\r\n *       derived from this software without specific prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\r\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY\r\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\r\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\r\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n *\r\n * ***** END LICENSE BLOCK ***** */\r\n\r\n/* THIS FILE WAS AUTOGENERATED FROM tool\\LogicBlox.tmbundle\\Syntaxes\\LogicBlox.tmLanguage (UUID: 59bf5022-e261-453f-b1cb-9f9fa0712413) */\r\n\r\ndefine(function(require, exports, module) {\r\n\"use strict\";\r\n\r\nvar oop = require(\"../lib/oop\");\r\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\r\n\r\nvar LogiQLHighlightRules = function() {\r\n    // regexp must not have capturing parentheses. Use (?:) instead.\r\n    // regexps are ordered -> the first match is used\r\n\r\n    this.$rules = { start: \r\n       [ { token: 'comment.block',\r\n           regex: '/\\\\*',\r\n           push: \r\n            [ { token: 'comment.block', regex: '\\\\*/', next: 'pop' },\r\n              { defaultToken: 'comment.block' } ]\r\n           //A block comment.\r\n            },\r\n         { token: 'comment.single',\r\n           regex: '//.*'\r\n           //A single line comment.\r\n            },\r\n         { token: 'constant.numeric',\r\n           regex: '\\\\d+(?:\\\\.\\\\d+)?(?:[eE][+-]?\\\\d+)?[fd]?'\r\n           //An integer constant.\r\n           //Or a Real number.\r\n            },\r\n         { token: 'string',\r\n           regex: '\"',\r\n           push: \r\n            [ { token: 'string', regex: '\"', next: 'pop' },\r\n              { defaultToken: 'string' } ]\r\n           //Strings\r\n            },\r\n         { token: 'constant.language',\r\n           regex: '\\\\b(true|false)\\\\b'\r\n           //Boolean values.\r\n            },\r\n         { token: 'entity.name.type.logicblox',\r\n           regex: '`[a-zA-Z_:]+(\\\\d|\\\\a)*\\\\b'\r\n           //LogicBlox Symbol\r\n            },\r\n         { token: 'keyword.start', regex: '->',  comment: 'Constraint' },\r\n         { token: 'keyword.start', regex: '-->', comment: 'Level 1 Constraint'},\r\n         { token: 'keyword.start', regex: '<-',  comment: 'Rule' },\r\n         { token: 'keyword.start', regex: '<--', comment: 'Level 1 Rule' },\r\n         { token: 'keyword.end',   regex: '\\\\.', comment: 'Terminator' },\r\n         { token: 'keyword.other', regex: '!',   comment: 'Negation' },\r\n         { token: 'keyword.other', regex: ',',   comment: 'Conjunction' },\r\n         { token: 'keyword.other', regex: ';',   comment: 'Disjunction' },\r\n         { token: 'keyword.operator', regex: '<=|>=|!=|<|>', comment: 'Equality'},\r\n         { token: 'keyword.other', regex: '@', comment: 'Equality' },\r\n         { token: 'keyword.operator', regex: '\\\\+|-|\\\\*|/', comment: 'Arithmetic operations'},\r\n         { token: 'keyword', regex: '::', comment: 'Colon colon' },\r\n         { token: 'support.function',\r\n           regex: '\\\\b(agg\\\\s*<<)',\r\n           push: \r\n            [ { include: '$self' },\r\n              { token: 'support.function',\r\n                regex: '>>',\r\n                next: 'pop' } ]\r\n            //Aggregations\r\n            },\r\n         { token: 'storage.modifier',\r\n           regex: '\\\\b(lang:[\\\\w:]*)'\r\n           //All the lang system predicates\r\n            },\r\n         { token: [ 'storage.type', 'text' ],\r\n           regex: '(export|sealed|clauses|block|alias|alias_all)(\\\\s*\\\\()(?=`)'\r\n           //Module keywords\r\n            },\r\n         { token: 'entity.name',\r\n           regex: '[a-zA-Z_][a-zA-Z_0-9:]*(@prev|@init|@final)?(?=(\\\\(|\\\\[))'\r\n           //A predicate name.\r\n            },\r\n         { token: 'variable.parameter',\r\n           regex: '([a-zA-Z][a-zA-Z_0-9]*|_)\\\\s*(?=(,|\\\\.|<-|->|\\\\)|\\\\]|=))'\r\n           //A variable to a functional predicate.\r\n            } ] };\r\n    \r\n    this.normalizeRules();\r\n};\r\n\r\noop.inherits(LogiQLHighlightRules, TextHighlightRules);\r\n\r\nexports.LogiQLHighlightRules = LogiQLHighlightRules;\r\n});\r\n"]}