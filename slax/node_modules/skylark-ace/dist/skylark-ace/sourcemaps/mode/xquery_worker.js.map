{"version":3,"sources":["mode/xquery_worker.js"],"names":["define","require","exports","module","oop","Mirror","XQLintLib","XQLint","XQueryWorker","sender","call","this","setTimeout","that","on","e","xqlint","pos","line","data","row","col","column","proposals","getCompletions","emit","availableModuleNamespaces","fileName","modules","moduleResolver","uri","mod","variables","functions","forEach","fn","name","arity","params","parameters","param","push","variable","substring","indexOf","type","annotations","inherits","onUpdate","value","doc","getValue","sctx","createStaticContext","setModuleResolver","opts","styleCheck","staticContext","getMarkers","prototype"],"mappings":";;;;;;;AA8BAA,OAAO,SAASC,QAASC,QAASC,QAClC,aAEA,IAAIC,EAAMH,QAAQ,cACdI,EAASJ,QAAQ,oBAAoBI,OACrCC,EAAYL,QAAQ,mBACpBM,EAAUD,EAAUC,OA2BpBC,EAAeN,QAAQM,aAAe,SAASC,GAC/CJ,EAAOK,KAAKC,KAAMF,GAClBE,KAAKC,WAAW,KAGhB,IAAIC,EAAOF,KAEXA,KAAKF,OAAOK,GAAG,WAAY,SAASC,GAChC,GAAGF,EAAKG,OAAQ,CACZ,IAAIC,GAAQC,KAAMH,EAAEI,KAAKF,IAAIG,IAAKC,IAAKN,EAAEI,KAAKF,IAAIK,QAC9CC,EAAYV,EAAKG,OAAOQ,eAAeP,GAC3CJ,EAAKJ,OAAOgB,KAAK,WAAYF,MAIrCZ,KAAKF,OAAOK,GAAG,+BAAgC,SAASC,GACpDF,EAAKa,0BAA4BX,EAAEI,OAGvCR,KAAKF,OAAOK,GAAG,cAAe,SAASC,GACnCF,EAAKc,SAAWZ,EAAEI,OAGtBR,KAAKF,OAAOK,GAAG,oBAAqB,SAASC,GAhDd,IAASa,EAiDpCf,EAAKgB,gBAjD+BD,EAiDeb,EAAEI,KAhDlD,SAASW,GACR,IACIC,EADQH,EACIE,GACZE,KACAC,KAaJ,OAZAF,EAAIE,UAAUC,QAAQ,SAASC,GAC3BF,EAAUH,EAAM,IAAMK,EAAGC,KAAO,IAAMD,EAAGE,QACrCC,WAEJH,EAAGI,WAAWL,QAAQ,SAASM,GAC3BP,EAAUH,EAAM,IAAMK,EAAGC,KAAO,IAAMD,EAAGE,OAAOC,OAAOG,KAAK,IAAMD,EAAMJ,UAGhFL,EAAIC,UAAUE,QAAQ,SAASQ,GAC3B,IAAIN,EAAOM,EAASN,KAAKO,UAAUD,EAASN,KAAKQ,QAAQ,KAAO,GAChEZ,EAAUF,EAAM,IAAMM,IAAUS,KAAM,UAAWC,mBAGjDd,UAAWA,EACXC,UAAWA,QAiC3B7B,EAAI2C,SAASvC,EAAcH,GAE3B,WAEIM,KAAKqC,SAAW,WACZrC,KAAKF,OAAOgB,KAAK,SACjB,IAAIwB,EAAQtC,KAAKuC,IAAIC,WACjBC,EAAO9C,EAAU+C,sBAClB1C,KAAKkB,gBACJuB,EAAKE,kBAAkB3C,KAAKkB,gBAE7BlB,KAAKe,4BACJ0B,EAAK1B,0BAA4Bf,KAAKe,2BAE1C,IAAI6B,GACAC,WAAY7C,KAAK6C,WACjBC,cAAeL,EACfzB,SAAUhB,KAAKgB,UAEnBhB,KAAKK,OAAS,IAAIT,EAAO0C,EAAOM,GAChC5C,KAAKF,OAAOgB,KAAK,UAAWd,KAAKK,OAAO0C,gBAE7ChD,KAAKF,EAAamD","file":"../../mode/xquery_worker.js","sourcesContent":["/* ***** BEGIN LICENSE BLOCK *****\r\n * Distributed under the BSD license:\r\n *\r\n * Copyright (c) 2010, Ajax.org B.V.\r\n * All rights reserved.\r\n * \r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *     * Redistributions of source code must retain the above copyright\r\n *       notice, this list of conditions and the following disclaimer.\r\n *     * Redistributions in binary form must reproduce the above copyright\r\n *       notice, this list of conditions and the following disclaimer in the\r\n *       documentation and/or other materials provided with the distribution.\r\n *     * Neither the name of Ajax.org B.V. nor the\r\n *       names of its contributors may be used to endorse or promote products\r\n *       derived from this software without specific prior written permission.\r\n * \r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\r\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY\r\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\r\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\r\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n *\r\n * ***** END LICENSE BLOCK ***** */\r\n \r\ndefine(function(require, exports, module) {\r\n\"use strict\";\r\n    \r\nvar oop = require(\"../lib/oop\");\r\nvar Mirror = require(\"../worker/mirror\").Mirror;\r\nvar XQLintLib = require(\"./xquery/xqlint\");\r\nvar XQLint =  XQLintLib.XQLint;\r\n\r\nvar getModuleResolverFromModules = function(modules){\r\n    return function(uri){\r\n            var index = modules;\r\n            var mod = index[uri];\r\n            var variables = {};\r\n            var functions = {};\r\n            mod.functions.forEach(function(fn){\r\n                functions[uri + '#' + fn.name + '#' + fn.arity] = {\r\n                    params: []\r\n                };\r\n                fn.parameters.forEach(function(param){\r\n                    functions[uri + '#' + fn.name + '#' + fn.arity].params.push('$' + param.name);\r\n                });\r\n            });\r\n            mod.variables.forEach(function(variable){\r\n                var name = variable.name.substring(variable.name.indexOf(':') + 1);\r\n                variables[uri + '#' + name] = { type: 'VarDecl', annotations: [] };\r\n            });\r\n            return {\r\n                variables: variables,\r\n                functions: functions\r\n            };\r\n    };\r\n};\r\n\r\nvar XQueryWorker = exports.XQueryWorker = function(sender) {\r\n    Mirror.call(this, sender);\r\n    this.setTimeout(200);\r\n    //this.availableModuleNamespaces = Object.keys(Modules);\r\n    //this.moduleResolver; = getModuleResolverFromModules(Modules);\r\n    var that = this;\r\n\r\n    this.sender.on(\"complete\", function(e){\r\n        if(that.xqlint) {\r\n            var pos = { line: e.data.pos.row, col: e.data.pos.column };\r\n            var proposals = that.xqlint.getCompletions(pos);\r\n            that.sender.emit(\"complete\", proposals);\r\n        }\r\n    });\r\n\r\n    this.sender.on(\"setAvailableModuleNamespaces\", function(e){\r\n        that.availableModuleNamespaces = e.data;\r\n    });\r\n\r\n    this.sender.on(\"setFileName\", function(e){\r\n        that.fileName = e.data;\r\n    });\r\n\r\n    this.sender.on(\"setModuleResolver\", function(e){\r\n        that.moduleResolver = getModuleResolverFromModules(e.data);\r\n    });\r\n};\r\n\r\noop.inherits(XQueryWorker, Mirror);\r\n\r\n(function() {\r\n    \r\n    this.onUpdate = function() {\r\n        this.sender.emit(\"start\");\r\n        var value = this.doc.getValue();\r\n        var sctx = XQLintLib.createStaticContext();\r\n        if(this.moduleResolver) {\r\n            sctx.setModuleResolver(this.moduleResolver);\r\n        }\r\n        if(this.availableModuleNamespaces) {\r\n            sctx.availableModuleNamespaces = this.availableModuleNamespaces;\r\n        }\r\n        var opts = {\r\n            styleCheck: this.styleCheck,\r\n            staticContext: sctx,\r\n            fileName: this.fileName\r\n        };\r\n        this.xqlint = new XQLint(value, opts);\r\n        this.sender.emit(\"markers\", this.xqlint.getMarkers());\r\n    };\r\n}).call(XQueryWorker.prototype);\r\n\r\n});\r\n"]}