{"version":3,"sources":["mode/kotlin_highlight_rules.js"],"names":["define","require","exports","module","oop","TextHighlightRules","KotlinHighlightRules","this","$rules","start","include","token","regex","#classes","push","next","#comments","defaultToken","#constants","#expressions","#functions","#generics","#getters-and-setters","#imports","#keywords","#namespaces","#parameters","#statements","#strings","#typedefs","#types","#variables","normalizeRules","metaData","fileTypes","name","scopeName","inherits"],"mappings":"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","file":"../../mode/kotlin_highlight_rules.js","sourcesContent":["/* ***** BEGIN LICENSE BLOCK *****\r\n * Distributed under the BSD license:\r\n *\r\n * Copyright (c) 2012, Ajax.org B.V.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *     * Redistributions of source code must retain the above copyright\r\n *       notice, this list of conditions and the following disclaimer.\r\n *     * Redistributions in binary form must reproduce the above copyright\r\n *       notice, this list of conditions and the following disclaimer in the\r\n *       documentation and/or other materials provided with the distribution.\r\n *     * Neither the name of Ajax.org B.V. nor the\r\n *       names of its contributors may be used to endorse or promote products\r\n *       derived from this software without specific prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\r\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY\r\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\r\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\r\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n *\r\n * ***** END LICENSE BLOCK ***** */\r\n\r\n/* This file was autogenerated from Kotlin.tmLanguage (uuid: ) */\r\n/****************************************************************************************\r\n * IT MIGHT NOT BE PERFECT ...But it's a good start from an existing *.tmlanguage file. *\r\n * fileTypes                                                                            *\r\n ****************************************************************************************/\r\n\r\ndefine(function(require, exports, module) {\r\n\"use strict\";\r\n\r\nvar oop = require(\"../lib/oop\");\r\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\r\n\r\nvar KotlinHighlightRules = function() {\r\n    // regexp must not have capturing parentheses. Use (?:) instead.\r\n    // regexps are ordered -> the first match is used\r\n\r\n    this.$rules = {\r\n        start: [{\r\n            include: \"#comments\"\r\n        }, {\r\n            token: [\r\n                \"text\",\r\n                \"keyword.other.kotlin\",\r\n                \"text\",\r\n                \"entity.name.package.kotlin\",\r\n                \"text\"\r\n            ],\r\n            regex: /^(\\s*)(package)\\b(?:(\\s*)([^ ;$]+)(\\s*))?/\r\n        }, {\r\n            include: \"#imports\"\r\n        }, {\r\n            include: \"#statements\"\r\n        }],\r\n        \"#classes\": [{\r\n            token: \"text\",\r\n            regex: /(?=\\s*(?:companion|class|object|interface))/,\r\n            push: [{\r\n                token: \"text\",\r\n                regex: /}|(?=$)/,\r\n                next: \"pop\"\r\n            }, {\r\n                token: [\"keyword.other.kotlin\", \"text\"],\r\n                regex: /\\b((?:companion\\s*)?)(class|object|interface)\\b/,\r\n                push: [{\r\n                    token: \"text\",\r\n                    regex: /(?=<|{|\\(|:)/,\r\n                    next: \"pop\"\r\n                }, {\r\n                    token: \"keyword.other.kotlin\",\r\n                    regex: /\\bobject\\b/\r\n                }, {\r\n                    token: \"entity.name.type.class.kotlin\",\r\n                    regex: /\\w+/\r\n                }]\r\n            }, {\r\n                token: \"text\",\r\n                regex: /</,\r\n                push: [{\r\n                    token: \"text\",\r\n                    regex: />/,\r\n                    next: \"pop\"\r\n                }, {\r\n                    include: \"#generics\"\r\n                }]\r\n            }, {\r\n                token: \"text\",\r\n                regex: /\\(/,\r\n                push: [{\r\n                    token: \"text\",\r\n                    regex: /\\)/,\r\n                    next: \"pop\"\r\n                }, {\r\n                    include: \"#parameters\"\r\n                }]\r\n            }, {\r\n                token: \"keyword.operator.declaration.kotlin\",\r\n                regex: /:/,\r\n                push: [{\r\n                    token: \"text\",\r\n                    regex: /(?={|$)/,\r\n                    next: \"pop\"\r\n                }, {\r\n                    token: \"entity.other.inherited-class.kotlin\",\r\n                    regex: /\\w+/\r\n                }, {\r\n                    token: \"text\",\r\n                    regex: /\\(/,\r\n                    push: [{\r\n                        token: \"text\",\r\n                        regex: /\\)/,\r\n                        next: \"pop\"\r\n                    }, {\r\n                        include: \"#expressions\"\r\n                    }]\r\n                }]\r\n            }, {\r\n                token: \"text\",\r\n                regex: /\\{/,\r\n                push: [{\r\n                    token: \"text\",\r\n                    regex: /\\}/,\r\n                    next: \"pop\"\r\n                }, {\r\n                    include: \"#statements\"\r\n                }]\r\n            }]\r\n        }],\r\n        \"#comments\": [{\r\n            token: \"punctuation.definition.comment.kotlin\",\r\n            regex: /\\/\\*/,\r\n            push: [{\r\n                token: \"punctuation.definition.comment.kotlin\",\r\n                regex: /\\*\\//,\r\n                next: \"pop\"\r\n            }, {\r\n                defaultToken: \"comment.block.kotlin\"\r\n            }]\r\n        }, {\r\n            token: [\r\n                \"text\",\r\n                \"punctuation.definition.comment.kotlin\",\r\n                \"comment.line.double-slash.kotlin\"\r\n            ],\r\n            regex: /(\\s*)(\\/\\/)(.*$)/\r\n        }],\r\n        \"#constants\": [{\r\n            token: \"constant.language.kotlin\",\r\n            regex: /\\b(?:true|false|null|this|super)\\b/\r\n        }, {\r\n            token: \"constant.numeric.kotlin\",\r\n            regex: /\\b(?:0(?:x|X)[0-9a-fA-F]*|(?:[0-9]+\\.?[0-9]*|\\.[0-9]+)(?:(?:e|E)(?:\\+|-)?[0-9]+)?)(?:[LlFfUuDd]|UL|ul)?\\b/\r\n        }, {\r\n            token: \"constant.other.kotlin\",\r\n            regex: /\\b[A-Z][A-Z0-9_]+\\b/\r\n        }],\r\n        \"#expressions\": [{\r\n            token: \"text\",\r\n            regex: /\\(/,\r\n            push: [{\r\n                token: \"text\",\r\n                regex: /\\)/,\r\n                next: \"pop\"\r\n            }, {\r\n                include: \"#expressions\"\r\n            }]\r\n        }, {\r\n            include: \"#types\"\r\n        }, {\r\n            include: \"#strings\"\r\n        }, {\r\n            include: \"#constants\"\r\n        }, {\r\n            include: \"#comments\"\r\n        }, {\r\n            include: \"#keywords\"\r\n        }],\r\n        \"#functions\": [{\r\n            token: \"text\",\r\n            regex: /(?=\\s*fun)/,\r\n            push: [{\r\n                token: \"text\",\r\n                regex: /}|(?=$)/,\r\n                next: \"pop\"\r\n            }, {\r\n                token: \"keyword.other.kotlin\",\r\n                regex: /\\bfun\\b/,\r\n                push: [{\r\n                    token: \"text\",\r\n                    regex: /(?=\\()/,\r\n                    next: \"pop\"\r\n                }, {\r\n                    token: \"text\",\r\n                    regex: /</,\r\n                    push: [{\r\n                        token: \"text\",\r\n                        regex: />/,\r\n                        next: \"pop\"\r\n                    }, {\r\n                        include: \"#generics\"\r\n                    }]\r\n                }, {\r\n                    token: [\"text\", \"entity.name.function.kotlin\"],\r\n                    regex: /((?:[\\.<\\?>\\w]+\\.)?)(\\w+)/\r\n                }]\r\n            }, {\r\n                token: \"text\",\r\n                regex: /\\(/,\r\n                push: [{\r\n                    token: \"text\",\r\n                    regex: /\\)/,\r\n                    next: \"pop\"\r\n                }, {\r\n                    include: \"#parameters\"\r\n                }]\r\n            }, {\r\n                token: \"keyword.operator.declaration.kotlin\",\r\n                regex: /:/,\r\n                push: [{\r\n                    token: \"text\",\r\n                    regex: /(?={|=|$)/,\r\n                    next: \"pop\"\r\n                }, {\r\n                    include: \"#types\"\r\n                }]\r\n            }, {\r\n                token: \"text\",\r\n                regex: /\\{/,\r\n                push: [{\r\n                    token: \"text\",\r\n                    regex: /(?=\\})/,\r\n                    next: \"pop\"\r\n                }, {\r\n                    include: \"#statements\"\r\n                }]\r\n            }, {\r\n                token: \"keyword.operator.assignment.kotlin\",\r\n                regex: /=/,\r\n                push: [{\r\n                    token: \"text\",\r\n                    regex: /(?=$)/,\r\n                    next: \"pop\"\r\n                }, {\r\n                    include: \"#expressions\"\r\n                }]\r\n            }]\r\n        }],\r\n        \"#generics\": [{\r\n            token: \"keyword.operator.declaration.kotlin\",\r\n            regex: /:/,\r\n            push: [{\r\n                token: \"text\",\r\n                regex: /(?=,|>)/,\r\n                next: \"pop\"\r\n            }, {\r\n                include: \"#types\"\r\n            }]\r\n        }, {\r\n            include: \"#keywords\"\r\n        }, {\r\n            token: \"storage.type.generic.kotlin\",\r\n            regex: /\\w+/\r\n        }],\r\n        \"#getters-and-setters\": [{\r\n            token: [\"entity.name.function.kotlin\", \"text\"],\r\n            regex: /\\b(get)\\b(\\s*\\(\\s*\\))/,\r\n            push: [{\r\n                token: \"text\",\r\n                regex: /\\}|(?=\\bset\\b)|$/,\r\n                next: \"pop\"\r\n            }, {\r\n                token: \"keyword.operator.assignment.kotlin\",\r\n                regex: /=/,\r\n                push: [{\r\n                    token: \"text\",\r\n                    regex: /(?=$|\\bset\\b)/,\r\n                    next: \"pop\"\r\n                }, {\r\n                    include: \"#expressions\"\r\n                }]\r\n            }, {\r\n                token: \"text\",\r\n                regex: /\\{/,\r\n                push: [{\r\n                    token: \"text\",\r\n                    regex: /\\}/,\r\n                    next: \"pop\"\r\n                }, {\r\n                    include: \"#expressions\"\r\n                }]\r\n            }]\r\n        }, {\r\n            token: [\"entity.name.function.kotlin\", \"text\"],\r\n            regex: /\\b(set)\\b(\\s*)(?=\\()/,\r\n            push: [{\r\n                token: \"text\",\r\n                regex: /\\}|(?=\\bget\\b)|$/,\r\n                next: \"pop\"\r\n            }, {\r\n                token: \"text\",\r\n                regex: /\\(/,\r\n                push: [{\r\n                    token: \"text\",\r\n                    regex: /\\)/,\r\n                    next: \"pop\"\r\n                }, {\r\n                    include: \"#parameters\"\r\n                }]\r\n            }, {\r\n                token: \"keyword.operator.assignment.kotlin\",\r\n                regex: /=/,\r\n                push: [{\r\n                    token: \"text\",\r\n                    regex: /(?=$|\\bset\\b)/,\r\n                    next: \"pop\"\r\n                }, {\r\n                    include: \"#expressions\"\r\n                }]\r\n            }, {\r\n                token: \"text\",\r\n                regex: /\\{/,\r\n                push: [{\r\n                    token: \"text\",\r\n                    regex: /\\}/,\r\n                    next: \"pop\"\r\n                }, {\r\n                    include: \"#expressions\"\r\n                }]\r\n            }]\r\n        }],\r\n        \"#imports\": [{\r\n            token: [\r\n                \"text\",\r\n                \"keyword.other.kotlin\",\r\n                \"text\",\r\n                \"keyword.other.kotlin\"\r\n            ],\r\n            regex: /^(\\s*)(import)(\\s+[^ $]+\\s+)((?:as)?)/\r\n        }],\r\n        \"#keywords\": [{\r\n            token: \"storage.modifier.kotlin\",\r\n            regex: /\\b(?:var|val|public|private|protected|abstract|final|enum|open|attribute|annotation|override|inline|var|val|vararg|lazy|in|out|internal|data|tailrec|operator|infix|const|yield|typealias|typeof)\\b/\r\n        }, {\r\n            token: \"keyword.control.catch-exception.kotlin\",\r\n            regex: /\\b(?:try|catch|finally|throw)\\b/\r\n        }, {\r\n            token: \"keyword.control.kotlin\",\r\n            regex: /\\b(?:if|else|while|for|do|return|when|where|break|continue)\\b/\r\n        }, {\r\n            token: \"keyword.operator.kotlin\",\r\n            regex: /\\b(?:in|is|as|assert)\\b/\r\n        }, {\r\n            token: \"keyword.operator.comparison.kotlin\",\r\n            regex: /==|!=|===|!==|<=|>=|<|>/\r\n        }, {\r\n            token: \"keyword.operator.assignment.kotlin\",\r\n            regex: /=/\r\n        }, {\r\n            token: \"keyword.operator.declaration.kotlin\",\r\n            regex: /:/\r\n        }, {\r\n            token: \"keyword.operator.dot.kotlin\",\r\n            regex: /\\./\r\n        }, {\r\n            token: \"keyword.operator.increment-decrement.kotlin\",\r\n            regex: /\\-\\-|\\+\\+/\r\n        }, {\r\n            token: \"keyword.operator.arithmetic.kotlin\",\r\n            regex: /\\-|\\+|\\*|\\/|%/\r\n        }, {\r\n            token: \"keyword.operator.arithmetic.assign.kotlin\",\r\n            regex: /\\+=|\\-=|\\*=|\\/=/\r\n        }, {\r\n            token: \"keyword.operator.logical.kotlin\",\r\n            regex: /!|&&|\\|\\|/\r\n        }, {\r\n            token: \"keyword.operator.range.kotlin\",\r\n            regex: /\\.\\./\r\n        }, {\r\n            token: \"punctuation.terminator.kotlin\",\r\n            regex: /;/\r\n        }],\r\n        \"#namespaces\": [{\r\n            token: \"keyword.other.kotlin\",\r\n            regex: /\\bnamespace\\b/\r\n        }, {\r\n            token: \"text\",\r\n            regex: /\\{/,\r\n            push: [{\r\n                token: \"text\",\r\n                regex: /\\}/,\r\n                next: \"pop\"\r\n            }, {\r\n                include: \"#statements\"\r\n            }]\r\n        }],\r\n        \"#parameters\": [{\r\n            token: \"keyword.operator.declaration.kotlin\",\r\n            regex: /:/,\r\n            push: [{\r\n                token: \"text\",\r\n                regex: /(?=,|\\)|=)/,\r\n                next: \"pop\"\r\n            }, {\r\n                include: \"#types\"\r\n            }]\r\n        }, {\r\n            token: \"keyword.operator.declaration.kotlin\",\r\n            regex: /=/,\r\n            push: [{\r\n                token: \"text\",\r\n                regex: /(?=,|\\))/,\r\n                next: \"pop\"\r\n            }, {\r\n                include: \"#expressions\"\r\n            }]\r\n        }, {\r\n            include: \"#keywords\"\r\n        }, {\r\n            token: \"variable.parameter.function.kotlin\",\r\n            regex: /\\w+/\r\n        }],\r\n        \"#statements\": [{\r\n            include: \"#namespaces\"\r\n        }, {\r\n            include: \"#typedefs\"\r\n        }, {\r\n            include: \"#classes\"\r\n        }, {\r\n            include: \"#functions\"\r\n        }, {\r\n            include: \"#variables\"\r\n        }, {\r\n            include: \"#getters-and-setters\"\r\n        }, {\r\n            include: \"#expressions\"\r\n        }],\r\n        \"#strings\": [{\r\n            token: \"punctuation.definition.string.begin.kotlin\",\r\n            regex: /\"\"\"/,\r\n            push: [{\r\n                token: \"punctuation.definition.string.end.kotlin\",\r\n                regex: /\"\"\"/,\r\n                next: \"pop\"\r\n            }, {\r\n                token: \"variable.parameter.template.kotlin\",\r\n                regex: /\\$\\w+|\\$\\{[^\\}]+\\}/\r\n            }, {\r\n                token: \"constant.character.escape.kotlin\",\r\n                regex: /\\\\./\r\n            }, {\r\n                defaultToken: \"string.quoted.third.kotlin\"\r\n            }]\r\n        }, {\r\n            token: \"punctuation.definition.string.begin.kotlin\",\r\n            regex: /\"/,\r\n            push: [{\r\n                token: \"punctuation.definition.string.end.kotlin\",\r\n                regex: /\"/,\r\n                next: \"pop\"\r\n            }, {\r\n                token: \"variable.parameter.template.kotlin\",\r\n                regex: /\\$\\w+|\\$\\{[^\\}]+\\}/\r\n            }, {\r\n                token: \"constant.character.escape.kotlin\",\r\n                regex: /\\\\./\r\n            }, {\r\n                defaultToken: \"string.quoted.double.kotlin\"\r\n            }]\r\n        }, {\r\n            token: \"punctuation.definition.string.begin.kotlin\",\r\n            regex: /'/,\r\n            push: [{\r\n                token: \"punctuation.definition.string.end.kotlin\",\r\n                regex: /'/,\r\n                next: \"pop\"\r\n            }, {\r\n                token: \"constant.character.escape.kotlin\",\r\n                regex: /\\\\./\r\n            }, {\r\n                defaultToken: \"string.quoted.single.kotlin\"\r\n            }]\r\n        }, {\r\n            token: \"punctuation.definition.string.begin.kotlin\",\r\n            regex: /`/,\r\n            push: [{\r\n                token: \"punctuation.definition.string.end.kotlin\",\r\n                regex: /`/,\r\n                next: \"pop\"\r\n            }, {\r\n                defaultToken: \"string.quoted.single.kotlin\"\r\n            }]\r\n        }],\r\n        \"#typedefs\": [{\r\n            token: \"text\",\r\n            regex: /(?=\\s*type)/,\r\n            push: [{\r\n                token: \"text\",\r\n                regex: /(?=$)/,\r\n                next: \"pop\"\r\n            }, {\r\n                token: \"keyword.other.kotlin\",\r\n                regex: /\\btype\\b/\r\n            }, {\r\n                token: \"text\",\r\n                regex: /</,\r\n                push: [{\r\n                    token: \"text\",\r\n                    regex: />/,\r\n                    next: \"pop\"\r\n                }, {\r\n                    include: \"#generics\"\r\n                }]\r\n            }, {\r\n                include: \"#expressions\"\r\n            }]\r\n        }],\r\n        \"#types\": [{\r\n            token: \"storage.type.buildin.kotlin\",\r\n            regex: /\\b(?:Any|Unit|String|Int|Boolean|Char|Long|Double|Float|Short|Byte|dynamic)\\b/\r\n        }, {\r\n            token: \"storage.type.buildin.array.kotlin\",\r\n            regex: /\\b(?:IntArray|BooleanArray|CharArray|LongArray|DoubleArray|FloatArray|ShortArray|ByteArray)\\b/\r\n        }, {\r\n            token: [\r\n                \"storage.type.buildin.collection.kotlin\",\r\n                \"text\"\r\n            ],\r\n            regex: /\\b(Array|List|Map)(<\\b)/,\r\n            push: [{\r\n                token: \"text\",\r\n                regex: />/,\r\n                next: \"pop\"\r\n            }, {\r\n                include: \"#types\"\r\n            }, {\r\n                include: \"#keywords\"\r\n            }]\r\n        }, {\r\n            token: \"text\",\r\n            regex: /\\w+</,\r\n            push: [{\r\n                token: \"text\",\r\n                regex: />/,\r\n                next: \"pop\"\r\n            }, {\r\n                include: \"#types\"\r\n            }, {\r\n                include: \"#keywords\"\r\n            }]\r\n        }, {\r\n            token: [\"keyword.operator.tuple.kotlin\", \"text\"],\r\n            regex: /(#)(\\()/,\r\n            push: [{\r\n                token: \"text\",\r\n                regex: /\\)/,\r\n                next: \"pop\"\r\n            }, {\r\n                include: \"#expressions\"\r\n            }]\r\n        }, {\r\n            token: \"text\",\r\n            regex: /\\{/,\r\n            push: [{\r\n                token: \"text\",\r\n                regex: /\\}/,\r\n                next: \"pop\"\r\n            }, {\r\n                include: \"#statements\"\r\n            }]\r\n        }, {\r\n            token: \"text\",\r\n            regex: /\\(/,\r\n            push: [{\r\n                token: \"text\",\r\n                regex: /\\)/,\r\n                next: \"pop\"\r\n            }, {\r\n                include: \"#types\"\r\n            }]\r\n        }, {\r\n            token: \"keyword.operator.declaration.kotlin\",\r\n            regex: /->/\r\n        }],\r\n        \"#variables\": [{\r\n            token: \"text\",\r\n            regex: /(?=\\s*(?:var|val))/,\r\n            push: [{\r\n                token: \"text\",\r\n                regex: /(?=:|=|$)/,\r\n                next: \"pop\"\r\n            }, {\r\n                token: \"keyword.other.kotlin\",\r\n                regex: /\\b(?:var|val)\\b/,\r\n                push: [{\r\n                    token: \"text\",\r\n                    regex: /(?=:|=|$)/,\r\n                    next: \"pop\"\r\n                }, {\r\n                    token: \"text\",\r\n                    regex: /</,\r\n                    push: [{\r\n                        token: \"text\",\r\n                        regex: />/,\r\n                        next: \"pop\"\r\n                    }, {\r\n                        include: \"#generics\"\r\n                    }]\r\n                }, {\r\n                    token: [\"text\", \"entity.name.variable.kotlin\"],\r\n                    regex: /((?:[\\.<\\?>\\w]+\\.)?)(\\w+)/\r\n                }]\r\n            }, {\r\n                token: \"keyword.operator.declaration.kotlin\",\r\n                regex: /:/,\r\n                push: [{\r\n                    token: \"text\",\r\n                    regex: /(?==|$)/,\r\n                    next: \"pop\"\r\n                }, {\r\n                    include: \"#types\"\r\n                }, {\r\n                    include: \"#getters-and-setters\"\r\n                }]\r\n            }, {\r\n                token: \"keyword.operator.assignment.kotlin\",\r\n                regex: /=/,\r\n                push: [{\r\n                    token: \"text\",\r\n                    regex: /(?=$)/,\r\n                    next: \"pop\"\r\n                }, {\r\n                    include: \"#expressions\"\r\n                }, {\r\n                    include: \"#getters-and-setters\"\r\n                }]\r\n            }]\r\n        }]\r\n    };\r\n    \r\n    this.normalizeRules();\r\n};\r\n\r\nKotlinHighlightRules.metaData = {\r\n    fileTypes: [\"kt\", \"kts\"],\r\n    name: \"Kotlin\",\r\n    scopeName: \"source.Kotlin\"\r\n};\r\n\r\n\r\noop.inherits(KotlinHighlightRules, TextHighlightRules);\r\n\r\nexports.KotlinHighlightRules = KotlinHighlightRules;\r\n});"]}