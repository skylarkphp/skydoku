{"version":3,"sources":["mode/rst_highlight_rules.js"],"names":["define","require","exports","module","oop","TextHighlightRules","RSTHighlightRules","tokens","endStringSuffix","this","$rules","start","token","regex","next","startStringPrefix","codeblock","code","defaultToken","bold","italic","entity","link","comment","inherits"],"mappings":";;;;;;;AA8BAA,OAAO,SAASC,EAASC,EAASC,GAClC,aAEA,IAAIC,EAAMH,EAAQ,cAEdI,GADOJ,EAAQ,eACMA,EAAQ,0BAA0BI,oBAEvDC,EAAoB,WAEtB,IAAIC,EACK,iBADLA,EAEI,iBAFJA,EAGK,WAHLA,EAIS,mBAJTA,EAKM,SALNA,EAMI,wBANJA,EAOI,cAPJA,EAQM,gBARNA,EASO,mBATPA,EAUO,UAIPC,EAAkB,0CAEtBC,KAAKC,QACHC,QAKIC,MAAQL,EACRM,MAAQ,oDAKRD,OAAS,OAAQL,EAAkBA,GACnCM,MAAQ,gCACRC,KAAQ,cAGRF,MAAQL,EACRM,MAAQ,MACRC,KAAQ,cAIRF,OAASL,EAAeA,GACxBM,MAAQ,2BAGRD,OAASL,EAAeA,GACxBM,MAAQ,yBAIRD,MAAQL,EACRM,MAAQ,2BAIRD,MAAQL,EACRM,MAAQ,cACRC,KAAQ,YAIRF,MAAQL,EACRM,MAAQ,oBAGRD,MAAQL,EACRM,MAAQ,mDAGRD,MAAQL,EACRM,MAAQ,uDAIRD,MAAQL,EACRM,MAAQ,wBAIRD,MAAQL,EACRM,MAAQ,+BAGRD,MAAQL,EACRM,MAAQ,+BAIRD,OAAS,OAAQL,GACjBM,MAAQE,sCACRD,KAAQ,SAGRF,OAAS,OAAQL,GACjBM,MAAQE,0CACRD,KAAQ,SAGRF,OAAS,OAAQL,GACjBM,MAAQE,uCACRD,KAAQ,WAIRF,MAAQL,EACRM,MAAQ,qBAIRD,MAAQL,EACRM,MAAQ,iBACRC,KAAQ,WAGRF,OAAS,OAAQL,GACjBM,MAAQE,sCACRD,KAAQ,WAGRF,MAAQL,EACRM,MAAQ,sBAGRD,OAAS,OAAQL,GACjBM,MAAQE,qCACRD,KAAQ,SAGRF,MAAQL,EACRM,MAAQ,wBAGRD,MAAQL,EACRM,MAAQ,oBAGRD,MAAQL,EACRM,MAAQ,kBAKRD,MAAQL,EACRM,MAAQ,QAOZG,YAEIJ,MAAQL,EACRM,MAAQ,SACRC,KAAO,cAGPF,MAAQL,EACRM,MAAQ,KACRC,KAAM,cAGNF,MAAQ,QACRC,MAAQ,GACRC,KAAO,UAMXG,OAEIL,MAAQL,EACRM,MAAQ,QAAUL,EAClBM,KAAQ,UAGRI,aAAcX,IAMlBY,OAEIP,MAAQL,EACRM,MAAQ,YAAcL,EACtBM,KAAQ,UAGRI,aAAcX,IAMlBa,SAEIR,MAAQL,EACRM,MAAQ,SAAWL,EACnBM,KAAQ,UAGRI,aAAcX,IAMlBc,SAEIT,MAAQL,EACRM,MAAQ,OAASL,EACjBM,KAAQ,UAGRI,aAAcX,IAMlBe,OAEIV,MAAQL,EACRM,MAAQ,UAAYL,EACpBM,KAAQ,UAGRI,aAAcX,IAOlBgB,UAEIX,MAAQL,EACRM,MAAQ,SACRC,KAAO,YAGPF,MAAQL,EACRM,MAAQ,KACRC,KAAM,YAGNF,MAAQ,QACRC,MAAQ,GACRC,KAAO,YAKfV,EAAIoB,SAASlB,EAAmBD,GAEhCH,EAAQI,kBAAoBA","file":"../../mode/rst_highlight_rules.js","sourcesContent":["/* ***** BEGIN LICENSE BLOCK *****\r\n * Distributed under the BSD license:\r\n *\r\n * Copyright (c) 2015, Robin Jarry\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *     * Redistributions of source code must retain the above copyright\r\n *       notice, this list of conditions and the following disclaimer.\r\n *     * Redistributions in binary form must reproduce the above copyright\r\n *       notice, this list of conditions and the following disclaimer in the\r\n *       documentation and/or other materials provided with the distribution.\r\n *     * Neither the name of Ajax.org B.V. nor the\r\n *       names of its contributors may be used to endorse or promote products\r\n *       derived from this software without specific prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\r\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY\r\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\r\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\r\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n *\r\n * ***** END LICENSE BLOCK ***** */\r\n\r\ndefine(function(require, exports, module) {\r\n\"use strict\";\r\n\r\nvar oop = require(\"../lib/oop\");\r\nvar lang = require(\"../lib/lang\");\r\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\r\n\r\nvar RSTHighlightRules = function() {\r\n\r\n  var tokens = {\r\n    title: \"markup.heading\",\r\n    list: \"markup.heading\",\r\n    table: \"constant\",\r\n    directive: \"keyword.operator\",\r\n    entity: \"string\",\r\n    link: \"markup.underline.list\",\r\n    bold: \"markup.bold\",\r\n    italic: \"markup.italic\",\r\n    literal: \"support.function\",\r\n    comment: \"comment\"\r\n  };\r\n\r\n  var startStringPrefix = \"(^|\\\\s|[\\\"'(<\\\\[{\\\\-/:])\";\r\n  var endStringSuffix = \"(?:$|(?=\\\\s|[\\\\\\\\.,;!?\\\\-/:\\\"')>\\\\]}]))\";\r\n\r\n  this.$rules = {\r\n    \"start\": [\r\n      /* NB: Only the underline of the heading is highlighted.\r\n       * ACE tokenizer does not allow backtracking, the underlined text of the\r\n       * heading cannot be highlighted. */\r\n      {\r\n        token : tokens.title,\r\n        regex : \"(^)([\\\\=\\\\-`:\\\\.'\\\"~\\\\^_\\\\*\\\\+#])(\\\\2{2,}\\\\s*$)\"\r\n      },\r\n      /* Generic directive syntax (e.g. .. code-block:: c)\r\n       * All of the directive body is highlighted as a code block. */\r\n      {\r\n        token : [\"text\", tokens.directive, tokens.literal],\r\n        regex : \"(^\\\\s*\\\\.\\\\. )([^: ]+::)(.*$)\",\r\n        next  : \"codeblock\"\r\n      },\r\n      {\r\n        token : tokens.directive,\r\n        regex : \"::$\",\r\n        next  : \"codeblock\"\r\n      },\r\n      /* Link/anchor definitions */\r\n      {\r\n        token : [tokens.entity, tokens.link],\r\n        regex : \"(^\\\\.\\\\. _[^:]+:)(.*$)\"\r\n      },\r\n      {\r\n        token : [tokens.entity, tokens.link],\r\n        regex : \"(^__ )(https?://.*$)\"\r\n      },\r\n      /* Footnote definition */\r\n      {\r\n        token : tokens.entity,\r\n        regex : \"^\\\\.\\\\. \\\\[[^\\\\]]+\\\\] \"\r\n      },\r\n      /* Comment block start */\r\n      {\r\n        token : tokens.comment,\r\n        regex : \"^\\\\.\\\\. .*$\",\r\n        next  : \"comment\"\r\n      },\r\n      /* List items */\r\n      {\r\n        token : tokens.list,\r\n        regex : \"^\\\\s*[\\\\*\\\\+-] \"\r\n      },\r\n      {\r\n        token : tokens.list,\r\n        regex : \"^\\\\s*(?:[A-Za-z]|[0-9]+|[ivxlcdmIVXLCDM]+)\\\\. \"\r\n      },\r\n      {\r\n        token : tokens.list,\r\n        regex : \"^\\\\s*\\\\(?(?:[A-Za-z]|[0-9]+|[ivxlcdmIVXLCDM]+)\\\\) \"\r\n      },\r\n      /* \"Simple\" tables */\r\n      {\r\n        token : tokens.table,\r\n        regex : \"^={2,}(?: +={2,})+$\"\r\n      },\r\n      /* \"Grid\" tables */\r\n      {\r\n        token : tokens.table,\r\n        regex : \"^\\\\+-{2,}(?:\\\\+-{2,})+\\\\+$\"\r\n      },\r\n      {\r\n        token : tokens.table,\r\n        regex : \"^\\\\+={2,}(?:\\\\+={2,})+\\\\+$\"\r\n      },\r\n      /* Inline markup */\r\n      {\r\n        token : [\"text\", tokens.literal],\r\n        regex : startStringPrefix + \"(``)(?=\\\\S)\",\r\n        next  : \"code\"\r\n      },\r\n      {\r\n        token : [\"text\", tokens.bold],\r\n        regex : startStringPrefix + \"(\\\\*\\\\*)(?=\\\\S)\",\r\n        next  : \"bold\"\r\n      },\r\n      {\r\n        token : [\"text\", tokens.italic],\r\n        regex : startStringPrefix + \"(\\\\*)(?=\\\\S)\",\r\n        next  : \"italic\"\r\n      },\r\n      /* Substitution reference */\r\n      {\r\n        token : tokens.entity,\r\n        regex : \"\\\\|[\\\\w\\\\-]+?\\\\|\"\r\n      },\r\n      /* Link/footnote references */\r\n      {\r\n        token : tokens.entity,\r\n        regex : \":[\\\\w-:]+:`\\\\S\",\r\n        next  : \"entity\"\r\n      },\r\n      {\r\n        token : [\"text\", tokens.entity],\r\n        regex : startStringPrefix + \"(_`)(?=\\\\S)\",\r\n        next  : \"entity\"\r\n      },\r\n      {\r\n        token : tokens.entity,\r\n        regex : \"_[A-Za-z0-9\\\\-]+?\"\r\n      },\r\n      {\r\n        token : [\"text\", tokens.link],\r\n        regex : startStringPrefix + \"(`)(?=\\\\S)\",\r\n        next  : \"link\"\r\n      },\r\n      {\r\n        token : tokens.link,\r\n        regex : \"[A-Za-z0-9\\\\-]+?__?\"\r\n      },\r\n      {\r\n        token : tokens.link,\r\n        regex : \"\\\\[[^\\\\]]+?\\\\]_\"\r\n      },\r\n      {\r\n        token : tokens.link,\r\n        regex : \"https?://\\\\S+\"\r\n      },\r\n      /* \"Grid\" tables column separator\r\n       * This is at the end to make it lower priority over all other rules. */\r\n      {\r\n        token : tokens.table,\r\n        regex : \"\\\\|\"\r\n      }\r\n    ],\r\n\r\n    /* This state is used for all directive bodies and literal blocks.\r\n     * The parser returns to the \"start\" state when reaching the first\r\n     * non-empty line that does not start with at least one space. */\r\n    \"codeblock\": [\r\n      {\r\n        token : tokens.literal,\r\n        regex : \"^ +.+$\",\r\n        next : \"codeblock\"\r\n      },\r\n      {\r\n        token : tokens.literal,\r\n        regex : '^$',\r\n        next: \"codeblock\"\r\n      },\r\n      {\r\n        token : \"empty\",\r\n        regex : \"\",\r\n        next : \"start\"\r\n      }\r\n    ],\r\n\r\n    /* Inline code\r\n     * The parser returns to the \"start\" state when reaching \"``\" */\r\n    \"code\": [\r\n      {\r\n        token : tokens.literal,\r\n        regex : \"\\\\S``\" + endStringSuffix,\r\n        next  : \"start\"\r\n      },\r\n      {\r\n        defaultToken: tokens.literal\r\n      }\r\n    ],\r\n\r\n    /* Bold (strong) text\r\n     * The parser returns to the \"start\" state when reaching \"**\" */\r\n    \"bold\": [\r\n      {\r\n        token : tokens.bold,\r\n        regex : \"\\\\S\\\\*\\\\*\" + endStringSuffix,\r\n        next  : \"start\"\r\n      },\r\n      {\r\n        defaultToken: tokens.bold\r\n      }\r\n    ],\r\n\r\n    /* Italic (emphasis) text\r\n     * The parser returns to the \"start\" state when reaching \"*\" */\r\n    \"italic\": [\r\n      {\r\n        token : tokens.italic,\r\n        regex : \"\\\\S\\\\*\" + endStringSuffix,\r\n        next  : \"start\"\r\n      },\r\n      {\r\n        defaultToken: tokens.italic\r\n      }\r\n    ],\r\n\r\n    /* Explicit role/class text or link anchor definition\r\n     * The parser returns to the \"start\" state when reaching \"`\" */\r\n    \"entity\": [\r\n      {\r\n        token : tokens.entity,\r\n        regex : \"\\\\S`\" + endStringSuffix,\r\n        next  : \"start\"\r\n      },\r\n      {\r\n        defaultToken: tokens.entity\r\n      }\r\n    ],\r\n\r\n    /* Link reference\r\n     * The parser returns to the \"start\" state when reaching \"`_\" or \"`__\" */\r\n    \"link\": [\r\n      {\r\n        token : tokens.link,\r\n        regex : \"\\\\S`__?\" + endStringSuffix,\r\n        next  : \"start\"\r\n      },\r\n      {\r\n        defaultToken: tokens.link\r\n      }\r\n    ],\r\n\r\n    /* Comment block.\r\n     * The parser returns to the \"start\" state when reaching the first\r\n     * non-empty line that does not start with at least one space. */\r\n    \"comment\": [\r\n      {\r\n        token : tokens.comment,\r\n        regex : \"^ +.+$\",\r\n        next : \"comment\"\r\n      },\r\n      {\r\n        token : tokens.comment,\r\n        regex : '^$',\r\n        next: \"comment\"\r\n      },\r\n      {\r\n        token : \"empty\",\r\n        regex : \"\",\r\n        next : \"start\"\r\n      }\r\n    ]\r\n  };\r\n};\r\noop.inherits(RSTHighlightRules, TextHighlightRules);\r\n\r\nexports.RSTHighlightRules = RSTHighlightRules;\r\n});\r\n"]}