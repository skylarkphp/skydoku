{"version":3,"sources":["mode/logiql.js"],"names":["define","require","exports","module","oop","TextMode","Mode","LogiQLHighlightRules","FoldMode","TokenIterator","Range","CstyleBehaviour","MatchingBraceOutdent","this","HighlightRules","foldingRules","$outdent","$behaviour","inherits","lineCommentStart","blockComment","start","end","getNextLineIndent","state","line","tab","indent","$getIndent","tokenizedLine","getTokenizer","getLineTokens","tokens","endState","test","length","type","match","checkOutdent","input","autoOutdent","doc","row","prevLine","getLine","column","lastIndexOf","startRange","getMatching","replace","session","undefined","selection","lead","tok","startToken","getTokenAt","it","step","stepForward","stepBackward","col","getCurrentTokenColumn","getCurrentTokenRow","value","$id","call","prototype"],"mappings":";;;;;;;AA8BAA,OAAO,SAASC,EAASC,EAASC,GAClC,aAEA,IAAIC,EAAMH,EAAQ,cACdI,EAAWJ,EAAQ,UAAUK,KAC7BC,EAAuBN,EAAQ,4BAA4BM,qBAC3DC,EAAWP,EAAQ,oBAAoBO,SACvCC,EAAgBR,EAAQ,qBAAqBQ,cAC7CC,EAAQT,EAAQ,YAAYS,MAC5BC,EAAkBV,EAAQ,sBAAsBU,gBAChDC,EAAuBX,EAAQ,4BAA4BW,qBAE3DN,EAAO,WACPO,KAAKC,eAAiBP,EACtBM,KAAKE,aAAe,IAAIP,EACxBK,KAAKG,SAAW,IAAIJ,EACpBC,KAAKI,WAAa,IAAIN,GAE1BP,EAAIc,SAASZ,EAAMD,GAEnB,WACIQ,KAAKM,iBAAmB,KACxBN,KAAKO,cAAgBC,MAAO,KAAMC,IAAK,MAEvCT,KAAKU,kBAAoB,SAASC,EAAOC,EAAMC,GAC3C,IAAIC,EAASd,KAAKe,WAAWH,GAEzBI,EAAgBhB,KAAKiB,eAAeC,cAAcN,EAAMD,GACxDQ,EAASH,EAAcG,OACvBC,EAAWJ,EAAcL,MAC7B,GAAI,iBAAiBU,KAAKD,GACtB,OAAON,EACX,GAAIK,EAAOG,QAA4C,kBAAlCH,EAAOA,EAAOG,OAAS,GAAGC,KAC3C,OAAOT,EAECF,EAAKY,QAGjB,MAFI,wBAAwBH,KAAKT,KAC7BE,GAAUD,GACPC,GAGXd,KAAKyB,aAAe,SAASd,EAAOC,EAAMc,GACtC,QAAI1B,KAAKG,SAASsB,aAAab,EAAMc,KAGvB,OAAVA,GAA4B,SAAVA,MAGjB,OAAOL,KAAKT,IAMrBZ,KAAK2B,YAAc,SAAShB,EAAOiB,EAAKC,GACpC,IAAI7B,KAAKG,SAASwB,YAAYC,EAAKC,GAAnC,CAEA,IAAIC,EAAWF,EAAIG,QAAQF,GACvBL,EAAQM,EAASN,MAAM,QACvBQ,EAASF,EAASG,YAAY,KAAO,EACzC,IAAKT,IAAUK,IAAQG,EAAQ,OAAO,EAE3BJ,EAAIG,QAAQF,EAAM,GAA7B,IACIK,EAAalC,KAAKmC,YAAYP,GAAMC,IAAKA,EAAKG,OAAQA,IAC1D,IAAKE,GAAcA,EAAW1B,MAAMqB,KAAOA,EAAK,OAAO,EAEvDG,EAASR,EAAM,GAAGF,OAClB,IAAIR,EAASd,KAAKe,WAAWa,EAAIG,QAAQG,EAAW1B,MAAMqB,MAC1DD,EAAIQ,QAAQ,IAAIvC,EAAMgC,EAAM,EAAG,EAAGA,EAAM,EAAGG,GAASlB,KAGxDd,KAAKmC,YAAc,SAASE,EAASR,EAAKG,QAC3BM,GAAPT,IACAA,EAAMQ,EAAQE,UAAUC,MACV,iBAAPX,IACPG,EAASH,EAAIG,OACbH,EAAMA,EAAIA,KAGd,IAEIY,EAFAC,EAAaL,EAAQM,WAAWd,EAAKG,GAGzC,GAAKU,EAAL,CAEA,GAJe,iBAIXA,EAAWnB,KAAkB,EACzBqB,EAAK,IAAIhD,EAAcyC,EAASR,EAAKG,IACtCa,KAAOD,EAAGE,gBACV,CAAA,GAPkC,eAO9BJ,EAAWnB,KAIlB,OAHA,IAAIqB,GAAAA,EAAK,IAAIhD,EAAcyC,EAASR,EAAKG,IACtCa,KAAOD,EAAGG,aAIjB,MAAON,EAAMG,EAAGC,SAbD,iBAcPJ,EAAIlB,MAd6B,eAcTkB,EAAIlB,OAGpC,GAAKkB,GAAOA,EAAIlB,MAAQmB,EAAWnB,KAAnC,CAGA,IAAIyB,EAAMJ,EAAGK,wBACTpB,EAAMe,EAAGM,qBACb,OAAO,IAAIrD,EAAMgC,EAAKmB,EAAKnB,EAAKmB,EAAMP,EAAIU,MAAM7B,WAEpDtB,KAAKoD,IAAM,mBACZC,KAAK5D,EAAK6D,WAEbjE,EAAQI,KAAOA","file":"../../mode/logiql.js","sourcesContent":["/* ***** BEGIN LICENSE BLOCK *****\r\n * Distributed under the BSD license:\r\n *\r\n * Copyright (c) 2012, Ajax.org B.V.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *     * Redistributions of source code must retain the above copyright\r\n *       notice, this list of conditions and the following disclaimer.\r\n *     * Redistributions in binary form must reproduce the above copyright\r\n *       notice, this list of conditions and the following disclaimer in the\r\n *       documentation and/or other materials provided with the distribution.\r\n *     * Neither the name of Ajax.org B.V. nor the\r\n *       names of its contributors may be used to endorse or promote products\r\n *       derived from this software without specific prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\r\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY\r\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\r\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\r\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n *\r\n * ***** END LICENSE BLOCK ***** */\r\n\r\ndefine(function(require, exports, module) {\r\n\"use strict\";\r\n\r\nvar oop = require(\"../lib/oop\");\r\nvar TextMode = require(\"./text\").Mode;\r\nvar LogiQLHighlightRules = require(\"./logiql_highlight_rules\").LogiQLHighlightRules;\r\nvar FoldMode = require(\"./folding/coffee\").FoldMode;\r\nvar TokenIterator = require(\"../token_iterator\").TokenIterator;\r\nvar Range = require(\"../range\").Range;\r\nvar CstyleBehaviour = require(\"./behaviour/cstyle\").CstyleBehaviour;\r\nvar MatchingBraceOutdent = require(\"./matching_brace_outdent\").MatchingBraceOutdent;\r\n\r\nvar Mode = function() {\r\n    this.HighlightRules = LogiQLHighlightRules;\r\n    this.foldingRules = new FoldMode();\r\n    this.$outdent = new MatchingBraceOutdent();\r\n    this.$behaviour = new CstyleBehaviour();\r\n};\r\noop.inherits(Mode, TextMode);\r\n\r\n(function() {\r\n    this.lineCommentStart = \"//\";\r\n    this.blockComment = {start: \"/*\", end: \"*/\"};\r\n\r\n    this.getNextLineIndent = function(state, line, tab) {\r\n        var indent = this.$getIndent(line);\r\n\r\n        var tokenizedLine = this.getTokenizer().getLineTokens(line, state);\r\n        var tokens = tokenizedLine.tokens;\r\n        var endState = tokenizedLine.state;\r\n        if (/comment|string/.test(endState))  \r\n            return indent;\r\n        if (tokens.length && tokens[tokens.length - 1].type == \"comment.single\")\r\n            return indent;\r\n\r\n        var match = line.match();\r\n        if (/(-->|<--|<-|->|{)\\s*$/.test(line))\r\n            indent += tab;\r\n        return indent;\r\n    };\r\n\r\n    this.checkOutdent = function(state, line, input) {\r\n        if (this.$outdent.checkOutdent(line, input))\r\n            return true;\r\n\r\n        if (input !== \"\\n\" && input !== \"\\r\\n\")\r\n            return false;\r\n            \r\n        if (!/^\\s+/.test(line))\r\n            return false;\r\n\r\n        return true;\r\n    };\r\n\r\n    this.autoOutdent = function(state, doc, row) {\r\n        if (this.$outdent.autoOutdent(doc, row))\r\n            return;\r\n        var prevLine = doc.getLine(row);\r\n        var match = prevLine.match(/^\\s+/);\r\n        var column = prevLine.lastIndexOf(\".\") + 1;\r\n        if (!match || !row || !column) return 0;\r\n\r\n        var line = doc.getLine(row + 1);\r\n        var startRange = this.getMatching(doc, {row: row, column: column});\r\n        if (!startRange || startRange.start.row == row) return 0;\r\n\r\n        column = match[0].length;\r\n        var indent = this.$getIndent(doc.getLine(startRange.start.row));\r\n        doc.replace(new Range(row + 1, 0, row + 1, column), indent);\r\n    };\r\n\r\n    this.getMatching = function(session, row, column) {\r\n        if (row == undefined)\r\n            row = session.selection.lead;\r\n        if (typeof row == \"object\") {\r\n            column = row.column;\r\n            row = row.row;\r\n        }\r\n\r\n        var startToken = session.getTokenAt(row, column);\r\n        var KW_START = \"keyword.start\", KW_END = \"keyword.end\";\r\n        var tok;\r\n        if (!startToken)\r\n            return;\r\n        if (startToken.type == KW_START) {\r\n            var it = new TokenIterator(session, row, column);\r\n            it.step = it.stepForward;\r\n        } else if (startToken.type == KW_END) {\r\n            var it = new TokenIterator(session, row, column);\r\n            it.step = it.stepBackward;\r\n        } else\r\n            return;\r\n\r\n        while (tok = it.step()) {\r\n            if (tok.type == KW_START || tok.type == KW_END)\r\n                break;\r\n        }\r\n        if (!tok || tok.type == startToken.type)\r\n            return;\r\n\r\n        var col = it.getCurrentTokenColumn();\r\n        var row = it.getCurrentTokenRow();\r\n        return new Range(row, col, row, col + tok.value.length);\r\n    };\r\n    this.$id = \"ace/mode/logiql\";\r\n}).call(Mode.prototype);\r\n\r\nexports.Mode = Mode;\r\n});"]}