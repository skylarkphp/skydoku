{"version":3,"sources":["mode/redshift_highlight_rules.js"],"names":["define","require","exports","module","oop","DocCommentHighlightRules","TextHighlightRules","JsonHighlightRules","RedshiftHighlightRules","sqlRules","token","regex","this","createKeywordMapper","support.function","keyword","$rules","start","getStartRule","next","statement","concat","dollarSql","comment","commentStatement","commentDollarSql","dollarStatementString","dollarSqlString","embedRules","getEndRule","inherits"],"mappings":";;;;;;;AA8BAA,OAAO,SAASC,QAASC,QAASC,QAElC,IAAIC,EAAMH,QAAQ,cAEdI,GADOJ,QAAQ,eACYA,QAAQ,iCAAiCI,0BACpEC,EAAqBL,QAAQ,0BAA0BK,mBAEvDC,EAAqBN,QAAQ,0BAA0BM,mBAEvDC,EAAyB,WAGzB,IAkCIC,IACIC,MAAQ,SACRC,MAAQ,uCAERD,MAAQ,oBACRC,MAAQ,UAERD,MAAQ,mBACRC,MAAQ,oDAERD,MAhBYE,KAAKC,qBACrBC,mBAhBmB,6xDAiBnBC,QA9BW,mkCA+BZ,cAAc,GAcTJ,MAAQ,+BAERD,MAAQ,mBACRC,MAAQ,4SAKRD,MAAQ,eACRC,MAAQ,UAERD,MAAQ,eACRC,MAAQ,UAERD,MAAQ,OACRC,MAAQ,SAKhBC,KAAKI,QACDC,QACQP,MAAQ,UACRC,MAAQ,SAEZN,EAAyBa,aAAa,cAElCR,MAAQ,UACRC,MAAQ,SACRQ,KAAO,YAEPT,MAAQ,yBACRC,MAAQ,aACRQ,KAAO,cAEPT,MAAQ,kBACRC,MAAQ,mBAIhBS,YACQV,MAAQ,UACRC,MAAQ,UAERD,MAAQ,UACRC,MAAQ,SACRQ,KAAO,qBAEPT,MAAQ,eACRC,MAAQ,IACRQ,KAAO,UAEPT,MAAQ,SACRC,MAAQ,aACRQ,KAAO,eAEPT,MAAQ,SACRC,MAAQ,oBACRQ,KAAO,cAEPT,MAAQ,SACRC,MAAQ,mBACRQ,KAAO,0BAEbE,OAAOZ,GAETa,YACQZ,MAAQ,UACRC,MAAQ,UAERD,MAAQ,UACRC,MAAQ,SACRQ,KAAO,qBAEPT,MAAQ,SACRC,MAAQ,oBACRQ,KAAO,cAEPT,MAAQ,SACRC,MAAQ,mBACRQ,KAAO,oBAEbE,OAAOZ,GAETc,UACQb,MAAQ,UACRC,MAAQ,YACRQ,KAAO,UAEPT,MAAQ,UACRC,MAAQ,OAIhBa,mBACQd,MAAQ,UACRC,MAAQ,YACRQ,KAAO,cAEPT,MAAQ,UACRC,MAAQ,OAIhBc,mBACQf,MAAQ,UACRC,MAAQ,YACRQ,KAAO,cAEPT,MAAQ,UACRC,MAAQ,OAIhBe,wBACQhB,MAAQ,SACRC,MAAQ,sBACRQ,KAAO,cAEPT,MAAQ,SACRC,MAAQ,OAIhBgB,kBACQjB,MAAQ,SACRC,MAAQ,sBACRQ,KAAO,cAEPT,MAAQ,SACRC,MAAQ,QAKpBC,KAAKgB,WAAWvB,EAA0B,QAAUA,EAAyBwB,WAAW,WACxFjB,KAAKgB,WAAWrB,EAAoB,UAAWG,MAAQ,SAAUC,MAAQ,aAAcQ,KAAO,gBAGlGf,EAAI0B,SAAStB,EAAwBF,GAErCJ,QAAQM,uBAAyBA","file":"../../mode/redshift_highlight_rules.js","sourcesContent":["/* ***** BEGIN LICENSE BLOCK *****\r\n * Distributed under the BSD license:\r\n *\r\n * Copyright (c) 2010, Ajax.org B.V.\r\n * All rights reserved.\r\n * \r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *     * Redistributions of source code must retain the above copyright\r\n *       notice, this list of conditions and the following disclaimer.\r\n *     * Redistributions in binary form must reproduce the above copyright\r\n *       notice, this list of conditions and the following disclaimer in the\r\n *       documentation and/or other materials provided with the distribution.\r\n *     * Neither the name of Ajax.org B.V. nor the\r\n *       names of its contributors may be used to endorse or promote products\r\n *       derived from this software without specific prior written permission.\r\n * \r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\r\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY\r\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\r\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\r\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n *\r\n * ***** END LICENSE BLOCK ***** */\r\n\r\ndefine(function(require, exports, module) {\r\n\r\nvar oop = require(\"../lib/oop\");\r\nvar lang = require(\"../lib/lang\");\r\nvar DocCommentHighlightRules = require(\"./doc_comment_highlight_rules\").DocCommentHighlightRules;\r\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\r\n// Syntax highlighting for json.\r\nvar JsonHighlightRules = require(\"./json_highlight_rules\").JsonHighlightRules;\r\n\r\nvar RedshiftHighlightRules = function() {\r\n\r\n    // Keywords, functions, operators last updated for pg 9.3.\r\n    var keywords = (\r\n        \"aes128|aes256|all|allowoverwrite|analyse|analyze|and|any|array|as|asc|authorization|backup|\" + \r\n        \"between|binary|blanksasnull|both|bytedict|bzip2|case|cast|check|collate|column|constraint|create|credentials|\" + \r\n        \"cross|current_date|current_time|current_timestamp|current_user|current_user_id|default|deferrable|deflate|defrag|delta|\" + \r\n        \"delta32k|desc|disable|distinct|do|else|emptyasnull|enable|encode|encrypt|encryption|end|except|explicit|false|for|foreign|\" + \r\n        \"freeze|from|full|globaldict256|globaldict64k|grant|group|gzip|having|identity|ignore|ilike|in|initially|inner|intersect|into|is|\" + \r\n        \"isnull|join|leading|left|like|limit|localtime|localtimestamp|lun|luns|lzo|lzop|minus|mostly13|mostly32|mostly8|natural|new|not|notnull|\" + \r\n        \"null|nulls|off|offline|offset|old|on|only|open|or|order|outer|overlaps|parallel|partition|percent|permissions|placing|primary|raw|readratio|\" +\r\n        \"recover|references|rejectlog|resort|restore|right|select|session_user|similar|some|sysdate|system|table|tag|tdes|text255|text32k|then|timestamp|\" + \r\n        \"to|top|trailing|true|truncatecolumns|union|unique|user|using|verbose|wallet|when|where|with|without\"\r\n    );\r\n\r\n\r\n    var builtinFunctions = (\r\n        \"current_schema|current_schemas|has_database_privilege|has_schema_privilege|has_table_privilege|age|current_time|current_timestamp|localtime|\" + \r\n        \"isfinite|now|ascii|get_bit|get_byte|octet_length|set_bit|set_byte|to_ascii|avg|count|listagg|max|min|stddev_samp|stddev_pop|sum|var_samp|var_pop|\" + \r\n        \"bit_and|bit_or|bool_and|bool_or|avg|count|cume_dist|dense_rank|first_value|last_value|lag|lead|listagg|max|median|min|nth_value|ntile|percent_rank|\" + \r\n        \"percentile_cont|percentile_disc|rank|ratio_to_report|row_number|case|coalesce|decode|greatest|least|nvl|nvl2|nullif|add_months|age|convert_timezone|\" +\r\n        \"current_date|timeofday|current_time|current_timestamp|date_cmp|date_cmp_timestamp|date_part_year|dateadd|datediff|date_part|date_trunc|extract|getdate|\" +\r\n        \"interval_cmp|isfinite|last_day|localtime|localtimestamp|months_between|next_day|now|sysdate|timestamp_cmp|timestamp_cmp_date|trunc|abs|acos|asin|atan|\" +\r\n        \"atan2|cbrt|ceiling|ceil|checksum|cos|cot|degrees|dexp|dlog1|dlog10|exp|floor|ln|log|mod|pi|power|radians|random|round|sin|sign|sqrt|tan|trunc|ascii|\" +\r\n        \"bpcharcmp|btrim|bttext_pattern_cmp|char_length|character_length|charindex|chr|concat|crc32|func_sha1|get_bit|get_byte|initcap|left|right|len|length|\" +\r\n        \"lower|lpad|rpad|ltrim|md5|octet_length|position|quote_ident|quote_literal|regexp_count|regexp_instr|regexp_replace|regexp_substr|repeat|replace|replicate|\" +\r\n        \"reverse|rtrim|set_bit|set_byte|split_part|strpos|strtol|substring|textlen|to_ascii|to_hex|translate|trim|upper|json_array_length|json_extract_array_element_text|\" +\r\n        \"json_extract_path_text|cast|convert|to_char|to_date|to_number|current_database|current_schema|current_schemas|current_user|current_user_id|has_database_privilege|\" +\r\n        \"has_schema_privilege|has_table_privilege|pg_backend_pid|pg_last_copy_count|pg_last_copy_id|pg_last_query_id|pg_last_unload_count|session_user|slice_num|user|version\"\r\n    );\r\n\r\n    var keywordMapper = this.createKeywordMapper({\r\n        \"support.function\": builtinFunctions,\r\n        \"keyword\": keywords\r\n    }, \"identifier\", true);\r\n\r\n\r\n    var sqlRules = [{\r\n            token : \"string\", // single line string -- assume dollar strings if multi-line for now\r\n            regex : \"['](?:(?:\\\\\\\\.)|(?:[^'\\\\\\\\]))*?[']\"\r\n        }, {\r\n            token : \"variable.language\", // pg identifier\r\n            regex : '\".*?\"'\r\n        }, {\r\n            token : \"constant.numeric\", // float\r\n            regex : \"[+-]?\\\\d+(?:(?:\\\\.\\\\d*)?(?:[eE][+-]?\\\\d+)?)?\\\\b\"\r\n        }, {\r\n            token : keywordMapper,\r\n            regex : \"[a-zA-Z_][a-zA-Z0-9_$]*\\\\b\" // TODO - Unicode in identifiers\r\n        }, {\r\n            token : \"keyword.operator\",\r\n            regex : \"!|!!|!~|!~\\\\*|!~~|!~~\\\\*|#|##|#<|#<=|#<>|#=|#>|#>=|%|\\\\&|\\\\&\\\\&|\\\\&<|\\\\&<\\\\||\\\\&>|\\\\*|\\\\+|\" +\r\n                    \"\\\\-|/|<|<#>|<\\\\->|<<|<<=|<<\\\\||<=|<>|<\\\\?>|<@|<\\\\^|=|>|>=|>>|>>=|>\\\\^|\\\\?#|\\\\?\\\\-|\\\\?\\\\-\\\\||\" +\r\n                    \"\\\\?\\\\||\\\\?\\\\|\\\\||@|@\\\\-@|@>|@@|@@@|\\\\^|\\\\||\\\\|\\\\&>|\\\\|/|\\\\|>>|\\\\|\\\\||\\\\|\\\\|/|~|~\\\\*|~<=~|~<~|\" +\r\n                    \"~=|~>=~|~>~|~~|~~\\\\*\"\r\n        }, {\r\n            token : \"paren.lparen\",\r\n            regex : \"[\\\\(]\"\r\n        }, {\r\n            token : \"paren.rparen\",\r\n            regex : \"[\\\\)]\"\r\n        }, {\r\n            token : \"text\",\r\n            regex : \"\\\\s+\"\r\n        }\r\n    ];\r\n\r\n\r\n    this.$rules = {\r\n        \"start\" : [{\r\n                token : \"comment\",\r\n                regex : \"--.*$\"\r\n            },\r\n            DocCommentHighlightRules.getStartRule(\"doc-start\"),\r\n            {\r\n                token : \"comment\", // multi-line comment\r\n                regex : \"\\\\/\\\\*\",\r\n                next : \"comment\"\r\n            },{\r\n                token : \"keyword.statementBegin\",\r\n                regex : \"^[a-zA-Z]+\", // Could enumerate starting keywords but this allows things to work when new statements are added.\r\n                next : \"statement\"\r\n            },{\r\n                token : \"support.buildin\", // psql directive\r\n                regex : \"^\\\\\\\\[\\\\S]+.*$\"\r\n            }\r\n        ],\r\n\r\n        \"statement\" : [{\r\n                token : \"comment\",\r\n                regex : \"--.*$\"\r\n            }, {\r\n                token : \"comment\", // multi-line comment\r\n                regex : \"\\\\/\\\\*\",\r\n                next : \"commentStatement\"\r\n            }, {\r\n                token : \"statementEnd\",\r\n                regex : \";\",\r\n                next : \"start\"\r\n            }, {\r\n                token : \"string\",\r\n                regex : \"\\\\$json\\\\$\",\r\n                next : \"json-start\"\r\n            }, {\r\n                token : \"string\",\r\n                regex : \"\\\\$[\\\\w_0-9]*\\\\$$\", // dollar quote at the end of a line\r\n                next : \"dollarSql\"\r\n            }, {\r\n                token : \"string\",\r\n                regex : \"\\\\$[\\\\w_0-9]*\\\\$\",\r\n                next : \"dollarStatementString\"\r\n            }\r\n        ].concat(sqlRules),\r\n\r\n        \"dollarSql\" : [{\r\n                token : \"comment\",\r\n                regex : \"--.*$\"\r\n            }, {\r\n                token : \"comment\", // multi-line comment\r\n                regex : \"\\\\/\\\\*\",\r\n                next : \"commentDollarSql\"\r\n            }, {\r\n                token : \"string\", // end quoting with dollar at the start of a line\r\n                regex : \"^\\\\$[\\\\w_0-9]*\\\\$\",\r\n                next : \"statement\"\r\n            }, {\r\n                token : \"string\",\r\n                regex : \"\\\\$[\\\\w_0-9]*\\\\$\",\r\n                next : \"dollarSqlString\"\r\n            }\r\n        ].concat(sqlRules),\r\n\r\n        \"comment\" : [{\r\n                token : \"comment\", // closing comment\r\n                regex : \".*?\\\\*\\\\/\",\r\n                next : \"start\"\r\n            }, {\r\n                token : \"comment\", // comment spanning whole line\r\n                regex : \".+\"\r\n            }\r\n        ],\r\n\r\n        \"commentStatement\" : [{\r\n                token : \"comment\", // closing comment\r\n                regex : \".*?\\\\*\\\\/\",\r\n                next : \"statement\"\r\n            }, {\r\n                token : \"comment\", // comment spanning whole line\r\n                regex : \".+\"\r\n            }\r\n        ],\r\n\r\n        \"commentDollarSql\" : [{\r\n                token : \"comment\", // closing comment\r\n                regex : \".*?\\\\*\\\\/\",\r\n                next : \"dollarSql\"\r\n            }, {\r\n                token : \"comment\", // comment spanning whole line\r\n                regex : \".+\"\r\n            }\r\n        ],\r\n\r\n        \"dollarStatementString\" : [{\r\n                token : \"string\", // closing dollarstring\r\n                regex : \".*?\\\\$[\\\\w_0-9]*\\\\$\",\r\n                next : \"statement\"\r\n            }, {\r\n                token : \"string\", // dollarstring spanning whole line\r\n                regex : \".+\"\r\n            }\r\n        ],\r\n\r\n        \"dollarSqlString\" : [{\r\n                token : \"string\", // closing dollarstring\r\n                regex : \".*?\\\\$[\\\\w_0-9]*\\\\$\",\r\n                next : \"dollarSql\"\r\n            }, {\r\n                token : \"string\", // dollarstring spanning whole line\r\n                regex : \".+\"\r\n            }\r\n        ]\r\n    };\r\n\r\n    this.embedRules(DocCommentHighlightRules, \"doc-\", [ DocCommentHighlightRules.getEndRule(\"start\") ]);\r\n    this.embedRules(JsonHighlightRules, \"json-\", [{token : \"string\", regex : \"\\\\$json\\\\$\", next : \"statement\"}]);\r\n};\r\n\r\noop.inherits(RedshiftHighlightRules, TextHighlightRules);\r\n\r\nexports.RedshiftHighlightRules = RedshiftHighlightRules;\r\n});\r\n"]}