{"version":3,"sources":["mode/scad_highlight_rules.js"],"names":["define","require","exports","module","oop","DocCommentHighlightRules","TextHighlightRules","scadHighlightRules","keywordMapper","this","createKeywordMapper","variable.language","keyword","constant.language","$rules","start","token","regex","getStartRule","next","comment","defaultToken","qqstring","qstring","embedRules","getEndRule","inherits"],"mappings":";;;;;;;AA8BAA,OAAO,SAASC,EAASC,EAASC,GAClC,aAEA,IAAIC,EAAMH,EAAQ,cAEdI,GADOJ,EAAQ,eACYA,EAAQ,iCAAiCI,0BACpEC,EAAqBL,EAAQ,0BAA0BK,mBAEvDC,EAAqB,WACrB,IAAIC,EAAgBC,KAAKC,qBACrBC,oBAAqB,OACrBC,QAAW,qBACXC,oBAAqB,QACtB,cAKHJ,KAAKK,QACDC,QAEQC,MAAQ,UACRC,MAAQ,aAEZZ,EAAyBa,aAAa,UAElCF,MAAQ,UACRC,MAAQ,SACRE,KAAO,YAEPH,MAAQ,SACRC,MAAQ,uCAERD,MAAQ,SACRC,MAAQ,aACRE,KAAO,aAEPH,MAAQ,SACRC,MAAQ,uCAERD,MAAQ,SACRC,MAAQ,aACRE,KAAO,YAEPH,MAAQ,mBACRC,MAAQ,yBAERD,MAAQ,mBACRC,MAAQ,oDAEVD,MAAQ,WACRC,MAAQ,oBAERD,MAAQ,UACRC,MAAQ,oBAEND,MAAQR,EACRS,MAAQ,gCAERD,MAAQ,mBACRC,MAAQ,0JAERD,MAAQ,eACRC,MAAQ,UAERD,MAAQ,eACRC,MAAQ,YAERD,MAAQ,OACRC,MAAQ,SAGhBG,UAEQJ,MAAQ,UACRC,MAAQ,SACRE,KAAO,UAEPE,aAAe,YAGvBC,WAEQN,MAAQ,SACRC,MAAQ,gCACRE,KAAO,UAEPH,MAAQ,SACRC,MAAQ,OAGhBM,UAEQP,MAAQ,SACRC,MAAQ,gCACRE,KAAO,UAEPH,MAAQ,SACRC,MAAQ,QAKpBR,KAAKe,WAAWnB,EAA0B,QACpCA,EAAyBoB,WAAW,YAG9CrB,EAAIsB,SAASnB,EAAoBD,GAEjCJ,EAAQK,mBAAqBA","file":"../../mode/scad_highlight_rules.js","sourcesContent":["/* ***** BEGIN LICENSE BLOCK *****\r\n * Distributed under the BSD license:\r\n *\r\n * Copyright (c) 2010, Ajax.org B.V.\r\n * All rights reserved.\r\n * \r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *     * Redistributions of source code must retain the above copyright\r\n *       notice, this list of conditions and the following disclaimer.\r\n *     * Redistributions in binary form must reproduce the above copyright\r\n *       notice, this list of conditions and the following disclaimer in the\r\n *       documentation and/or other materials provided with the distribution.\r\n *     * Neither the name of Ajax.org B.V. nor the\r\n *       names of its contributors may be used to endorse or promote products\r\n *       derived from this software without specific prior written permission.\r\n * \r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\r\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY\r\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\r\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\r\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n *\r\n * ***** END LICENSE BLOCK ***** */\r\n\r\ndefine(function(require, exports, module) {\r\n\"use strict\";\r\n\r\nvar oop = require(\"../lib/oop\");\r\nvar lang = require(\"../lib/lang\");\r\nvar DocCommentHighlightRules = require(\"./doc_comment_highlight_rules\").DocCommentHighlightRules;\r\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\r\n\r\nvar scadHighlightRules = function() {\r\n    var keywordMapper = this.createKeywordMapper({\r\n        \"variable.language\": \"this\",\r\n        \"keyword\": \"module|if|else|for\",\r\n        \"constant.language\": \"NULL\"\r\n    }, \"identifier\");\r\n\r\n    // regexp must not have capturing parentheses. Use (?:) instead.\r\n    // regexps are ordered -> the first match is used\r\n\r\n    this.$rules = {\r\n        \"start\" : [\r\n            {\r\n                token : \"comment\",\r\n                regex : \"\\\\/\\\\/.*$\"\r\n            },\r\n            DocCommentHighlightRules.getStartRule(\"start\"),\r\n            {\r\n                token : \"comment\", // multi line comment\r\n                regex : \"\\\\/\\\\*\",\r\n                next : \"comment\"\r\n            }, {\r\n                token : \"string\", // single line\r\n                regex : '[\"](?:(?:\\\\\\\\.)|(?:[^\"\\\\\\\\]))*?[\"]'\r\n            }, {\r\n                token : \"string\", // multi line string start\r\n                regex : '[\"].*\\\\\\\\$',\r\n                next : \"qqstring\"\r\n            }, {\r\n                token : \"string\", // single line\r\n                regex : \"['](?:(?:\\\\\\\\.)|(?:[^'\\\\\\\\]))*?[']\"\r\n            }, {\r\n                token : \"string\", // multi line string start\r\n                regex : \"['].*\\\\\\\\$\",\r\n                next : \"qstring\"\r\n            }, {\r\n                token : \"constant.numeric\", // hex\r\n                regex : \"0[xX][0-9a-fA-F]+\\\\b\"\r\n            }, {\r\n                token : \"constant.numeric\", // float\r\n                regex : \"[+-]?\\\\d+(?:(?:\\\\.\\\\d*)?(?:[eE][+-]?\\\\d+)?)?\\\\b\"\r\n            }, {\r\n              token : \"constant\", // <CONSTANT>\r\n              regex : \"<[a-zA-Z0-9.]+>\"\r\n            }, {\r\n              token : \"keyword\", // pre-compiler directivs\r\n              regex : \"(?:use|include)\"\r\n            }, {\r\n                token : keywordMapper,\r\n                regex : \"[a-zA-Z_$][a-zA-Z0-9_$]*\\\\b\"\r\n            }, {\r\n                token : \"keyword.operator\",\r\n                regex : \"!|\\\\$|%|&|\\\\*|\\\\-\\\\-|\\\\-|\\\\+\\\\+|\\\\+|~|==|=|!=|<=|>=|<<=|>>=|>>>=|<>|<|>|!|&&|\\\\|\\\\||\\\\?\\\\:|\\\\*=|%=|\\\\+=|\\\\-=|&=|\\\\^=|\\\\b(?:in|new|delete|typeof|void)\"\r\n            }, {\r\n                token : \"paren.lparen\",\r\n                regex : \"[[({]\"\r\n            }, {\r\n                token : \"paren.rparen\",\r\n                regex : \"[\\\\])}]\"\r\n            }, {\r\n                token : \"text\",\r\n                regex : \"\\\\s+\"\r\n            }\r\n        ],\r\n        \"comment\" : [\r\n            {\r\n                token : \"comment\", // closing comment\r\n                regex : \"\\\\*\\\\/\",\r\n                next : \"start\"\r\n            }, {\r\n                defaultToken : \"comment\"\r\n            }\r\n        ],\r\n        \"qqstring\" : [\r\n            {\r\n                token : \"string\",\r\n                regex : '(?:(?:\\\\\\\\.)|(?:[^\"\\\\\\\\]))*?\"',\r\n                next : \"start\"\r\n            }, {\r\n                token : \"string\",\r\n                regex : '.+'\r\n            }\r\n        ],\r\n        \"qstring\" : [\r\n            {\r\n                token : \"string\",\r\n                regex : \"(?:(?:\\\\\\\\.)|(?:[^'\\\\\\\\]))*?'\",\r\n                next : \"start\"\r\n            }, {\r\n                token : \"string\",\r\n                regex : '.+'\r\n            }\r\n        ]\r\n    };\r\n    \r\n    this.embedRules(DocCommentHighlightRules, \"doc-\",\r\n        [ DocCommentHighlightRules.getEndRule(\"start\") ]);\r\n};\r\n\r\noop.inherits(scadHighlightRules, TextHighlightRules);\r\n\r\nexports.scadHighlightRules = scadHighlightRules;\r\n});\r\n"]}