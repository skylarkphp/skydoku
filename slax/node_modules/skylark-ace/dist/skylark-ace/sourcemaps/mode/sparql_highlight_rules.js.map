{"version":3,"sources":["mode/sparql_highlight_rules.js"],"names":["define","require","exports","module","oop","TextHighlightRules","SPARQLHighlightRules","this","$rules","start","include","#boolean-literal","token","regex","#built-in-functions","#comments","#keywords","#logic-operators","#owl-types","#punctuation-operators","#qnames","#rdf-schema-types","#relative-urls","push","next","defaultToken","#string-datatype-suffixes","#string-language-suffixes","#strings","#variables","#xml-schema-types","normalizeRules","metaData","fileTypes","name","scopeName","inherits"],"mappings":";;;;;;;AAoCAA,OAAO,SAASC,EAASC,EAASC,GAClC,aAEA,IAAIC,EAAMH,EAAQ,cACdI,EAAqBJ,EAAQ,0BAA0BI,mBAEvDC,EAAuB,WAIvBC,KAAKC,QACDC,QACIC,QAAS,cAETA,QAAS,aAETA,QAAS,8BAETA,QAAS,8BAETA,QAAS,qBAETA,QAAS,mBAETA,QAAS,sBAETA,QAAS,sBAETA,QAAS,eAETA,QAAS,YAETA,QAAS,cAETA,QAAS,wBAETA,QAAS,eAETA,QAAS,qBAETA,QAAS,2BAEbC,qBACIC,MAAO,mCACPC,MAAO,eAEXC,wBACIF,MAAO,0BACPC,MAAO,23CAEXE,cACIH,OACI,wCACA,4BAEJC,MAAO,aAEXG,cACIJ,MAAO,uBACPC,MAAO,k+BAEXI,qBACIL,MAAO,kCACPC,MAAO,wFAEXK,eACIN,MAAO,mCACPC,MAAO,kBAEXM,2BACIP,MAAO,sCACPC,MAAO,0BAEXO,YACIR,MAAO,iCACPC,MAAO,6DAEXQ,sBACIT,MAAO,0CACPC,MAAO,sCAEXS,mBACIV,MAAO,0CACPC,MAAO,IACPU,OACIX,MAAO,0CACPC,MAAO,IACPW,KAAM,QAENC,aAAc,8CAGtBC,8BACId,MAAO,0CACPC,MAAO,SAEXc,8BACIf,OACI,0CACA,mCAEJC,MAAO,qCAEXe,aACIhB,MAAO,8BACPC,MAAO,MACPU,OACIX,MAAO,8BACPC,MAAO,MACPW,KAAM,QAENC,aAAc,kCAGlBb,MAAO,8BACPC,MAAO,IACPU,OACIX,MAAO,8BACPC,MAAO,IACPW,KAAM,QAENZ,MAAO,yBACPC,MAAO,MAEPD,MAAO,mCACPC,MAAO,QAEPY,aAAc,kCAGtBI,eACIjB,MAAO,wBACPC,MAAO,4BAEXiB,sBACIlB,MAAO,sCACPC,MAAO,yBAIfN,KAAKwB,kBAGTzB,EAAqB0B,UACjBC,WAAY,KAAM,UAClBC,KAAM,SACNC,UAAW,iBAIf/B,EAAIgC,SAAS9B,EAAsBD,GAEnCH,EAAQI,qBAAuBA","file":"../../mode/sparql_highlight_rules.js","sourcesContent":["/* ***** BEGIN LICENSE BLOCK *****\r\n * Distributed under the BSD license:\r\n *\r\n * Copyright (c) 2012, Ajax.org B.V.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *     * Redistributions of source code must retain the above copyright\r\n *       notice, this list of conditions and the following disclaimer.\r\n *     * Redistributions in binary form must reproduce the above copyright\r\n *       notice, this list of conditions and the following disclaimer in the\r\n *       documentation and/or other materials provided with the distribution.\r\n *     * Neither the name of Ajax.org B.V. nor the\r\n *       names of its contributors may be used to endorse or promote products\r\n *       derived from this software without specific prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\r\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY\r\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\r\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\r\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n *\r\n * ***** END LICENSE BLOCK ***** */\r\n\r\n/* This file was autogenerated from sparql.tmLanguage (uuid: ) */\r\n/****************************************************************************************\r\n * IT MIGHT NOT BE PERFECT ...But it's a good start from an existing *.tmlanguage file. *\r\n * fileTypes                                                                            *\r\n ****************************************************************************************/\r\n\r\ndefine(function(require, exports, module) {\r\n\"use strict\";\r\n\r\nvar oop = require(\"../lib/oop\");\r\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\r\n\r\nvar SPARQLHighlightRules = function() {\r\n    // regexp must not have capturing parentheses. Use (?:) instead.\r\n    // regexps are ordered -> the first match is used\r\n\r\n    this.$rules = {\r\n        start: [{\r\n            include: \"#comments\"\r\n        }, {\r\n            include: \"#strings\"\r\n        }, {\r\n            include: \"#string-language-suffixes\"\r\n        }, {\r\n            include: \"#string-datatype-suffixes\"\r\n        }, {\r\n            include: \"#logic-operators\"\r\n        }, {\r\n            include: \"#relative-urls\"\r\n        }, {\r\n            include: \"#xml-schema-types\"\r\n        }, {\r\n            include: \"#rdf-schema-types\"\r\n        }, {\r\n            include: \"#owl-types\"\r\n        }, {\r\n            include: \"#qnames\"\r\n        }, {\r\n            include: \"#keywords\"\r\n        }, {\r\n            include: \"#built-in-functions\"\r\n        }, {\r\n            include: \"#variables\"\r\n        }, {\r\n            include: \"#boolean-literal\"\r\n        }, {\r\n            include: \"#punctuation-operators\"\r\n        }],\r\n        \"#boolean-literal\": [{\r\n            token: \"constant.language.boolean.sparql\",\r\n            regex: /true|false/\r\n        }],\r\n        \"#built-in-functions\": [{\r\n            token: \"support.function.sparql\",\r\n            regex: /[Aa][Bb][Ss]|[Aa][Vv][Gg]|[Bb][Nn][Oo][Dd][Ee]|[Bb][Oo][Uu][Nn][Dd]|[Cc][Ee][Ii][Ll]|[Cc][Oo][Aa][Ll][Ee][Ss][Cc][Ee]|[Cc][Oo][Nn][Cc][Aa][Tt]|[Cc][Oo][Nn][Tt][Aa][Ii][Nn][Ss]|[Cc][Oo][Uu][Nn][Tt]|[Dd][Aa][Tt][Aa][Tt][Yy][Pp][Ee]|[Dd][Aa][Yy]|[Ee][Nn][Cc][Oo][Dd][Ee]_[Ff][Oo][Rr]_[Uu][Rr][Ii]|[Ee][Xx][Ii][Ss][Tt][Ss]|[Ff][Ll][Oo][Oo][Rr]|[Gg][Rr][Oo][Uu][Pp]_[Cc][Oo][Nn][Cc][Aa][Tt]|[Hh][Oo][Uu][Rr][Ss]|[Ii][Ff]|[Ii][Rr][Ii]|[Ii][Ss][Bb][Ll][Aa][Nn][Kk]|[Ii][Ss][Ii][Rr][Ii]|[Ii][Ss][Ll][Ii][Tt][Ee][Rr][Aa][Ll]|[Ii][Ss][Nn][Uu][Mm][Ee][Rr][Ii][Cc]|[Ii][Ss][Uu][Rr][Ii]|[Ll][Aa][Nn][Gg]|[Ll][Aa][Nn][Gg][Mm][Aa][Tt][Cc][Hh][Ee][Ss]|[Ll][Cc][Aa][Ss][Ee]|[Mm][Aa][Xx]|[Mm][Dd]5|[Mm][Ii][Nn]|[Mm][Ii][Nn][Uu][Tt][Ee][Ss]|[Mm][Oo][Nn][Tt][Hh]|[Nn][Oo][Ww]|[Rr][Aa][Nn][Dd]|[Rr][Ee][Gg][Ee][Xx]|[Rr][Ee][Pp][Ll][Aa][Cc][Ee]|[Rr][Oo][Uu][Nn][Dd]|[Ss][Aa][Mm][Ee][Tt][Ee][Rr][Mm]|[Ss][Aa][Mm][Pp][Ll][Ee]|[Ss][Ee][Cc][Oo][Nn][Dd][Ss]|[Ss][Ee][Pp][Aa][Rr][Aa][Tt][Oo][Rr]|[Ss][Hh][Aa](?:1|256|384|512)|[Ss][Tt][Rr]|[Ss][Tt][Rr][Aa][Ff][Tt][Ee][Rr]|[Ss][Tt][Rr][Bb][Ee][Ff][Oo][Rr][Ee]|[Ss][Tt][Rr][Dd][Tt]|[Ss][Tt][Rr][Ee][Nn][Dd][Ss]|[Ss][Tt][Rr][Ll][Aa][Nn][Gg]|[Ss][Tt][Rr][Ll][Ee][Nn]|[Ss][Tt][Rr][Ss][Tt][Aa][Rr][Tt][Ss]|[Ss][Tt][Rr][Uu][Uu][Ii][Dd]|[Ss][Uu][Bb][Ss][Tt][Rr]|[Ss][Uu][Mm]|[Tt][Ii][Mm][Ee][Zz][Oo][Nn][Ee]|[Tt][Zz]|[Uu][Cc][Aa][Ss][Ee]|[Uu][Rr][Ii]|[Uu][Uu][Ii][Dd]|[Yy][Ee][Aa][Rr]/\r\n        }],\r\n        \"#comments\": [{\r\n            token: [\r\n                \"punctuation.definition.comment.sparql\",\r\n                \"comment.line.hash.sparql\"\r\n            ],\r\n            regex: /(#)(.*$)/\r\n        }],\r\n        \"#keywords\": [{\r\n            token: \"keyword.other.sparql\",\r\n            regex: /[Aa][Dd][Dd]|[Aa][Ll][Ll]|[Aa][Ss]|[As][Ss][Cc]|[Aa][Ss][Kk]|[Bb][Aa][Ss][Ee]|[Bb][Ii][Nn][Dd]|[Bb][Yy]|[Cc][Ll][Ee][Aa][Rr]|[Cc][Oo][Nn][Ss][Tt][Rr][Uu][Cc][Tt]|[Cc][Oo][Pp][Yy]|[Cc][Rr][Ee][Aa][Tt][Ee]|[Dd][Aa][Tt][Aa]|[Dd][Ee][Ff][Aa][Uu][Ll][Tt]|[Dd][Ee][Ll][Ee][Tt][Ee]|[Dd][Ee][Sc][Cc]|[Dd][Ee][Ss][Cc][Rr][Ii][Bb][Ee]|[Dd][Ii][Ss][Tt][Ii][Nn][Cc][Tt]|[Dd][Rr][Oo][Pp]|[Ff][Ii][Ll][Tt][Ee][Rr]|[Ff][Rr][Oo][Mm]|[Gg][Rr][Aa][Pp][Hh]|[Gg][Rr][Oo][Uu][Pp]|[Hh][Aa][Vv][Ii][Nn][Gg]|[Ii][Nn][Ss][Ee][Rr][Tt]|[Ll][Ii][Mm][Ii][Tt]|[Ll][Oo][Aa][Dd]|[Mm][Ii][Nn][Uu][Ss]|[Mm][Oo][Vv][Ee]|[Nn][Aa][Mm][Ee][Dd]|[Oo][Ff][Ff][Ss][Ee][Tt]|[Oo][Pp][Tt][Ii][Oo][Nn][Aa][Ll]|[Oo][Rr][Dd][Ee][Rr]|[Pp][Rr][Ee][Ff][Ii][Xx]|[Rr][Ee][Dd][Uu][Cc][Ee][Dd]|[Ss][Ee][Ll][Ee][Cc][Tt]|[Ss][Ee][Pp][Aa][Rr][Aa][Tt][Oo][Rr]|[Ss][Ee][Rr][Vv][Ii][Cc][Ee]|[Ss][Ii][Ll][Ee][Nn][Tt]|[Tt][Oo]|[Uu][Nn][Dd][Ee][Ff]|[Uu][Nn][Ii][Oo][Nn]|[Uu][Ss][Ii][Nn][Gg]|[Vv][Aa][Ll][Uu][Ee][Ss]|[Ww][He][Ee][Rr][Ee]|[Ww][Ii][Tt][Hh]/\r\n        }],\r\n        \"#logic-operators\": [{\r\n            token: \"keyword.operator.logical.sparql\",\r\n            regex: /\\|\\||&&|=|!=|<|>|<=|>=|(?:^|!?\\s)IN(?:!?\\s|$)|(?:^|!?\\s)NOT(?:!?\\s|$)|-|\\+|\\*|\\/|\\!/\r\n        }],\r\n        \"#owl-types\": [{\r\n            token: \"support.type.datatype.owl.sparql\",\r\n            regex: /owl:[a-zA-Z]+/\r\n        }],\r\n        \"#punctuation-operators\": [{\r\n            token: \"keyword.operator.punctuation.sparql\",\r\n            regex: /;|,|\\.|\\(|\\)|\\{|\\}|\\|/\r\n        }],\r\n        \"#qnames\": [{\r\n            token: \"entity.name.other.qname.sparql\",\r\n            regex: /(?:[a-zA-Z][-_a-zA-Z0-9]*)?:(?:[_a-zA-Z][-_a-zA-Z0-9]*)?/\r\n        }],\r\n        \"#rdf-schema-types\": [{\r\n            token: \"support.type.datatype.rdf.schema.sparql\",\r\n            regex: /rdfs?:[a-zA-Z]+|(?:^|\\s)a(?:\\s|$)/\r\n        }],\r\n        \"#relative-urls\": [{\r\n            token: \"string.quoted.other.relative.url.sparql\",\r\n            regex: /</,\r\n            push: [{\r\n                token: \"string.quoted.other.relative.url.sparql\",\r\n                regex: />/,\r\n                next: \"pop\"\r\n            }, {\r\n                defaultToken: \"string.quoted.other.relative.url.sparql\"\r\n            }]\r\n        }],\r\n        \"#string-datatype-suffixes\": [{\r\n            token: \"keyword.operator.datatype.suffix.sparql\",\r\n            regex: /\\^\\^/\r\n        }],\r\n        \"#string-language-suffixes\": [{\r\n            token: [\r\n                \"keyword.operator.language.suffix.sparql\",\r\n                \"constant.language.suffix.sparql\"\r\n            ],\r\n            regex: /(?!\")(@)([a-z]+(?:\\-[a-z0-9]+)*)/\r\n        }],\r\n        \"#strings\": [{\r\n            token: \"string.quoted.triple.sparql\",\r\n            regex: /\"\"\"/,\r\n            push: [{\r\n                token: \"string.quoted.triple.sparql\",\r\n                regex: /\"\"\"/,\r\n                next: \"pop\"\r\n            }, {\r\n                defaultToken: \"string.quoted.triple.sparql\"\r\n            }]\r\n        }, {\r\n            token: \"string.quoted.double.sparql\",\r\n            regex: /\"/,\r\n            push: [{\r\n                token: \"string.quoted.double.sparql\",\r\n                regex: /\"/,\r\n                next: \"pop\"\r\n            }, {\r\n                token: \"invalid.string.newline\",\r\n                regex: /$/\r\n            }, {\r\n                token: \"constant.character.escape.sparql\",\r\n                regex: /\\\\./\r\n            }, {\r\n                defaultToken: \"string.quoted.double.sparql\"\r\n            }]\r\n        }],\r\n        \"#variables\": [{\r\n            token: \"variable.other.sparql\",\r\n            regex: /(?:\\?|\\$)[-_a-zA-Z0-9]+/\r\n        }],\r\n        \"#xml-schema-types\": [{\r\n            token: \"support.type.datatype.schema.sparql\",\r\n            regex: /xsd?:[a-z][a-zA-Z]+/\r\n        }]\r\n    };\r\n    \r\n    this.normalizeRules();\r\n};\r\n\r\nSPARQLHighlightRules.metaData = {\r\n    fileTypes: [\"rq\", \"sparql\"],\r\n    name: \"SPARQL\",\r\n    scopeName: \"source.sparql\"\r\n};\r\n\r\n\r\noop.inherits(SPARQLHighlightRules, TextHighlightRules);\r\n\r\nexports.SPARQLHighlightRules = SPARQLHighlightRules;\r\n});"]}