{"version":3,"sources":["mode/ocaml.js"],"names":["define","require","exports","module","oop","TextMode","Mode","OcamlHighlightRules","MatchingBraceOutdent","Range","this","HighlightRules","$behaviour","$defaultBehaviour","$outdent","inherits","indenter","toggleCommentLines","state","doc","startRow","endRow","i","line","outdent","re","test","getLine","range","start","row","end","column","length","replace","match","getNextLineIndent","tab","indent","$getIndent","tokens","getTokenizer","getLineTokens","type","checkOutdent","input","autoOutdent","$id","call","prototype"],"mappings":";;;;;;;AA8BAA,OAAO,SAASC,EAASC,EAASC,GAClC,aAEA,IAAIC,EAAMH,EAAQ,cACdI,EAAWJ,EAAQ,UAAUK,KAC7BC,EAAsBN,EAAQ,2BAA2BM,oBACzDC,EAAuBP,EAAQ,4BAA4BO,qBAC3DC,EAAQR,EAAQ,YAAYQ,MAE5BH,EAAO,WACPI,KAAKC,eAAiBJ,EACtBG,KAAKE,WAAaF,KAAKG,kBAEvBH,KAAKI,SAAa,IAAIN,GAE1BJ,EAAIW,SAAST,EAAMD,GAEnB,IAAIW,EAAW,6CAEf,WAEIN,KAAKO,mBAAqB,SAASC,EAAOC,EAAKC,EAAUC,GACrD,IAAIC,EAAGC,EACHC,GAAU,EACVC,EAAK,mBAET,IAAKH,EAAEF,EAAUE,GAAID,EAAQC,IACzB,IAAKG,EAAGC,KAAKP,EAAIQ,QAAQL,IAAK,CAC1BE,GAAU,EACV,MAIR,IAAII,EAAQ,IAAInB,EAAM,EAAG,EAAG,EAAG,GAC/B,IAAKa,EAAEF,EAAUE,GAAID,EAAQC,IACzBC,EAAOJ,EAAIQ,QAAQL,GACnBM,EAAMC,MAAMC,IAAOR,EACnBM,EAAMG,IAAID,IAASR,EACnBM,EAAMG,IAAIC,OAAST,EAAKU,OAExBd,EAAIe,QAAQN,EAAOJ,EAAUD,EAAKY,MAAMV,GAAI,GAAK,KAAOF,EAAO,OAIvEb,KAAK0B,kBAAoB,SAASlB,EAAOK,EAAMc,GAC3C,IAAIC,EAAS5B,KAAK6B,WAAWhB,GACzBiB,EAAS9B,KAAK+B,eAAeC,cAAcnB,EAAML,GAAOsB,OAK5D,OAHMA,EAAOP,QAA6C,YAAnCO,EAAOA,EAAOP,OAAS,GAAGU,MACnC,UAAVzB,IAAqBF,EAASU,KAAKH,KACnCe,GAAUD,GACPC,GAGX5B,KAAKkC,aAAe,SAAS1B,EAAOK,EAAMsB,GACtC,OAAOnC,KAAKI,SAAS8B,aAAarB,EAAMsB,IAG5CnC,KAAKoC,YAAc,SAAS5B,EAAOC,EAAKW,GACpCpB,KAAKI,SAASgC,YAAY3B,EAAKW,IAGnCpB,KAAKqC,IAAM,mBACZC,KAAK1C,EAAK2C,WAEb/C,EAAQI,KAAOA","file":"../../mode/ocaml.js","sourcesContent":["/* ***** BEGIN LICENSE BLOCK *****\r\n * Distributed under the BSD license:\r\n *\r\n * Copyright (c) 2010, Ajax.org B.V.\r\n * All rights reserved.\r\n * \r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *     * Redistributions of source code must retain the above copyright\r\n *       notice, this list of conditions and the following disclaimer.\r\n *     * Redistributions in binary form must reproduce the above copyright\r\n *       notice, this list of conditions and the following disclaimer in the\r\n *       documentation and/or other materials provided with the distribution.\r\n *     * Neither the name of Ajax.org B.V. nor the\r\n *       names of its contributors may be used to endorse or promote products\r\n *       derived from this software without specific prior written permission.\r\n * \r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\r\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY\r\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\r\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\r\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n *\r\n * ***** END LICENSE BLOCK ***** */\r\n\r\ndefine(function(require, exports, module) {\r\n\"use strict\";\r\n\r\nvar oop = require(\"../lib/oop\");\r\nvar TextMode = require(\"./text\").Mode;\r\nvar OcamlHighlightRules = require(\"./ocaml_highlight_rules\").OcamlHighlightRules;\r\nvar MatchingBraceOutdent = require(\"./matching_brace_outdent\").MatchingBraceOutdent;\r\nvar Range = require(\"../range\").Range;\r\n\r\nvar Mode = function() {\r\n    this.HighlightRules = OcamlHighlightRules;\r\n    this.$behaviour = this.$defaultBehaviour;\r\n    \r\n    this.$outdent   = new MatchingBraceOutdent();\r\n};\r\noop.inherits(Mode, TextMode);\r\n\r\nvar indenter = /(?:[({[=:]|[-=]>|\\b(?:else|try|with))\\s*$/;\r\n\r\n(function() {\r\n\r\n    this.toggleCommentLines = function(state, doc, startRow, endRow) {\r\n        var i, line;\r\n        var outdent = true;\r\n        var re = /^\\s*\\(\\*(.*)\\*\\)/;\r\n\r\n        for (i=startRow; i<= endRow; i++) {\r\n            if (!re.test(doc.getLine(i))) {\r\n                outdent = false;\r\n                break;\r\n            }\r\n        }\r\n\r\n        var range = new Range(0, 0, 0, 0);\r\n        for (i=startRow; i<= endRow; i++) {\r\n            line = doc.getLine(i);\r\n            range.start.row  = i;\r\n            range.end.row    = i;\r\n            range.end.column = line.length;\r\n\r\n            doc.replace(range, outdent ? line.match(re)[1] : \"(*\" + line + \"*)\");\r\n        }\r\n    };\r\n\r\n    this.getNextLineIndent = function(state, line, tab) {\r\n        var indent = this.$getIndent(line);\r\n        var tokens = this.getTokenizer().getLineTokens(line, state).tokens;\r\n\r\n        if (!(tokens.length && tokens[tokens.length - 1].type === 'comment') &&\r\n            state === 'start' && indenter.test(line))\r\n            indent += tab;\r\n        return indent;\r\n    };\r\n\r\n    this.checkOutdent = function(state, line, input) {\r\n        return this.$outdent.checkOutdent(line, input);\r\n    };\r\n\r\n    this.autoOutdent = function(state, doc, row) {\r\n        this.$outdent.autoOutdent(doc, row);\r\n    };\r\n\r\n    this.$id = \"ace/mode/ocaml\";\r\n}).call(Mode.prototype);\r\n\r\nexports.Mode = Mode;\r\n});\r\n\r\n"]}