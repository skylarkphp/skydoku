{"version":3,"sources":["mode/rust_highlight_rules.js"],"names":["define","require","exports","module","oop","TextHighlightRules","stringEscape","source","RustHighlightRules","this","$rules","start","token","regex","stateName","onMatch","value","currentState","stack","unshift","next","length","shift","defaultToken","push","normalizeRules","metaData","fileTypes","foldingStartMarker","foldingStopMarker","name","scopeName","inherits"],"mappings":";;;;;;;AAgCAA,OAAO,SAASC,QAASC,QAASC,QAClC,aAEA,IAAIC,EAAMH,QAAQ,cACdI,EAAqBJ,QAAQ,0BAA0BI,mBAEvDC,EAAe,qDAAqDC,OACpEC,EAAqB,WAIrBC,KAAKC,QAAWC,QACTC,MAAO,6BAIPC,MAAO,qCACPD,MAAO,mCACPC,MAAO,gBAAkBP,EAAe,OACxCM,MAAO,aACPC,MAAQ,+BAEPC,UAAW,mBACXC,QAAU,SAASC,EAAOC,EAAcC,GAEpC,OADAA,EAAMC,QAAQV,KAAKW,KAAMJ,EAAMK,OAAS,EAAGJ,GACpC,iCAEXJ,MAAQ,OACRO,OAEQL,QAAU,SAASC,EAAOC,EAAcC,GACpC,IAAIN,EAAQ,gCAUZ,OATII,EAAMK,QAAUH,EAAM,IAClBF,EAAMK,OAASH,EAAM,KACrBN,EAAQ,WACZM,EAAMI,QACNJ,EAAMI,QACNb,KAAKW,KAAOF,EAAMI,SAElBb,KAAKW,KAAO,GAETR,GAEXC,MAAQ,MACRO,KAAQ,UAERG,aAAe,oCAIxBX,MAAO,mCACPC,MAAO,IACPW,OACKZ,MAAO,mCACPC,MAAO,IACPO,KAAM,QACNR,MAAO,wCACPC,MAAOP,IACPiB,aAAc,uCACnBX,OAAS,sBAAuB,OAAQ,oCACxCC,MAAO,iDACPD,MAAO,mBAAoBC,MAAO,4BAClCD,MAAO,sBACPC,MAAO,0TACPD,MAAO,2BACPC,MAAO,mVACPD,MAAO,gCAAiCC,MAAO,eAE/CD,MAAO,+BACPC,MAAO,WACPD,MAAO,uCACPC,MAAO,UACPD,MAAO,kCACPC,MAAO,OACPC,UAAW,UACXU,OACKZ,MAAO,kCACPC,MAAO,OACPW,KAAM,YACNZ,MAAO,gCACPC,MAAO,OACPO,KAAM,QACNG,aAAc,gCAEnBX,MAAO,mBAIPC,MAAO,2CACPD,MAAQ,uBAAwBC,MAAQ,YACxCD,MAAQ,eAAgBC,MAAQ,WAChCD,MAAQ,eAAgBC,MAAQ,WAChCD,MAAO,gCACPC,MAAO,0CACPD,MAAO,+BACPC,MAAO,kXACPD,MAAO,gCACPC,MAAO,+CACPD,MAAO,+BACPC,MAAO,kGACPD,MAAO,+BACPC,MAAO,kFAEdJ,KAAKgB,kBAGTjB,EAAmBkB,UAAaC,WAAa,KAAM,MAC7CC,mBAAoB,6DACpBC,kBAAmB,WACnBC,KAAM,OACNC,UAAW,eAGjB3B,EAAI4B,SAASxB,EAAoBH,GAEjCH,QAAQM,mBAAqBA","file":"../../mode/rust_highlight_rules.js","sourcesContent":["/* ***** BEGIN LICENSE BLOCK *****\r\n * Distributed under the BSD license:\r\n *\r\n * Copyright (c) 2012, Ajax.org B.V.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *     * Redistributions of source code must retain the above copyright\r\n *       notice, this list of conditions and the following disclaimer.\r\n *     * Redistributions in binary form must reproduce the above copyright\r\n *       notice, this list of conditions and the following disclaimer in the\r\n *       documentation and/or other materials provided with the distribution.\r\n *     * Neither the name of Ajax.org B.V. nor the\r\n *       names of its contributors may be used to endorse or promote products\r\n *       derived from this software without specific prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\r\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY\r\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\r\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\r\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n *\r\n * ***** END LICENSE BLOCK ***** */\r\n\r\n/* This file was autogenerated from https://raw.github.com/dbp/sublime-rust/master/Rust.tmLanguage (uuid: ) */\r\n\r\ndefine(function(require, exports, module) {\r\n\"use strict\";\r\n\r\nvar oop = require(\"../lib/oop\");\r\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\r\n\r\nvar stringEscape = /\\\\(?:[nrt0'\"\\\\]|x[\\da-fA-F]{2}|u\\{[\\da-fA-F]{6}\\})/.source;\r\nvar RustHighlightRules = function() {\r\n    // regexp must not have capturing parentheses. Use (?:) instead.\r\n    // regexps are ordered -> the first match is used\r\n\r\n    this.$rules = { start:\r\n       [ { token: 'variable.other.source.rust',\r\n           // `(?![\\\\\\'])` to keep a lifetime name highlighting from continuing one character\r\n           // past the name. The end `\\'` will block this from matching for a character like\r\n           // `'a'` (it should have character highlighting, not variable highlighting).\r\n           regex: '\\'[a-zA-Z_][a-zA-Z0-9_]*(?![\\\\\\'])' },\r\n         { token: 'string.quoted.single.source.rust',\r\n           regex: \"'(?:[^'\\\\\\\\]|\" + stringEscape + \")'\" },\r\n         { token: 'identifier',\r\n           regex:  /r#[a-zA-Z_][a-zA-Z0-9_]*\\b/ },\r\n         {\r\n            stateName: \"bracketedComment\",\r\n            onMatch : function(value, currentState, stack){\r\n                stack.unshift(this.next, value.length - 1, currentState);\r\n                return \"string.quoted.raw.source.rust\";\r\n            },\r\n            regex : /r#*\"/,\r\n            next  : [\r\n                {\r\n                    onMatch : function(value, currentState, stack) {\r\n                        var token = \"string.quoted.raw.source.rust\";\r\n                        if (value.length >= stack[1]) {\r\n                            if (value.length > stack[1])\r\n                                token = \"invalid\";\r\n                            stack.shift();\r\n                            stack.shift();\r\n                            this.next = stack.shift();\r\n                        } else {\r\n                            this.next = \"\";\r\n                        }\r\n                        return token;\r\n                    },\r\n                    regex : /\"#*/,\r\n                    next  : \"start\"\r\n                }, {\r\n                    defaultToken : \"string.quoted.raw.source.rust\"\r\n                }\r\n            ]\r\n         },\r\n         { token: 'string.quoted.double.source.rust',\r\n           regex: '\"',\r\n           push: \r\n            [ { token: 'string.quoted.double.source.rust',\r\n                regex: '\"',\r\n                next: 'pop' },\r\n              { token: 'constant.character.escape.source.rust',\r\n                regex: stringEscape },\r\n              { defaultToken: 'string.quoted.double.source.rust' } ] },\r\n         { token: [ 'keyword.source.rust', 'text', 'entity.name.function.source.rust' ],\r\n           regex: '\\\\b(fn)(\\\\s+)((?:r#)?[a-zA-Z_][a-zA-Z0-9_]*)' },\r\n         { token: 'support.constant', regex: '\\\\b[a-zA-Z_][\\\\w\\\\d]*::' },\r\n         { token: 'keyword.source.rust',\r\n           regex: '\\\\b(?:abstract|alignof|as|become|box|break|catch|continue|const|crate|default|do|dyn|else|enum|extern|for|final|if|impl|in|let|loop|macro|match|mod|move|mut|offsetof|override|priv|proc|pub|pure|ref|return|self|sizeof|static|struct|super|trait|type|typeof|union|unsafe|unsized|use|virtual|where|while|yield)\\\\b' },\r\n         { token: 'storage.type.source.rust',\r\n           regex: '\\\\b(?:Self|isize|usize|char|bool|u8|u16|u32|u64|u128|f16|f32|f64|i8|i16|i32|i64|i128|str|option|either|c_float|c_double|c_void|FILE|fpos_t|DIR|dirent|c_char|c_schar|c_uchar|c_short|c_ushort|c_int|c_uint|c_long|c_ulong|size_t|ptrdiff_t|clock_t|time_t|c_longlong|c_ulonglong|intptr_t|uintptr_t|off_t|dev_t|ino_t|pid_t|mode_t|ssize_t)\\\\b' },\r\n         { token: 'variable.language.source.rust', regex: '\\\\bself\\\\b' },\r\n         \r\n         { token: 'comment.line.doc.source.rust',\r\n           regex: '//!.*$' },\r\n         { token: 'comment.line.double-dash.source.rust',\r\n           regex: '//.*$' },\r\n         { token: 'comment.start.block.source.rust',\r\n           regex: '/\\\\*',\r\n           stateName: 'comment',\r\n           push: \r\n            [ { token: 'comment.start.block.source.rust',\r\n                regex: '/\\\\*',\r\n                push: 'comment' },\r\n              { token: 'comment.end.block.source.rust',\r\n                regex: '\\\\*/',\r\n                next: 'pop' },\r\n              { defaultToken: 'comment.block.source.rust' } ] },\r\n         \r\n         { token: 'keyword.operator',\r\n         // `[*/](?![*/])=?` is separated because `//` and `/* */` become comments and must be\r\n         // guarded against. This states either `*` or `/` may be matched as long as the match\r\n         // it isn't followed by either of the two. An `=` may be on the end.\r\n           regex: /\\$|[-=]>|[-+%^=!&|<>]=?|[*/](?![*/])=?/ },\r\n         { token : \"punctuation.operator\", regex : /[?:,;.]/ },\r\n         { token : \"paren.lparen\", regex : /[\\[({]/ },\r\n         { token : \"paren.rparen\", regex : /[\\])}]/ },\r\n         { token: 'constant.language.source.rust',\r\n           regex: '\\\\b(?:true|false|Some|None|Ok|Err)\\\\b' },\r\n         { token: 'support.constant.source.rust',\r\n           regex: '\\\\b(?:EXIT_FAILURE|EXIT_SUCCESS|RAND_MAX|EOF|SEEK_SET|SEEK_CUR|SEEK_END|_IOFBF|_IONBF|_IOLBF|BUFSIZ|FOPEN_MAX|FILENAME_MAX|L_tmpnam|TMP_MAX|O_RDONLY|O_WRONLY|O_RDWR|O_APPEND|O_CREAT|O_EXCL|O_TRUNC|S_IFIFO|S_IFCHR|S_IFBLK|S_IFDIR|S_IFREG|S_IFMT|S_IEXEC|S_IWRITE|S_IREAD|S_IRWXU|S_IXUSR|S_IWUSR|S_IRUSR|F_OK|R_OK|W_OK|X_OK|STDIN_FILENO|STDOUT_FILENO|STDERR_FILENO)\\\\b' },\r\n         { token: 'meta.preprocessor.source.rust',\r\n           regex: '\\\\b\\\\w\\\\(\\\\w\\\\)*!|#\\\\[[\\\\w=\\\\(\\\\)_]+\\\\]\\\\b' },\r\n         { token: 'constant.numeric.source.rust',\r\n           regex: /\\b(?:0x[a-fA-F0-9_]+|0o[0-7_]+|0b[01_]+|[0-9][0-9_]*(?!\\.))(?:[iu](?:size|8|16|32|64|128))?\\b/ },\r\n         { token: 'constant.numeric.source.rust',\r\n           regex: /\\b(?:[0-9][0-9_]*)(?:\\.[0-9][0-9_]*)?(?:[Ee][+-][0-9][0-9_]*)?(?:f32|f64)?\\b/ } ] };\r\n    \r\n    this.normalizeRules();\r\n};\r\n\r\nRustHighlightRules.metaData = { fileTypes: [ 'rs', 'rc' ],\r\n      foldingStartMarker: '^.*\\\\bfn\\\\s*(\\\\w+\\\\s*)?\\\\([^\\\\)]*\\\\)(\\\\s*\\\\{[^\\\\}]*)?\\\\s*$',\r\n      foldingStopMarker: '^\\\\s*\\\\}',\r\n      name: 'Rust',\r\n      scopeName: 'source.rust' };\r\n\r\n\r\noop.inherits(RustHighlightRules, TextHighlightRules);\r\n\r\nexports.RustHighlightRules = RustHighlightRules;\r\n});\r\n"]}