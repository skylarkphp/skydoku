{"version":3,"sources":["mode/gobstones_highlight_rules.js"],"names":["define","require","exports","module","oop","DocCommentHighlightRules","TextHighlightRules","GobstonesHighlightRules","keywordMapper","this","createKeywordMapper","keyword","constant.language","support.function","support.type","$rules","start","token","regex","getStartRule","next","comment","defaultToken","embedRules","getEndRule","inherits"],"mappings":";;;;;;;AAAAA,OAAO,SAASC,QAASC,QAASC,QAClC,aAEA,IAAIC,EAAMH,QAAQ,cACdI,EAA2BJ,QAAQ,iCAAiCI,yBACpEC,EAAqBL,QAAQ,0BAA0BK,mBAEvDC,EAA0B,WAE1B,IAmBIC,EAAgBC,KAAKC,qBACrBC,QApBW,6GAqBXC,oBAjBmB,aAkBnBC,mBAbc,sJAcdC,eARc,8CASf,cAKHL,KAAKM,QACDC,QAEQC,MAAQ,UACRC,MAAQ,cAGRD,MAAQ,UACRC,MAAQ,cAGRD,MAAQ,UACRC,MAAQ,QAEZb,EAAyBc,aAAa,cAElCF,MAAQ,UACRC,MAAQ,SACRE,KAAO,YAGPH,MAAQ,SACRC,MAAQ,uCAERD,MAAQ,SACRC,MAAQ,uCAERD,MAAQ,mBACRC,MAAQ,oEAERD,MAAQ,mBACRC,MAAQ,uEAERD,MAAQ,4BACRC,MAAQ,sBAERD,MAAQ,mBACRC,MAAQ,gEAERD,MAAQT,EAGRU,MAAQ,gCAERD,MAAQ,SACRC,MAAQ,UAERD,MAAQ,SACRC,MAAQ,YAERD,MAAQ,OACRC,MAAQ,SAGhBG,UAEQJ,MAAQ,UACRC,MAAQ,SACRE,KAAO,UAEPE,aAAe,aAK3Bb,KAAKc,WAAWlB,EAA0B,QACpCA,EAAyBmB,WAAW,YAG9CpB,EAAIqB,SAASlB,EAAyBD,GAEtCJ,QAAQK,wBAA0BA","file":"../../mode/gobstones_highlight_rules.js","sourcesContent":["define(function(require, exports, module) {\r\n\"use strict\";\r\n\r\nvar oop = require(\"../lib/oop\");\r\nvar DocCommentHighlightRules = require(\"./doc_comment_highlight_rules\").DocCommentHighlightRules;\r\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\r\n\r\nvar GobstonesHighlightRules = function() {\r\n\r\n    var keywords = (\r\n    \"program|procedure|function|interactive|if|then|else|switch|repeat|while|foreach|in|not|div|mod|Skip|return\"\r\n    );\r\n\r\n    var buildinConstants = (\r\n        \"False|True\"\r\n    );\r\n\r\n\r\n    var langClasses = (\r\n        \"Poner|Sacar|Mover|IrAlBorde|VaciarTablero|\" +\r\n        \"nroBolitas|hayBolitas|puedeMover|siguiente|previo|opuesto|minBool|maxBool|\" +\r\n        \"minDir|maxDir|minColor|maxColor\"\r\n    );\r\n\r\n    var supportType = (\r\n        \"Verde|Rojo|Azul|Negro|Norte|Sur|Este|Oeste\"\r\n    );\r\n\r\n    var keywordMapper = this.createKeywordMapper({\r\n        \"keyword\": keywords,\r\n        \"constant.language\": buildinConstants,\r\n        \"support.function\": langClasses,\r\n        \"support.type\": supportType\r\n    }, \"identifier\");\r\n\r\n    // regexp must not have capturing parentheses. Use (?:) instead.\r\n    // regexps are ordered -> the first match is used\r\n\r\n    this.$rules = {\r\n        \"start\" : [\r\n            {\r\n                token : \"comment\",\r\n                regex : \"\\\\/\\\\/.*$\"\r\n            },\r\n            {\r\n                token : \"comment\",\r\n                regex : \"\\\\-\\\\-.*$\"\r\n            },\r\n            {\r\n                token : \"comment\",\r\n                regex : \"#.*$\"\r\n            },\r\n            DocCommentHighlightRules.getStartRule(\"doc-start\"),\r\n            {\r\n                token : \"comment\", // multi line comment\r\n                regex : \"\\\\/\\\\*\",\r\n                next : \"comment\"\r\n            }, {\r\n\r\n                token : \"string\", // single line\r\n                regex : '[\"](?:(?:\\\\\\\\.)|(?:[^\"\\\\\\\\]))*?[\"]'\r\n            }, {\r\n                token : \"string\", // single line\r\n                regex : \"['](?:(?:\\\\\\\\.)|(?:[^'\\\\\\\\]))*?[']\"\r\n            }, {\r\n                token : \"constant.numeric\", // hex\r\n                regex : /0(?:[xX][0-9a-fA-F][0-9a-fA-F_]*|[bB][01][01_]*)[LlSsDdFfYy]?\\b/\r\n            }, {\r\n                token : \"constant.numeric\", // float\r\n                regex : /[+-]?\\d[\\d_]*(?:(?:\\.[\\d_]*)?(?:[eE][+-]?[\\d_]+)?)?[LlSsDdFfYy]?\\b/\r\n            }, {\r\n                token : \"constant.language.boolean\",\r\n                regex : \"(?:True|False)\\\\b\"\r\n            }, {\r\n                token : \"keyword.operator\",\r\n                regex : \":=|\\\\.\\\\.|,|;|\\\\|\\\\||\\\\/\\\\/|\\\\+|\\\\-|\\\\^|\\\\*|>|<|>=|=>|==|&&\"\r\n            }, {\r\n                token : keywordMapper,\r\n                // TODO: Unicode escape sequences\r\n                // TODO: Unicode identifiers\r\n                regex : \"[a-zA-Z_$][a-zA-Z0-9_$]*\\\\b\"\r\n            }, {\r\n                token : \"lparen\",\r\n                regex : \"[[({]\"\r\n            }, {\r\n                token : \"rparen\",\r\n                regex : \"[\\\\])}]\"\r\n            }, {\r\n                token : \"text\",\r\n                regex : \"\\\\s+\"\r\n            }\r\n        ],\r\n        \"comment\" : [\r\n            {\r\n                token : \"comment\", // closing comment\r\n                regex : \"\\\\*\\\\/\",\r\n                next : \"start\"\r\n            }, {\r\n                defaultToken : \"comment\"\r\n            }\r\n        ]\r\n    };\r\n\r\n    this.embedRules(DocCommentHighlightRules, \"doc-\",\r\n        [ DocCommentHighlightRules.getEndRule(\"start\") ]);\r\n};\r\n\r\noop.inherits(GobstonesHighlightRules, TextHighlightRules);\r\n\r\nexports.GobstonesHighlightRules = GobstonesHighlightRules;\r\n});\r\n"]}