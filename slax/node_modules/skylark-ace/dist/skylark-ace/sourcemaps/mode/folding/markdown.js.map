{"version":3,"sources":["mode/folding/markdown.js"],"names":["define","require","exports","module","oop","BaseFoldMode","FoldMode","Range","inherits","this","foldingStartMarker","getFoldWidget","session","foldStyle","row","line","getLine","test","bgTokenizer","getState","getFoldWidgetRange","startColumn","length","maxRow","getLength","startRow","endRow","match","substring","token","heading","isHeading","startHeadingLevel","getLevel","indexOf","value","endColumn","getTokens","type","lastIndexOf","ch","search","call","prototype"],"mappings":";;;;;;;AA8BAA,OAAO,SAASC,QAASC,QAASC,QAClC,aAEA,IAAIC,EAAMH,QAAQ,iBACdI,EAAeJ,QAAQ,eAAeK,SACtCC,EAAQN,QAAQ,eAAeM,MAE/BD,EAAWJ,QAAQI,SAAW,aAClCF,EAAII,SAASF,EAAUD,GAEvB,WACII,KAAKC,mBAAqB,8BAE1BD,KAAKE,cAAgB,SAASC,EAASC,EAAWC,GAC9C,IAAIC,EAAOH,EAAQI,QAAQF,GAC3B,OAAKL,KAAKC,mBAAmBO,KAAKF,GAGnB,KAAXA,EAAK,IACoC,SAArCH,EAAQM,YAAYC,SAASL,GACtB,MAIR,QARI,IAWfL,KAAKW,mBAAqB,SAASR,EAASC,EAAWC,GACnD,IAAIC,EAAOH,EAAQI,QAAQF,GACvBO,EAAcN,EAAKO,OACnBC,EAASX,EAAQY,YACjBC,EAAWX,EACXY,EAASZ,EACb,GAAKC,EAAKY,MAAMlB,KAAKC,oBAArB,CAGA,GAAe,KAAXK,EAAK,GAAW,CAChB,GAA0C,UAAtCH,EAAQM,YAAYC,SAASL,GAAkB,CAC/C,OAASA,EAAMS,KAEI,MADfR,EAAOH,EAAQI,QAAQF,IACd,GAAoC,OAAxBC,EAAKa,UAAU,EAAG,MAG3C,OAAO,IAAIrB,EAAMkB,EAAUJ,EAAaP,EAAK,GAE7C,KAAOA,KAAS,KAEG,MADfC,EAAOH,EAAQI,QAAQF,IACd,GAAoC,OAAxBC,EAAKa,UAAU,EAAG,MAG3C,OAAO,IAAIrB,EAAMO,EAAKC,EAAKO,OAAQG,EAAU,GAIrD,IAAII,EAMAC,EAAU,iBAQd,GAAIC,EAAUjB,GAAM,CAEhB,IADA,IAAIkB,EAAoBC,MACfnB,EAAMS,GAAQ,CACnB,GAAKQ,EAAUjB,GAGf,GADYmB,KACCD,EACT,MAKR,IAFAN,EAASZ,GAAQe,IAAgD,IAAtC,IAAK,KAAKK,QAAQL,EAAMM,MAAM,IAAgB,EAAJ,IAExDV,EACT,KAAOC,EAASD,GAAY,QAAQR,KAAKL,EAAQI,QAAQU,KACrDA,IAGR,GAAIA,EAASD,EAAU,CACnB,IAAIW,EAAYxB,EAAQI,QAAQU,GAAQJ,OACxC,OAAO,IAAIf,EAAMkB,EAAUJ,EAAaK,EAAQU,KAhCxD,SAASL,EAAUjB,GAEf,OADAe,EAAQjB,EAAQyB,UAAUvB,GAAK,KACwB,IAAvCe,EAAMS,KAAKC,YAAYT,EAAS,GAIpD,SAASG,IACL,IAAIO,EAAKX,EAAMM,MAAM,GACrB,MAAU,KAANK,EAAkB,EACZ,KAANA,EAAkB,EACf,EAAIX,EAAMM,MAAMM,OAAO,aA2BvCC,KAAKpC,EAASqC","file":"../../../mode/folding/markdown.js","sourcesContent":["/* ***** BEGIN LICENSE BLOCK *****\r\n * Distributed under the BSD license:\r\n *\r\n * Copyright (c) 2010, Ajax.org B.V.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *     * Redistributions of source code must retain the above copyright\r\n *       notice, this list of conditions and the following disclaimer.\r\n *     * Redistributions in binary form must reproduce the above copyright\r\n *       notice, this list of conditions and the following disclaimer in the\r\n *       documentation and/or other materials provided with the distribution.\r\n *     * Neither the name of Ajax.org B.V. nor the\r\n *       names of its contributors may be used to endorse or promote products\r\n *       derived from this software without specific prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\r\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY\r\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\r\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\r\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n *\r\n * ***** END LICENSE BLOCK ***** */\r\n\r\ndefine(function(require, exports, module) {\r\n\"use strict\";\r\n\r\nvar oop = require(\"../../lib/oop\");\r\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\r\nvar Range = require(\"../../range\").Range;\r\n\r\nvar FoldMode = exports.FoldMode = function() {};\r\noop.inherits(FoldMode, BaseFoldMode);\r\n\r\n(function() {\r\n    this.foldingStartMarker = /^(?:[=-]+\\s*$|#{1,6} |`{3})/;\r\n\r\n    this.getFoldWidget = function(session, foldStyle, row) {\r\n        var line = session.getLine(row);\r\n        if (!this.foldingStartMarker.test(line))\r\n            return \"\";\r\n\r\n        if (line[0] == \"`\") {\r\n            if (session.bgTokenizer.getState(row) == \"start\")\r\n                return \"end\";\r\n            return \"start\";\r\n        }\r\n\r\n        return \"start\";\r\n    };\r\n\r\n    this.getFoldWidgetRange = function(session, foldStyle, row) {\r\n        var line = session.getLine(row);\r\n        var startColumn = line.length;\r\n        var maxRow = session.getLength();\r\n        var startRow = row;\r\n        var endRow = row;\r\n        if (!line.match(this.foldingStartMarker))\r\n            return;\r\n\r\n        if (line[0] == \"`\") {\r\n            if (session.bgTokenizer.getState(row) !== \"start\") {\r\n                while (++row < maxRow) {\r\n                    line = session.getLine(row);\r\n                    if (line[0] == \"`\" & line.substring(0, 3) == \"```\")\r\n                        break;\r\n                }\r\n                return new Range(startRow, startColumn, row, 0);\r\n            } else {\r\n                while (row -- > 0) {\r\n                    line = session.getLine(row);\r\n                    if (line[0] == \"`\" & line.substring(0, 3) == \"```\")\r\n                        break;\r\n                }\r\n                return new Range(row, line.length, startRow, 0);\r\n            }\r\n        }\r\n\r\n        var token;\r\n        function isHeading(row) {\r\n            token = session.getTokens(row)[0];\r\n            return token && token.type.lastIndexOf(heading, 0) === 0;\r\n        }\r\n\r\n        var heading = \"markup.heading\";\r\n        function getLevel() {\r\n            var ch = token.value[0];\r\n            if (ch == \"=\") return 6;\r\n            if (ch == \"-\") return 5;\r\n            return 7 - token.value.search(/[^#]|$/);\r\n        }\r\n\r\n        if (isHeading(row)) {\r\n            var startHeadingLevel = getLevel();\r\n            while (++row < maxRow) {\r\n                if (!isHeading(row))\r\n                    continue;\r\n                var level = getLevel();\r\n                if (level >= startHeadingLevel)\r\n                    break;\r\n            }\r\n\r\n            endRow = row - (!token || [\"=\", \"-\"].indexOf(token.value[0]) == -1 ? 1 : 2);\r\n\r\n            if (endRow > startRow) {\r\n                while (endRow > startRow && /^\\s*$/.test(session.getLine(endRow)))\r\n                    endRow--;\r\n            }\r\n\r\n            if (endRow > startRow) {\r\n                var endColumn = session.getLine(endRow).length;\r\n                return new Range(startRow, startColumn, endRow, endColumn);\r\n            }\r\n        }\r\n    };\r\n\r\n}).call(FoldMode.prototype);\r\n\r\n});\r\n"]}