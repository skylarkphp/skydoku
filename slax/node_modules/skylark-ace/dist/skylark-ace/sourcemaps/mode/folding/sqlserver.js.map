{"version":3,"sources":["mode/folding/sqlserver.js"],"names":["define","require","exports","module","oop","Range","BaseFoldMode","FoldMode","inherits","this","foldingStartMarker","startRegionRe","getFoldWidgetRange","session","foldStyle","row","forceMultiline","line","getLine","test","getCommentRegionBlock","match","i","index","getBeginEndBlock","range","getCommentFoldRange","length","isMultiLine","getSectionRange","column","matchSequence","start","maxRow","getLength","depth","re","m","exec","call","prototype"],"mappings":";;;;;;;AA8BAA,OAAO,SAASC,QAASC,QAASC,QAClC,aAEA,IAAIC,EAAMH,QAAQ,iBACdI,EAAQJ,QAAQ,eAAeI,MAC/BC,EAAeL,QAAQ,YAAYM,SAEnCA,EAAWL,QAAQK,SAAW,aAElCH,EAAII,SAASD,EAAUD,GAEvB,WAQIG,KAAKC,mBAAqB,mCAE1BD,KAAKE,cAAgB,0BAErBF,KAAKG,mBAAqB,SAASC,EAASC,EAAWC,EAAKC,GACxD,IAAIC,EAAOJ,EAAQK,QAAQH,GAE3B,GAAIN,KAAKE,cAAcQ,KAAKF,GAAO,OAAOR,KAAKW,sBAAsBP,EAASI,EAAMF,GAEpF,IAAIM,EAAQJ,EAAKI,MAAMZ,KAAKC,oBAC5B,GAAIW,EAAO,CACP,IAAIC,EAAID,EAAME,MACd,GAAIF,EAAM,GAAI,OAAOZ,KAAKe,iBAAiBX,EAASE,EAAKO,EAAGD,EAAM,IAElE,IAAII,EAAQZ,EAAQa,oBAAoBX,EAAKO,EAAID,EAAM,GAAGM,OAAQ,GAQlE,OAPIF,IAAUA,EAAMG,gBACZZ,EACAS,EAAQhB,KAAKoB,gBAAgBhB,EAASE,GAEpB,OAAbD,IAAoBW,EAAQ,OAGlCA,IAYfhB,KAAKe,iBAAmB,SAASX,EAASE,EAAKe,EAAQC,GAUnD,IATA,IAKId,EALAe,GACAjB,IAAKA,EACLe,OAAQA,EAASC,EAAcJ,QAE/BM,EAASpB,EAAQqB,YAGjBC,EAAQ,EACRC,EAAK,oCACArB,EAAMkB,GAAQ,CACnBhB,EAAOJ,EAAQK,QAAQH,GACvB,IAAIsB,EAAID,EAAGE,KAAKrB,GAChB,GAAKoB,IACDA,EAAE,GAAIF,IACLA,KAEAA,GAAO,MAGhB,GADapB,EACAiB,EAAMjB,IACf,OAAO,IAAIV,EAAM2B,EAAMjB,IAAKiB,EAAMF,OAFzBf,EAEyCE,EAAKU,UAIhEY,KAAKhC,EAASiC","file":"../../../mode/folding/sqlserver.js","sourcesContent":["/* ***** BEGIN LICENSE BLOCK *****\r\n * Distributed under the BSD license:\r\n *\r\n * Copyright (c) 2010, Ajax.org B.V.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *     * Redistributions of source code must retain the above copyright\r\n *       notice, this list of conditions and the following disclaimer.\r\n *     * Redistributions in binary form must reproduce the above copyright\r\n *       notice, this list of conditions and the following disclaimer in the\r\n *       documentation and/or other materials provided with the distribution.\r\n *     * Neither the name of Ajax.org B.V. nor the\r\n *       names of its contributors may be used to endorse or promote products\r\n *       derived from this software without specific prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\r\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY\r\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\r\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\r\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n *\r\n * ***** END LICENSE BLOCK ***** */\r\n\r\ndefine(function(require, exports, module) {\r\n\"use strict\";\r\n\r\nvar oop = require(\"../../lib/oop\");\r\nvar Range = require(\"../../range\").Range;\r\nvar BaseFoldMode = require(\"./cstyle\").FoldMode;\r\n\r\nvar FoldMode = exports.FoldMode = function() {};\r\n\r\noop.inherits(FoldMode, BaseFoldMode);\r\n\r\n(function() {\r\n    /** \r\n     * Inheriting cstyle folding because it handles the region comment folding \r\n     * and special block comment folding appropriately.\r\n     * \r\n     * Cstyle's getCommentRegionBlock() contains the sql comment characters '--' for end region block.\r\n     */\r\n    \r\n    this.foldingStartMarker = /(\\bCASE\\b|\\bBEGIN\\b)|^\\s*(\\/\\*)/i;\r\n    // this.foldingStopMarker = /(\\bEND\\b)|^[\\s\\*]*(\\*\\/)/i;\r\n    this.startRegionRe = /^\\s*(\\/\\*|--)#?region\\b/;\r\n    \r\n    this.getFoldWidgetRange = function(session, foldStyle, row, forceMultiline) {\r\n        var line = session.getLine(row);\r\n    \r\n        if (this.startRegionRe.test(line)) return this.getCommentRegionBlock(session, line, row);\r\n    \r\n        var match = line.match(this.foldingStartMarker);\r\n        if (match) {\r\n            var i = match.index;\r\n            if (match[1]) return this.getBeginEndBlock(session, row, i, match[1]);\r\n    \r\n            var range = session.getCommentFoldRange(row, i + match[0].length, 1);\r\n            if (range && !range.isMultiLine()) {\r\n                if (forceMultiline) {\r\n                    range = this.getSectionRange(session, row);\r\n                }\r\n                else if (foldStyle != \"all\") range = null;\r\n            }\r\n    \r\n            return range;\r\n        }\r\n    \r\n        if (foldStyle === \"markbegin\") return;\r\n        //TODO: add support for end folding markers\r\n        return;\r\n    };\r\n    \r\n    /**\r\n     * @returns {range} folding block for sequence that starts with 'CASE' or 'BEGIN' and ends with 'END'\r\n     * @param {string} matchSequence - the sequence of charaters that started the fold widget, which should remain visible when the fold widget is folded\r\n     */\r\n    this.getBeginEndBlock = function(session, row, column, matchSequence) {\r\n        var start = {\r\n            row: row,\r\n            column: column + matchSequence.length\r\n        };\r\n        var maxRow = session.getLength();\r\n        var line;\r\n    \r\n        var depth = 1;\r\n        var re = /(\\bCASE\\b|\\bBEGIN\\b)|(\\bEND\\b)/i;\r\n        while (++row < maxRow) {\r\n            line = session.getLine(row);\r\n            var m = re.exec(line);\r\n            if (!m) continue;\r\n            if (m[1]) depth++;\r\n            else depth--;\r\n    \r\n            if (!depth) break;\r\n        }\r\n        var endRow = row;\r\n        if (endRow > start.row) {\r\n            return new Range(start.row, start.column, endRow, line.length);\r\n        }\r\n    };\r\n\r\n}).call(FoldMode.prototype);\r\n\r\n});\r\n"]}