{"version":3,"sources":["mode/groovy_highlight_rules.js"],"names":["define","require","exports","module","oop","DocCommentHighlightRules","TextHighlightRules","GroovyHighlightRules","keywordMapper","this","createKeywordMapper","variable.language","keyword","support.function","constant.language","$rules","start","token","regex","getStartRule","next","comment","defaultToken","qqstring","qstring","embedRules","getEndRule","inherits"],"mappings":";;;;;;;AAAAA,OAAO,SAASC,EAASC,EAASC,GAClC,aAEA,IAAIC,EAAMH,EAAQ,cACdI,EAA2BJ,EAAQ,iCAAiCI,yBACpEC,EAAqBL,EAAQ,0BAA0BK,mBAEvDC,EAAuB,WAEvB,IA8CIC,EAAgBC,KAAKC,qBACrBC,oBAAqB,OACrBC,QAhDW,+VAiDXC,mBAhCc,m6CAiCdC,oBArCmB,+BAsCpB,cAKHL,KAAKM,QACDC,QAEQC,MAAQ,UACRC,MAAQ,aAEZb,EAAyBc,aAAa,cAElCF,MAAQ,UACRC,MAAQ,SACRE,KAAO,YAEPH,MAAQ,gBACRC,MAAQ,iFAERD,MAAQ,SACRC,MAAQ,MACRE,KAAQ,aAERH,MAAQ,SACRC,MAAQ,MACRE,KAAQ,YAERH,MAAQ,SACRC,MAAQ,uCAERD,MAAQ,SACRC,MAAQ,uCAERD,MAAQ,mBACRC,MAAQ,yBAERD,MAAQ,mBACRC,MAAQ,oDAERD,MAAQ,4BACRC,MAAQ,sBAERD,MAAQT,EAGRU,MAAQ,gCAERD,MAAQ,mBACRC,MAAQ,sOAERD,MAAQ,SACRC,MAAQ,UAERD,MAAQ,SACRC,MAAQ,YAERD,MAAQ,OACRC,MAAQ,SAGhBG,UAEQJ,MAAQ,UACRC,MAAQ,SACRE,KAAO,UAEPE,aAAe,YAGvBC,WAEQN,MAAQ,2BACRC,MAAQ,8BAERD,MAAQ,2BACRC,MAAQ,cAERD,MAAQ,2BACRC,MAAQ,mBAERD,MAAQ,SACRC,MAAQ,SACRE,KAAO,UAEPH,MAAQ,SACRC,MAAQ,QAGhBM,UAEQP,MAAQ,2BACRC,MAAQ,8BAERD,MAAQ,SACRC,MAAQ,SACRE,KAAO,UAEPH,MAAQ,SACRC,MAAQ,SAKpBT,KAAKgB,WAAWpB,EAA0B,QACpCA,EAAyBqB,WAAW,YAG9CtB,EAAIuB,SAASpB,EAAsBD,GAEnCJ,EAAQK,qBAAuBA","file":"../../mode/groovy_highlight_rules.js","sourcesContent":["define(function(require, exports, module) {\r\n\"use strict\";\r\n\r\nvar oop = require(\"../lib/oop\");\r\nvar DocCommentHighlightRules = require(\"./doc_comment_highlight_rules\").DocCommentHighlightRules;\r\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\r\n\r\nvar GroovyHighlightRules = function() {\r\n\r\n    var keywords = (\r\n        \"assert|with|abstract|continue|for|new|switch|\" +\r\n        \"assert|default|goto|package|synchronized|\" +\r\n        \"boolean|do|if|private|this|\" +\r\n        \"break|double|implements|protected|throw|\" +\r\n        \"byte|else|import|public|throws|\" +\r\n        \"case|enum|instanceof|return|transient|\" +\r\n        \"catch|extends|int|short|try|\" +\r\n        \"char|final|interface|static|void|\" +\r\n        \"class|finally|long|strictfp|volatile|\" +\r\n        \"def|float|native|super|while\"\r\n    );\r\n\r\n    var buildinConstants = (\r\n        \"null|Infinity|NaN|undefined\"\r\n    );\r\n\r\n    var langClasses = (\r\n        \"AbstractMethodError|AssertionError|ClassCircularityError|\"+\r\n        \"ClassFormatError|Deprecated|EnumConstantNotPresentException|\"+\r\n        \"ExceptionInInitializerError|IllegalAccessError|\"+\r\n        \"IllegalThreadStateException|InstantiationError|InternalError|\"+\r\n        \"NegativeArraySizeException|NoSuchFieldError|Override|Process|\"+\r\n        \"ProcessBuilder|SecurityManager|StringIndexOutOfBoundsException|\"+\r\n        \"SuppressWarnings|TypeNotPresentException|UnknownError|\"+\r\n        \"UnsatisfiedLinkError|UnsupportedClassVersionError|VerifyError|\"+\r\n        \"InstantiationException|IndexOutOfBoundsException|\"+\r\n        \"ArrayIndexOutOfBoundsException|CloneNotSupportedException|\"+\r\n        \"NoSuchFieldException|IllegalArgumentException|NumberFormatException|\"+\r\n        \"SecurityException|Void|InheritableThreadLocal|IllegalStateException|\"+\r\n        \"InterruptedException|NoSuchMethodException|IllegalAccessException|\"+\r\n        \"UnsupportedOperationException|Enum|StrictMath|Package|Compiler|\"+\r\n        \"Readable|Runtime|StringBuilder|Math|IncompatibleClassChangeError|\"+\r\n        \"NoSuchMethodError|ThreadLocal|RuntimePermission|ArithmeticException|\"+\r\n        \"NullPointerException|Long|Integer|Short|Byte|Double|Number|Float|\"+\r\n        \"Character|Boolean|StackTraceElement|Appendable|StringBuffer|\"+\r\n        \"Iterable|ThreadGroup|Runnable|Thread|IllegalMonitorStateException|\"+\r\n        \"StackOverflowError|OutOfMemoryError|VirtualMachineError|\"+\r\n        \"ArrayStoreException|ClassCastException|LinkageError|\"+\r\n        \"NoClassDefFoundError|ClassNotFoundException|RuntimeException|\"+\r\n        \"Exception|ThreadDeath|Error|Throwable|System|ClassLoader|\"+\r\n        \"Cloneable|Class|CharSequence|Comparable|String|Object\"\r\n    );\r\n\r\n    // TODO var importClasses = \"\";\r\n\r\n    var keywordMapper = this.createKeywordMapper({\r\n        \"variable.language\": \"this\",\r\n        \"keyword\": keywords,\r\n        \"support.function\": langClasses,\r\n        \"constant.language\": buildinConstants\r\n    }, \"identifier\");\r\n\r\n    // regexp must not have capturing parentheses. Use (?:) instead.\r\n    // regexps are ordered -> the first match is used\r\n\r\n    this.$rules = {\r\n        \"start\" : [\r\n            {\r\n                token : \"comment\",\r\n                regex : \"\\\\/\\\\/.*$\"\r\n            },\r\n            DocCommentHighlightRules.getStartRule(\"doc-start\"),\r\n            {\r\n                token : \"comment\", // multi line comment\r\n                regex : \"\\\\/\\\\*\",\r\n                next : \"comment\"\r\n            }, {\r\n                token : \"string.regexp\",\r\n                regex : \"[/](?:(?:\\\\[(?:\\\\\\\\]|[^\\\\]])+\\\\])|(?:\\\\\\\\/|[^\\\\]/]))*[/]\\\\w*\\\\s*(?=[).,;]|$)\"\r\n            }, {\r\n                token : \"string\",\r\n                regex : '\"\"\"',\r\n                next  : \"qqstring\"\r\n            }, {\r\n                token : \"string\",\r\n                regex : \"'''\",\r\n                next  : \"qstring\"\r\n            }, {\r\n                token : \"string\", // single line\r\n                regex : '[\"](?:(?:\\\\\\\\.)|(?:[^\"\\\\\\\\]))*?[\"]'\r\n            }, {\r\n                token : \"string\", // single line\r\n                regex : \"['](?:(?:\\\\\\\\.)|(?:[^'\\\\\\\\]))*?[']\"\r\n            }, {\r\n                token : \"constant.numeric\", // hex\r\n                regex : \"0[xX][0-9a-fA-F]+\\\\b\"\r\n            }, {\r\n                token : \"constant.numeric\", // float\r\n                regex : \"[+-]?\\\\d+(?:(?:\\\\.\\\\d*)?(?:[eE][+-]?\\\\d+)?)?\\\\b\"\r\n            }, {\r\n                token : \"constant.language.boolean\",\r\n                regex : \"(?:true|false)\\\\b\"\r\n            }, {\r\n                token : keywordMapper,\r\n                // TODO: Unicode escape sequences\r\n                // TODO: Unicode identifiers\r\n                regex : \"[a-zA-Z_$][a-zA-Z0-9_$]*\\\\b\"\r\n            }, {\r\n                token : \"keyword.operator\",\r\n                regex : \"\\\\?:|\\\\?\\\\.|\\\\*\\\\.|<=>|=~|==~|\\\\.@|\\\\*\\\\.@|\\\\.&|as|in|is|!|\\\\$|%|&|\\\\*|\\\\-\\\\-|\\\\-|\\\\+\\\\+|\\\\+|~|===|==|=|!=|!==|<=|>=|<<=|>>=|>>>=|<>|<|>|!|&&|\\\\|\\\\||\\\\?\\\\:|\\\\*=|%=|\\\\+=|\\\\-=|&=|\\\\^=|\\\\b(?:in|instanceof|new|delete|typeof|void)\"\r\n            }, {\r\n                token : \"lparen\",\r\n                regex : \"[[({]\"\r\n            }, {\r\n                token : \"rparen\",\r\n                regex : \"[\\\\])}]\"\r\n            }, {\r\n                token : \"text\",\r\n                regex : \"\\\\s+\"\r\n            }\r\n        ],\r\n        \"comment\" : [\r\n            {\r\n                token : \"comment\", // closing comment\r\n                regex : \"\\\\*\\\\/\",\r\n                next : \"start\"\r\n            }, {\r\n                defaultToken : \"comment\"\r\n            }\r\n        ],\r\n        \"qqstring\" : [\r\n            {\r\n                token : \"constant.language.escape\",\r\n                regex : /\\\\(?:u[0-9A-Fa-f]{4}|.|$)/\r\n            }, {\r\n                token : \"constant.language.escape\",\r\n                regex : /\\$[\\w\\d]+/\r\n            }, {\r\n                token : \"constant.language.escape\",\r\n                regex : /\\$\\{[^\"\\}]+\\}?/\r\n            }, {\r\n                token : \"string\",\r\n                regex : '\"{3,5}',\r\n                next : \"start\"\r\n            }, {\r\n                token : \"string\",\r\n                regex : '.+?'\r\n            }\r\n        ],\r\n        \"qstring\" : [\r\n            {\r\n                token : \"constant.language.escape\",\r\n                regex : /\\\\(?:u[0-9A-Fa-f]{4}|.|$)/\r\n            }, {\r\n                token : \"string\",\r\n                regex : \"'{3,5}\",\r\n                next : \"start\"\r\n            }, {\r\n                token : \"string\",\r\n                regex : \".+?\"\r\n            }\r\n        ]\r\n    };\r\n\r\n    this.embedRules(DocCommentHighlightRules, \"doc-\",\r\n        [ DocCommentHighlightRules.getEndRule(\"start\") ]);\r\n};\r\n\r\noop.inherits(GroovyHighlightRules, TextHighlightRules);\r\n\r\nexports.GroovyHighlightRules = GroovyHighlightRules;\r\n});\r\n"]}