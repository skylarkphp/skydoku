{"version":3,"sources":["mode/csharp.js"],"names":["define","require","exports","module","oop","TextMode","Mode","CSharpHighlightRules","MatchingBraceOutdent","CstyleBehaviour","CStyleFoldMode","FoldMode","this","HighlightRules","$outdent","$behaviour","foldingRules","inherits","lineCommentStart","blockComment","start","end","getNextLineIndent","state","line","tab","indent","$getIndent","tokens","getTokenizer","getLineTokens","length","type","match","checkOutdent","input","autoOutdent","doc","row","createWorker","session","$id","call","prototype"],"mappings":";;;;;;;AAAAA,OAAO,SAASC,QAASC,QAASC,QAClC,aAEA,IAAIC,EAAMH,QAAQ,cACdI,EAAWJ,QAAQ,UAAUK,KAC7BC,EAAuBN,QAAQ,4BAA4BM,qBAC3DC,EAAuBP,QAAQ,4BAA4BO,qBAC3DC,EAAkBR,QAAQ,sBAAsBQ,gBAChDC,EAAiBT,QAAQ,oBAAoBU,SAE7CL,EAAO,WACPM,KAAKC,eAAiBN,EACtBK,KAAKE,SAAW,IAAIN,EACpBI,KAAKG,WAAa,IAAIN,EACtBG,KAAKI,aAAe,IAAIN,GAE5BN,EAAIa,SAASX,EAAMD,GAEnB,WAEIO,KAAKM,iBAAmB,KACxBN,KAAKO,cAAgBC,MAAO,KAAMC,IAAK,MAEvCT,KAAKU,kBAAoB,SAASC,EAAOC,EAAMC,GAC3C,IAAIC,EAASd,KAAKe,WAAWH,GAGzBI,EADgBhB,KAAKiB,eAAeC,cAAcN,EAAMD,GACjCK,OAE3B,GAAIA,EAAOG,QAA0C,WAAhCH,EAAOA,EAAOG,OAAO,GAAGC,KACzC,OAAON,EAGE,SAATH,IACYC,EAAKS,MAAM,qBAEnBP,GAAUD,IAIlB,OAAOC,GAGXd,KAAKsB,aAAe,SAASX,EAAOC,EAAMW,GACtC,OAAOvB,KAAKE,SAASoB,aAAaV,EAAMW,IAG5CvB,KAAKwB,YAAc,SAASb,EAAOc,EAAKC,GACpC1B,KAAKE,SAASsB,YAAYC,EAAKC,IAInC1B,KAAK2B,aAAe,SAASC,GACzB,OAAO,MAGX5B,KAAK6B,IAAM,mBACZC,KAAKpC,EAAKqC,WAEbzC,QAAQI,KAAOA","file":"../../mode/csharp.js","sourcesContent":["define(function(require, exports, module) {\r\n\"use strict\";\r\n\r\nvar oop = require(\"../lib/oop\");\r\nvar TextMode = require(\"./text\").Mode;\r\nvar CSharpHighlightRules = require(\"./csharp_highlight_rules\").CSharpHighlightRules;\r\nvar MatchingBraceOutdent = require(\"./matching_brace_outdent\").MatchingBraceOutdent;\r\nvar CstyleBehaviour = require(\"./behaviour/cstyle\").CstyleBehaviour;\r\nvar CStyleFoldMode = require(\"./folding/csharp\").FoldMode;\r\n\r\nvar Mode = function() {\r\n    this.HighlightRules = CSharpHighlightRules;\r\n    this.$outdent = new MatchingBraceOutdent();\r\n    this.$behaviour = new CstyleBehaviour();\r\n    this.foldingRules = new CStyleFoldMode();\r\n};\r\noop.inherits(Mode, TextMode);\r\n\r\n(function() {\r\n    \r\n    this.lineCommentStart = \"//\";\r\n    this.blockComment = {start: \"/*\", end: \"*/\"};\r\n    \r\n    this.getNextLineIndent = function(state, line, tab) {\r\n        var indent = this.$getIndent(line);\r\n  \r\n        var tokenizedLine = this.getTokenizer().getLineTokens(line, state);\r\n        var tokens = tokenizedLine.tokens;\r\n  \r\n        if (tokens.length && tokens[tokens.length-1].type == \"comment\") {\r\n            return indent;\r\n        }\r\n    \r\n        if (state == \"start\") {\r\n            var match = line.match(/^.*[\\{\\(\\[]\\s*$/);\r\n            if (match) {\r\n                indent += tab;\r\n            }\r\n        }\r\n  \r\n        return indent;\r\n    };\r\n\r\n    this.checkOutdent = function(state, line, input) {\r\n        return this.$outdent.checkOutdent(line, input);\r\n    };\r\n  \r\n    this.autoOutdent = function(state, doc, row) {\r\n        this.$outdent.autoOutdent(doc, row);\r\n    };\r\n\r\n\r\n    this.createWorker = function(session) {\r\n        return null;\r\n    };\r\n\r\n    this.$id = \"ace/mode/csharp\";\r\n}).call(Mode.prototype);\r\n\r\nexports.Mode = Mode;\r\n});\r\n"]}