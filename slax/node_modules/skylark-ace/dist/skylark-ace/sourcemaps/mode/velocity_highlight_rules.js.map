{"version":3,"sources":["mode/velocity_highlight_rules.js"],"names":["define","require","exports","module","oop","lang","TextHighlightRules","HtmlHighlightRules","VelocityHighlightRules","call","this","builtinConstants","arrayToMap","split","builtinFunctions","builtinVariables","keywords","i","$rules","start","push","token","regex","next","value","hasOwnProperty","substring","match","defaultToken","unshift","normalizeRules","inherits"],"mappings":";;;;;;;AAAAA,OAAO,SAASC,EAASC,EAASC,GAClC,aAEA,IAAIC,EAAMH,EAAQ,cACdI,EAAOJ,EAAQ,eACfK,EAAqBL,EAAQ,0BAA0BK,mBACvDC,EAAqBN,EAAQ,0BAA0BM,mBAEvDC,EAAyB,WACzBD,EAAmBE,KAAKC,MAExB,IAAIC,EAAmBN,EAAKO,WACxB,kBAAoBC,MAAM,MAG1BC,EAAmBT,EAAKO,WACxB,uHAAyHC,MAAM,MAG/HE,EAAmBV,EAAKO,WACxB,wBAA0BC,MAAM,MAGhCG,EAAWX,EAAKO,WAChB,2EAGEC,MAAM,MAuIZ,IAAK,IAAII,KAjITP,KAAKQ,OAAOC,MAAMC,MAEVC,MAAQ,UACRC,MAAQ,UAERD,MAAQ,gBACRC,MAAQ,OACRC,KAAO,eAEPF,MAAQ,gBACRC,MAAQ,iFAERD,MAAQ,SACRC,MAAQ,uCAERD,MAAQ,SACRC,MAAQ,uCAERD,MAAQ,mBACRC,MAAQ,yBAERD,MAAQ,mBACRC,MAAQ,oDAERD,MAAQ,4BACRC,MAAQ,sBAERD,MAAQ,SAASG,GACb,OAAIR,EAASS,eAAeD,GACjB,UACFb,EAAiBc,eAAeD,GAC9B,oBACFT,EAAiBU,eAAeD,GAC9B,oBACFV,EAAiBW,eAAeD,IAAUV,EAAiBW,eAAeD,EAAME,UAAU,IACxF,mBACO,YAATF,EACE,qBAEJA,EAAMG,MAAM,gCACJ,WACJ,cAIfL,MAAQ,+BAERD,MAAQ,mBACRC,MAAQ,6CAERD,MAAQ,SACRC,MAAQ,UAERD,MAAQ,SACRC,MAAQ,YAERD,MAAQ,OACRC,MAAQ,SAIhBZ,KAAKQ,OAAmB,aAEhBG,MAAQ,UACRC,MAAQ,cACRC,KAAO,UAEPK,aAAc,YAItBlB,KAAKQ,OAAiB,WAEdG,MAAO,WACPC,MAAO,IACPC,KAAM,QAENF,MAAQ,gBACRC,MAAQ,iFAERD,MAAQ,SACRC,MAAQ,uCAERD,MAAQ,SACRC,MAAQ,uCAERD,MAAQ,mBACRC,MAAQ,yBAERD,MAAQ,mBACRC,MAAQ,oDAERD,MAAQ,4BACRC,MAAQ,sBAERD,MAAQ,SAASG,GACb,OAAIR,EAASS,eAAeD,GACjB,UACFb,EAAiBc,eAAeD,GAC9B,oBACFT,EAAiBU,eAAeD,GAC9B,oBACFV,EAAiBW,eAAeD,IAAUV,EAAiBW,eAAeD,EAAME,UAAU,IACxF,mBACO,YAATF,EACE,qBAEJA,EAAMG,MAAM,iCACJ,WACJ,cAIfL,MAAQ,gCAERD,MAAQ,mBACRC,MAAQ,6CAERD,MAAQ,SACRC,MAAQ,UAERD,MAAQ,SACRC,MAAQ,YAERD,MAAQ,OACRC,MAAQ,SAIFZ,KAAKQ,OACfR,KAAKQ,OAAOD,GAAGY,SACXR,MAAO,WACPC,MAAO,OACPF,KAAM,aAIdV,KAAKoB,kBAGT1B,EAAI2B,SAASvB,EAAwBF,GAErCJ,EAAQM,uBAAyBA","file":"../../mode/velocity_highlight_rules.js","sourcesContent":["define(function(require, exports, module) {\r\n\"use strict\";\r\n\r\nvar oop = require(\"../lib/oop\");\r\nvar lang = require(\"../lib/lang\");\r\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\r\nvar HtmlHighlightRules = require(\"./html_highlight_rules\").HtmlHighlightRules;\r\n\r\nvar VelocityHighlightRules = function() {\r\n    HtmlHighlightRules.call(this);\r\n\r\n    var builtinConstants = lang.arrayToMap(\r\n        ('true|false|null').split('|')\r\n    );\r\n\r\n    var builtinFunctions = lang.arrayToMap(\r\n        (\"_DateTool|_DisplayTool|_EscapeTool|_FieldTool|_MathTool|_NumberTool|_SerializerTool|_SortTool|_StringTool|_XPathTool\").split('|')\r\n    );\r\n\r\n    var builtinVariables = lang.arrayToMap(\r\n        ('$contentRoot|$foreach').split('|')\r\n    );\r\n\r\n    var keywords = lang.arrayToMap(\r\n        (\"#set|#macro|#include|#parse|\" +\r\n        \"#if|#elseif|#else|#foreach|\" +\r\n        \"#break|#end|#stop\"\r\n        ).split('|')\r\n    );\r\n\r\n    // regexp must not have capturing parentheses. Use (?:) instead.\r\n    // regexps are ordered -> the first match is used\r\n\r\n    this.$rules.start.push(\r\n        {\r\n            token : \"comment\",\r\n            regex : \"##.*$\"\r\n        },{\r\n            token : \"comment.block\", // multi line comment\r\n            regex : \"#\\\\*\",\r\n            next : \"vm_comment\"\r\n        }, {\r\n            token : \"string.regexp\",\r\n            regex : \"[/](?:(?:\\\\[(?:\\\\\\\\]|[^\\\\]])+\\\\])|(?:\\\\\\\\/|[^\\\\]/]))*[/]\\\\w*\\\\s*(?=[).,;]|$)\"\r\n        }, {\r\n            token : \"string\", // single line\r\n            regex : '[\"](?:(?:\\\\\\\\.)|(?:[^\"\\\\\\\\]))*?[\"]'\r\n        }, {\r\n            token : \"string\", // single line\r\n            regex : \"['](?:(?:\\\\\\\\.)|(?:[^'\\\\\\\\]))*?[']\"\r\n        }, {\r\n            token : \"constant.numeric\", // hex\r\n            regex : \"0[xX][0-9a-fA-F]+\\\\b\"\r\n        }, {\r\n            token : \"constant.numeric\", // float\r\n            regex : \"[+-]?\\\\d+(?:(?:\\\\.\\\\d*)?(?:[eE][+-]?\\\\d+)?)?\\\\b\"\r\n        }, {\r\n            token : \"constant.language.boolean\",\r\n            regex : \"(?:true|false)\\\\b\"\r\n        }, {\r\n            token : function(value) {\r\n                if (keywords.hasOwnProperty(value))\r\n                    return \"keyword\";\r\n                else if (builtinConstants.hasOwnProperty(value))\r\n                    return \"constant.language\";\r\n                else if (builtinVariables.hasOwnProperty(value))\r\n                    return \"variable.language\";\r\n                else if (builtinFunctions.hasOwnProperty(value) || builtinFunctions.hasOwnProperty(value.substring(1)))\r\n                    return \"support.function\";\r\n                else if (value == \"debugger\")\r\n                    return \"invalid.deprecated\";\r\n                else\r\n                    if(value.match(/^(\\$[a-zA-Z_][a-zA-Z0-9_]*)$/))\r\n                        return \"variable\";\r\n                    return \"identifier\";\r\n            },\r\n            // TODO: Unicode escape sequences\r\n            // TODO: Unicode identifiers\r\n            regex : \"[a-zA-Z$#][a-zA-Z0-9_]*\\\\b\"\r\n        }, {\r\n            token : \"keyword.operator\",\r\n            regex : \"!|&|\\\\*|\\\\-|\\\\+|=|!=|<=|>=|<|>|&&|\\\\|\\\\|\"\r\n        }, {\r\n            token : \"lparen\",\r\n            regex : \"[[({]\"\r\n        }, {\r\n            token : \"rparen\",\r\n            regex : \"[\\\\])}]\"\r\n        }, {\r\n            token : \"text\",\r\n            regex : \"\\\\s+\"\r\n        }\r\n    );\r\n\r\n    this.$rules[\"vm_comment\"] = [\r\n        {\r\n            token : \"comment\", // closing comment\r\n            regex : \"\\\\*#|-->\",\r\n            next : \"start\"\r\n        }, {\r\n            defaultToken: \"comment\"\r\n        }\r\n    ];\r\n\r\n    this.$rules[\"vm_start\"] = [\r\n        {\r\n            token: \"variable\",\r\n            regex: \"}\",\r\n            next: \"pop\"\r\n        }, {\r\n            token : \"string.regexp\",\r\n            regex : \"[/](?:(?:\\\\[(?:\\\\\\\\]|[^\\\\]])+\\\\])|(?:\\\\\\\\/|[^\\\\]/]))*[/]\\\\w*\\\\s*(?=[).,;]|$)\"\r\n        }, {\r\n            token : \"string\", // single line\r\n            regex : '[\"](?:(?:\\\\\\\\.)|(?:[^\"\\\\\\\\]))*?[\"]'\r\n        }, {\r\n            token : \"string\", // single line\r\n            regex : \"['](?:(?:\\\\\\\\.)|(?:[^'\\\\\\\\]))*?[']\"\r\n        }, {\r\n            token : \"constant.numeric\", // hex\r\n            regex : \"0[xX][0-9a-fA-F]+\\\\b\"\r\n        }, {\r\n            token : \"constant.numeric\", // float\r\n            regex : \"[+-]?\\\\d+(?:(?:\\\\.\\\\d*)?(?:[eE][+-]?\\\\d+)?)?\\\\b\"\r\n        }, {\r\n            token : \"constant.language.boolean\",\r\n            regex : \"(?:true|false)\\\\b\"\r\n        }, {\r\n            token : function(value) {\r\n                if (keywords.hasOwnProperty(value))\r\n                    return \"keyword\";\r\n                else if (builtinConstants.hasOwnProperty(value))\r\n                    return \"constant.language\";\r\n                else if (builtinVariables.hasOwnProperty(value))\r\n                    return \"variable.language\";\r\n                else if (builtinFunctions.hasOwnProperty(value) || builtinFunctions.hasOwnProperty(value.substring(1)))\r\n                    return \"support.function\";\r\n                else if (value == \"debugger\")\r\n                    return \"invalid.deprecated\";\r\n                else\r\n                    if(value.match(/^(\\$[a-zA-Z_$][a-zA-Z0-9_]*)$/))\r\n                        return \"variable\";\r\n                    return \"identifier\";\r\n            },\r\n            // TODO: Unicode escape sequences\r\n            // TODO: Unicode identifiers\r\n            regex : \"[a-zA-Z_$][a-zA-Z0-9_$]*\\\\b\"\r\n        }, {\r\n            token : \"keyword.operator\",\r\n            regex : \"!|&|\\\\*|\\\\-|\\\\+|=|!=|<=|>=|<|>|&&|\\\\|\\\\|\"\r\n        }, {\r\n            token : \"lparen\",\r\n            regex : \"[[({]\"\r\n        }, {\r\n            token : \"rparen\",\r\n            regex : \"[\\\\])}]\"\r\n        }, {\r\n            token : \"text\",\r\n            regex : \"\\\\s+\"\r\n        }\r\n    ];\r\n\r\n    for (var i in this.$rules) {\r\n        this.$rules[i].unshift({\r\n            token: \"variable\",\r\n            regex: \"\\\\${\",\r\n            push: \"vm_start\"\r\n        });\r\n    }\r\n\r\n    this.normalizeRules();\r\n};\r\n\r\noop.inherits(VelocityHighlightRules, TextHighlightRules);\r\n\r\nexports.VelocityHighlightRules = VelocityHighlightRules;\r\n});"]}