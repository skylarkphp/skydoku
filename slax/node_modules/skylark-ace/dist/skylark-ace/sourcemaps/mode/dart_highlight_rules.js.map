{"version":3,"sources":["mode/dart_highlight_rules.js"],"names":["define","require","exports","module","oop","DocCommentHighlightRules","TextHighlightRules","DartHighlightRules","keywordMapper","this","createKeywordMapper","constant.language.dart","variable.language.dart","keyword.control.dart","keyword.declaration.dart","storage.modifier.dart","storage.type.primitive.dart","stringfill","token","regex","defaultToken","$rules","start","getStartRule","next","comment","qdoc","concat","qqdoc","qstring","qqstring","embedRules","getEndRule","inherits"],"mappings":";;;;;;;AAIAA,OAAO,SAASC,QAASC,QAASC,QAClC,aAEA,IAAIC,EAAMH,QAAQ,cACdI,EAA2BJ,QAAQ,iCAAiCI,yBACpEC,EAAqBL,QAAQ,0BAA0BK,mBAEvDC,EAAqB,WAErB,IAOIC,EAAgBC,KAAKC,qBACrBC,yBARmB,kBASnBC,yBARmB,aASnBC,uBARiB,oIASjBC,2BARqB,+FASrBC,wBARkB,qBASlBC,8BARc,+CASf,cAECC,IACAC,MAAQ,2BACRC,MAAQ,QAERD,MAAQ,OACRC,MAAQ,yBAERC,aAAe,WAMnBX,KAAKY,QACLC,QAEQJ,MAAQ,UACRC,MAAQ,WAEZd,EAAyBkB,aAAa,cAElCL,MAAQ,UACRC,MAAQ,OACRK,KAAO,YAGPN,OAAQ,iCACRC,MAAO,aAGPD,MAAO,4BACPC,MAAO,8DAGPD,OAAS,4BAA6B,QACtCC,MAAQ,2BAGRA,MAAO,WACPD,MAAO,sBAGPC,MAAO,QACPD,MAAO,iCAGPC,MAAO,yBACPD,OAAQ,2BAGRC,MAAO,wBACPD,OAAQ,mCAGRC,MAAO,2BACPD,OAAQ,8CAGRC,MAAO,sBACPD,OAAQ,sCAGRC,MAAO,qBACPD,OAAQ,iDAGRC,MAAO,IACPD,MAAO,qCAGPA,MAAQ,SACRC,MAAQ,MACRK,KAAO,SAGPN,MAAQ,SACRC,MAAQ,MACRK,KAAO,UAGPN,MAAQ,SACRC,MAAQ,IACRK,KAAO,YAGPN,MAAQ,SACRC,MAAQ,IACRK,KAAO,aAGPL,MAAO,kBACPD,OAAQ,+CAGRC,MAAO,6BACPD,OAAQ,sCAGRC,MAAO,gBACPD,OAAQ,mCAGRA,MAAQ,mBACRC,MAAQ,yBAGRD,MAAQ,mBACRC,MAAQ,oDAGRD,MAAQV,EACRW,MAAQ,gCAGhBM,UAEQP,MAAQ,UACRC,MAAQ,SACRK,KAAO,UAEPJ,aAAe,YAGvBM,OAEQR,MAAQ,SACRC,MAAQ,MACRK,KAAO,UAEbG,OAAOV,GAETW,QAEQV,MAAQ,SACRC,MAAQ,MACRK,KAAO,UAEbG,OAAOV,GAETY,UAEQX,MAAQ,SACRC,MAAQ,MACRK,KAAO,UAEbG,OAAOV,GAETa,WAEQZ,MAAQ,SACRC,MAAQ,MACRK,KAAO,UAEbG,OAAOV,IAITR,KAAKsB,WAAW1B,EAA0B,QACpCA,EAAyB2B,WAAW,YAG9C5B,EAAI6B,SAAS1B,EAAoBD,GAEjCJ,QAAQK,mBAAqBA","file":"../../mode/dart_highlight_rules.js","sourcesContent":["/*\r\n  THIS FILE WAS AUTOGENERATED BY mode_highlight_rules.tmpl.js (UUID: 958518BC-799F-477A-99F9-5B28EBF230F6) */\r\n\r\n\r\ndefine(function(require, exports, module) {\r\n\"use strict\";\r\n\r\nvar oop = require(\"../lib/oop\");\r\nvar DocCommentHighlightRules = require(\"./doc_comment_highlight_rules\").DocCommentHighlightRules;\r\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\r\n\r\nvar DartHighlightRules = function() {\r\n\r\n    var constantLanguage = \"true|false|null\";\r\n    var variableLanguage = \"this|super\";\r\n    var keywordControl = \"try|catch|finally|throw|rethrow|assert|break|case|continue|default|do|else|for|if|in|return|switch|while|new|deferred|async|await\";\r\n    var keywordDeclaration = \"abstract|class|extends|external|factory|implements|get|native|operator|set|typedef|with|enum\";\r\n    var storageModifier = \"static|final|const\";\r\n    var storageType = \"void|bool|num|int|double|dynamic|var|String\";\r\n\r\n    var keywordMapper = this.createKeywordMapper({\r\n        \"constant.language.dart\": constantLanguage,\r\n        \"variable.language.dart\": variableLanguage,\r\n        \"keyword.control.dart\": keywordControl,\r\n        \"keyword.declaration.dart\": keywordDeclaration,\r\n        \"storage.modifier.dart\": storageModifier,\r\n        \"storage.type.primitive.dart\": storageType\r\n    }, \"identifier\");\r\n\r\n    var stringfill = [{\r\n        token : \"constant.language.escape\",\r\n        regex : /\\\\./\r\n    }, {\r\n        token : \"text\",\r\n        regex : /\\$(?:\\w+|{[^\"'}]+})?/\r\n    }, {\r\n        defaultToken : \"string\"\r\n    }];\r\n\r\n    // regexp must not have capturing parentheses. Use (?:) instead.\r\n    // regexps are ordered -> the first match is used\r\n\r\n    this.$rules = {\r\n    \"start\": [\r\n        {\r\n            token : \"comment\",\r\n            regex : /\\/\\/.*$/\r\n        },\r\n        DocCommentHighlightRules.getStartRule(\"doc-start\"),\r\n        {\r\n            token : \"comment\", // multi line comment\r\n            regex : /\\/\\*/,\r\n            next : \"comment\"\r\n        },\r\n        {\r\n            token: [\"meta.preprocessor.script.dart\"],\r\n            regex: \"^(#!.*)$\"\r\n        },\r\n        {\r\n            token: \"keyword.other.import.dart\",\r\n            regex: \"(?:\\\\b)(?:library|import|export|part|of|show|hide)(?:\\\\b)\"\r\n        },\r\n        {\r\n            token : [\"keyword.other.import.dart\", \"text\"],\r\n            regex : \"(?:\\\\b)(prefix)(\\\\s*:)\"\r\n        },\r\n        {\r\n            regex: \"\\\\bas\\\\b\",\r\n            token: \"keyword.cast.dart\"\r\n        },\r\n        {\r\n            regex: \"\\\\?|:\",\r\n            token: \"keyword.control.ternary.dart\"\r\n        },\r\n        {\r\n            regex: \"(?:\\\\b)(is\\\\!?)(?:\\\\b)\",\r\n            token: [\"keyword.operator.dart\"]\r\n        },\r\n        {\r\n            regex: \"(<<|>>>?|~|\\\\^|\\\\||&)\",\r\n            token: [\"keyword.operator.bitwise.dart\"]\r\n        },\r\n        {\r\n            regex: \"((?:&|\\\\^|\\\\||<<|>>>?)=)\",\r\n            token: [\"keyword.operator.assignment.bitwise.dart\"]\r\n        },\r\n        {\r\n            regex: \"(===?|!==?|<=?|>=?)\",\r\n            token: [\"keyword.operator.comparison.dart\"]\r\n        },\r\n        {\r\n            regex: \"((?:[+*/%-]|\\\\~)=)\",\r\n            token: [\"keyword.operator.assignment.arithmetic.dart\"]\r\n        },\r\n        {\r\n            regex: \"=\",\r\n            token: \"keyword.operator.assignment.dart\"\r\n        },\r\n        {\r\n            token : \"string\",\r\n            regex : \"'''\",\r\n            next : \"qdoc\"\r\n        }, \r\n        {\r\n            token : \"string\",\r\n            regex : '\"\"\"',\r\n            next : \"qqdoc\"\r\n        }, \r\n        {\r\n            token : \"string\",\r\n            regex : \"'\",\r\n            next : \"qstring\"\r\n        }, \r\n        {\r\n            token : \"string\",\r\n            regex : '\"',\r\n            next : \"qqstring\"\r\n        }, \r\n        {\r\n            regex: \"(\\\\-\\\\-|\\\\+\\\\+)\",\r\n            token: [\"keyword.operator.increment-decrement.dart\"]\r\n        },\r\n        {\r\n            regex: \"(\\\\-|\\\\+|\\\\*|\\\\/|\\\\~\\\\/|%)\",\r\n            token: [\"keyword.operator.arithmetic.dart\"]\r\n        },\r\n        {\r\n            regex: \"(!|&&|\\\\|\\\\|)\",\r\n            token: [\"keyword.operator.logical.dart\"]\r\n        },\r\n        {\r\n            token : \"constant.numeric\", // hex\r\n            regex : \"0[xX][0-9a-fA-F]+\\\\b\"\r\n        }, \r\n        {\r\n            token : \"constant.numeric\", // float\r\n            regex : \"[+-]?\\\\d+(?:(?:\\\\.\\\\d*)?(?:[eE][+-]?\\\\d+)?)?\\\\b\"\r\n        }, \r\n        {\r\n            token : keywordMapper,\r\n            regex : \"[a-zA-Z_$][a-zA-Z0-9_$]*\\\\b\"\r\n        }\r\n    ],\r\n    \"comment\" : [\r\n        {\r\n            token : \"comment\", // closing comment\r\n            regex : \"\\\\*\\\\/\",\r\n            next : \"start\"\r\n        }, {\r\n            defaultToken : \"comment\"\r\n        }\r\n    ],\r\n    \"qdoc\" : [\r\n        {\r\n            token : \"string\",\r\n            regex : \"'''\",\r\n            next : \"start\"\r\n        }\r\n    ].concat(stringfill),\r\n\r\n    \"qqdoc\" : [\r\n        {\r\n            token : \"string\",\r\n            regex : '\"\"\"',\r\n            next : \"start\"\r\n        }\r\n    ].concat(stringfill),\r\n\r\n    \"qstring\" : [\r\n        {\r\n            token : \"string\",\r\n            regex : \"'|$\",\r\n            next : \"start\"\r\n        }\r\n    ].concat(stringfill),\r\n\r\n    \"qqstring\" : [\r\n        {\r\n            token : \"string\",\r\n            regex : '\"|$',\r\n            next : \"start\"\r\n        }\r\n    ].concat(stringfill)\r\n    // TODO add support for interpolation and raw strings\r\n};\r\n\r\n    this.embedRules(DocCommentHighlightRules, \"doc-\",\r\n        [ DocCommentHighlightRules.getEndRule(\"start\") ]);\r\n};\r\n\r\noop.inherits(DartHighlightRules, TextHighlightRules);\r\n\r\nexports.DartHighlightRules = DartHighlightRules;\r\n});\r\n"]}