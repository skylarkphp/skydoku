{"version":3,"sources":["mode/pascal_highlight_rules.js"],"names":["define","require","exports","module","oop","TextHighlightRules","PascalHighlightRules","this","$rules","start","caseInsensitive","token","regex","push_","next","defaultToken","push","normalizeRules","inherits"],"mappings":";;;;;;;AA0CAA,OAAO,SAASC,EAASC,EAASC,GAClC,aAEA,IAAIC,EAAMH,EAAQ,cACdI,EAAqBJ,EAAQ,0BAA0BI,mBAEvDC,EAAuB,WAIvBC,KAAKC,QAAWC,QACTC,iBAAiB,EACjBC,MAAO,yBACPC,MAAO,4kBACPF,iBAAiB,EACjBC,OACG,kBAAmB,OACnB,gCACA,yCACHC,MAAO,uGACPF,iBAAiB,EACjBC,OACG,kBAAmB,OACnB,+BACA,+BACHC,MAAO,kDACPD,MAAO,0BACPC,MAAO,0HACPD,MAAO,wCACPC,MAAO,QACPC,QACKF,MAAO,sCACPC,MAAO,IACPE,KAAM,QACNC,aAAc,0CACnBJ,MAAO,wCACPC,MAAO,QACPC,QACKF,MAAO,uCACPC,MAAO,IACPE,KAAM,QACNC,aAAc,2CACnBJ,MAAO,wCACPC,MAAO,SACPI,OACKL,MAAO,wCACPC,MAAO,SACPE,KAAM,QACNC,aAAc,+BACnBJ,MAAO,wCACPC,MAAO,MACPI,OACKL,MAAO,wCACPC,MAAO,MACPE,KAAM,QACNC,aAAc,+BACnBJ,MAAO,6CACPC,MAAO,IACPI,OACKL,MAAO,mCAAoCC,MAAO,UAClDD,MAAO,2CACPC,MAAO,IACPE,KAAM,QACNC,aAAc,kCAGnBJ,MAAO,6CACPC,MAAO,IACPI,OACKL,MAAO,8CACPC,MAAO,OACPD,MAAO,2CACPC,MAAO,IACPE,KAAM,QACNC,aAAc,kCAClBJ,MAAO,mBACRC,MAAO,sBAEdL,KAAKU,kBAGTb,EAAIc,SAASZ,EAAsBD,GAEnCH,EAAQI,qBAAuBA","file":"../../mode/pascal_highlight_rules.js","sourcesContent":["/* ***** BEGIN LICENSE BLOCK *****\r\n * Distributed under the BSD license:\r\n *\r\n * Copyright (c) 2012, Ajax.org B.V.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *     * Redistributions of source code must retain the above copyright\r\n *       notice, this list of conditions and the following disclaimer.\r\n *     * Redistributions in binary form must reproduce the above copyright\r\n *       notice, this list of conditions and the following disclaimer in the\r\n *       documentation and/or other materials provided with the distribution.\r\n *     * Neither the name of Ajax.org B.V. nor the\r\n *       names of its contributors may be used to endorse or promote products\r\n *       derived from this software without specific prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\r\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY\r\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\r\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\r\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n *\r\n * ***** END LICENSE BLOCK ***** */\r\n\r\n/* THIS FILE WAS AUTOGENERATED FROM tool\\tm bundles\\pascal.tmbundle\\Syntaxes\\Pascal.plist (UUID: F42FA544-6B1C-11D9-9517-000D93589AF6) */\r\n/****************************************************************\r\n * IT MIGHT NOT BE PERFECT, PARTICULARLY:                       *\r\n * IN DECIDING STATES TO TRANSITION TO,                         *\r\n * IGNORING WHITESPACE,                                         *\r\n * IGNORING GROUPS WITH ?:,                                     *\r\n * EXTENDING EXISTING MODES,                                    *\r\n * GATHERING KEYWORDS, OR                                       *\r\n * DECIDING WHEN TO USE PUSH.                                   *\r\n * ...But it's a good start from an existing *.tmlanguage file. *\r\n ****************************************************************/\r\n\r\ndefine(function(require, exports, module) {\r\n\"use strict\";\r\n\r\nvar oop = require(\"../lib/oop\");\r\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\r\n\r\nvar PascalHighlightRules = function() {\r\n    // regexp must not have capturing parentheses. Use (?:) instead.\r\n    // regexps are ordered -> the first match is used\r\n\r\n    this.$rules = { start: \r\n       [ { caseInsensitive: true,\r\n           token: 'keyword.control.pascal',\r\n           regex: '\\\\b(?:(absolute|abstract|all|and|and_then|array|as|asm|attribute|begin|bindable|case|class|const|constructor|destructor|div|do|do|else|end|except|export|exports|external|far|file|finalization|finally|for|forward|goto|if|implementation|import|in|inherited|initialization|interface|interrupt|is|label|library|mod|module|name|near|nil|not|object|of|only|operator|or|or_else|otherwise|packed|pow|private|program|property|protected|public|published|qualified|record|repeat|resident|restricted|segment|set|shl|shr|then|to|try|type|unit|until|uses|value|var|view|virtual|while|with|xor))\\\\b' },\r\n         { caseInsensitive: true,           \r\n           token: \r\n            [ 'variable.pascal', \"text\",\r\n              'storage.type.prototype.pascal',\r\n              'entity.name.function.prototype.pascal' ],\r\n           regex: '\\\\b(function|procedure)(\\\\s+)(\\\\w+)(\\\\.\\\\w+)?(?=(?:\\\\(.*?\\\\))?;\\\\s*(?:attribute|forward|external))' },\r\n         { caseInsensitive: true,\r\n           token: \r\n            [ 'variable.pascal', \"text\",\r\n              'storage.type.function.pascal',\r\n              'entity.name.function.pascal' ],\r\n           regex: '\\\\b(function|procedure)(\\\\s+)(\\\\w+)(\\\\.\\\\w+)?' },\r\n         { token: 'constant.numeric.pascal',\r\n           regex: '\\\\b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\\\\.?[0-9]*)|(\\\\.[0-9]+))((e|E)(\\\\+|-)?[0-9]+)?)(L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\\\\b' },\r\n         { token: 'punctuation.definition.comment.pascal',\r\n           regex: '--.*$',\r\n           push_: \r\n            [ { token: 'comment.line.double-dash.pascal.one',\r\n                regex: '$',\r\n                next: 'pop' },\r\n              { defaultToken: 'comment.line.double-dash.pascal.one' } ] },\r\n         { token: 'punctuation.definition.comment.pascal',\r\n           regex: '//.*$',\r\n           push_: \r\n            [ { token: 'comment.line.double-slash.pascal.two',\r\n                regex: '$',\r\n                next: 'pop' },\r\n              { defaultToken: 'comment.line.double-slash.pascal.two' } ] },\r\n         { token: 'punctuation.definition.comment.pascal',\r\n           regex: '\\\\(\\\\*',\r\n           push: \r\n            [ { token: 'punctuation.definition.comment.pascal',\r\n                regex: '\\\\*\\\\)',\r\n                next: 'pop' },\r\n              { defaultToken: 'comment.block.pascal.one' } ] },\r\n         { token: 'punctuation.definition.comment.pascal',\r\n           regex: '\\\\{',\r\n           push: \r\n            [ { token: 'punctuation.definition.comment.pascal',\r\n                regex: '\\\\}',\r\n                next: 'pop' },\r\n              { defaultToken: 'comment.block.pascal.two' } ] },\r\n         { token: 'punctuation.definition.string.begin.pascal',\r\n           regex: '\"',\r\n           push: \r\n            [ { token: 'constant.character.escape.pascal', regex: '\\\\\\\\.' },\r\n              { token: 'punctuation.definition.string.end.pascal',\r\n                regex: '\"',\r\n                next: 'pop' },\r\n              { defaultToken: 'string.quoted.double.pascal' } ]\r\n           //Double quoted strings are an extension and (generally) support C-style escape sequences.\r\n            },\r\n         { token: 'punctuation.definition.string.begin.pascal',\r\n           regex: '\\'',\r\n           push: \r\n            [ { token: 'constant.character.escape.apostrophe.pascal',\r\n                regex: '\\'\\'' },\r\n              { token: 'punctuation.definition.string.end.pascal',\r\n                regex: '\\'',\r\n                next: 'pop' },\r\n              { defaultToken: 'string.quoted.single.pascal' } ] },\r\n          { token: 'keyword.operator',\r\n           regex: '[+\\\\-;,/*%]|:=|=' } ] };\r\n    \r\n    this.normalizeRules();\r\n};\r\n\r\noop.inherits(PascalHighlightRules, TextHighlightRules);\r\n\r\nexports.PascalHighlightRules = PascalHighlightRules;\r\n});"]}