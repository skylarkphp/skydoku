{"version":3,"sources":["mode/golang_highlight_rules.js"],"names":["define","require","exports","module","oop","DocCommentHighlightRules","TextHighlightRules","GolangHighlightRules","keywordMapper","this","createKeywordMapper","keyword","constant.language","support.function","support.type","stringEscapeRe","replace","$rules","start","token","regex","getStartRule","next","val","length","type","slice","value","comment","defaultToken","bqstring","embedRules","getEndRule","inherits"],"mappings":";;;;;;;AAAAA,OAAO,SAASC,QAASC,QAASC,QAC9B,IAAIC,EAAMH,QAAQ,cACdI,EAA2BJ,QAAQ,iCAAiCI,yBACpEC,EAAqBL,QAAQ,0BAA0BK,mBAEvDC,EAAuB,WACvB,IAeIC,EAAgBC,KAAKC,qBACrBC,QAhBW,yKAiBXC,oBAJmB,sBAKnBC,mBARmB,0FASnBC,eAbe,uIAchB,IAECC,EAAiB,yDAAyDC,QAAQ,OAAQ,eAE9FP,KAAKQ,QACDC,QAEQC,MAAQ,UACRC,MAAQ,aAEZf,EAAyBgB,aAAa,cAElCF,MAAQ,gBACRC,MAAQ,SACRE,KAAO,YAEPH,MAAQ,SACRC,MAAQ,uBAERD,MAAQ,SACRC,MAAQ,IACRE,KAAO,aAEPH,MAAQ,mBACRC,MAAQ,0DAA4DL,EAAeC,QAAQ,IAAK,IAAO,OAEvGG,MAAQ,mBACRC,MAAQ,yBAERD,MAAQ,mBACRC,MAAQ,oDAERD,OAAS,UAAW,OAAQ,wBAC5BC,MAAQ,8CAERD,MAAQ,SAASI,GACb,MAA2B,KAAvBA,EAAIA,EAAIC,OAAS,KAEbC,KAAMjB,EAAce,EAAIG,MAAM,GAAI,KAAO,mBACzCC,MAAOJ,EAAIG,MAAM,GAAI,KAErBD,KAAM,eACNE,MAAOJ,EAAIG,OAAO,KAInBlB,EAAce,IAAQ,cAEjCH,MAAQ,oCAERD,MAAQ,mBACRC,MAAQ,yHAERD,MAAQ,uBACRC,MAAQ,wBAERD,MAAQ,eACRC,MAAQ,UAERD,MAAQ,eACRC,MAAQ,YAERD,MAAQ,OACRC,MAAQ,SAGhBQ,UAEQT,MAAQ,cACRC,MAAQ,SACRE,KAAO,UAEPO,aAAe,YAGvBC,WAEQX,MAAQ,SACRC,MAAQ,IACRE,KAAO,UAEPO,aAAe,YAK3BpB,KAAKsB,WAAW1B,EAA0B,QACpCA,EAAyB2B,WAAW,YAE9C5B,EAAI6B,SAAS1B,EAAsBD,GAEnCJ,QAAQK,qBAAuBA","file":"../../mode/golang_highlight_rules.js","sourcesContent":["define(function(require, exports, module) {\r\n    var oop = require(\"../lib/oop\");\r\n    var DocCommentHighlightRules = require(\"./doc_comment_highlight_rules\").DocCommentHighlightRules;\r\n    var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\r\n\r\n    var GolangHighlightRules = function() {\r\n        var keywords = (\r\n            \"else|break|case|return|goto|if|const|select|\" +\r\n            \"continue|struct|default|switch|for|range|\" +\r\n            \"func|import|package|chan|defer|fallthrough|go|interface|map|range|\" +\r\n            \"select|type|var\"\r\n        );\r\n        var builtinTypes = (\r\n            \"string|uint8|uint16|uint32|uint64|int8|int16|int32|int64|float32|\" +\r\n            \"float64|complex64|complex128|byte|rune|uint|int|uintptr|bool|error\"\r\n        );\r\n        var builtinFunctions = (\r\n            \"new|close|cap|copy|panic|panicln|print|println|len|make|delete|real|recover|imag|append\"\r\n        );\r\n        var builtinConstants = (\"nil|true|false|iota\");\r\n\r\n        var keywordMapper = this.createKeywordMapper({\r\n            \"keyword\": keywords,\r\n            \"constant.language\": builtinConstants,\r\n            \"support.function\": builtinFunctions,\r\n            \"support.type\": builtinTypes\r\n        }, \"\");\r\n        \r\n        var stringEscapeRe = \"\\\\\\\\(?:[0-7]{3}|x\\\\h{2}|u{4}|U\\\\h{6}|[abfnrtv'\\\"\\\\\\\\])\".replace(/\\\\h/g, \"[a-fA-F\\\\d]\");\r\n\r\n        this.$rules = {\r\n            \"start\" : [\r\n                {\r\n                    token : \"comment\",\r\n                    regex : \"\\\\/\\\\/.*$\"\r\n                },\r\n                DocCommentHighlightRules.getStartRule(\"doc-start\"),\r\n                {\r\n                    token : \"comment.start\", // multi line comment\r\n                    regex : \"\\\\/\\\\*\",\r\n                    next : \"comment\"\r\n                }, {\r\n                    token : \"string\", // single line\r\n                    regex : /\"(?:[^\"\\\\]|\\\\.)*?\"/\r\n                }, {\r\n                    token : \"string\", // raw\r\n                    regex : '`',\r\n                    next : \"bqstring\"\r\n                }, {\r\n                    token : \"constant.numeric\", // rune\r\n                    regex : \"'(?:[^\\\\'\\uD800-\\uDBFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|\" + stringEscapeRe.replace('\"', '')  + \")'\"\r\n                }, {\r\n                    token : \"constant.numeric\", // hex\r\n                    regex : \"0[xX][0-9a-fA-F]+\\\\b\" \r\n                }, {\r\n                    token : \"constant.numeric\", // float\r\n                    regex : \"[+-]?\\\\d+(?:(?:\\\\.\\\\d*)?(?:[eE][+-]?\\\\d+)?)?\\\\b\"\r\n                }, {\r\n                    token : [\"keyword\", \"text\", \"entity.name.function\"],\r\n                    regex : \"(func)(\\\\s+)([a-zA-Z_$][a-zA-Z0-9_$]*)\\\\b\"\r\n                }, {\r\n                    token : function(val) {\r\n                        if (val[val.length - 1] == \"(\") {\r\n                            return [{\r\n                                type: keywordMapper(val.slice(0, -1)) || \"support.function\",\r\n                                value: val.slice(0, -1)\r\n                            }, {\r\n                                type: \"paren.lparen\",\r\n                                value: val.slice(-1)\r\n                            }];\r\n                        }\r\n                        \r\n                        return keywordMapper(val) || \"identifier\";\r\n                    },\r\n                    regex : \"[a-zA-Z_$][a-zA-Z0-9_$]*\\\\b\\\\(?\"\r\n                }, {\r\n                    token : \"keyword.operator\",\r\n                    regex : \"!|\\\\$|%|&|\\\\*|\\\\-\\\\-|\\\\-|\\\\+\\\\+|\\\\+|~|==|=|!=|<=|>=|<<=|>>=|>>>=|<>|<|>|!|&&|\\\\|\\\\||\\\\?\\\\:|\\\\*=|%=|\\\\+=|\\\\-=|&=|\\\\^=\"\r\n                }, {\r\n                    token : \"punctuation.operator\",\r\n                    regex : \"\\\\?|\\\\:|\\\\,|\\\\;|\\\\.\"\r\n                }, {\r\n                    token : \"paren.lparen\",\r\n                    regex : \"[[({]\"\r\n                }, {\r\n                    token : \"paren.rparen\",\r\n                    regex : \"[\\\\])}]\"\r\n                }, {\r\n                    token : \"text\",\r\n                    regex : \"\\\\s+\"\r\n                }\r\n            ],\r\n            \"comment\" : [\r\n                {\r\n                    token : \"comment.end\",\r\n                    regex : \"\\\\*\\\\/\",\r\n                    next : \"start\"\r\n                }, {\r\n                    defaultToken : \"comment\"\r\n                }\r\n            ],\r\n            \"bqstring\" : [\r\n                {\r\n                    token : \"string\",\r\n                    regex : '`',\r\n                    next : \"start\"\r\n                }, {\r\n                    defaultToken : \"string\"\r\n                }\r\n            ]\r\n        };\r\n\r\n        this.embedRules(DocCommentHighlightRules, \"doc-\",\r\n            [ DocCommentHighlightRules.getEndRule(\"start\") ]);\r\n    };\r\n    oop.inherits(GolangHighlightRules, TextHighlightRules);\r\n\r\n    exports.GolangHighlightRules = GolangHighlightRules;\r\n});"]}