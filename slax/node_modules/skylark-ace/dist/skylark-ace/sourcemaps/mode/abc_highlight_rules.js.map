{"version":3,"sources":["mode/abc_highlight_rules.js"],"names":["define","require","exports","module","oop","TextHighlightRules","ABCHighlightRules","this","$rules","start","token","regex","comment","normalizeRules","metaData","fileTypes","name","scopeName","inherits"],"mappings":";;;;;;;AAWAA,OAAO,SAAUC,QAASC,QAASC,QAC/B,aAEA,IAAIC,EAAMH,QAAQ,cACdI,EAAqBJ,QAAQ,0BAA0BI,mBAEvDC,EAAoB,WAIpBC,KAAKC,QACDC,QAEQC,OAAQ,gDAAiD,sBAAuB,iCAChFC,MAAO,0BACPC,QAAS,wBAGTF,OAAQ,sCAAuC,gCAC/CC,MAAO,WACPC,QAAS,wBAITF,MAAO,0BACPC,MAAO,MACPC,QAAS,aAITF,MAAO,2BACPC,MAAO,+CACPC,QAAS,cAGTF,OAAQ,+BAAgC,wCACxCC,MAAO,6BACPC,QAAS,0BAGTF,OAAQ,sBAAuB,wCAC/BC,MAAO,0BACPC,QAAS,iBAGTF,OAAQ,OAAQ,uBAAwB,kBAAmB,QAC3DC,MAAO,0BACPC,QAAS,kBAGTF,OAAQ,2BAA4B,yBAA0B,6BAC9DC,MAAO,+CACPC,QAAS,UAGTF,MAAO,qCACPC,MAAO,wBACPC,QAAS,yBAETF,MAAO,+BACPC,MAAO,wBACPC,QAAS,mBAGTF,MAAO,qCACPC,MAAO,wBACPC,QAAS,wBAGTF,MAAO,wCACPC,MAAO,wBACPC,QAAS,mCAGTF,MAAO,0BACPC,MAAO,qBACPC,QAAS,cAGTF,MAAO,gBACPC,MAAO,kBACPC,QAAS,oBAQrBL,KAAKM,kBAGTP,EAAkBQ,UACdC,WAAY,OACZC,KAAM,MACNC,UAAW,oBAIfb,EAAIc,SAASZ,EAAmBD,GAEhCH,QAAQI,kBAAoBA","file":"../../mode/abc_highlight_rules.js","sourcesContent":["/* This file was partially autogenerated from https://github.com/jimhawkridge/SublimeABC\r\n\r\n Modifications\r\n\r\n -  more classes to express the abc semantic\r\n -  added syntax highlighting for Zupfnoter conventions (https://github.com/bwl21/zupfnoter)\r\n -  separate note pitch and note duration - even if it looks the same\r\n\r\n ***********************************************************************************************/\r\n\r\n\r\ndefine(function (require, exports, module) {\r\n    \"use strict\";\r\n\r\n    var oop = require(\"../lib/oop\");\r\n    var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\r\n\r\n    var ABCHighlightRules = function () {\r\n        // regexp must not have capturing parentheses. Use (?:) instead.\r\n        // regexps are ordered -> the first match is used\r\n\r\n        this.$rules = {\r\n            start: [\r\n                {\r\n                    token: ['zupfnoter.information.comment.line.percentage', 'information.keyword', 'in formation.keyword.embedded'],\r\n                    regex: '(%%%%)(hn\\\\.[a-z]*)(.*)',\r\n                    comment: 'Instruction Comment'\r\n                },\r\n                {\r\n                    token: ['information.comment.line.percentage', 'information.keyword.embedded'],\r\n                    regex: '(%%)(.*)',\r\n                    comment: 'Instruction Comment'\r\n                },\r\n\r\n                {\r\n                    token: 'comment.line.percentage',\r\n                    regex: '%.*',\r\n                    comment: 'Comments'\r\n                },\r\n\r\n                {\r\n                    token: 'barline.keyword.operator',\r\n                    regex: '[\\\\[:]*[|:][|\\\\]:]*(?:\\\\[?[0-9]+)?|\\\\[[0-9]+',\r\n                    comment: 'Bar lines'\r\n                },\r\n                {\r\n                    token: ['information.keyword.embedded', 'information.argument.string.unquoted'],\r\n                    regex: '(\\\\[[A-Za-z]:)([^\\\\]]*\\\\])',\r\n                    comment: 'embedded Header lines'\r\n                },\r\n                {\r\n                    token: ['information.keyword', 'information.argument.string.unquoted'],\r\n                    regex: '^([A-Za-z]:)([^%\\\\\\\\]*)',\r\n                    comment: 'Header lines'\r\n                },\r\n                {\r\n                    token: ['text', 'entity.name.function', 'string.unquoted', 'text'],\r\n                    regex: '(\\\\[)([A-Z]:)(.*?)(\\\\])',\r\n                    comment: 'Inline fields'\r\n                },\r\n                {\r\n                    token: ['accent.constant.language', 'pitch.constant.numeric', 'duration.constant.numeric'],\r\n                    regex: '([\\\\^=_]*)([A-Ga-gz][,\\']*)([0-9]*/*[><0-9]*)',\r\n                    comment: 'Notes'\r\n                },\r\n                {\r\n                    token: 'zupfnoter.jumptarget.string.quoted',\r\n                    regex: '[\\\\\"!]\\\\^\\\\:.*?[\\\\\"!]',\r\n                    comment: 'Zupfnoter jumptarget'\r\n                }, {\r\n                    token: 'zupfnoter.goto.string.quoted',\r\n                    regex: '[\\\\\"!]\\\\^\\\\@.*?[\\\\\"!]',\r\n                    comment: 'Zupfnoter goto'\r\n                },\r\n                {\r\n                    token: 'zupfnoter.annotation.string.quoted',\r\n                    regex: '[\\\\\"!]\\\\^\\\\!.*?[\\\\\"!]',\r\n                    comment: 'Zupfnoter annoation'\r\n                },\r\n                {\r\n                    token: 'zupfnoter.annotationref.string.quoted',\r\n                    regex: '[\\\\\"!]\\\\^\\\\#.*?[\\\\\"!]',\r\n                    comment: 'Zupfnoter annotation reference'\r\n                },\r\n                {\r\n                    token: 'chordname.string.quoted',\r\n                    regex: '[\\\\\"!]\\\\^.*?[\\\\\"!]',\r\n                    comment: 'abc chord'\r\n                },\r\n                {\r\n                    token: 'string.quoted',\r\n                    regex: '[\\\\\"!].*?[\\\\\"!]',\r\n                    comment: 'abc annotation'\r\n                }\r\n\r\n            ]\r\n        };\r\n\r\n        //  this.embedRules(JsonHighlightRules, \"json-\")\r\n\r\n        this.normalizeRules();\r\n    };\r\n\r\n    ABCHighlightRules.metaData = {\r\n        fileTypes: ['abc'],\r\n        name: 'ABC',\r\n        scopeName: 'text.abcnotation'\r\n    };\r\n\r\n\r\n    oop.inherits(ABCHighlightRules, TextHighlightRules);\r\n\r\n    exports.ABCHighlightRules = ABCHighlightRules;\r\n});\r\n"]}