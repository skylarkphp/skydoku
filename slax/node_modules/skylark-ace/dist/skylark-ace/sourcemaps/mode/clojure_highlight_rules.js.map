{"version":3,"sources":["mode/clojure_highlight_rules.js"],"names":["define","require","exports","module","oop","TextHighlightRules","ClojureHighlightRules","keywordMapper","this","createKeywordMapper","keyword","constant.language","support.function","$rules","start","token","regex","next","string","inherits"],"mappings":";;;;;;;AA8BAA,OAAO,SAASC,QAASC,QAASC,QAClC,aAEA,IAAIC,EAAMH,QAAQ,cACdI,EAAqBJ,QAAQ,0BAA0BI,mBAIvDC,EAAwB,WAExB,IA6EIC,EAAgBC,KAAKC,qBACrBC,QAPW,sFAQXC,oBAJmB,iBAKnBC,mBAhFmB,m5IAiFpB,cAAc,EAAO,KAKxBJ,KAAKK,QACDC,QAEQC,MAAQ,UACRC,MAAQ,SAERD,MAAQ,UACRC,MAAQ,cAERD,MAAQ,UACRC,MAAQ,aAERD,MAAQ,UACRC,MAAQ,cAERD,MAAQ,UACRC,MAAQ,4BAEJD,MAAQ,UACRC,MAAQ,UAERD,MAAQ,UACRC,MAAQ,gBAERD,MAAQ,UACRC,MAAQ,UAERD,MAAQ,UACRC,MAAQ,QAEZD,MAAQ,mBACRC,MAAQ,yBAERD,MAAQ,mBACRC,MAAQ,oDAERD,MAAQ,oBACRC,MAAQ,kEAERD,MAAQR,EACRS,MAAQ,mCAERD,MAAQ,SACRC,MAAQ,IACRC,KAAM,WAENF,MAAQ,WACRC,MAAQ,4BAERD,MAAQ,gBACRC,MAAQ,mCAIhBE,SAEQH,MAAQ,2BACRC,MAAQ,gBAERD,MAAQ,SACRC,MAAQ,cAERD,MAAQ,SACRC,MAAQ,IACRC,KAAO,YAMvBb,EAAIe,SAASb,EAAuBD,GAEpCH,QAAQI,sBAAwBA","file":"../../mode/clojure_highlight_rules.js","sourcesContent":["/* ***** BEGIN LICENSE BLOCK *****\r\n * Distributed under the BSD license:\r\n *\r\n * Copyright (c) 2010, Ajax.org B.V.\r\n * All rights reserved.\r\n * \r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *     * Redistributions of source code must retain the above copyright\r\n *       notice, this list of conditions and the following disclaimer.\r\n *     * Redistributions in binary form must reproduce the above copyright\r\n *       notice, this list of conditions and the following disclaimer in the\r\n *       documentation and/or other materials provided with the distribution.\r\n *     * Neither the name of Ajax.org B.V. nor the\r\n *       names of its contributors may be used to endorse or promote products\r\n *       derived from this software without specific prior written permission.\r\n * \r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\r\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY\r\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\r\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\r\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n *\r\n * ***** END LICENSE BLOCK ***** */\r\n\r\ndefine(function(require, exports, module) {\r\n\"use strict\";\r\n\r\nvar oop = require(\"../lib/oop\");\r\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\r\n\r\n\r\n\r\nvar ClojureHighlightRules = function() {\r\n\r\n    var builtinFunctions = (\r\n        '* *1 *2 *3 *agent* *allow-unresolved-vars* *assert* *clojure-version* ' +\r\n        '*command-line-args* *compile-files* *compile-path* *e *err* *file* ' +\r\n        '*flush-on-newline* *in* *macro-meta* *math-context* *ns* *out* ' +\r\n        '*print-dup* *print-length* *print-level* *print-meta* *print-readably* ' +\r\n        '*read-eval* *source-path* *use-context-classloader* ' +\r\n        '*warn-on-reflection* + - -> ->> .. / < <= = ' +\r\n        '== > &gt; >= &gt;= accessor aclone ' +\r\n        'add-classpath add-watch agent agent-errors aget alength alias all-ns ' +\r\n        'alter alter-meta! alter-var-root amap ancestors and apply areduce ' +\r\n        'array-map aset aset-boolean aset-byte aset-char aset-double aset-float ' +\r\n        'aset-int aset-long aset-short assert assoc assoc! assoc-in associative? ' +\r\n        'atom await await-for await1 bases bean bigdec bigint binding bit-and ' +\r\n        'bit-and-not bit-clear bit-flip bit-not bit-or bit-set bit-shift-left ' +\r\n        'bit-shift-right bit-test bit-xor boolean boolean-array booleans ' +\r\n        'bound-fn bound-fn* butlast byte byte-array bytes cast char char-array ' +\r\n        'char-escape-string char-name-string char? chars chunk chunk-append ' +\r\n        'chunk-buffer chunk-cons chunk-first chunk-next chunk-rest chunked-seq? ' +\r\n        'class class? clear-agent-errors clojure-version coll? comment commute ' +\r\n        'comp comparator compare compare-and-set! compile complement concat cond ' +\r\n        'condp conj conj! cons constantly construct-proxy contains? count ' +\r\n        'counted? create-ns create-struct cycle dec decimal? declare definline ' +\r\n        'defmacro defmethod defmulti defn defn- defonce defstruct delay delay? ' +\r\n        'deliver deref derive descendants destructure disj disj! dissoc dissoc! ' +\r\n        'distinct distinct? doall doc dorun doseq dosync dotimes doto double ' +\r\n        'double-array doubles drop drop-last drop-while empty empty? ensure ' +\r\n        'enumeration-seq eval even? every? false? ffirst file-seq filter find ' +\r\n        'find-doc find-ns find-var first float float-array float? floats flush ' +\r\n        'fn fn? fnext for force format future future-call future-cancel ' +\r\n        'future-cancelled? future-done? future? gen-class gen-interface gensym ' +\r\n        'get get-in get-method get-proxy-class get-thread-bindings get-validator ' +\r\n        'hash hash-map hash-set identical? identity if-let if-not ifn? import ' +\r\n        'in-ns inc init-proxy instance? int int-array integer? interleave intern ' +\r\n        'interpose into into-array ints io! isa? iterate iterator-seq juxt key ' +\r\n        'keys keyword keyword? last lazy-cat lazy-seq let letfn line-seq list ' +\r\n        'list* list? load load-file load-reader load-string loaded-libs locking ' +\r\n        'long long-array longs loop macroexpand macroexpand-1 make-array ' +\r\n        'make-hierarchy map map? mapcat max max-key memfn memoize merge ' +\r\n        'merge-with meta method-sig methods min min-key mod name namespace neg? ' +\r\n        'newline next nfirst nil? nnext not not-any? not-empty not-every? not= ' +\r\n        'ns ns-aliases ns-imports ns-interns ns-map ns-name ns-publics ' +\r\n        'ns-refers ns-resolve ns-unalias ns-unmap nth nthnext num number? odd? ' +\r\n        'or parents partial partition pcalls peek persistent! pmap pop pop! ' +\r\n        'pop-thread-bindings pos? pr pr-str prefer-method prefers ' +\r\n        'primitives-classnames print print-ctor print-doc print-dup print-method ' +\r\n        'print-namespace-doc print-simple print-special-doc print-str printf ' +\r\n        'println println-str prn prn-str promise proxy proxy-call-with-super ' +\r\n        'proxy-mappings proxy-name proxy-super push-thread-bindings pvalues quot ' +\r\n        'rand rand-int range ratio? rational? rationalize re-find re-groups ' +\r\n        're-matcher re-matches re-pattern re-seq read read-line read-string ' +\r\n        'reduce ref ref-history-count ref-max-history ref-min-history ref-set ' +\r\n        'refer refer-clojure release-pending-sends rem remove remove-method ' +\r\n        'remove-ns remove-watch repeat repeatedly replace replicate require ' +\r\n        'reset! reset-meta! resolve rest resultset-seq reverse reversible? rseq ' +\r\n        'rsubseq second select-keys send send-off seq seq? seque sequence ' +\r\n        'sequential? set set-validator! set? short short-array shorts ' +\r\n        'shutdown-agents slurp some sort sort-by sorted-map sorted-map-by ' +\r\n        'sorted-set sorted-set-by sorted? special-form-anchor special-symbol? ' +\r\n        'split-at split-with str stream? string? struct struct-map subs subseq ' +\r\n        'subvec supers swap! symbol symbol? sync syntax-symbol-anchor take ' +\r\n        'take-last take-nth take-while test the-ns time to-array to-array-2d ' +\r\n        'trampoline transient tree-seq true? type unchecked-add unchecked-dec ' +\r\n        'unchecked-divide unchecked-inc unchecked-multiply unchecked-negate ' +\r\n        'unchecked-remainder unchecked-subtract underive unquote ' +\r\n        'unquote-splicing update-in update-proxy use val vals var-get var-set ' +\r\n        'var? vary-meta vec vector vector? when when-first when-let when-not ' +\r\n        'while with-bindings with-bindings* with-in-str with-loading-context ' +\r\n        'with-local-vars with-meta with-open with-out-str with-precision xml-seq ' +\r\n        'zero? zipmap'\r\n    );\r\n\r\n    var keywords = ('throw try var ' +\r\n        'def do fn if let loop monitor-enter monitor-exit new quote recur set!'\r\n    );\r\n\r\n    var buildinConstants = (\"true false nil\");\r\n\r\n    var keywordMapper = this.createKeywordMapper({\r\n        \"keyword\": keywords,\r\n        \"constant.language\": buildinConstants,\r\n        \"support.function\": builtinFunctions\r\n    }, \"identifier\", false, \" \");\r\n\r\n    // regexp must not have capturing parentheses. Use (?:) instead.\r\n    // regexps are ordered -> the first match is used\r\n\r\n    this.$rules = {\r\n        \"start\" : [\r\n            {\r\n                token : \"comment\",\r\n                regex : \";.*$\"\r\n            }, {\r\n                token : \"keyword\", //parens\r\n                regex : \"[\\\\(|\\\\)]\"\r\n            }, {\r\n                token : \"keyword\", //lists\r\n                regex : \"[\\\\'\\\\(]\"\r\n            }, {\r\n                token : \"keyword\", //vectors\r\n                regex : \"[\\\\[|\\\\]]\"\r\n            }, {\r\n                token : \"keyword\", //sets and maps\r\n                regex : \"[\\\\{|\\\\}|\\\\#\\\\{|\\\\#\\\\}]\"\r\n            }, {\r\n                    token : \"keyword\", // ampersands\r\n                    regex : '[\\\\&]'\r\n            }, {\r\n                    token : \"keyword\", // metadata\r\n                    regex : '[\\\\#\\\\^\\\\{]'\r\n            }, {\r\n                    token : \"keyword\", // anonymous fn syntactic sugar\r\n                    regex : '[\\\\%]'\r\n            }, {\r\n                    token : \"keyword\", // deref reader macro\r\n                    regex : '[@]'\r\n            }, {\r\n                token : \"constant.numeric\", // hex\r\n                regex : \"0[xX][0-9a-fA-F]+\\\\b\"\r\n            }, {\r\n                token : \"constant.numeric\", // float\r\n                regex : \"[+-]?\\\\d+(?:(?:\\\\.\\\\d*)?(?:[eE][+-]?\\\\d+)?)?\\\\b\"\r\n            }, {\r\n                token : \"constant.language\",\r\n                regex : '[!|\\\\$|%|&|\\\\*|\\\\-\\\\-|\\\\-|\\\\+\\\\+|\\\\+||=|!=|<=|>=|<>|<|>|!|&&]'\r\n            }, {\r\n                token : keywordMapper,\r\n                regex : \"[a-zA-Z_$][a-zA-Z0-9_$\\\\-]*\\\\b\"\r\n            }, {\r\n                token : \"string\", // single line\r\n                regex : '\"',\r\n                next: \"string\"\r\n            }, {\r\n                token : \"constant\", // symbol\r\n                regex : /:[^()\\[\\]{}'\"\\^%`,;\\s]+/\r\n            }, {\r\n                token : \"string.regexp\", //Regular Expressions\r\n                regex : '/#\"(?:\\\\.|(?:\\\\\")|[^\"\"\\n])*\"/g'\r\n            }\r\n\r\n        ],\r\n        \"string\" : [\r\n            {\r\n                token : \"constant.language.escape\",\r\n                regex : \"\\\\\\\\.|\\\\\\\\$\"\r\n            }, {\r\n                token : \"string\",\r\n                regex : '[^\"\\\\\\\\]+'\r\n            }, {\r\n                token : \"string\",\r\n                regex : '\"',\r\n                next : \"start\"\r\n            }\r\n        ]\r\n    };\r\n};\r\n\r\noop.inherits(ClojureHighlightRules, TextHighlightRules);\r\n\r\nexports.ClojureHighlightRules = ClojureHighlightRules;\r\n});\r\n"]}