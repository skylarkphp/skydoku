{"version":3,"sources":["mode/lua.js"],"names":["define","require","exports","module","oop","TextMode","Mode","LuaHighlightRules","LuaFoldMode","FoldMode","Range","WorkerClient","this","HighlightRules","foldingRules","$behaviour","$defaultBehaviour","inherits","lineCommentStart","blockComment","start","end","indentKeywords","function","then","do","else","elseif","repeat","until","outdentKeywords","getNetIndentLevel","tokens","level","i","length","token","type","value","getNextLineIndent","state","line","tab","indent","$getIndent","getTokenizer","getLineTokens","substr","checkOutdent","input","match","trim","indexOf","autoOutdent","session","row","prevLine","getLine","prevIndent","prevTokens","expectedIndent","getTabString","outdentRows","createWorker","worker","attachToDocument","getDocument","on","e","setAnnotations","data","clearAnnotations","$id","call","prototype"],"mappings":";;;;;;;AA8BAA,OAAO,SAASC,QAASC,QAASC,QAClC,aAEA,IAAIC,EAAMH,QAAQ,cACdI,EAAWJ,QAAQ,UAAUK,KAC7BC,EAAoBN,QAAQ,yBAAyBM,kBACrDC,EAAcP,QAAQ,iBAAiBQ,SACvCC,EAAQT,QAAQ,YAAYS,MAC5BC,EAAeV,QAAQ,2BAA2BU,aAElDL,EAAO,WACPM,KAAKC,eAAiBN,EAEtBK,KAAKE,aAAe,IAAIN,EACxBI,KAAKG,WAAaH,KAAKI,mBAE3BZ,EAAIa,SAASX,EAAMD,GAEnB,WAEIO,KAAKM,iBAAmB,KACxBN,KAAKO,cAAgBC,MAAO,MAAOC,IAAK,OAExC,IAAIC,GACAC,SAAY,EACZC,KAAQ,EACRC,GAAM,EACNC,KAAQ,EACRC,OAAU,EACVC,OAAU,EACVP,KAAQ,EACRQ,OAAU,GAEVC,GACA,OACA,SACA,MACA,SAGJ,SAASC,EAAkBC,GAIvB,IAHA,IAAIC,EAAQ,EAGHC,EAAI,EAAGA,EAAIF,EAAOG,OAAQD,IAAK,CACpC,IAAIE,EAAQJ,EAAOE,GACD,WAAdE,EAAMC,KACFD,EAAME,SAAShB,IACfW,GAASX,EAAec,EAAME,QAEb,gBAAdF,EAAMC,KACbJ,GAASG,EAAME,MAAMH,OACA,gBAAdC,EAAMC,OACbJ,GAASG,EAAME,MAAMH,QAK7B,OAAIF,EAAQ,GACA,EACDA,EAAQ,EACR,EAEA,EAIfrB,KAAK2B,kBAAoB,SAASC,EAAOC,EAAMC,GAC3C,IAAIC,EAAS/B,KAAKgC,WAAWH,GACzBR,EAAQ,EAGRD,EADgBpB,KAAKiC,eAAeC,cAAcL,EAAMD,GACjCR,OAK3B,MAHa,SAATQ,IACAP,EAAQF,EAAkBC,IAE1BC,EAAQ,EACDU,EAASD,EACTT,EAAQ,GAAKU,EAAOI,OAAOJ,EAAOR,OAASO,EAAIP,SAAWO,IAE5D9B,KAAKoC,aAAaR,EAAOC,EAAM,MACzBE,EAAOI,OAAO,EAAGJ,EAAOR,OAASO,EAAIP,QAG7CQ,GAGX/B,KAAKoC,aAAe,SAASR,EAAOC,EAAMQ,GACtC,GAAa,MAATA,GAA0B,MAATA,GAA0B,QAATA,EAClC,OAAO,EAEX,GAAIR,EAAKS,MAAM,iBACX,OAAO,EAEX,IAAIlB,EAASpB,KAAKiC,eAAeC,cAAcL,EAAKU,OAAQX,GAAOR,OAEnE,SAAKA,IAAWA,EAAOG,UAGG,WAAlBH,EAAO,GAAGK,OAAkE,GAA7CP,EAAgBsB,QAAQpB,EAAO,GAAGM,SAG7E1B,KAAKyC,YAAc,SAASb,EAAOc,EAASC,GACxC,IAAIC,EAAWF,EAAQG,QAAQF,EAAM,GACjCG,EAAa9C,KAAKgC,WAAWY,GAAUrB,OACvCwB,EAAa/C,KAAKiC,eAAeC,cAAcU,EAAU,SAASxB,OAElE4B,EAAiBF,EADLJ,EAAQO,eAAe1B,OACOJ,EAAkB4B,GAChD/C,KAAKgC,WAAWU,EAAQG,QAAQF,IAAMpB,QACrCyB,GAIjBN,EAAQQ,YAAY,IAAIpD,EAAM6C,EAAK,EAAGA,EAAM,EAAG,KAGnD3C,KAAKmD,aAAe,SAAST,GACzB,IAAIU,EAAS,IAAIrD,GAAc,OAAQ,sBAAuB,UAW9D,OAVAqD,EAAOC,iBAAiBX,EAAQY,eAEhCF,EAAOG,GAAG,WAAY,SAASC,GAC3Bd,EAAQe,eAAeD,EAAEE,QAG7BN,EAAOG,GAAG,YAAa,WACnBb,EAAQiB,qBAGLP,GAGXpD,KAAK4D,IAAM,gBACZC,KAAKnE,EAAKoE,WAEbxE,QAAQI,KAAOA","file":"../../mode/lua.js","sourcesContent":["/* ***** BEGIN LICENSE BLOCK *****\r\n * Distributed under the BSD license:\r\n *\r\n * Copyright (c) 2010, Ajax.org B.V.\r\n * All rights reserved.\r\n * \r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *     * Redistributions of source code must retain the above copyright\r\n *       notice, this list of conditions and the following disclaimer.\r\n *     * Redistributions in binary form must reproduce the above copyright\r\n *       notice, this list of conditions and the following disclaimer in the\r\n *       documentation and/or other materials provided with the distribution.\r\n *     * Neither the name of Ajax.org B.V. nor the\r\n *       names of its contributors may be used to endorse or promote products\r\n *       derived from this software without specific prior written permission.\r\n * \r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\r\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY\r\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\r\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\r\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n *\r\n * ***** END LICENSE BLOCK ***** */\r\n\r\ndefine(function(require, exports, module) {\r\n\"use strict\";\r\n\r\nvar oop = require(\"../lib/oop\");\r\nvar TextMode = require(\"./text\").Mode;\r\nvar LuaHighlightRules = require(\"./lua_highlight_rules\").LuaHighlightRules;\r\nvar LuaFoldMode = require(\"./folding/lua\").FoldMode;\r\nvar Range = require(\"../range\").Range;\r\nvar WorkerClient = require(\"../worker/worker_client\").WorkerClient;\r\n\r\nvar Mode = function() {\r\n    this.HighlightRules = LuaHighlightRules;\r\n    \r\n    this.foldingRules = new LuaFoldMode();\r\n    this.$behaviour = this.$defaultBehaviour;\r\n};\r\noop.inherits(Mode, TextMode);\r\n\r\n(function() {\r\n   \r\n    this.lineCommentStart = \"--\";\r\n    this.blockComment = {start: \"--[\", end: \"]--\"};\r\n    \r\n    var indentKeywords = {\r\n        \"function\": 1,\r\n        \"then\": 1,\r\n        \"do\": 1,\r\n        \"else\": 1,\r\n        \"elseif\": 1,\r\n        \"repeat\": 1,\r\n        \"end\": -1,\r\n        \"until\": -1\r\n    };\r\n    var outdentKeywords = [\r\n        \"else\",\r\n        \"elseif\",\r\n        \"end\",\r\n        \"until\"\r\n    ];\r\n\r\n    function getNetIndentLevel(tokens) {\r\n        var level = 0;\r\n        // Support single-line blocks by decrementing the indent level if\r\n        // an ending token is found\r\n        for (var i = 0; i < tokens.length; i++) {\r\n            var token = tokens[i];\r\n            if (token.type == \"keyword\") {\r\n                if (token.value in indentKeywords) {\r\n                    level += indentKeywords[token.value];\r\n                }\r\n            } else if (token.type == \"paren.lparen\") {\r\n                level += token.value.length;\r\n            } else if (token.type == \"paren.rparen\") {\r\n                level -= token.value.length;\r\n            }\r\n        }\r\n        // Limit the level to +/- 1 since usually users only indent one level\r\n        // at a time regardless of the logical nesting level\r\n        if (level < 0) {\r\n            return -1;\r\n        } else if (level > 0) {\r\n            return 1;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    this.getNextLineIndent = function(state, line, tab) {\r\n        var indent = this.$getIndent(line);\r\n        var level = 0;\r\n\r\n        var tokenizedLine = this.getTokenizer().getLineTokens(line, state);\r\n        var tokens = tokenizedLine.tokens;\r\n\r\n        if (state == \"start\") {\r\n            level = getNetIndentLevel(tokens);\r\n        }\r\n        if (level > 0) {\r\n            return indent + tab;\r\n        } else if (level < 0 && indent.substr(indent.length - tab.length) == tab) {\r\n            // Don't do a next-line outdent if we're going to do a real outdent of this line\r\n            if (!this.checkOutdent(state, line, \"\\n\")) {\r\n                return indent.substr(0, indent.length - tab.length);\r\n            }\r\n        }\r\n        return indent;\r\n    };\r\n\r\n    this.checkOutdent = function(state, line, input) {\r\n        if (input != \"\\n\" && input != \"\\r\" && input != \"\\r\\n\")\r\n            return false;\r\n\r\n        if (line.match(/^\\s*[\\)\\}\\]]$/))\r\n            return true;\r\n\r\n        var tokens = this.getTokenizer().getLineTokens(line.trim(), state).tokens;\r\n\r\n        if (!tokens || !tokens.length)\r\n            return false;\r\n\r\n        return (tokens[0].type == \"keyword\" && outdentKeywords.indexOf(tokens[0].value) != -1);\r\n    };\r\n\r\n    this.autoOutdent = function(state, session, row) {\r\n        var prevLine = session.getLine(row - 1);\r\n        var prevIndent = this.$getIndent(prevLine).length;\r\n        var prevTokens = this.getTokenizer().getLineTokens(prevLine, \"start\").tokens;\r\n        var tabLength = session.getTabString().length;\r\n        var expectedIndent = prevIndent + tabLength * getNetIndentLevel(prevTokens);\r\n        var curIndent = this.$getIndent(session.getLine(row)).length;\r\n        if (curIndent <= expectedIndent) {\r\n            // User already outdented //\r\n            return;\r\n        }\r\n        session.outdentRows(new Range(row, 0, row + 2, 0));\r\n    };\r\n\r\n    this.createWorker = function(session) {\r\n        var worker = new WorkerClient([\"ace\"], \"ace/mode/lua_worker\", \"Worker\");\r\n        worker.attachToDocument(session.getDocument());\r\n        \r\n        worker.on(\"annotate\", function(e) {\r\n            session.setAnnotations(e.data);\r\n        });\r\n        \r\n        worker.on(\"terminate\", function() {\r\n            session.clearAnnotations();\r\n        });\r\n        \r\n        return worker;\r\n    };\r\n\r\n    this.$id = \"ace/mode/lua\";\r\n}).call(Mode.prototype);\r\n\r\nexports.Mode = Mode;\r\n});\r\n\r\n\r\n"]}