{"version":3,"sources":["mode/fsharp_highlight_rules.js"],"names":["define","require","exports","module","oop","TextHighlightRules","FSharpHighlightRules","keywordMapper","this","createKeywordMapper","variable","keyword","constant","floatNumber","$rules","start","token","regex","push","next","defaultToken","stateName","blockComment","normalizeRules","inherits"],"mappings":";;;;;;;AA8BAA,OAAO,SAAUC,EAASC,EAASC,GACnC,aAEA,IAAIC,EAAMH,EAAQ,cACdI,EAAqBJ,EAAQ,0BAA0BI,mBACvDC,EAAuB,WAEvB,IAAIC,EAAgBC,KAAKC,qBACrBC,SAAY,OACZC,QAAW,kqBAaXC,SAAY,cACb,cAECC,EAAc,kIAElBL,KAAKM,QACDC,QAEMC,MAAO,mBACPC,MAAO,qBAGLD,MAAO,UACPC,MAAO,UAGPD,MAAO,gBACPC,MAAO,aACPC,KAAM,iBAGNF,MAAO,SACPC,MAAO,QAGPD,MAAO,SACPC,MAAO,MACPE,OACIH,MAAQ,2BACRC,MAAQ,MACRE,KAAQ,aAERH,MAAQ,SACRC,MAAQ,MACRE,KAAQ,UAERC,aAAc,aAIlBJ,MAAO,SACPC,MAAO,IACPE,OACIH,MAAQ,2BACRC,MAAQ,MACRE,KAAQ,aAERH,MAAQ,SACRC,MAAQ,IACRE,KAAQ,UAERC,aAAc,aAIlBJ,OAAQ,kBAAmB,UAC3BC,MAAO,UACPI,UAAY,WACZF,OACIH,MAAQ,2BACRC,MAAQ,OAERD,MAAQ,SACRC,MAAQ,IACRE,KAAQ,UAERC,aAAc,aAIlBJ,MAAO,iBACPC,MAAO,MAAQJ,EAAc,kBAG7BG,MAAO,iBACPC,MAAOJ,IAGPG,MAAO,mBACPC,MAAO,yFAGPD,OAAQ,eAAgB,YACxBC,MAAO,kCAGPD,MAAOT,EACPU,MAAO,gCAGPD,MAAO,mBACPC,MAAO,wHAGPD,MAAO,aACPC,MAAO,UAGPD,MAAO,aACPC,MAAO,YAGfK,eACIL,MAAO,SACPD,MAAO,YAEPC,MAAO,aACPD,MAAO,gBACPE,KAAM,iBAEND,MAAO,OACPD,MAAO,cACPG,KAAM,QAENC,aAAc,aAGtBZ,KAAKe,kBAITnB,EAAIoB,SAASlB,EAAsBD,GAEnCH,EAAQI,qBAAuBA","file":"../../mode/fsharp_highlight_rules.js","sourcesContent":["/* ***** BEGIN LICENSE BLOCK *****\r\n * Distributed under the BSD license:\r\n *\r\n * Copyright (c) 2012, Ajax.org B.V.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *     * Redistributions of source code must retain the above copyright\r\n *       notice, this list of conditions and the following disclaimer.\r\n *     * Redistributions in binary form must reproduce the above copyright\r\n *       notice, this list of conditions and the following disclaimer in the\r\n *       documentation and/or other materials provided with the distribution.\r\n *     * Neither the name of Ajax.org B.V. nor the\r\n *       names of its contributors may be used to endorse or promote products\r\n *       derived from this software without specific prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\r\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY\r\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\r\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\r\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n *\r\n * ***** END LICENSE BLOCK ***** */\r\n\r\ndefine(function (require, exports, module) {\r\n\"use strict\";\r\n\r\nvar oop = require(\"../lib/oop\");\r\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\r\nvar FSharpHighlightRules = function () {\r\n\r\n    var keywordMapper = this.createKeywordMapper({\r\n        \"variable\": \"this\",\r\n        \"keyword\": 'abstract|assert|base|begin|class|default|delegate|done|downcast|downto|elif\\\r\n|else|exception|extern|false|finally|function|global|inherit|inline|interface|internal|lazy|match\\\r\n|member|module|mutable|namespace|open|or|override|private|public|rec|return|return!|select|static\\\r\n|struct|then|to|true|try|typeof|upcast|use|use!|val|void|when|while|with|yield|yield!|__SOURCE_DIRECTORY__\\\r\n|as|asr|land|lor|lsl|lsr|lxor|mod|sig|atomic|break|checked|component|const|constraint|constructor|continue\\\r\n|eager|event|external|fixed|functor|include|method|mixin|object|parallel|process|protected|pure|sealed|tailcall\\\r\n|trait|virtual|volatile|and|do|end|for|fun|if|in|let|let!|new|not|null|of|endif',\r\n        \"constant\": \"true|false\"\r\n    }, \"identifier\");\r\n\r\n    var floatNumber = \"(?:(?:(?:(?:(?:(?:\\\\d+)?(?:\\\\.\\\\d+))|(?:(?:\\\\d+)\\\\.))|(?:\\\\d+))(?:[eE][+-]?\\\\d+))|(?:(?:(?:\\\\d+)?(?:\\\\.\\\\d+))|(?:(?:\\\\d+)\\\\.)))\";\r\n\r\n    this.$rules = {\r\n        \"start\": [\r\n            {\r\n              token: \"variable.classes\",\r\n              regex: '\\\\[\\\\<[.]*\\\\>\\\\]'\r\n            },\r\n            {\r\n                token: \"comment\",\r\n                regex: '//.*$'\r\n            },\r\n            {\r\n                token: \"comment.start\",\r\n                regex: /\\(\\*(?!\\))/,\r\n                push: \"blockComment\"\r\n            },\r\n            {\r\n                token: \"string\",\r\n                regex: \"'.'\"\r\n            },\r\n            {\r\n                token: \"string\",\r\n                regex: '\"\"\"',\r\n                next  : [{\r\n                    token : \"constant.language.escape\",\r\n                    regex : /\\\\./,\r\n                    next  : \"qqstring\"\r\n                }, {\r\n                    token : \"string\",\r\n                    regex : '\"\"\"',\r\n                    next  : \"start\"\r\n                }, {\r\n                    defaultToken: \"string\"\r\n                }]\r\n            },\r\n            {\r\n                token: \"string\",\r\n                regex: '\"',\r\n                next  : [{\r\n                    token : \"constant.language.escape\",\r\n                    regex : /\\\\./,\r\n                    next  : \"qqstring\"\r\n                }, {\r\n                    token : \"string\",\r\n                    regex : '\"',\r\n                    next  : \"start\"\r\n                }, {\r\n                    defaultToken: \"string\"\r\n                }]\r\n            },\r\n            {\r\n                token: [\"verbatim.string\", \"string\"],\r\n                regex: '(@?)(\")',\r\n                stateName : \"qqstring\",\r\n                next  : [{\r\n                    token : \"constant.language.escape\",\r\n                    regex : '\"\"'\r\n                }, {\r\n                    token : \"string\",\r\n                    regex : '\"',\r\n                    next  : \"start\"\r\n                }, {\r\n                    defaultToken: \"string\"\r\n                }]\r\n            },\r\n            {\r\n                token: \"constant.float\",\r\n                regex: \"(?:\" + floatNumber + \"|\\\\d+)[jJ]\\\\b\"\r\n            },\r\n            {\r\n                token: \"constant.float\",\r\n                regex: floatNumber\r\n            },\r\n            {\r\n                token: \"constant.integer\",\r\n                regex: \"(?:(?:(?:[1-9]\\\\d*)|(?:0))|(?:0[oO]?[0-7]+)|(?:0[xX][\\\\dA-Fa-f]+)|(?:0[bB][01]+))\\\\b\"\r\n            },\r\n            {\r\n                token: [\"keyword.type\", \"variable\"],\r\n                regex: \"(type\\\\s)([a-zA-Z0-9_$\\-]*\\\\b)\"\r\n            },\r\n            {\r\n                token: keywordMapper,\r\n                regex: \"[a-zA-Z_$][a-zA-Z0-9_$]*\\\\b\"\r\n            },\r\n            {\r\n                token: \"keyword.operator\",\r\n                regex: \"\\\\+\\\\.|\\\\-\\\\.|\\\\*\\\\.|\\\\/\\\\.|#|;;|\\\\+|\\\\-|\\\\*|\\\\*\\\\*\\\\/|\\\\/\\\\/|%|<<|>>|&|\\\\||\\\\^|~|<|>|<=|=>|==|!=|<>|<-|=|\\\\(\\\\*\\\\)\"\r\n            },\r\n            {\r\n                token: \"paren.lpar\",\r\n                regex: \"[[({]\"\r\n            },\r\n            {\r\n                token: \"paren.rpar\",\r\n                regex: \"[\\\\])}]\"\r\n            }\r\n        ],\r\n        blockComment: [{\r\n            regex: /\\(\\*\\)/,\r\n            token: \"comment\"\r\n        }, {\r\n            regex: /\\(\\*(?!\\))/,\r\n            token: \"comment.start\",\r\n            push: \"blockComment\"\r\n        }, {\r\n            regex: /\\*\\)/,\r\n            token: \"comment.end\",\r\n            next: \"pop\"\r\n        }, {\r\n            defaultToken: \"comment\"\r\n        }]\r\n    };\r\n    this.normalizeRules();\r\n};\r\n\r\n\r\noop.inherits(FSharpHighlightRules, TextHighlightRules);\r\n\r\nexports.FSharpHighlightRules = FSharpHighlightRules;\r\n});\r\n"]}