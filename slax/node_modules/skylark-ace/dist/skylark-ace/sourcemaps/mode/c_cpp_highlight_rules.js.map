{"version":3,"sources":["mode/c_cpp_highlight_rules.js"],"names":["define","require","exports","module","oop","DocCommentHighlightRules","TextHighlightRules","cFunctions","c_cppHighlightRules","keywordMapper","this","$keywords","createKeywordMapper","keyword.control","storage.type","storage.modifier","keyword.operator","variable.language","constant.language","escapeRe","source","formatRe","$rules","start","token","regex","next","getStartRule","stateName","defaultToken","comment","singleLineComment","directive","embedRules","getEndRule","normalizeRules","inherits"],"mappings":";;;;;;;AAAAA,OAAO,SAASC,EAASC,EAASC,GAClC,aAEA,IAAIC,EAAMH,EAAQ,cACdI,EAA2BJ,EAAQ,iCAAiCI,yBACpEC,EAAqBL,EAAQ,0BAA0BK,mBAGvDC,EAAaL,EAAQK,WAAa,klFAElCC,EAAsB,WAEtB,IA0BIC,EAAgBC,KAAKC,UAAYD,KAAKE,qBACtCC,kBA3BkB,6GA4BlBC,eAvBc,2KAwBdC,mBAlBmB,qMAmBnBC,mBAbmB,4IAcnBC,oBAAqB,OACrBC,oBAVmB,sCAWpB,cAGCC,EAAW,gFAAgFC,OAC3FC,EAAW,IACP,WAAWD,OACX,aAAaA,OACb,UAAUA,OACV,0BAA0BA,OAC1B,+BAA+BA,OAC/B,uCAAuCA,OACvC,2CAA2CA,OAKnDV,KAAKY,QACDC,QAEQC,MAAQ,UACRC,MAAQ,MACRC,KAAO,UAEPF,MAAQ,UACRC,MAAQ,KACRC,KAAO,qBAEXrB,EAAyBsB,aAAa,cAElCH,MAAQ,UACRC,MAAQ,SACRC,KAAO,YAEPF,MAAQ,SACRC,MAAQ,OAASN,EAAW,UAE5BK,MAAQ,eACRC,MAAQ,IACRG,UAAW,WACXF,OACMF,MAAO,SAAUC,MAAO,SAAUC,KAAM,aACxCF,MAAO,2BAA4BC,MAAON,IAC1CK,MAAO,2BAA4BC,MAAOJ,IAC1CG,MAAO,aAAcC,MAAO,MAAOC,KAAM,UACzCG,aAAc,aAGpBL,MAAQ,eACRC,MAAQ,QACRG,UAAW,YACXF,OACMF,MAAO,aAAcC,MAAO,OAAQC,KAAM,UAC1CG,aAAc,aAGpBL,MAAQ,mBACRC,MAAQ,2DAERD,MAAQ,mBACRC,MAAQ,sFAERD,MAAQ,UACRC,MAAQ,sDACRC,KAAQ,cAERF,MAAQ,UACRC,MAAQ,gDAERD,MAAQ,yBACRC,MAAQlB,IAERiB,MAAQf,EACRgB,MAAQ,6BAERD,MAAQ,mBACRC,MAAQ,6DAEVD,MAAQ,uBACRC,MAAQ,wBAEND,MAAQ,eACRC,MAAQ,UAERD,MAAQ,eACRC,MAAQ,YAERD,MAAQ,OACRC,MAAQ,SAGhBK,UAEQN,MAAQ,UACRC,MAAQ,SACRC,KAAO,UAEPG,aAAe,YAGvBE,oBAEQP,MAAQ,UACRC,MAAQ,MACRC,KAAO,sBAEPF,MAAQ,UACRC,MAAQ,IACRC,KAAO,UAEPG,aAAc,YAGtBG,YAEQR,MAAQ,2BACRC,MAAQ,OAGRD,MAAQ,2BACRC,MAAQ,SAGRD,MAAQ,iBACRC,MAAQ,YACRC,KAAO,UAGPF,MAAQ,iBACRC,MAAQ,yCACRC,KAAO,UAGPF,MAAQ,iBACRC,MAAQ,yCACRC,KAAO,UAIPF,MAAQ,iBACRC,MAAQ,WACRC,KAAO,WAKnBhB,KAAKuB,WAAW5B,EAA0B,QACpCA,EAAyB6B,WAAW,WAC1CxB,KAAKyB,kBAGT/B,EAAIgC,SAAS5B,EAAqBF,GAElCJ,EAAQM,oBAAsBA","file":"../../mode/c_cpp_highlight_rules.js","sourcesContent":["define(function(require, exports, module) {\r\n\"use strict\";\r\n\r\nvar oop = require(\"../lib/oop\");\r\nvar DocCommentHighlightRules = require(\"./doc_comment_highlight_rules\").DocCommentHighlightRules;\r\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\r\n\r\n// used by objective-c\r\nvar cFunctions = exports.cFunctions = \"\\\\b(?:hypot(?:f|l)?|s(?:scanf|ystem|nprintf|ca(?:nf|lb(?:n(?:f|l)?|ln(?:f|l)?))|i(?:n(?:h(?:f|l)?|f|l)?|gn(?:al|bit))|tr(?:s(?:tr|pn)|nc(?:py|at|mp)|c(?:spn|hr|oll|py|at|mp)|to(?:imax|d|u(?:l(?:l)?|max)|k|f|l(?:d|l)?)|error|pbrk|ftime|len|rchr|xfrm)|printf|et(?:jmp|vbuf|locale|buf)|qrt(?:f|l)?|w(?:scanf|printf)|rand)|n(?:e(?:arbyint(?:f|l)?|xt(?:toward(?:f|l)?|after(?:f|l)?))|an(?:f|l)?)|c(?:s(?:in(?:h(?:f|l)?|f|l)?|qrt(?:f|l)?)|cos(?:h(?:f)?|f|l)?|imag(?:f|l)?|t(?:ime|an(?:h(?:f|l)?|f|l)?)|o(?:s(?:h(?:f|l)?|f|l)?|nj(?:f|l)?|pysign(?:f|l)?)|p(?:ow(?:f|l)?|roj(?:f|l)?)|e(?:il(?:f|l)?|xp(?:f|l)?)|l(?:o(?:ck|g(?:f|l)?)|earerr)|a(?:sin(?:h(?:f|l)?|f|l)?|cos(?:h(?:f|l)?|f|l)?|tan(?:h(?:f|l)?|f|l)?|lloc|rg(?:f|l)?|bs(?:f|l)?)|real(?:f|l)?|brt(?:f|l)?)|t(?:ime|o(?:upper|lower)|an(?:h(?:f|l)?|f|l)?|runc(?:f|l)?|gamma(?:f|l)?|mp(?:nam|file))|i(?:s(?:space|n(?:ormal|an)|cntrl|inf|digit|u(?:nordered|pper)|p(?:unct|rint)|finite|w(?:space|c(?:ntrl|type)|digit|upper|p(?:unct|rint)|lower|al(?:num|pha)|graph|xdigit|blank)|l(?:ower|ess(?:equal|greater)?)|al(?:num|pha)|gr(?:eater(?:equal)?|aph)|xdigit|blank)|logb(?:f|l)?|max(?:div|abs))|di(?:v|fftime)|_Exit|unget(?:c|wc)|p(?:ow(?:f|l)?|ut(?:s|c(?:har)?|wc(?:har)?)|error|rintf)|e(?:rf(?:c(?:f|l)?|f|l)?|x(?:it|p(?:2(?:f|l)?|f|l|m1(?:f|l)?)?))|v(?:s(?:scanf|nprintf|canf|printf|w(?:scanf|printf))|printf|f(?:scanf|printf|w(?:scanf|printf))|w(?:scanf|printf)|a_(?:start|copy|end|arg))|qsort|f(?:s(?:canf|e(?:tpos|ek))|close|tell|open|dim(?:f|l)?|p(?:classify|ut(?:s|c|w(?:s|c))|rintf)|e(?:holdexcept|set(?:e(?:nv|xceptflag)|round)|clearexcept|testexcept|of|updateenv|r(?:aiseexcept|ror)|get(?:e(?:nv|xceptflag)|round))|flush|w(?:scanf|ide|printf|rite)|loor(?:f|l)?|abs(?:f|l)?|get(?:s|c|pos|w(?:s|c))|re(?:open|e|ad|xp(?:f|l)?)|m(?:in(?:f|l)?|od(?:f|l)?|a(?:f|l|x(?:f|l)?)?))|l(?:d(?:iv|exp(?:f|l)?)|o(?:ngjmp|cal(?:time|econv)|g(?:1(?:p(?:f|l)?|0(?:f|l)?)|2(?:f|l)?|f|l|b(?:f|l)?)?)|abs|l(?:div|abs|r(?:int(?:f|l)?|ound(?:f|l)?))|r(?:int(?:f|l)?|ound(?:f|l)?)|gamma(?:f|l)?)|w(?:scanf|c(?:s(?:s(?:tr|pn)|nc(?:py|at|mp)|c(?:spn|hr|oll|py|at|mp)|to(?:imax|d|u(?:l(?:l)?|max)|k|f|l(?:d|l)?|mbs)|pbrk|ftime|len|r(?:chr|tombs)|xfrm)|to(?:b|mb)|rtomb)|printf|mem(?:set|c(?:hr|py|mp)|move))|a(?:s(?:sert|ctime|in(?:h(?:f|l)?|f|l)?)|cos(?:h(?:f|l)?|f|l)?|t(?:o(?:i|f|l(?:l)?)|exit|an(?:h(?:f|l)?|2(?:f|l)?|f|l)?)|b(?:s|ort))|g(?:et(?:s|c(?:har)?|env|wc(?:har)?)|mtime)|r(?:int(?:f|l)?|ound(?:f|l)?|e(?:name|alloc|wind|m(?:ove|quo(?:f|l)?|ainder(?:f|l)?))|a(?:nd|ise))|b(?:search|towc)|m(?:odf(?:f|l)?|em(?:set|c(?:hr|py|mp)|move)|ktime|alloc|b(?:s(?:init|towcs|rtowcs)|towc|len|r(?:towc|len))))\\\\b\";\r\n\r\nvar c_cppHighlightRules = function() {\r\n\r\n    var keywordControls = (\r\n        \"break|case|continue|default|do|else|for|goto|if|_Pragma|\" +\r\n        \"return|switch|while|catch|operator|try|throw|using\"\r\n    );\r\n    \r\n    var storageType = (\r\n        \"asm|__asm__|auto|bool|_Bool|char|_Complex|double|enum|float|\" +\r\n        \"_Imaginary|int|long|short|signed|struct|typedef|union|unsigned|void|\" +\r\n        \"class|wchar_t|template|char16_t|char32_t\"\r\n    );\r\n\r\n    var storageModifiers = (\r\n        \"const|extern|register|restrict|static|volatile|inline|private|\" +\r\n        \"protected|public|friend|explicit|virtual|export|mutable|typename|\" +\r\n        \"constexpr|new|delete|alignas|alignof|decltype|noexcept|thread_local\"\r\n    );\r\n\r\n    var keywordOperators = (\r\n        \"and|and_eq|bitand|bitor|compl|not|not_eq|or|or_eq|typeid|xor|xor_eq|\" +\r\n        \"const_cast|dynamic_cast|reinterpret_cast|static_cast|sizeof|namespace\"\r\n    );\r\n\r\n    var builtinConstants = (\r\n        \"NULL|true|false|TRUE|FALSE|nullptr\"\r\n    );\r\n\r\n    var keywordMapper = this.$keywords = this.createKeywordMapper({\r\n        \"keyword.control\" : keywordControls,\r\n        \"storage.type\" : storageType,\r\n        \"storage.modifier\" : storageModifiers,\r\n        \"keyword.operator\" : keywordOperators,\r\n        \"variable.language\": \"this\",\r\n        \"constant.language\": builtinConstants\r\n    }, \"identifier\");\r\n\r\n    var identifierRe = \"[a-zA-Z\\\\$_\\u00a1-\\uffff][a-zA-Z\\\\d\\\\$_\\u00a1-\\uffff]*\\\\b\";\r\n    var escapeRe = /\\\\(?:['\"?\\\\abfnrtv]|[0-7]{1,3}|x[a-fA-F\\d]{2}|u[a-fA-F\\d]{4}U[a-fA-F\\d]{8}|.)/.source;\r\n    var formatRe = \"%\"\r\n          + /(\\d+\\$)?/.source // field (argument #)\r\n          + /[#0\\- +']*/.source // flags\r\n          + /[,;:_]?/.source // separator character (AltiVec)\r\n          + /((-?\\d+)|\\*(-?\\d+\\$)?)?/.source // minimum field width\r\n          + /(\\.((-?\\d+)|\\*(-?\\d+\\$)?)?)?/.source // precision\r\n          + /(hh|h|ll|l|j|t|z|q|L|vh|vl|v|hv|hl)?/.source // length modifier\r\n          + /(\\[[^\"\\]]+\\]|[diouxXDOUeEfFgGaACcSspn%])/.source; // conversion type\r\n          \r\n    // regexp must not have capturing parentheses. Use (?:) instead.\r\n    // regexps are ordered -> the first match is used\r\n\r\n    this.$rules = { \r\n        \"start\" : [\r\n            {\r\n                token : \"comment\",\r\n                regex : \"//$\",\r\n                next : \"start\"\r\n            }, {\r\n                token : \"comment\",\r\n                regex : \"//\",\r\n                next : \"singleLineComment\"\r\n            },\r\n            DocCommentHighlightRules.getStartRule(\"doc-start\"),\r\n            {\r\n                token : \"comment\", // multi line comment\r\n                regex : \"\\\\/\\\\*\",\r\n                next : \"comment\"\r\n            }, {\r\n                token : \"string\", // character\r\n                regex : \"'(?:\" + escapeRe + \"|.)?'\"\r\n            }, {\r\n                token : \"string.start\",\r\n                regex : '\"', \r\n                stateName: \"qqstring\",\r\n                next: [\r\n                    { token: \"string\", regex: /\\\\\\s*$/, next: \"qqstring\" },\r\n                    { token: \"constant.language.escape\", regex: escapeRe },\r\n                    { token: \"constant.language.escape\", regex: formatRe },\r\n                    { token: \"string.end\", regex: '\"|$', next: \"start\" },\r\n                    { defaultToken: \"string\"}\r\n                ]\r\n            }, {\r\n                token : \"string.start\",\r\n                regex : 'R\"\\\\(', \r\n                stateName: \"rawString\",\r\n                next: [\r\n                    { token: \"string.end\", regex: '\\\\)\"', next: \"start\" },\r\n                    { defaultToken: \"string\"}\r\n                ]\r\n            }, {\r\n                token : \"constant.numeric\", // hex\r\n                regex : \"0[xX][0-9a-fA-F]+(L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\\\\b\"\r\n            }, {\r\n                token : \"constant.numeric\", // float\r\n                regex : \"[+-]?\\\\d+(?:(?:\\\\.\\\\d*)?(?:[eE][+-]?\\\\d+)?)?(L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\\\\b\"\r\n            }, {\r\n                token : \"keyword\", // pre-compiler directives\r\n                regex : \"#\\\\s*(?:include|import|pragma|line|define|undef)\\\\b\",\r\n                next  : \"directive\"\r\n            }, {\r\n                token : \"keyword\", // special case pre-compiler directive\r\n                regex : \"#\\\\s*(?:endif|if|ifdef|else|elif|ifndef)\\\\b\"\r\n            }, {\r\n                token : \"support.function.C99.c\",\r\n                regex : cFunctions\r\n            }, {\r\n                token : keywordMapper,\r\n                regex : \"[a-zA-Z_$][a-zA-Z0-9_$]*\"\r\n            }, {\r\n                token : \"keyword.operator\",\r\n                regex : /--|\\+\\+|<<=|>>=|>>>=|<>|&&|\\|\\||\\?:|[*%\\/+\\-&\\^|~!<>=]=?/\r\n            }, {\r\n              token : \"punctuation.operator\",\r\n              regex : \"\\\\?|\\\\:|\\\\,|\\\\;|\\\\.\"\r\n            }, {\r\n                token : \"paren.lparen\",\r\n                regex : \"[[({]\"\r\n            }, {\r\n                token : \"paren.rparen\",\r\n                regex : \"[\\\\])}]\"\r\n            }, {\r\n                token : \"text\",\r\n                regex : \"\\\\s+\"\r\n            }\r\n        ],\r\n        \"comment\" : [\r\n            {\r\n                token : \"comment\", // closing comment\r\n                regex : \"\\\\*\\\\/\",\r\n                next : \"start\"\r\n            }, {\r\n                defaultToken : \"comment\"\r\n            }\r\n        ],\r\n        \"singleLineComment\" : [\r\n            {\r\n                token : \"comment\",\r\n                regex : /\\\\$/,\r\n                next : \"singleLineComment\"\r\n            }, {\r\n                token : \"comment\",\r\n                regex : /$/,\r\n                next : \"start\"\r\n            }, {\r\n                defaultToken: \"comment\"\r\n            }\r\n        ],\r\n        \"directive\" : [\r\n            {\r\n                token : \"constant.other.multiline\",\r\n                regex : /\\\\/\r\n            },\r\n            {\r\n                token : \"constant.other.multiline\",\r\n                regex : /.*\\\\/\r\n            },\r\n            {\r\n                token : \"constant.other\",\r\n                regex : \"\\\\s*<.+?>\",\r\n                next : \"start\"\r\n            },\r\n            {\r\n                token : \"constant.other\", // single line\r\n                regex : '\\\\s*[\"](?:(?:\\\\\\\\.)|(?:[^\"\\\\\\\\]))*?[\"]',\r\n                next : \"start\"\r\n            }, \r\n            {\r\n                token : \"constant.other\", // single line\r\n                regex : \"\\\\s*['](?:(?:\\\\\\\\.)|(?:[^'\\\\\\\\]))*?[']\",\r\n                next : \"start\"\r\n            },\r\n            // \"\\\" implies multiline, while \"/\" implies comment\r\n            {\r\n                token : \"constant.other\",\r\n                regex : /[^\\\\\\/]+/,\r\n                next : \"start\"\r\n            }\r\n        ]\r\n    };\r\n\r\n    this.embedRules(DocCommentHighlightRules, \"doc-\",\r\n        [ DocCommentHighlightRules.getEndRule(\"start\") ]);\r\n    this.normalizeRules();\r\n};\r\n\r\noop.inherits(c_cppHighlightRules, TextHighlightRules);\r\n\r\nexports.c_cppHighlightRules = c_cppHighlightRules;\r\n});\r\n"]}