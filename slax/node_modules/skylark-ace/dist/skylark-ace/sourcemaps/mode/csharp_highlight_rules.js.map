{"version":3,"sources":["mode/csharp_highlight_rules.js"],"names":["define","require","exports","module","oop","DocCommentHighlightRules","TextHighlightRules","CSharpHighlightRules","keywordMapper","this","createKeywordMapper","variable.language","keyword","constant.language","$rules","start","token","regex","getStartRule","next","end","comment","defaultToken","embedRules","getEndRule","normalizeRules","inherits"],"mappings":";;;;;;;AAAAA,OAAO,SAASC,QAASC,QAASC,QAClC,aAEA,IAAIC,EAAMH,QAAQ,cACdI,EAA2BJ,QAAQ,iCAAiCI,yBACpEC,EAAqBL,QAAQ,0BAA0BK,mBAEvDC,EAAuB,WACvB,IAAIC,EAAgBC,KAAKC,qBACrBC,oBAAqB,OACrBC,QAAW,shBACXC,oBAAqB,mBACtB,cAKHJ,KAAKK,QACDC,QAEQC,MAAQ,UACRC,MAAQ,aAEZZ,EAAyBa,aAAa,cAElCF,MAAQ,UACRC,MAAQ,SACRE,KAAO,YAEPH,MAAQ,SACRC,MAAQ,uDAERD,MAAQ,SAAUD,MAAQ,IAAKK,IAAM,MAAOD,OACvCH,MAAO,2BAA4BC,MAAO,8CAC1CD,MAAO,UAAWC,MAAO,UAG9BD,MAAQ,SAAUD,MAAQ,KAAMK,IAAM,IAAKD,OACtCH,MAAO,2BAA4BC,MAAO,SAG/CD,MAAQ,SAAUD,MAAQ,MAAOK,IAAM,MAAOD,OACzCH,MAAO,2BAA4BC,MAAO,eAC1CD,MAAO,2BAA4BC,MAAO,8CAC1CD,MAAO,UAAWC,MAAO,UAG9BD,MAAQ,mBACRC,MAAQ,yBAERD,MAAQ,mBACRC,MAAQ,oDAERD,MAAQ,4BACRC,MAAQ,sBAERD,MAAQR,EACRS,MAAQ,gCAERD,MAAQ,mBACRC,MAAQ,6KAERD,MAAQ,UACRC,MAAQ,uFAERD,MAAQ,uBACRC,MAAQ,wBAERD,MAAQ,eACRC,MAAQ,UAERD,MAAQ,eACRC,MAAQ,YAERD,MAAQ,OACRC,MAAQ,SAGhBI,UAEQL,MAAQ,UACRC,MAAQ,SACRE,KAAO,UAEPG,aAAe,aAK3Bb,KAAKc,WAAWlB,EAA0B,QACpCA,EAAyBmB,WAAW,WAC1Cf,KAAKgB,kBAGTrB,EAAIsB,SAASnB,EAAsBD,GAEnCJ,QAAQK,qBAAuBA","file":"../../mode/csharp_highlight_rules.js","sourcesContent":["define(function(require, exports, module) {\r\n\"use strict\";\r\n\r\nvar oop = require(\"../lib/oop\");\r\nvar DocCommentHighlightRules = require(\"./doc_comment_highlight_rules\").DocCommentHighlightRules;\r\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\r\n\r\nvar CSharpHighlightRules = function() {\r\n    var keywordMapper = this.createKeywordMapper({\r\n        \"variable.language\": \"this\",\r\n        \"keyword\": \"abstract|async|await|event|new|struct|as|explicit|null|switch|base|extern|object|this|bool|false|operator|throw|break|finally|out|true|byte|fixed|override|try|case|float|params|typeof|catch|for|private|uint|char|foreach|protected|ulong|checked|goto|public|unchecked|class|if|readonly|unsafe|const|implicit|ref|ushort|continue|in|return|using|decimal|int|sbyte|virtual|default|interface|sealed|volatile|delegate|internal|partial|short|void|do|is|sizeof|while|double|lock|stackalloc|else|long|static|enum|namespace|string|var|dynamic\",\r\n        \"constant.language\": \"null|true|false\"\r\n    }, \"identifier\");\r\n\r\n    // regexp must not have capturing parentheses. Use (?:) instead.\r\n    // regexps are ordered -> the first match is used\r\n\r\n    this.$rules = {\r\n        \"start\" : [\r\n            {\r\n                token : \"comment\",\r\n                regex : \"\\\\/\\\\/.*$\"\r\n            },\r\n            DocCommentHighlightRules.getStartRule(\"doc-start\"),\r\n            {\r\n                token : \"comment\", // multi line comment\r\n                regex : \"\\\\/\\\\*\",\r\n                next : \"comment\"\r\n            }, {\r\n                token : \"string\", // character\r\n                regex : /'(?:.|\\\\(:?u[\\da-fA-F]+|x[\\da-fA-F]+|[tbrf'\"n]))?'/\r\n            }, {\r\n                token : \"string\", start : '\"', end : '\"|$', next: [\r\n                    {token: \"constant.language.escape\", regex: /\\\\(:?u[\\da-fA-F]+|x[\\da-fA-F]+|[tbrf'\"n])/},\r\n                    {token: \"invalid\", regex: /\\\\./}\r\n                ]\r\n            }, {\r\n                token : \"string\", start : '@\"', end : '\"', next:[\r\n                    {token: \"constant.language.escape\", regex: '\"\"'}\r\n                ]\r\n            }, {\r\n                token : \"string\", start : /\\$\"/, end : '\"|$', next: [\r\n                    {token: \"constant.language.escape\", regex: /\\\\(:?$)|{{/},\r\n                    {token: \"constant.language.escape\", regex: /\\\\(:?u[\\da-fA-F]+|x[\\da-fA-F]+|[tbrf'\"n])/},\r\n                    {token: \"invalid\", regex: /\\\\./}\r\n                ]\r\n            }, {\r\n                token : \"constant.numeric\", // hex\r\n                regex : \"0[xX][0-9a-fA-F]+\\\\b\"\r\n            }, {\r\n                token : \"constant.numeric\", // float\r\n                regex : \"[+-]?\\\\d+(?:(?:\\\\.\\\\d*)?(?:[eE][+-]?\\\\d+)?)?\\\\b\"\r\n            }, {\r\n                token : \"constant.language.boolean\",\r\n                regex : \"(?:true|false)\\\\b\"\r\n            }, {\r\n                token : keywordMapper,\r\n                regex : \"[a-zA-Z_$][a-zA-Z0-9_$]*\\\\b\"\r\n            }, {\r\n                token : \"keyword.operator\",\r\n                regex : \"!|\\\\$|%|&|\\\\*|\\\\-\\\\-|\\\\-|\\\\+\\\\+|\\\\+|~|===|==|=|!=|!==|<=|>=|<<=|>>=|>>>=|<>|<|>|!|&&|\\\\|\\\\||\\\\?\\\\:|\\\\*=|%=|\\\\+=|\\\\-=|&=|\\\\^=|\\\\b(?:in|instanceof|new|delete|typeof|void)\"\r\n            }, {\r\n                token : \"keyword\",\r\n                regex : \"^\\\\s*#(if|else|elif|endif|define|undef|warning|error|line|region|endregion|pragma)\"\r\n            }, {\r\n                token : \"punctuation.operator\",\r\n                regex : \"\\\\?|\\\\:|\\\\,|\\\\;|\\\\.\"\r\n            }, {\r\n                token : \"paren.lparen\",\r\n                regex : \"[[({]\"\r\n            }, {\r\n                token : \"paren.rparen\",\r\n                regex : \"[\\\\])}]\"\r\n            }, {\r\n                token : \"text\",\r\n                regex : \"\\\\s+\"\r\n            }\r\n        ],\r\n        \"comment\" : [\r\n            {\r\n                token : \"comment\", // closing comment\r\n                regex : \"\\\\*\\\\/\",\r\n                next : \"start\"\r\n            }, {\r\n                defaultToken : \"comment\"\r\n            }\r\n        ]\r\n    };\r\n\r\n    this.embedRules(DocCommentHighlightRules, \"doc-\",\r\n        [ DocCommentHighlightRules.getEndRule(\"start\") ]);\r\n    this.normalizeRules();\r\n};\r\n\r\noop.inherits(CSharpHighlightRules, TextHighlightRules);\r\n\r\nexports.CSharpHighlightRules = CSharpHighlightRules;\r\n});\r\n"]}