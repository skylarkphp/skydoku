{"version":3,"sources":["mode/r.js"],"names":["define","require","exports","module","unicode","oop","Range","TextMode","Mode","RHighlightRules","TextHighlightRules","MatchingBraceOutdent","this","HighlightRules","$outdent","$behaviour","$defaultBehaviour","inherits","lineCommentStart","tokenRe","RegExp","wordChars","nonTokenRe","$id","call","prototype"],"mappings":";;;;;;;AAqCAA,OAAO,SAASC,QAASC,QAASC,QAC/B,aAEA,IAAIC,EAAUH,QAAQ,cAElBI,GADQJ,QAAQ,YAAYK,MACtBL,QAAQ,eACdM,EAAWN,QAAQ,UAAUO,KAE7BC,GADqBR,QAAQ,0BAA0BS,mBACrCT,QAAQ,uBAAuBQ,iBACjDE,EAAuBV,QAAQ,4BAA4BU,qBAE3DH,EAAO,WACRI,KAAKC,eAAiBJ,EACtBG,KAAKE,SAAW,IAAIH,EACpBC,KAAKG,WAAaH,KAAKI,mBAE1BX,EAAIY,SAAST,EAAMD,GAEnB,WACGK,KAAKM,iBAAmB,IAExBN,KAAKO,QAAU,IAAIC,OAAO,KAAOhB,EAAQiB,UAAY,OAAQ,KAE7DT,KAAKU,WAAa,IAAIF,OAAO,SAAWhB,EAAQiB,UAAY,WAAa,KA+ExET,KAAKW,IAAM,cACZC,KAAKhB,EAAKiB,WACbvB,QAAQM,KAAOA","file":"../../mode/r.js","sourcesContent":["/*\r\n * r.js\r\n *\r\n * Copyright (C) 2009-11 by RStudio, Inc.\r\n *\r\n * The Initial Developer of the Original Code is\r\n * Ajax.org B.V.\r\n * Portions created by the Initial Developer are Copyright (C) 2010\r\n * the Initial Developer. All Rights Reserved.\r\n *\r\n * Distributed under the BSD license:\r\n *\r\n * Copyright (c) 2010, Ajax.org B.V.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *     * Redistributions of source code must retain the above copyright\r\n *       notice, this list of conditions and the following disclaimer.\r\n *     * Redistributions in binary form must reproduce the above copyright\r\n *       notice, this list of conditions and the following disclaimer in the\r\n *       documentation and/or other materials provided with the distribution.\r\n *     * Neither the name of Ajax.org B.V. nor the\r\n *       names of its contributors may be used to endorse or promote products\r\n *       derived from this software without specific prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\r\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY\r\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\r\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\r\n *\r\n */\r\ndefine(function(require, exports, module) {\r\n   \"use strict\";\r\n\r\n   var unicode = require(\"../unicode\");\r\n   var Range = require(\"../range\").Range;\r\n   var oop = require(\"../lib/oop\");\r\n   var TextMode = require(\"./text\").Mode;\r\n   var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\r\n   var RHighlightRules = require(\"./r_highlight_rules\").RHighlightRules;\r\n   var MatchingBraceOutdent = require(\"./matching_brace_outdent\").MatchingBraceOutdent;\r\n\r\n   var Mode = function(){\r\n      this.HighlightRules = RHighlightRules;\r\n      this.$outdent = new MatchingBraceOutdent();\r\n      this.$behaviour = this.$defaultBehaviour;\r\n   };\r\n   oop.inherits(Mode, TextMode);\r\n\r\n   (function() {\r\n      this.lineCommentStart = \"#\";\r\n      // todo import codeModel from RStudio\r\n      this.tokenRe = new RegExp(\"^[\" + unicode.wordChars + \"._]+\", \"g\");\r\n\r\n      this.nonTokenRe = new RegExp(\"^(?:[^\" + unicode.wordChars + \"._]|\\s])+\", \"g\");\r\n\r\n      /*this.$complements = {\r\n               \"(\": \")\",\r\n               \"[\": \"]\",\r\n               '\"': '\"',\r\n               \"'\": \"'\",\r\n               \"{\": \"}\"\r\n            };\r\n      this.$reOpen = /^[([\"'{]$/;\r\n      this.$reClose = /^[)\\]\"'}]$/;\r\n\r\n      this.getNextLineIndent = function(state, line, tab, tabSize, row)\r\n      {\r\n         return this.codeModel.getNextLineIndent(row, line, state, tab, tabSize);\r\n      };\r\n\r\n      this.allowAutoInsert = this.smartAllowAutoInsert;\r\n\r\n      this.checkOutdent = function(state, line, input) {\r\n         if (! /^\\s+$/.test(line))\r\n            return false;\r\n\r\n         return /^\\s*[\\{\\}\\)]/.test(input);\r\n      };\r\n\r\n      this.getIndentForOpenBrace = function(openBracePos)\r\n      {\r\n         return this.codeModel.getIndentForOpenBrace(openBracePos);\r\n      };\r\n\r\n      this.autoOutdent = function(state, doc, row) {\r\n         if (row == 0)\r\n            return 0;\r\n\r\n         var line = doc.getLine(row);\r\n\r\n         var match = line.match(/^(\\s*[\\}\\)])/);\r\n         if (match)\r\n         {\r\n            var column = match[1].length;\r\n            var openBracePos = doc.findMatchingBracket({row: row, column: column});\r\n\r\n            if (!openBracePos || openBracePos.row == row) return 0;\r\n\r\n            var indent = this.codeModel.getIndentForOpenBrace(openBracePos);\r\n            doc.replace(new Range(row, 0, row, column-1), indent);\r\n         }\r\n\r\n         match = line.match(/^(\\s*\\{)/);\r\n         if (match)\r\n         {\r\n            var column = match[1].length;\r\n            var indent = this.codeModel.getBraceIndent(row-1);\r\n            doc.replace(new Range(row, 0, row, column-1), indent);\r\n         }\r\n      };\r\n\r\n      this.$getIndent = function(line) {\r\n         var match = line.match(/^(\\s+)/);\r\n         if (match) {\r\n            return match[1];\r\n         }\r\n\r\n         return \"\";\r\n      };\r\n\r\n      this.transformAction = function(state, action, editor, session, text) {\r\n         if (action === 'insertion' && text === \"\\n\") {\r\n\r\n            // If newline in a doxygen comment, continue the comment\r\n            var pos = editor.getSelectionRange().start;\r\n            var match = /^((\\s*#+')\\s*)/.exec(session.doc.getLine(pos.row));\r\n            if (match && editor.getSelectionRange().start.column >= match[2].length) {\r\n               return {text: \"\\n\" + match[1]};\r\n            }\r\n         }\r\n         return false;\r\n      };*/\r\n       this.$id = \"ace/mode/r\";\r\n   }).call(Mode.prototype);\r\n   exports.Mode = Mode;\r\n});\r\n"]}