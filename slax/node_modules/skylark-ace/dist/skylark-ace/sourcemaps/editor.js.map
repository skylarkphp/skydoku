{"version":3,"sources":["editor.js"],"names":["define","require","exports","module","oop","dom","lang","useragent","TextInput","MouseHandler","FoldHandler","KeyBinding","EditSession","Search","Range","EventEmitter","CommandManager","defaultCommands","commands","config","TokenIterator","clipboard","Editor","renderer","session","options","container","getContainerElement","this","id","$uid","isMac","document","textInput","getTextAreaContainer","textarea","getElement","$mouseHandler","keyBinding","$search","set","wrap","$historyTracker","bind","on","$initOperationListeners","_$emitInputEvent","delayedCall","_signal","bgTokenizer","scheduleStart","_","_self","schedule","setSession","resetOptions","setOptions","implement","startOperation","endOperation","$opResetTimer","curOp","selectionBefore","$lastSel","docChanged","selectionChanged","prevOp","commandEvent","command","previousCommand","args","scrollTop","selection","toJSON","e","returnValue","name","scrollIntoView","scrollCursorIntoView","range","getRange","layerConfig","start","row","lastRow","end","firstRow","scrollSelectionIntoView","anchor","lead","animateScrolling","sel","selectionAfter","getUndoManager","addSelection","$mergeableCommands","$mergeUndoDeltas","prev","mergeableCommands","shouldMerge","text","undefined","mergeNextCommand","test","indexOf","Date","now","sequenceStartTime","mergeUndoDeltas","setKeyboardHandler","keyboardHandler","cb","$keybindingId","loadModule","handler","getKeyboardHandler","oldSession","off","$onDocumentChange","$onChangeMode","$onTokenizerUpdate","$onChangeTabSize","$onChangeWrapLimit","$onChangeWrapMode","$onChangeFold","$onChangeFrontMarker","$onChangeBackMarker","$onChangeBreakpoint","$onChangeAnnotation","$onCursorChange","$onScrollTopChange","$onScrollLeftChange","getSelection","$onSelectionChange","onDocumentChange","onChangeMode","onTokenizerUpdate","onChangeTabSize","onChangeWrapLimit","onChangeWrapMode","onChangeFold","onChangeFrontMarker","onChangeBackMarker","onChangeBreakpoint","onChangeAnnotation","onCursorChange","onScrollTopChange","onScrollLeftChange","onSelectionChange","getUseWrapMode","adjustWrapLimit","updateFull","oldEditor","editor","getSession","setValue","val","cursorPos","doc","navigateFileEnd","navigateFileStart","selectAll","getValue","resize","force","onResize","setTheme","theme","getTheme","setStyle","style","unsetStyle","getFontSize","getOption","computedStyle","fontSize","setFontSize","size","setOption","$highlightBrackets","$bracketHighlight","removeMarker","$highlightPending","self","setTimeout","pos","findMatchingBracket","getCursorPosition","column","$mode","getMatching","addMarker","$highlightTags","$highlightTagPending","iterator","token","getCurrentToken","type","$tagHighlight","stepForward","tag","value","depth","prevToken","stepBackward","getCurrentTokenRow","getCurrentTokenColumn","length","sbm","$backMarkers","compareRange","focus","isFocused","blur","onFocus","$isFocused","showCursor","visualizeFocus","_emit","onBlur","hideCursor","visualizeBlur","$cursorChange","updateCursor","delta","$useWrapMode","Infinity","updateLines","$updateHighlightActiveLine","rows","data","first","last","scrollToY","getScrollTop","scrollToX","getScrollLeft","highlight","$highlightActiveLine","$selectionStyle","isMultiLine","$selectionColorConflict","isEmpty","$maxLines","getLength","$minLines","$highlightLineMarker","$selectionMarker","getSelectionStyle","re","$highlightSelectedWord","$getSelectionHighLightRegexp","getSelectionRange","startColumn","endColumn","line","getLine","needle","substring","$assembleRegExp","wholeWord","caseSensitive","wordWithBoundary","updateFrontMarkers","updateBackMarkers","updateBreakpoints","setAnnotations","getAnnotations","updateText","getSelectedText","getTextRange","getCopyText","nl","getNewLineCharacter","copyLine","$copyWithEmptySelection","ranges","getAllRanges","i","lineMode","onCopy","exec","onCut","onPaste","event","$handlePaste","inMultiSelectMode","inVirtualSelectionMode","insert","rangeList","forEach","lines","split","remove","execCommand","pasted","mode","getMode","cursor","getBehavioursEnabled","transform","transformAction","getState","getTabString","getOverwrite","fromPoints","clearSelection","search","d","substr","removeInLine","lineState","shouldOutdent","checkOutdent","setSelectionRange","getDocument","isNewLine","lineIndent","getNextLineIndent","slice","autoOutdent","onTextInput","composition","applyComposition","rangeCount","forEachSelection","r","extendLeft","extendRight","setRange","restoreStart","restoreEnd","onCommandKey","hashId","keyCode","setOverwrite","overwrite","toggleOverwrite","setScrollSpeed","speed","getScrollSpeed","setDragDelay","dragDelay","getDragDelay","setSelectionStyle","setHighlightActiveLine","shouldHighlight","getHighlightActiveLine","setHighlightGutterLine","getHighlightGutterLine","setHighlightSelectedWord","getHighlightSelectedWord","setAnimatedScroll","shouldAnimate","getAnimatedScroll","setShowInvisibles","showInvisibles","getShowInvisibles","setDisplayIndentGuides","display","getDisplayIndentGuides","setShowPrintMargin","showPrintMargin","getShowPrintMargin","setPrintMarginColumn","getPrintMarginColumn","setReadOnly","readOnly","getReadOnly","setBehavioursEnabled","enabled","setWrapBehavioursEnabled","getWrapBehavioursEnabled","setShowFoldWidgets","show","getShowFoldWidgets","setFadeFoldWidgets","fade","getFadeFoldWidgets","dir","selectLeft","selectRight","state","new_range","removeWordRight","selectWordRight","removeWordLeft","selectWordLeft","removeToLineStart","selectLineStart","removeToLineEnd","selectLineEnd","splitLine","moveCursorToPosition","transposeLetters","swap","charAt","replace","moveToPosition","toLowerCase","originalRange","selectWord","toUpperCase","indent","$getSelectedRows","indentRows","position","getTabSize","documentToScreenColumn","getUseSoftTabs","count","indentString","stringRepeat","blockIndent","blockOutdent","outdentRows","sortLines","push","sort","a","b","deleteRange","toggleCommentLines","toggleBlockComment","getNumberAt","_numberRx","lastIndex","s","m","index","modifyNumber","amount","getCursor","charRange","c","isNaN","parseFloat","isFinite","nr","fp","decimals","t","Math","pow","nnr","toFixed","replaceRange","moveCursorTo","max","toggleWord","$toggleWordPairs","currentState","currWordStart","getWordRange","wordParts","curLength","itLength","that","match","item","selectTo","reg","wordPairs","j","negate","firstCondition","RegExp","escapeRegExp","result","res","removeLines","removeFullLines","duplicateSelection","reverse","isBackwards","duplicateLines","point","endPoint","moveLinesDown","$moveLines","moveLinesUp","moveText","toPosition","copy","copyLinesUp","copyLinesDown","moved","toOrientedRange","moveBy","fromOrientedRange","detach","diff","totalDiff","l","rangeIndex","subRows","attach","collapseRows","getRowFoldStart","getRowFoldEnd","onCompositionStart","compositionState","showComposition","onCompositionUpdate","setCompositionText","onCompositionEnd","hideComposition","getFirstVisibleRow","getLastVisibleRow","isRowVisible","isRowFullyVisible","getFirstFullyVisibleRow","getLastFullyVisibleRow","$getVisibleRowCount","getScrollBottomRow","getScrollTopRow","$moveByPage","select","floor","height","lineHeight","$moveSelection","moveCursorBy","scrollBy","selectPageDown","selectPageUp","gotoPageDown","gotoPageUp","scrollPageDown","scrollPageUp","scrollToRow","scrollToLine","center","animate","callback","centerSelection","alignCursor","getCursorPositionScreen","documentToScreenPosition","jumpToMatching","expand","matchType","bracketType","found","brackets",")","(","]","[","{","}","getBracketRange","abs","compare","setEnd","isEqual","moveTo","gotoLine","lineNumber","unfold","exitMultiSelectMode","navigateTo","navigateUp","times","selectionStart","getPosition","navigateDown","selectionEnd","navigateLeft","moveCursorLeft","navigateRight","moveCursorRight","navigateLineStart","moveCursorLineStart","navigateLineEnd","moveCursorLineEnd","moveCursorFileEnd","moveCursorFileStart","navigateWordRight","moveCursorWordRight","navigateWordLeft","moveCursorWordLeft","replacement","find","replaced","$tryReplace","replaceAll","findAll","input","getLastSearchOptions","getOptions","mixin","$options","newRange","preventScroll","revealRange","backwards","findNext","skipCurrent","findPrevious","undo","redo","destroy","setAutoScrollEditorIntoView","enable","rect","shouldScroll","$scrollAnchor","createElement","scrollAnchor","cssText","insertBefore","firstChild","onChangeSelection","onBeforeRender","getBoundingClientRect","onAfterRender","searchBox","$cursorLayer","$pixelPos","top","offset","window","innerHeight","left","$resetCursorStyle","$cursorStyle","cursorLayer","setSmoothBlinking","isBlinking","$readOnly","setCssClass","element","call","prototype","defineOptions","selectionStyle","initialValue","highlightActiveLine","highlightSelectedWord","copyWithEmptySelection","setCopyWithEmptySelection","cursorStyle","values","behavioursEnabled","wrapBehavioursEnabled","autoScrollEditorIntoView","get","handlesSet","hidden","showLineNumbers","$gutterLayer","setShowLineNumbers","$loop","CHANGE_GUTTER","$relativeLineNumbers","relativeNumberRenderer","relativeLineNumbers","$showLineNumbers","hScrollBarAlwaysVisible","vScrollBarAlwaysVisible","highlightGutterLine","animatedScroll","printMarginColumn","printMargin","fadeFoldWidgets","showFoldWidgets","displayIndentGuides","showGutter","fontFamily","maxLines","minLines","scrollPastEnd","fixedWidthGutter","hasCssTransforms","maxPixelHeight","useTextareaForIME","scrollSpeed","dragEnabled","focusTimeout","tooltipFollowsMouse","firstLineNumber","newLineMode","useWorker","useSoftTabs","navigateWithinSoftTabs","tabSize","indentedSoftWrap","foldStyle","getText","getWidth","lastLineNumber","toString","characterWidth","update","$renderer"],"mappings":"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","file":"../editor.js","sourcesContent":["/* ***** BEGIN LICENSE BLOCK *****\r\n * Distributed under the BSD license:\r\n *\r\n * Copyright (c) 2010, Ajax.org B.V.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *     * Redistributions of source code must retain the above copyright\r\n *       notice, this list of conditions and the following disclaimer.\r\n *     * Redistributions in binary form must reproduce the above copyright\r\n *       notice, this list of conditions and the following disclaimer in the\r\n *       documentation and/or other materials provided with the distribution.\r\n *     * Neither the name of Ajax.org B.V. nor the\r\n *       names of its contributors may be used to endorse or promote products\r\n *       derived from this software without specific prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\r\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY\r\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\r\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\r\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n *\r\n * ***** END LICENSE BLOCK ***** */\r\n\r\ndefine(function(require, exports, module) {\r\n\"use strict\";\r\n\r\nrequire(\"./lib/fixoldbrowsers\");\r\n\r\nvar oop = require(\"./lib/oop\");\r\nvar dom = require(\"./lib/dom\");\r\nvar lang = require(\"./lib/lang\");\r\nvar useragent = require(\"./lib/useragent\");\r\nvar TextInput = require(\"./keyboard/textinput\").TextInput;\r\nvar MouseHandler = require(\"./mouse/mouse_handler\").MouseHandler;\r\nvar FoldHandler = require(\"./mouse/fold_handler\").FoldHandler;\r\nvar KeyBinding = require(\"./keyboard/keybinding\").KeyBinding;\r\nvar EditSession = require(\"./edit_session\").EditSession;\r\nvar Search = require(\"./search\").Search;\r\nvar Range = require(\"./range\").Range;\r\nvar EventEmitter = require(\"./lib/event_emitter\").EventEmitter;\r\nvar CommandManager = require(\"./commands/command_manager\").CommandManager;\r\nvar defaultCommands = require(\"./commands/default_commands\").commands;\r\nvar config = require(\"./config\");\r\nvar TokenIterator = require(\"./token_iterator\").TokenIterator;\r\n\r\nvar clipboard = require(\"./clipboard\");\r\n\r\n/**\r\n * The main entry point into the Ace functionality.\r\n *\r\n * The `Editor` manages the [[EditSession]] (which manages [[Document]]s), as well as the [[VirtualRenderer]], which draws everything to the screen.\r\n *\r\n * Event sessions dealing with the mouse and keyboard are bubbled up from `Document` to the `Editor`, which decides what to do with them.\r\n * @class Editor\r\n **/\r\n\r\n/**\r\n * Creates a new `Editor` object.\r\n *\r\n * @param {VirtualRenderer} renderer Associated `VirtualRenderer` that draws everything\r\n * @param {EditSession} session The `EditSession` to refer to\r\n *\r\n *\r\n * @constructor\r\n **/\r\nvar Editor = function(renderer, session, options) {\r\n    var container = renderer.getContainerElement();\r\n    this.container = container;\r\n    this.renderer = renderer;\r\n    this.id = \"editor\" + (++Editor.$uid);\r\n\r\n    this.commands = new CommandManager(useragent.isMac ? \"mac\" : \"win\", defaultCommands);\r\n    if (typeof document == \"object\") {\r\n        this.textInput = new TextInput(renderer.getTextAreaContainer(), this);\r\n        this.renderer.textarea = this.textInput.getElement();\r\n        // TODO detect touch event support\r\n        this.$mouseHandler = new MouseHandler(this);\r\n        new FoldHandler(this);\r\n    }\r\n\r\n    this.keyBinding = new KeyBinding(this);\r\n\r\n    this.$search = new Search().set({\r\n        wrap: true\r\n    });\r\n\r\n    this.$historyTracker = this.$historyTracker.bind(this);\r\n    this.commands.on(\"exec\", this.$historyTracker);\r\n\r\n    this.$initOperationListeners();\r\n    \r\n    this._$emitInputEvent = lang.delayedCall(function() {\r\n        this._signal(\"input\", {});\r\n        if (this.session && this.session.bgTokenizer)\r\n            this.session.bgTokenizer.scheduleStart();\r\n    }.bind(this));\r\n    \r\n    this.on(\"change\", function(_, _self) {\r\n        _self._$emitInputEvent.schedule(31);\r\n    });\r\n\r\n    this.setSession(session || options && options.session || new EditSession(\"\"));\r\n    config.resetOptions(this);\r\n    if (options)\r\n        this.setOptions(options);\r\n    config._signal(\"editor\", this);\r\n};\r\n\r\nEditor.$uid = 0;\r\n\r\n(function(){\r\n\r\n    oop.implement(this, EventEmitter);\r\n\r\n    this.$initOperationListeners = function() {\r\n        this.commands.on(\"exec\", this.startOperation.bind(this), true);\r\n        this.commands.on(\"afterExec\", this.endOperation.bind(this), true);\r\n\r\n        this.$opResetTimer = lang.delayedCall(this.endOperation.bind(this, true));\r\n        \r\n        // todo: add before change events?\r\n        this.on(\"change\", function() {\r\n            if (!this.curOp) {\r\n                this.startOperation();\r\n                this.curOp.selectionBefore = this.$lastSel;\r\n            }\r\n            this.curOp.docChanged = true;\r\n        }.bind(this), true);\r\n        \r\n        this.on(\"changeSelection\", function() {\r\n            if (!this.curOp) {\r\n                this.startOperation();\r\n                this.curOp.selectionBefore = this.$lastSel;\r\n            }\r\n            this.curOp.selectionChanged = true;\r\n        }.bind(this), true);\r\n    };\r\n\r\n    this.curOp = null;\r\n    this.prevOp = {};\r\n    this.startOperation = function(commandEvent) {\r\n        if (this.curOp) {\r\n            if (!commandEvent || this.curOp.command)\r\n                return;\r\n            this.prevOp = this.curOp;\r\n        }\r\n        if (!commandEvent) {\r\n            this.previousCommand = null;\r\n            commandEvent = {};\r\n        }\r\n\r\n        this.$opResetTimer.schedule();\r\n        this.curOp = this.session.curOp = {\r\n            command: commandEvent.command || {},\r\n            args: commandEvent.args,\r\n            scrollTop: this.renderer.scrollTop\r\n        };\r\n        this.curOp.selectionBefore = this.selection.toJSON();\r\n    };\r\n\r\n    this.endOperation = function(e) {\r\n        if (this.curOp) {\r\n            if (e && e.returnValue === false)\r\n                return (this.curOp = null);\r\n            if (e == true && this.curOp.command && this.curOp.command.name == \"mouse\")\r\n                return;\r\n            this._signal(\"beforeEndOperation\");\r\n            if (!this.curOp) return;\r\n            var command = this.curOp.command;\r\n            var scrollIntoView = command && command.scrollIntoView;\r\n            if (scrollIntoView) {\r\n                switch (scrollIntoView) {\r\n                    case \"center-animate\":\r\n                        scrollIntoView = \"animate\";\r\n                        /* fall through */\r\n                    case \"center\":\r\n                        this.renderer.scrollCursorIntoView(null, 0.5);\r\n                        break;\r\n                    case \"animate\":\r\n                    case \"cursor\":\r\n                        this.renderer.scrollCursorIntoView();\r\n                        break;\r\n                    case \"selectionPart\":\r\n                        var range = this.selection.getRange();\r\n                        var config = this.renderer.layerConfig;\r\n                        if (range.start.row >= config.lastRow || range.end.row <= config.firstRow) {\r\n                            this.renderer.scrollSelectionIntoView(this.selection.anchor, this.selection.lead);\r\n                        }\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n                if (scrollIntoView == \"animate\")\r\n                    this.renderer.animateScrolling(this.curOp.scrollTop);\r\n            }\r\n            var sel = this.selection.toJSON();\r\n            this.curOp.selectionAfter = sel;\r\n            this.$lastSel = this.selection.toJSON();\r\n            \r\n            // console.log(this.$lastSel+\"  endOP\")\r\n            this.session.getUndoManager().addSelection(sel);\r\n            this.prevOp = this.curOp;\r\n            this.curOp = null;\r\n        }\r\n    };\r\n\r\n    // TODO use property on commands instead of this\r\n    this.$mergeableCommands = [\"backspace\", \"del\", \"insertstring\"];\r\n    this.$historyTracker = function(e) {\r\n        if (!this.$mergeUndoDeltas)\r\n            return;\r\n\r\n        var prev = this.prevOp;\r\n        var mergeableCommands = this.$mergeableCommands;\r\n        // previous command was the same\r\n        var shouldMerge = prev.command && (e.command.name == prev.command.name);\r\n        if (e.command.name == \"insertstring\") {\r\n            var text = e.args;\r\n            if (this.mergeNextCommand === undefined)\r\n                this.mergeNextCommand = true;\r\n\r\n            shouldMerge = shouldMerge\r\n                && this.mergeNextCommand // previous command allows to coalesce with\r\n                && (!/\\s/.test(text) || /\\s/.test(prev.args)); // previous insertion was of same type\r\n\r\n            this.mergeNextCommand = true;\r\n        } else {\r\n            shouldMerge = shouldMerge\r\n                && mergeableCommands.indexOf(e.command.name) !== -1; // the command is mergeable\r\n        }\r\n\r\n        if (\r\n            this.$mergeUndoDeltas != \"always\"\r\n            && Date.now() - this.sequenceStartTime > 2000\r\n        ) {\r\n            shouldMerge = false; // the sequence is too long\r\n        }\r\n\r\n        if (shouldMerge)\r\n            this.session.mergeUndoDeltas = true;\r\n        else if (mergeableCommands.indexOf(e.command.name) !== -1)\r\n            this.sequenceStartTime = Date.now();\r\n    };\r\n\r\n    /**\r\n     * Sets a new key handler, such as \"vim\" or \"windows\".\r\n     * @param {String} keyboardHandler The new key handler\r\n     *\r\n     **/\r\n    this.setKeyboardHandler = function(keyboardHandler, cb) {\r\n        if (keyboardHandler && typeof keyboardHandler === \"string\" && keyboardHandler != \"ace\") {\r\n            this.$keybindingId = keyboardHandler;\r\n            var _self = this;\r\n            config.loadModule([\"keybinding\", keyboardHandler], function(module) {\r\n                if (_self.$keybindingId == keyboardHandler)\r\n                    _self.keyBinding.setKeyboardHandler(module && module.handler);\r\n                cb && cb();\r\n            });\r\n        } else {\r\n            this.$keybindingId = null;\r\n            this.keyBinding.setKeyboardHandler(keyboardHandler);\r\n            cb && cb();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Returns the keyboard handler, such as \"vim\" or \"windows\".\r\n     *\r\n     * @returns {String}\r\n     *\r\n     **/\r\n    this.getKeyboardHandler = function() {\r\n        return this.keyBinding.getKeyboardHandler();\r\n    };\r\n\r\n\r\n    /**\r\n     * Emitted whenever the [[EditSession]] changes.\r\n     * @event changeSession\r\n     * @param {Object} e An object with two properties, `oldSession` and `session`, that represent the old and new [[EditSession]]s.\r\n     *\r\n     **/\r\n    /**\r\n     * Sets a new editsession to use. This method also emits the `'changeSession'` event.\r\n     * @param {EditSession} session The new session to use\r\n     *\r\n     **/\r\n    this.setSession = function(session) {\r\n        if (this.session == session)\r\n            return;\r\n        \r\n        // make sure operationEnd events are not emitted to wrong session\r\n        if (this.curOp) this.endOperation();\r\n        this.curOp = {};\r\n\r\n        var oldSession = this.session;\r\n        if (oldSession) {\r\n            this.session.off(\"change\", this.$onDocumentChange);\r\n            this.session.off(\"changeMode\", this.$onChangeMode);\r\n            this.session.off(\"tokenizerUpdate\", this.$onTokenizerUpdate);\r\n            this.session.off(\"changeTabSize\", this.$onChangeTabSize);\r\n            this.session.off(\"changeWrapLimit\", this.$onChangeWrapLimit);\r\n            this.session.off(\"changeWrapMode\", this.$onChangeWrapMode);\r\n            this.session.off(\"changeFold\", this.$onChangeFold);\r\n            this.session.off(\"changeFrontMarker\", this.$onChangeFrontMarker);\r\n            this.session.off(\"changeBackMarker\", this.$onChangeBackMarker);\r\n            this.session.off(\"changeBreakpoint\", this.$onChangeBreakpoint);\r\n            this.session.off(\"changeAnnotation\", this.$onChangeAnnotation);\r\n            this.session.off(\"changeOverwrite\", this.$onCursorChange);\r\n            this.session.off(\"changeScrollTop\", this.$onScrollTopChange);\r\n            this.session.off(\"changeScrollLeft\", this.$onScrollLeftChange);\r\n\r\n            var selection = this.session.getSelection();\r\n            selection.off(\"changeCursor\", this.$onCursorChange);\r\n            selection.off(\"changeSelection\", this.$onSelectionChange);\r\n        }\r\n\r\n        this.session = session;\r\n        if (session) {\r\n            this.$onDocumentChange = this.onDocumentChange.bind(this);\r\n            session.on(\"change\", this.$onDocumentChange);\r\n            this.renderer.setSession(session);\r\n    \r\n            this.$onChangeMode = this.onChangeMode.bind(this);\r\n            session.on(\"changeMode\", this.$onChangeMode);\r\n    \r\n            this.$onTokenizerUpdate = this.onTokenizerUpdate.bind(this);\r\n            session.on(\"tokenizerUpdate\", this.$onTokenizerUpdate);\r\n    \r\n            this.$onChangeTabSize = this.renderer.onChangeTabSize.bind(this.renderer);\r\n            session.on(\"changeTabSize\", this.$onChangeTabSize);\r\n    \r\n            this.$onChangeWrapLimit = this.onChangeWrapLimit.bind(this);\r\n            session.on(\"changeWrapLimit\", this.$onChangeWrapLimit);\r\n    \r\n            this.$onChangeWrapMode = this.onChangeWrapMode.bind(this);\r\n            session.on(\"changeWrapMode\", this.$onChangeWrapMode);\r\n    \r\n            this.$onChangeFold = this.onChangeFold.bind(this);\r\n            session.on(\"changeFold\", this.$onChangeFold);\r\n    \r\n            this.$onChangeFrontMarker = this.onChangeFrontMarker.bind(this);\r\n            this.session.on(\"changeFrontMarker\", this.$onChangeFrontMarker);\r\n    \r\n            this.$onChangeBackMarker = this.onChangeBackMarker.bind(this);\r\n            this.session.on(\"changeBackMarker\", this.$onChangeBackMarker);\r\n    \r\n            this.$onChangeBreakpoint = this.onChangeBreakpoint.bind(this);\r\n            this.session.on(\"changeBreakpoint\", this.$onChangeBreakpoint);\r\n    \r\n            this.$onChangeAnnotation = this.onChangeAnnotation.bind(this);\r\n            this.session.on(\"changeAnnotation\", this.$onChangeAnnotation);\r\n    \r\n            this.$onCursorChange = this.onCursorChange.bind(this);\r\n            this.session.on(\"changeOverwrite\", this.$onCursorChange);\r\n    \r\n            this.$onScrollTopChange = this.onScrollTopChange.bind(this);\r\n            this.session.on(\"changeScrollTop\", this.$onScrollTopChange);\r\n    \r\n            this.$onScrollLeftChange = this.onScrollLeftChange.bind(this);\r\n            this.session.on(\"changeScrollLeft\", this.$onScrollLeftChange);\r\n    \r\n            this.selection = session.getSelection();\r\n            this.selection.on(\"changeCursor\", this.$onCursorChange);\r\n    \r\n            this.$onSelectionChange = this.onSelectionChange.bind(this);\r\n            this.selection.on(\"changeSelection\", this.$onSelectionChange);\r\n    \r\n            this.onChangeMode();\r\n    \r\n            this.onCursorChange();\r\n    \r\n            this.onScrollTopChange();\r\n            this.onScrollLeftChange();\r\n            this.onSelectionChange();\r\n            this.onChangeFrontMarker();\r\n            this.onChangeBackMarker();\r\n            this.onChangeBreakpoint();\r\n            this.onChangeAnnotation();\r\n            this.session.getUseWrapMode() && this.renderer.adjustWrapLimit();\r\n            this.renderer.updateFull();\r\n        } else {\r\n            this.selection = null;\r\n            this.renderer.setSession(session);\r\n        }\r\n\r\n        this._signal(\"changeSession\", {\r\n            session: session,\r\n            oldSession: oldSession\r\n        });\r\n        \r\n        this.curOp = null;\r\n        \r\n        oldSession && oldSession._signal(\"changeEditor\", {oldEditor: this});\r\n        session && session._signal(\"changeEditor\", {editor: this});\r\n        \r\n        if (session && session.bgTokenizer)\r\n            session.bgTokenizer.scheduleStart();\r\n    };\r\n\r\n    /**\r\n     * Returns the current session being used.\r\n     * @returns {EditSession}\r\n     **/\r\n    this.getSession = function() {\r\n        return this.session;\r\n    };\r\n\r\n    /**\r\n     * Sets the current document to `val`.\r\n     * @param {String} val The new value to set for the document\r\n     * @param {Number} cursorPos Where to set the new value. `undefined` or 0 is selectAll, -1 is at the document start, and 1 is at the end\r\n     *\r\n     * @returns {String} The current document value\r\n     * @related Document.setValue\r\n     **/\r\n    this.setValue = function(val, cursorPos) {\r\n        this.session.doc.setValue(val);\r\n\r\n        if (!cursorPos)\r\n            this.selectAll();\r\n        else if (cursorPos == 1)\r\n            this.navigateFileEnd();\r\n        else if (cursorPos == -1)\r\n            this.navigateFileStart();\r\n\r\n        return val;\r\n    };\r\n\r\n    /**\r\n     * Returns the current session's content.\r\n     *\r\n     * @returns {String}\r\n     * @related EditSession.getValue\r\n     **/\r\n    this.getValue = function() {\r\n        return this.session.getValue();\r\n    };\r\n\r\n    /**\r\n     *\r\n     * Returns the currently highlighted selection.\r\n     * @returns {Selection} The selection object\r\n     **/\r\n    this.getSelection = function() {\r\n        return this.selection;\r\n    };\r\n\r\n    /**\r\n     * {:VirtualRenderer.onResize}\r\n     * @param {Boolean} force If `true`, recomputes the size, even if the height and width haven't changed\r\n     *\r\n     *\r\n     * @related VirtualRenderer.onResize\r\n     **/\r\n    this.resize = function(force) {\r\n        this.renderer.onResize(force);\r\n    };\r\n\r\n    /**\r\n     * {:VirtualRenderer.setTheme}\r\n     * @param {String} theme The path to a theme\r\n     * @param {Function} cb optional callback called when theme is loaded\r\n     **/\r\n    this.setTheme = function(theme, cb) {\r\n        this.renderer.setTheme(theme, cb);\r\n    };\r\n\r\n    /**\r\n     * {:VirtualRenderer.getTheme}\r\n     *\r\n     * @returns {String} The set theme\r\n     * @related VirtualRenderer.getTheme\r\n     **/\r\n    this.getTheme = function() {\r\n        return this.renderer.getTheme();\r\n    };\r\n\r\n    /**\r\n     * {:VirtualRenderer.setStyle}\r\n     * @param {String} style A class name\r\n     *\r\n     *\r\n     * @related VirtualRenderer.setStyle\r\n     **/\r\n    this.setStyle = function(style) {\r\n        this.renderer.setStyle(style);\r\n    };\r\n\r\n    /**\r\n     * {:VirtualRenderer.unsetStyle}\r\n     * @related VirtualRenderer.unsetStyle\r\n     **/\r\n    this.unsetStyle = function(style) {\r\n        this.renderer.unsetStyle(style);\r\n    };\r\n\r\n    /**\r\n     * Gets the current font size of the editor text.\r\n     */\r\n    this.getFontSize = function () {\r\n        return this.getOption(\"fontSize\") ||\r\n           dom.computedStyle(this.container).fontSize;\r\n    };\r\n\r\n    /**\r\n     * Set a new font size (in pixels) for the editor text.\r\n     * @param {String} size A font size ( _e.g._ \"12px\")\r\n     *\r\n     *\r\n     **/\r\n    this.setFontSize = function(size) {\r\n        this.setOption(\"fontSize\", size);\r\n    };\r\n\r\n    this.$highlightBrackets = function() {\r\n        if (this.session.$bracketHighlight) {\r\n            this.session.removeMarker(this.session.$bracketHighlight);\r\n            this.session.$bracketHighlight = null;\r\n        }\r\n\r\n        if (this.$highlightPending) {\r\n            return;\r\n        }\r\n\r\n        // perform highlight async to not block the browser during navigation\r\n        var self = this;\r\n        this.$highlightPending = true;\r\n        setTimeout(function() {\r\n            self.$highlightPending = false;\r\n            var session = self.session;\r\n            if (!session || !session.bgTokenizer) return;\r\n            var pos = session.findMatchingBracket(self.getCursorPosition());\r\n            if (pos) {\r\n                var range = new Range(pos.row, pos.column, pos.row, pos.column + 1);\r\n            } else if (session.$mode.getMatching) {\r\n                var range = session.$mode.getMatching(self.session);\r\n            }\r\n            if (range)\r\n                session.$bracketHighlight = session.addMarker(range, \"ace_bracket\", \"text\");\r\n        }, 50);\r\n    };\r\n\r\n    // todo: move to mode.getMatching\r\n    this.$highlightTags = function() {\r\n        if (this.$highlightTagPending)\r\n            return;\r\n\r\n        // perform highlight async to not block the browser during navigation\r\n        var self = this;\r\n        this.$highlightTagPending = true;\r\n        setTimeout(function() {\r\n            self.$highlightTagPending = false;\r\n            \r\n            var session = self.session;\r\n            if (!session || !session.bgTokenizer) return;\r\n            \r\n            var pos = self.getCursorPosition();\r\n            var iterator = new TokenIterator(self.session, pos.row, pos.column);\r\n            var token = iterator.getCurrentToken();\r\n            \r\n            if (!token || !/\\b(?:tag-open|tag-name)/.test(token.type)) {\r\n                session.removeMarker(session.$tagHighlight);\r\n                session.$tagHighlight = null;\r\n                return;\r\n            }\r\n            \r\n            if (token.type.indexOf(\"tag-open\") != -1) {\r\n                token = iterator.stepForward();\r\n                if (!token)\r\n                    return;\r\n            }\r\n            \r\n            var tag = token.value;\r\n            var depth = 0;\r\n            var prevToken = iterator.stepBackward();\r\n            \r\n            if (prevToken.value == '<'){\r\n                //find closing tag\r\n                do {\r\n                    prevToken = token;\r\n                    token = iterator.stepForward();\r\n                    \r\n                    if (token && token.value === tag && token.type.indexOf('tag-name') !== -1) {\r\n                        if (prevToken.value === '<'){\r\n                            depth++;\r\n                        } else if (prevToken.value === '</'){\r\n                            depth--;\r\n                        }\r\n                    }\r\n                    \r\n                } while (token && depth >= 0);\r\n            } else {\r\n                //find opening tag\r\n                do {\r\n                    token = prevToken;\r\n                    prevToken = iterator.stepBackward();\r\n                    \r\n                    if (token && token.value === tag && token.type.indexOf('tag-name') !== -1) {\r\n                        if (prevToken.value === '<') {\r\n                            depth++;\r\n                        } else if (prevToken.value === '</') {\r\n                            depth--;\r\n                        }\r\n                    }\r\n                } while (prevToken && depth <= 0);\r\n                \r\n                //select tag again\r\n                iterator.stepForward();\r\n            }\r\n            \r\n            if (!token) {\r\n                session.removeMarker(session.$tagHighlight);\r\n                session.$tagHighlight = null;\r\n                return;\r\n            }\r\n            \r\n            var row = iterator.getCurrentTokenRow();\r\n            var column = iterator.getCurrentTokenColumn();\r\n            var range = new Range(row, column, row, column+token.value.length);\r\n            \r\n            //remove range if different\r\n            var sbm = session.$backMarkers[session.$tagHighlight];\r\n            if (session.$tagHighlight && sbm != undefined && range.compareRange(sbm.range) !== 0) {\r\n                session.removeMarker(session.$tagHighlight);\r\n                session.$tagHighlight = null;\r\n            }\r\n            \r\n            if (!session.$tagHighlight)\r\n                session.$tagHighlight = session.addMarker(range, \"ace_bracket\", \"text\");\r\n        }, 50);\r\n    };\r\n\r\n    /**\r\n     *\r\n     * Brings the current `textInput` into focus.\r\n     **/\r\n    this.focus = function() {\r\n        // focusing after timeout is not needed now, but some code using ace\r\n        // depends on being able to call focus when textarea is not visible, \r\n        // so to keep backwards compatibility we keep this until the next major release\r\n        var _self = this;\r\n        setTimeout(function() {\r\n            if (!_self.isFocused())\r\n                _self.textInput.focus();\r\n        });\r\n        this.textInput.focus();\r\n    };\r\n\r\n    /**\r\n     * Returns `true` if the current `textInput` is in focus.\r\n     * @return {Boolean}\r\n     **/\r\n    this.isFocused = function() {\r\n        return this.textInput.isFocused();\r\n    };\r\n\r\n    /**\r\n     *\r\n     * Blurs the current `textInput`.\r\n     **/\r\n    this.blur = function() {\r\n        this.textInput.blur();\r\n    };\r\n\r\n    /**\r\n     * Emitted once the editor comes into focus.\r\n     * @event focus\r\n     *\r\n     *\r\n     **/\r\n    this.onFocus = function(e) {\r\n        if (this.$isFocused)\r\n            return;\r\n        this.$isFocused = true;\r\n        this.renderer.showCursor();\r\n        this.renderer.visualizeFocus();\r\n        this._emit(\"focus\", e);\r\n    };\r\n\r\n    /**\r\n     * Emitted once the editor has been blurred.\r\n     * @event blur\r\n     *\r\n     *\r\n     **/\r\n    this.onBlur = function(e) {\r\n        if (!this.$isFocused)\r\n            return;\r\n        this.$isFocused = false;\r\n        this.renderer.hideCursor();\r\n        this.renderer.visualizeBlur();\r\n        this._emit(\"blur\", e);\r\n    };\r\n\r\n    this.$cursorChange = function() {\r\n        this.renderer.updateCursor();\r\n    };\r\n\r\n    /**\r\n     * Emitted whenever the document is changed.\r\n     * @event change\r\n     * @param {Object} e Contains a single property, `data`, which has the delta of changes\r\n     *\r\n     *\r\n     *\r\n     **/\r\n    this.onDocumentChange = function(delta) {\r\n        // Rerender and emit \"change\" event.\r\n        var wrap = this.session.$useWrapMode;\r\n        var lastRow = (delta.start.row == delta.end.row ? delta.end.row : Infinity);\r\n        this.renderer.updateLines(delta.start.row, lastRow, wrap);\r\n\r\n        this._signal(\"change\", delta);\r\n        \r\n        // Update cursor because tab characters can influence the cursor position.\r\n        this.$cursorChange();\r\n        this.$updateHighlightActiveLine();\r\n    };\r\n\r\n    this.onTokenizerUpdate = function(e) {\r\n        var rows = e.data;\r\n        this.renderer.updateLines(rows.first, rows.last);\r\n    };\r\n\r\n\r\n    this.onScrollTopChange = function() {\r\n        this.renderer.scrollToY(this.session.getScrollTop());\r\n    };\r\n\r\n    this.onScrollLeftChange = function() {\r\n        this.renderer.scrollToX(this.session.getScrollLeft());\r\n    };\r\n\r\n    /**\r\n     * Emitted when the selection changes.\r\n     *\r\n     **/\r\n    this.onCursorChange = function() {\r\n        this.$cursorChange();\r\n\r\n        this.$highlightBrackets();\r\n        this.$highlightTags();\r\n        this.$updateHighlightActiveLine();\r\n        this._signal(\"changeSelection\");\r\n    };\r\n\r\n    this.$updateHighlightActiveLine = function() {\r\n        var session = this.getSession();\r\n\r\n        var highlight;\r\n        if (this.$highlightActiveLine) {\r\n            if (this.$selectionStyle != \"line\" || !this.selection.isMultiLine())\r\n                highlight = this.getCursorPosition();\r\n            if (this.renderer.theme && this.renderer.theme.$selectionColorConflict && !this.selection.isEmpty())\r\n                highlight = false;\r\n            if (this.renderer.$maxLines && this.session.getLength() === 1 && !(this.renderer.$minLines > 1))\r\n                highlight = false;\r\n        }\r\n\r\n        if (session.$highlightLineMarker && !highlight) {\r\n            session.removeMarker(session.$highlightLineMarker.id);\r\n            session.$highlightLineMarker = null;\r\n        } else if (!session.$highlightLineMarker && highlight) {\r\n            var range = new Range(highlight.row, highlight.column, highlight.row, Infinity);\r\n            range.id = session.addMarker(range, \"ace_active-line\", \"screenLine\");\r\n            session.$highlightLineMarker = range;\r\n        } else if (highlight) {\r\n            session.$highlightLineMarker.start.row = highlight.row;\r\n            session.$highlightLineMarker.end.row = highlight.row;\r\n            session.$highlightLineMarker.start.column = highlight.column;\r\n            session._signal(\"changeBackMarker\");\r\n        }\r\n    };\r\n\r\n    this.onSelectionChange = function(e) {\r\n        var session = this.session;\r\n\r\n        if (session.$selectionMarker) {\r\n            session.removeMarker(session.$selectionMarker);\r\n        }\r\n        session.$selectionMarker = null;\r\n\r\n        if (!this.selection.isEmpty()) {\r\n            var range = this.selection.getRange();\r\n            var style = this.getSelectionStyle();\r\n            session.$selectionMarker = session.addMarker(range, \"ace_selection\", style);\r\n        } else {\r\n            this.$updateHighlightActiveLine();\r\n        }\r\n\r\n        var re = this.$highlightSelectedWord && this.$getSelectionHighLightRegexp();\r\n        this.session.highlight(re);\r\n\r\n        this._signal(\"changeSelection\");\r\n    };\r\n\r\n    this.$getSelectionHighLightRegexp = function() {\r\n        var session = this.session;\r\n\r\n        var selection = this.getSelectionRange();\r\n        if (selection.isEmpty() || selection.isMultiLine())\r\n            return;\r\n\r\n        var startColumn = selection.start.column;\r\n        var endColumn = selection.end.column;\r\n        var line = session.getLine(selection.start.row);\r\n        \r\n        var needle = line.substring(startColumn, endColumn);\r\n        // maximum allowed size for regular expressions in 32000, \r\n        // but getting close to it has significant impact on the performance\r\n        if (needle.length > 5000 || !/[\\w\\d]/.test(needle))\r\n            return;\r\n\r\n        var re = this.$search.$assembleRegExp({\r\n            wholeWord: true,\r\n            caseSensitive: true,\r\n            needle: needle\r\n        });\r\n        \r\n        var wordWithBoundary = line.substring(startColumn - 1, endColumn + 1);\r\n        if (!re.test(wordWithBoundary))\r\n            return;\r\n        \r\n        return re;\r\n    };\r\n\r\n\r\n    this.onChangeFrontMarker = function() {\r\n        this.renderer.updateFrontMarkers();\r\n    };\r\n\r\n    this.onChangeBackMarker = function() {\r\n        this.renderer.updateBackMarkers();\r\n    };\r\n\r\n\r\n    this.onChangeBreakpoint = function() {\r\n        this.renderer.updateBreakpoints();\r\n    };\r\n\r\n    this.onChangeAnnotation = function() {\r\n        this.renderer.setAnnotations(this.session.getAnnotations());\r\n    };\r\n\r\n\r\n    this.onChangeMode = function(e) {\r\n        this.renderer.updateText();\r\n        this._emit(\"changeMode\", e);\r\n    };\r\n\r\n\r\n    this.onChangeWrapLimit = function() {\r\n        this.renderer.updateFull();\r\n    };\r\n\r\n    this.onChangeWrapMode = function() {\r\n        this.renderer.onResize(true);\r\n    };\r\n\r\n\r\n    this.onChangeFold = function() {\r\n        // Update the active line marker as due to folding changes the current\r\n        // line range on the screen might have changed.\r\n        this.$updateHighlightActiveLine();\r\n        // TODO: This might be too much updating. Okay for now.\r\n        this.renderer.updateFull();\r\n    };\r\n\r\n    \r\n    /**\r\n     * Returns the string of text currently highlighted.\r\n     * @returns {String}\r\n     **/\r\n    this.getSelectedText = function() {\r\n        return this.session.getTextRange(this.getSelectionRange());\r\n    };\r\n    \r\n    /**\r\n     * Emitted when text is copied.\r\n     * @event copy\r\n     * @param {String} text The copied text\r\n     *\r\n     **/\r\n    /**\r\n     * Returns the string of text currently highlighted.\r\n     * @returns {String}\r\n     **/\r\n    this.getCopyText = function() {\r\n        var text = this.getSelectedText();\r\n        var nl = this.session.doc.getNewLineCharacter();\r\n        var copyLine= false;\r\n        if (!text && this.$copyWithEmptySelection) {\r\n            copyLine = true;\r\n            var ranges = this.selection.getAllRanges();\r\n            for (var i = 0; i < ranges.length; i++) {\r\n                var range = ranges[i];\r\n                if (i && ranges[i - 1].start.row == range.start.row)\r\n                    continue;\r\n                text += this.session.getLine(range.start.row) + nl;\r\n            }\r\n        }\r\n        var e = {text: text};\r\n        this._signal(\"copy\", e);\r\n        clipboard.lineMode = copyLine ? e.text : \"\";\r\n        return e.text;\r\n    };\r\n\r\n    /**\r\n     * Called whenever a text \"copy\" happens.\r\n     **/\r\n    this.onCopy = function() {\r\n        this.commands.exec(\"copy\", this);\r\n    };\r\n\r\n    /**\r\n     * Called whenever a text \"cut\" happens.\r\n     **/\r\n    this.onCut = function() {\r\n        this.commands.exec(\"cut\", this);\r\n    };\r\n\r\n    /**\r\n     * Emitted when text is pasted.\r\n     * @event paste\r\n     * @param {Object} an object which contains one property, `text`, that represents the text to be pasted. Editing this property will alter the text that is pasted.\r\n     *\r\n     *\r\n     **/\r\n    /**\r\n     * Called whenever a text \"paste\" happens.\r\n     * @param {String} text The pasted text\r\n     *\r\n     *\r\n     **/\r\n    this.onPaste = function(text, event) {\r\n        var e = {text: text, event: event};\r\n        this.commands.exec(\"paste\", this, e);\r\n    };\r\n    \r\n    this.$handlePaste = function(e) {\r\n        if (typeof e == \"string\") \r\n            e = {text: e};\r\n        this._signal(\"paste\", e);\r\n        var text = e.text;\r\n\r\n        var lineMode = text == clipboard.lineMode;\r\n        var session = this.session;\r\n        if (!this.inMultiSelectMode || this.inVirtualSelectionMode) {\r\n            if (lineMode)\r\n                session.insert({ row: this.selection.lead.row, column: 0 }, text);\r\n            else\r\n                this.insert(text);\r\n        } else if (lineMode) {\r\n            this.selection.rangeList.ranges.forEach(function(range) {\r\n                session.insert({ row: range.start.row, column: 0 }, text);\r\n            });\r\n        } else {\r\n            var lines = text.split(/\\r\\n|\\r|\\n/);\r\n            var ranges = this.selection.rangeList.ranges;\r\n    \r\n            if (lines.length > ranges.length || lines.length < 2 || !lines[1])\r\n                return this.commands.exec(\"insertstring\", this, text);\r\n    \r\n            for (var i = ranges.length; i--;) {\r\n                var range = ranges[i];\r\n                if (!range.isEmpty())\r\n                    session.remove(range);\r\n    \r\n                session.insert(range.start, lines[i]);\r\n            }\r\n        }\r\n    };\r\n\r\n    this.execCommand = function(command, args) {\r\n        return this.commands.exec(command, this, args);\r\n    };\r\n\r\n    /**\r\n     * Inserts `text` into wherever the cursor is pointing.\r\n     * @param {String} text The new text to add\r\n     *\r\n     **/\r\n    this.insert = function(text, pasted) {\r\n        var session = this.session;\r\n        var mode = session.getMode();\r\n        var cursor = this.getCursorPosition();\r\n\r\n        if (this.getBehavioursEnabled() && !pasted) {\r\n            // Get a transform if the current mode wants one.\r\n            var transform = mode.transformAction(session.getState(cursor.row), 'insertion', this, session, text);\r\n            if (transform) {\r\n                if (text !== transform.text) {\r\n                    // keep automatic insertion in a separate delta, unless it is in multiselect mode\r\n                    if (!this.inVirtualSelectionMode) {\r\n                        this.session.mergeUndoDeltas = false;\r\n                        this.mergeNextCommand = false;\r\n                    }\r\n                }\r\n                text = transform.text;\r\n\r\n            }\r\n        }\r\n        \r\n        if (text == \"\\t\")\r\n            text = this.session.getTabString();\r\n\r\n        // remove selected text\r\n        if (!this.selection.isEmpty()) {\r\n            var range = this.getSelectionRange();\r\n            cursor = this.session.remove(range);\r\n            this.clearSelection();\r\n        }\r\n        else if (this.session.getOverwrite() && text.indexOf(\"\\n\") == -1) {\r\n            var range = new Range.fromPoints(cursor, cursor);\r\n            range.end.column += text.length;\r\n            this.session.remove(range);\r\n        }\r\n\r\n        if (text == \"\\n\" || text == \"\\r\\n\") {\r\n            var line = session.getLine(cursor.row);\r\n            if (cursor.column > line.search(/\\S|$/)) {\r\n                var d = line.substr(cursor.column).search(/\\S|$/);\r\n                session.doc.removeInLine(cursor.row, cursor.column, cursor.column + d);\r\n            }\r\n        }\r\n        this.clearSelection();\r\n\r\n        var start = cursor.column;\r\n        var lineState = session.getState(cursor.row);\r\n        var line = session.getLine(cursor.row);\r\n        var shouldOutdent = mode.checkOutdent(lineState, line, text);\r\n        var end = session.insert(cursor, text);\r\n\r\n        if (transform && transform.selection) {\r\n            if (transform.selection.length == 2) { // Transform relative to the current column\r\n                this.selection.setSelectionRange(\r\n                    new Range(cursor.row, start + transform.selection[0],\r\n                              cursor.row, start + transform.selection[1]));\r\n            } else { // Transform relative to the current row.\r\n                this.selection.setSelectionRange(\r\n                    new Range(cursor.row + transform.selection[0],\r\n                              transform.selection[1],\r\n                              cursor.row + transform.selection[2],\r\n                              transform.selection[3]));\r\n            }\r\n        }\r\n\r\n        if (session.getDocument().isNewLine(text)) {\r\n            var lineIndent = mode.getNextLineIndent(lineState, line.slice(0, cursor.column), session.getTabString());\r\n\r\n            session.insert({row: cursor.row+1, column: 0}, lineIndent);\r\n        }\r\n        if (shouldOutdent)\r\n            mode.autoOutdent(lineState, session, cursor.row);\r\n    };\r\n\r\n    this.onTextInput = function(text, composition) {\r\n        if (!composition)\r\n            return this.keyBinding.onTextInput(text);\r\n        \r\n        this.startOperation({command: { name: \"insertstring\" }});\r\n        var applyComposition = this.applyComposition.bind(this, text, composition);\r\n        if (this.selection.rangeCount)\r\n            this.forEachSelection(applyComposition);\r\n        else\r\n            applyComposition();\r\n        this.endOperation();\r\n    };\r\n    \r\n    this.applyComposition = function(text, composition) {\r\n        if (composition.extendLeft || composition.extendRight) {\r\n            var r = this.selection.getRange();\r\n            r.start.column -= composition.extendLeft;\r\n            r.end.column += composition.extendRight;\r\n            this.selection.setRange(r);\r\n            if (!text && !r.isEmpty())\r\n                this.remove();\r\n        }\r\n        if (text || !this.selection.isEmpty())\r\n            this.insert(text, true);\r\n        if (composition.restoreStart || composition.restoreEnd) {\r\n            var r = this.selection.getRange();\r\n            r.start.column -= composition.restoreStart;\r\n            r.end.column -= composition.restoreEnd;\r\n            this.selection.setRange(r);\r\n        }\r\n    };\r\n\r\n    this.onCommandKey = function(e, hashId, keyCode) {\r\n        this.keyBinding.onCommandKey(e, hashId, keyCode);\r\n    };\r\n\r\n    /**\r\n     * Pass in `true` to enable overwrites in your session, or `false` to disable. If overwrites is enabled, any text you enter will type over any text after it. If the value of `overwrite` changes, this function also emits the `changeOverwrite` event.\r\n     * @param {Boolean} overwrite Defines whether or not to set overwrites\r\n     *\r\n     *\r\n     * @related EditSession.setOverwrite\r\n     **/\r\n    this.setOverwrite = function(overwrite) {\r\n        this.session.setOverwrite(overwrite);\r\n    };\r\n\r\n    /**\r\n     * Returns `true` if overwrites are enabled; `false` otherwise.\r\n     * @returns {Boolean}\r\n     * @related EditSession.getOverwrite\r\n     **/\r\n    this.getOverwrite = function() {\r\n        return this.session.getOverwrite();\r\n    };\r\n\r\n    /**\r\n     * Sets the value of overwrite to the opposite of whatever it currently is.\r\n     * @related EditSession.toggleOverwrite\r\n     **/\r\n    this.toggleOverwrite = function() {\r\n        this.session.toggleOverwrite();\r\n    };\r\n\r\n    /**\r\n     * Sets how fast the mouse scrolling should do.\r\n     * @param {Number} speed A value indicating the new speed (in milliseconds)\r\n     **/\r\n    this.setScrollSpeed = function(speed) {\r\n        this.setOption(\"scrollSpeed\", speed);\r\n    };\r\n\r\n    /**\r\n     * Returns the value indicating how fast the mouse scroll speed is (in milliseconds).\r\n     * @returns {Number}\r\n     **/\r\n    this.getScrollSpeed = function() {\r\n        return this.getOption(\"scrollSpeed\");\r\n    };\r\n\r\n    /**\r\n     * Sets the delay (in milliseconds) of the mouse drag.\r\n     * @param {Number} dragDelay A value indicating the new delay\r\n     **/\r\n    this.setDragDelay = function(dragDelay) {\r\n        this.setOption(\"dragDelay\", dragDelay);\r\n    };\r\n\r\n    /**\r\n     * Returns the current mouse drag delay.\r\n     * @returns {Number}\r\n     **/\r\n    this.getDragDelay = function() {\r\n        return this.getOption(\"dragDelay\");\r\n    };\r\n\r\n    /**\r\n     * Emitted when the selection style changes, via [[Editor.setSelectionStyle]].\r\n     * @event changeSelectionStyle\r\n     * @param {Object} data Contains one property, `data`, which indicates the new selection style\r\n     **/\r\n    /**\r\n     * Draw selection markers spanning whole line, or only over selected text. Default value is \"line\"\r\n     * @param {String} style The new selection style \"line\"|\"text\"\r\n     *\r\n     **/\r\n    this.setSelectionStyle = function(val) {\r\n        this.setOption(\"selectionStyle\", val);\r\n    };\r\n\r\n    /**\r\n     * Returns the current selection style.\r\n     * @returns {String}\r\n     **/\r\n    this.getSelectionStyle = function() {\r\n        return this.getOption(\"selectionStyle\");\r\n    };\r\n\r\n    /**\r\n     * Determines whether or not the current line should be highlighted.\r\n     * @param {Boolean} shouldHighlight Set to `true` to highlight the current line\r\n     **/\r\n    this.setHighlightActiveLine = function(shouldHighlight) {\r\n        this.setOption(\"highlightActiveLine\", shouldHighlight);\r\n    };\r\n    /**\r\n     * Returns `true` if current lines are always highlighted.\r\n     * @return {Boolean}\r\n     **/\r\n    this.getHighlightActiveLine = function() {\r\n        return this.getOption(\"highlightActiveLine\");\r\n    };\r\n    this.setHighlightGutterLine = function(shouldHighlight) {\r\n        this.setOption(\"highlightGutterLine\", shouldHighlight);\r\n    };\r\n\r\n    this.getHighlightGutterLine = function() {\r\n        return this.getOption(\"highlightGutterLine\");\r\n    };\r\n\r\n    /**\r\n     * Determines if the currently selected word should be highlighted.\r\n     * @param {Boolean} shouldHighlight Set to `true` to highlight the currently selected word\r\n     *\r\n     **/\r\n    this.setHighlightSelectedWord = function(shouldHighlight) {\r\n        this.setOption(\"highlightSelectedWord\", shouldHighlight);\r\n    };\r\n\r\n    /**\r\n     * Returns `true` if currently highlighted words are to be highlighted.\r\n     * @returns {Boolean}\r\n     **/\r\n    this.getHighlightSelectedWord = function() {\r\n        return this.$highlightSelectedWord;\r\n    };\r\n\r\n    this.setAnimatedScroll = function(shouldAnimate){\r\n        this.renderer.setAnimatedScroll(shouldAnimate);\r\n    };\r\n\r\n    this.getAnimatedScroll = function(){\r\n        return this.renderer.getAnimatedScroll();\r\n    };\r\n\r\n    /**\r\n     * If `showInvisibles` is set to `true`, invisible characters&mdash;like spaces or new lines&mdash;are show in the editor.\r\n     * @param {Boolean} showInvisibles Specifies whether or not to show invisible characters\r\n     *\r\n     **/\r\n    this.setShowInvisibles = function(showInvisibles) {\r\n        this.renderer.setShowInvisibles(showInvisibles);\r\n    };\r\n\r\n    /**\r\n     * Returns `true` if invisible characters are being shown.\r\n     * @returns {Boolean}\r\n     **/\r\n    this.getShowInvisibles = function() {\r\n        return this.renderer.getShowInvisibles();\r\n    };\r\n\r\n    this.setDisplayIndentGuides = function(display) {\r\n        this.renderer.setDisplayIndentGuides(display);\r\n    };\r\n\r\n    this.getDisplayIndentGuides = function() {\r\n        return this.renderer.getDisplayIndentGuides();\r\n    };\r\n\r\n    /**\r\n     * If `showPrintMargin` is set to `true`, the print margin is shown in the editor.\r\n     * @param {Boolean} showPrintMargin Specifies whether or not to show the print margin\r\n     *\r\n     **/\r\n    this.setShowPrintMargin = function(showPrintMargin) {\r\n        this.renderer.setShowPrintMargin(showPrintMargin);\r\n    };\r\n\r\n    /**\r\n     * Returns `true` if the print margin is being shown.\r\n     * @returns {Boolean}\r\n     **/\r\n    this.getShowPrintMargin = function() {\r\n        return this.renderer.getShowPrintMargin();\r\n    };\r\n\r\n    /**\r\n     * Sets the column defining where the print margin should be.\r\n     * @param {Number} showPrintMargin Specifies the new print margin\r\n     *\r\n     **/\r\n    this.setPrintMarginColumn = function(showPrintMargin) {\r\n        this.renderer.setPrintMarginColumn(showPrintMargin);\r\n    };\r\n\r\n    /**\r\n     * Returns the column number of where the print margin is.\r\n     * @returns {Number}\r\n     **/\r\n    this.getPrintMarginColumn = function() {\r\n        return this.renderer.getPrintMarginColumn();\r\n    };\r\n\r\n    /**\r\n     * If `readOnly` is true, then the editor is set to read-only mode, and none of the content can change.\r\n     * @param {Boolean} readOnly Specifies whether the editor can be modified or not\r\n     *\r\n     **/\r\n    this.setReadOnly = function(readOnly) {\r\n        this.setOption(\"readOnly\", readOnly);\r\n    };\r\n\r\n    /**\r\n     * Returns `true` if the editor is set to read-only mode.\r\n     * @returns {Boolean}\r\n     **/\r\n    this.getReadOnly = function() {\r\n        return this.getOption(\"readOnly\");\r\n    };\r\n\r\n    /**\r\n     * Specifies whether to use behaviors or not. [\"Behaviors\" in this case is the auto-pairing of special characters, like quotation marks, parenthesis, or brackets.]{: #BehaviorsDef}\r\n     * @param {Boolean} enabled Enables or disables behaviors\r\n     *\r\n     **/\r\n    this.setBehavioursEnabled = function (enabled) {\r\n        this.setOption(\"behavioursEnabled\", enabled);\r\n    };\r\n\r\n    /**\r\n     * Returns `true` if the behaviors are currently enabled. {:BehaviorsDef}\r\n     *\r\n     * @returns {Boolean}\r\n     **/\r\n    this.getBehavioursEnabled = function () {\r\n        return this.getOption(\"behavioursEnabled\");\r\n    };\r\n\r\n    /**\r\n     * Specifies whether to use wrapping behaviors or not, i.e. automatically wrapping the selection with characters such as brackets\r\n     * when such a character is typed in.\r\n     * @param {Boolean} enabled Enables or disables wrapping behaviors\r\n     *\r\n     **/\r\n    this.setWrapBehavioursEnabled = function (enabled) {\r\n        this.setOption(\"wrapBehavioursEnabled\", enabled);\r\n    };\r\n\r\n    /**\r\n     * Returns `true` if the wrapping behaviors are currently enabled.\r\n     **/\r\n    this.getWrapBehavioursEnabled = function () {\r\n        return this.getOption(\"wrapBehavioursEnabled\");\r\n    };\r\n\r\n    /**\r\n     * Indicates whether the fold widgets should be shown or not.\r\n     * @param {Boolean} show Specifies whether the fold widgets are shown\r\n     **/\r\n    this.setShowFoldWidgets = function(show) {\r\n        this.setOption(\"showFoldWidgets\", show);\r\n\r\n    };\r\n    /**\r\n     * Returns `true` if the fold widgets are shown.\r\n     * @return {Boolean}\r\n     **/\r\n    this.getShowFoldWidgets = function() {\r\n        return this.getOption(\"showFoldWidgets\");\r\n    };\r\n\r\n    this.setFadeFoldWidgets = function(fade) {\r\n        this.setOption(\"fadeFoldWidgets\", fade);\r\n    };\r\n\r\n    this.getFadeFoldWidgets = function() {\r\n        return this.getOption(\"fadeFoldWidgets\");\r\n    };\r\n\r\n    /**\r\n     * Removes the current selection or one character.\r\n     * @param {String} dir The direction of the deletion to occur, either \"left\" or \"right\"\r\n     *\r\n     **/\r\n    this.remove = function(dir) {\r\n        if (this.selection.isEmpty()){\r\n            if (dir == \"left\")\r\n                this.selection.selectLeft();\r\n            else\r\n                this.selection.selectRight();\r\n        }\r\n\r\n        var range = this.getSelectionRange();\r\n        if (this.getBehavioursEnabled()) {\r\n            var session = this.session;\r\n            var state = session.getState(range.start.row);\r\n            var new_range = session.getMode().transformAction(state, 'deletion', this, session, range);\r\n\r\n            if (range.end.column === 0) {\r\n                var text = session.getTextRange(range);\r\n                if (text[text.length - 1] == \"\\n\") {\r\n                    var line = session.getLine(range.end.row);\r\n                    if (/^\\s+$/.test(line)) {\r\n                        range.end.column = line.length;\r\n                    }\r\n                }\r\n            }\r\n            if (new_range)\r\n                range = new_range;\r\n        }\r\n\r\n        this.session.remove(range);\r\n        this.clearSelection();\r\n    };\r\n\r\n    /**\r\n     * Removes the word directly to the right of the current selection.\r\n     **/\r\n    this.removeWordRight = function() {\r\n        if (this.selection.isEmpty())\r\n            this.selection.selectWordRight();\r\n\r\n        this.session.remove(this.getSelectionRange());\r\n        this.clearSelection();\r\n    };\r\n\r\n    /**\r\n     * Removes the word directly to the left of the current selection.\r\n     **/\r\n    this.removeWordLeft = function() {\r\n        if (this.selection.isEmpty())\r\n            this.selection.selectWordLeft();\r\n\r\n        this.session.remove(this.getSelectionRange());\r\n        this.clearSelection();\r\n    };\r\n\r\n    /**\r\n     * Removes all the words to the left of the current selection, until the start of the line.\r\n     **/\r\n    this.removeToLineStart = function() {\r\n        if (this.selection.isEmpty())\r\n            this.selection.selectLineStart();\r\n        if (this.selection.isEmpty())\r\n            this.selection.selectLeft();\r\n        this.session.remove(this.getSelectionRange());\r\n        this.clearSelection();\r\n    };\r\n\r\n    /**\r\n     * Removes all the words to the right of the current selection, until the end of the line.\r\n     **/\r\n    this.removeToLineEnd = function() {\r\n        if (this.selection.isEmpty())\r\n            this.selection.selectLineEnd();\r\n\r\n        var range = this.getSelectionRange();\r\n        if (range.start.column == range.end.column && range.start.row == range.end.row) {\r\n            range.end.column = 0;\r\n            range.end.row++;\r\n        }\r\n\r\n        this.session.remove(range);\r\n        this.clearSelection();\r\n    };\r\n\r\n    /**\r\n     * Splits the line at the current selection (by inserting an `'\\n'`).\r\n     **/\r\n    this.splitLine = function() {\r\n        if (!this.selection.isEmpty()) {\r\n            this.session.remove(this.getSelectionRange());\r\n            this.clearSelection();\r\n        }\r\n\r\n        var cursor = this.getCursorPosition();\r\n        this.insert(\"\\n\");\r\n        this.moveCursorToPosition(cursor);\r\n    };\r\n\r\n    /**\r\n     * Transposes current line.\r\n     **/\r\n    this.transposeLetters = function() {\r\n        if (!this.selection.isEmpty()) {\r\n            return;\r\n        }\r\n\r\n        var cursor = this.getCursorPosition();\r\n        var column = cursor.column;\r\n        if (column === 0)\r\n            return;\r\n\r\n        var line = this.session.getLine(cursor.row);\r\n        var swap, range;\r\n        if (column < line.length) {\r\n            swap = line.charAt(column) + line.charAt(column-1);\r\n            range = new Range(cursor.row, column-1, cursor.row, column+1);\r\n        }\r\n        else {\r\n            swap = line.charAt(column-1) + line.charAt(column-2);\r\n            range = new Range(cursor.row, column-2, cursor.row, column);\r\n        }\r\n        this.session.replace(range, swap);\r\n        this.session.selection.moveToPosition(range.end);\r\n    };\r\n\r\n    /**\r\n     * Converts the current selection entirely into lowercase.\r\n     **/\r\n    this.toLowerCase = function() {\r\n        var originalRange = this.getSelectionRange();\r\n        if (this.selection.isEmpty()) {\r\n            this.selection.selectWord();\r\n        }\r\n\r\n        var range = this.getSelectionRange();\r\n        var text = this.session.getTextRange(range);\r\n        this.session.replace(range, text.toLowerCase());\r\n        this.selection.setSelectionRange(originalRange);\r\n    };\r\n\r\n    /**\r\n     * Converts the current selection entirely into uppercase.\r\n     **/\r\n    this.toUpperCase = function() {\r\n        var originalRange = this.getSelectionRange();\r\n        if (this.selection.isEmpty()) {\r\n            this.selection.selectWord();\r\n        }\r\n\r\n        var range = this.getSelectionRange();\r\n        var text = this.session.getTextRange(range);\r\n        this.session.replace(range, text.toUpperCase());\r\n        this.selection.setSelectionRange(originalRange);\r\n    };\r\n\r\n    /**\r\n     * Inserts an indentation into the current cursor position or indents the selected lines.\r\n     *\r\n     * @related EditSession.indentRows\r\n     **/\r\n    this.indent = function() {\r\n        var session = this.session;\r\n        var range = this.getSelectionRange();\r\n\r\n        if (range.start.row < range.end.row) {\r\n            var rows = this.$getSelectedRows();\r\n            session.indentRows(rows.first, rows.last, \"\\t\");\r\n            return;\r\n        } else if (range.start.column < range.end.column) {\r\n            var text = session.getTextRange(range);\r\n            if (!/^\\s+$/.test(text)) {\r\n                var rows = this.$getSelectedRows();\r\n                session.indentRows(rows.first, rows.last, \"\\t\");\r\n                return;\r\n            }\r\n        }\r\n        \r\n        var line = session.getLine(range.start.row);\r\n        var position = range.start;\r\n        var size = session.getTabSize();\r\n        var column = session.documentToScreenColumn(position.row, position.column);\r\n\r\n        if (this.session.getUseSoftTabs()) {\r\n            var count = (size - column % size);\r\n            var indentString = lang.stringRepeat(\" \", count);\r\n        } else {\r\n            var count = column % size;\r\n            while (line[range.start.column - 1] == \" \" && count) {\r\n                range.start.column--;\r\n                count--;\r\n            }\r\n            this.selection.setSelectionRange(range);\r\n            indentString = \"\\t\";\r\n        }\r\n        return this.insert(indentString);\r\n    };\r\n\r\n    /**\r\n     * Indents the current line.\r\n     * @related EditSession.indentRows\r\n     **/\r\n    this.blockIndent = function() {\r\n        var rows = this.$getSelectedRows();\r\n        this.session.indentRows(rows.first, rows.last, \"\\t\");\r\n    };\r\n\r\n    /**\r\n     * Outdents the current line.\r\n     * @related EditSession.outdentRows\r\n     **/\r\n    this.blockOutdent = function() {\r\n        var selection = this.session.getSelection();\r\n        this.session.outdentRows(selection.getRange());\r\n    };\r\n\r\n    // TODO: move out of core when we have good mechanism for managing extensions\r\n    this.sortLines = function() {\r\n        var rows = this.$getSelectedRows();\r\n        var session = this.session;\r\n\r\n        var lines = [];\r\n        for (var i = rows.first; i <= rows.last; i++)\r\n            lines.push(session.getLine(i));\r\n\r\n        lines.sort(function(a, b) {\r\n            if (a.toLowerCase() < b.toLowerCase()) return -1;\r\n            if (a.toLowerCase() > b.toLowerCase()) return 1;\r\n            return 0;\r\n        });\r\n\r\n        var deleteRange = new Range(0, 0, 0, 0);\r\n        for (var i = rows.first; i <= rows.last; i++) {\r\n            var line = session.getLine(i);\r\n            deleteRange.start.row = i;\r\n            deleteRange.end.row = i;\r\n            deleteRange.end.column = line.length;\r\n            session.replace(deleteRange, lines[i-rows.first]);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Given the currently selected range, this function either comments all the lines, or uncomments all of them.\r\n     **/\r\n    this.toggleCommentLines = function() {\r\n        var state = this.session.getState(this.getCursorPosition().row);\r\n        var rows = this.$getSelectedRows();\r\n        this.session.getMode().toggleCommentLines(state, this.session, rows.first, rows.last);\r\n    };\r\n\r\n    this.toggleBlockComment = function() {\r\n        var cursor = this.getCursorPosition();\r\n        var state = this.session.getState(cursor.row);\r\n        var range = this.getSelectionRange();\r\n        this.session.getMode().toggleBlockComment(state, this.session, range, cursor);\r\n    };\r\n\r\n    /**\r\n     * Works like [[EditSession.getTokenAt]], except it returns a number.\r\n     * @returns {Number}\r\n     **/\r\n    this.getNumberAt = function(row, column) {\r\n        var _numberRx = /[\\-]?[0-9]+(?:\\.[0-9]+)?/g;\r\n        _numberRx.lastIndex = 0;\r\n\r\n        var s = this.session.getLine(row);\r\n        while (_numberRx.lastIndex < column) {\r\n            var m = _numberRx.exec(s);\r\n            if(m.index <= column && m.index+m[0].length >= column){\r\n                var number = {\r\n                    value: m[0],\r\n                    start: m.index,\r\n                    end: m.index+m[0].length\r\n                };\r\n                return number;\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n\r\n    /**\r\n     * If the character before the cursor is a number, this functions changes its value by `amount`.\r\n     * @param {Number} amount The value to change the numeral by (can be negative to decrease value)\r\n     *\r\n     **/\r\n    this.modifyNumber = function(amount) {\r\n        var row = this.selection.getCursor().row;\r\n        var column = this.selection.getCursor().column;\r\n\r\n        // get the char before the cursor\r\n        var charRange = new Range(row, column-1, row, column);\r\n\r\n        var c = this.session.getTextRange(charRange);\r\n        // if the char is a digit\r\n        if (!isNaN(parseFloat(c)) && isFinite(c)) {\r\n            // get the whole number the digit is part of\r\n            var nr = this.getNumberAt(row, column);\r\n            // if number found\r\n            if (nr) {\r\n                var fp = nr.value.indexOf(\".\") >= 0 ? nr.start + nr.value.indexOf(\".\") + 1 : nr.end;\r\n                var decimals = nr.start + nr.value.length - fp;\r\n\r\n                var t = parseFloat(nr.value);\r\n                t *= Math.pow(10, decimals);\r\n\r\n\r\n                if(fp !== nr.end && column < fp){\r\n                    amount *= Math.pow(10, nr.end - column - 1);\r\n                } else {\r\n                    amount *= Math.pow(10, nr.end - column);\r\n                }\r\n\r\n                t += amount;\r\n                t /= Math.pow(10, decimals);\r\n                var nnr = t.toFixed(decimals);\r\n\r\n                //update number\r\n                var replaceRange = new Range(row, nr.start, row, nr.end);\r\n                this.session.replace(replaceRange, nnr);\r\n\r\n                //reposition the cursor\r\n                this.moveCursorTo(row, Math.max(nr.start +1, column + nnr.length - nr.value.length));\r\n\r\n            }\r\n        } else {\r\n            this.toggleWord();\r\n        }\r\n    };\r\n\r\n    this.$toggleWordPairs = [\r\n        [\"first\", \"last\"],\r\n        [\"true\", \"false\"],\r\n        [\"yes\", \"no\"],\r\n        [\"width\", \"height\"],\r\n        [\"top\", \"bottom\"],\r\n        [\"right\", \"left\"],\r\n        [\"on\", \"off\"],\r\n        [\"x\", \"y\"],\r\n        [\"get\", \"set\"],\r\n        [\"max\", \"min\"],\r\n        [\"horizontal\", \"vertical\"],\r\n        [\"show\", \"hide\"],\r\n        [\"add\", \"remove\"],\r\n        [\"up\", \"down\"],\r\n        [\"before\", \"after\"],\r\n        [\"even\", \"odd\"],\r\n        [\"inside\", \"outside\"],\r\n        [\"next\", \"previous\"],\r\n        [\"increase\", \"decrease\"],\r\n        [\"attach\", \"detach\"],\r\n        [\"&&\", \"||\"],\r\n        [\"==\", \"!=\"]\r\n    ];\r\n\r\n    this.toggleWord = function () {\r\n        var row = this.selection.getCursor().row;\r\n        var column = this.selection.getCursor().column;\r\n        this.selection.selectWord();\r\n        var currentState = this.getSelectedText();\r\n        var currWordStart = this.selection.getWordRange().start.column;\r\n        var wordParts = currentState.replace(/([a-z]+|[A-Z]+)(?=[A-Z_]|$)/g, '$1 ').split(/\\s/);\r\n        var delta = column - currWordStart - 1;\r\n        if (delta < 0) delta = 0;\r\n        var curLength = 0, itLength = 0;\r\n        var that = this;\r\n        if (currentState.match(/[A-Za-z0-9_]+/)) {\r\n            wordParts.forEach(function (item, i) {\r\n                itLength = curLength + item.length;\r\n                if (delta >= curLength && delta <= itLength) {\r\n                    currentState = item;\r\n                    that.selection.clearSelection();\r\n                    that.moveCursorTo(row, curLength + currWordStart);\r\n                    that.selection.selectTo(row, itLength + currWordStart);\r\n                }\r\n                curLength = itLength;\r\n            });\r\n        }\r\n\r\n        var wordPairs = this.$toggleWordPairs;\r\n        var reg;\r\n        for (var i = 0; i < wordPairs.length; i++) {\r\n            var item = wordPairs[i];\r\n            for (var j = 0; j <= 1; j++) {\r\n                var negate = +!j;\r\n                var firstCondition = currentState.match(new RegExp('^\\\\s?_?(' + lang.escapeRegExp(item[j]) + ')\\\\s?$', 'i'));\r\n                if (firstCondition) {\r\n                    var secondCondition = currentState.match(new RegExp('([_]|^|\\\\s)(' + lang.escapeRegExp(firstCondition[1]) + ')($|\\\\s)', 'g'));\r\n                    if (secondCondition) {\r\n                        reg = currentState.replace(new RegExp(lang.escapeRegExp(item[j]), 'i'), function (result) {\r\n                            var res = item[negate];\r\n                            if (result.toUpperCase() == result) {\r\n                                res = res.toUpperCase();\r\n                            } else if (result.charAt(0).toUpperCase() == result.charAt(0)) {\r\n                                res = res.substr(0, 0) + item[negate].charAt(0).toUpperCase() + res.substr(1);\r\n                            }\r\n                            return res;\r\n                        });\r\n                        this.insert(reg);\r\n                        reg = \"\";\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Removes all the lines in the current selection\r\n     * @related EditSession.remove\r\n     **/\r\n    this.removeLines = function() {\r\n        var rows = this.$getSelectedRows();\r\n        this.session.removeFullLines(rows.first, rows.last);\r\n        this.clearSelection();\r\n    };\r\n\r\n    this.duplicateSelection = function() {\r\n        var sel = this.selection;\r\n        var doc = this.session;\r\n        var range = sel.getRange();\r\n        var reverse = sel.isBackwards();\r\n        if (range.isEmpty()) {\r\n            var row = range.start.row;\r\n            doc.duplicateLines(row, row);\r\n        } else {\r\n            var point = reverse ? range.start : range.end;\r\n            var endPoint = doc.insert(point, doc.getTextRange(range), false);\r\n            range.start = point;\r\n            range.end = endPoint;\r\n\r\n            sel.setSelectionRange(range, reverse);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Shifts all the selected lines down one row.\r\n     *\r\n     * @returns {Number} On success, it returns -1.\r\n     * @related EditSession.moveLinesUp\r\n     **/\r\n    this.moveLinesDown = function() {\r\n        this.$moveLines(1, false);\r\n    };\r\n\r\n    /**\r\n     * Shifts all the selected lines up one row.\r\n     * @returns {Number} On success, it returns -1.\r\n     * @related EditSession.moveLinesDown\r\n     **/\r\n    this.moveLinesUp = function() {\r\n        this.$moveLines(-1, false);\r\n    };\r\n\r\n    /**\r\n     * Moves a range of text from the given range to the given position. `toPosition` is an object that looks like this:\r\n     * ```json\r\n     *    { row: newRowLocation, column: newColumnLocation }\r\n     * ```\r\n     * @param {Range} fromRange The range of text you want moved within the document\r\n     * @param {Object} toPosition The location (row and column) where you want to move the text to\r\n     *\r\n     * @returns {Range} The new range where the text was moved to.\r\n     * @related EditSession.moveText\r\n     **/\r\n    this.moveText = function(range, toPosition, copy) {\r\n        return this.session.moveText(range, toPosition, copy);\r\n    };\r\n\r\n    /**\r\n     * Copies all the selected lines up one row.\r\n     * @returns {Number} On success, returns 0.\r\n     *\r\n     **/\r\n    this.copyLinesUp = function() {\r\n        this.$moveLines(-1, true);\r\n    };\r\n\r\n    /**\r\n     * Copies all the selected lines down one row.\r\n     * @returns {Number} On success, returns the number of new rows added; in other words, `lastRow - firstRow + 1`.\r\n     * @related EditSession.duplicateLines\r\n     *\r\n     **/\r\n    this.copyLinesDown = function() {\r\n        this.$moveLines(1, true);\r\n    };\r\n\r\n    /**\r\n     * for internal use\r\n     * @ignore\r\n     *\r\n     **/\r\n    this.$moveLines = function(dir, copy) {\r\n        var rows, moved;\r\n        var selection = this.selection;\r\n        if (!selection.inMultiSelectMode || this.inVirtualSelectionMode) {\r\n            var range = selection.toOrientedRange();\r\n            rows = this.$getSelectedRows(range);\r\n            moved = this.session.$moveLines(rows.first, rows.last, copy ? 0 : dir);\r\n            if (copy && dir == -1) moved = 0;\r\n            range.moveBy(moved, 0);\r\n            selection.fromOrientedRange(range);\r\n        } else {\r\n            var ranges = selection.rangeList.ranges;\r\n            selection.rangeList.detach(this.session);\r\n            this.inVirtualSelectionMode = true;\r\n            \r\n            var diff = 0;\r\n            var totalDiff = 0;\r\n            var l = ranges.length;\r\n            for (var i = 0; i < l; i++) {\r\n                var rangeIndex = i;\r\n                ranges[i].moveBy(diff, 0);\r\n                rows = this.$getSelectedRows(ranges[i]);\r\n                var first = rows.first;\r\n                var last = rows.last;\r\n                while (++i < l) {\r\n                    if (totalDiff) ranges[i].moveBy(totalDiff, 0);\r\n                    var subRows = this.$getSelectedRows(ranges[i]);\r\n                    if (copy && subRows.first != last)\r\n                        break;\r\n                    else if (!copy && subRows.first > last + 1)\r\n                        break;\r\n                    last = subRows.last;\r\n                }\r\n                i--;\r\n                diff = this.session.$moveLines(first, last, copy ? 0 : dir);\r\n                if (copy && dir == -1) rangeIndex = i + 1;\r\n                while (rangeIndex <= i) {\r\n                    ranges[rangeIndex].moveBy(diff, 0);\r\n                    rangeIndex++;\r\n                }\r\n                if (!copy) diff = 0;\r\n                totalDiff += diff;\r\n            }\r\n            \r\n            selection.fromOrientedRange(selection.ranges[0]);\r\n            selection.rangeList.attach(this.session);\r\n            this.inVirtualSelectionMode = false;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Returns an object indicating the currently selected rows. The object looks like this:\r\n     *\r\n     * ```json\r\n     * { first: range.start.row, last: range.end.row }\r\n     * ```\r\n     *\r\n     * @returns {Object}\r\n     **/\r\n    this.$getSelectedRows = function(range) {\r\n        range = (range || this.getSelectionRange()).collapseRows();\r\n\r\n        return {\r\n            first: this.session.getRowFoldStart(range.start.row),\r\n            last: this.session.getRowFoldEnd(range.end.row)\r\n        };\r\n    };\r\n\r\n    this.onCompositionStart = function(compositionState) {\r\n        this.renderer.showComposition(compositionState);\r\n    };\r\n\r\n    this.onCompositionUpdate = function(text) {\r\n        this.renderer.setCompositionText(text);\r\n    };\r\n\r\n    this.onCompositionEnd = function() {\r\n        this.renderer.hideComposition();\r\n    };\r\n\r\n    /**\r\n     * {:VirtualRenderer.getFirstVisibleRow}\r\n     *\r\n     * @returns {Number}\r\n     * @related VirtualRenderer.getFirstVisibleRow\r\n     **/\r\n    this.getFirstVisibleRow = function() {\r\n        return this.renderer.getFirstVisibleRow();\r\n    };\r\n\r\n    /**\r\n     * {:VirtualRenderer.getLastVisibleRow}\r\n     *\r\n     * @returns {Number}\r\n     * @related VirtualRenderer.getLastVisibleRow\r\n     **/\r\n    this.getLastVisibleRow = function() {\r\n        return this.renderer.getLastVisibleRow();\r\n    };\r\n\r\n    /**\r\n     * Indicates if the row is currently visible on the screen.\r\n     * @param {Number} row The row to check\r\n     *\r\n     * @returns {Boolean}\r\n     **/\r\n    this.isRowVisible = function(row) {\r\n        return (row >= this.getFirstVisibleRow() && row <= this.getLastVisibleRow());\r\n    };\r\n\r\n    /**\r\n     * Indicates if the entire row is currently visible on the screen.\r\n     * @param {Number} row The row to check\r\n     *\r\n     *\r\n     * @returns {Boolean}\r\n     **/\r\n    this.isRowFullyVisible = function(row) {\r\n        return (row >= this.renderer.getFirstFullyVisibleRow() && row <= this.renderer.getLastFullyVisibleRow());\r\n    };\r\n\r\n    /**\r\n     * Returns the number of currently visible rows.\r\n     * @returns {Number}\r\n     **/\r\n    this.$getVisibleRowCount = function() {\r\n        return this.renderer.getScrollBottomRow() - this.renderer.getScrollTopRow() + 1;\r\n    };\r\n\r\n    this.$moveByPage = function(dir, select) {\r\n        var renderer = this.renderer;\r\n        var config = this.renderer.layerConfig;\r\n        var rows = dir * Math.floor(config.height / config.lineHeight);\r\n\r\n        if (select === true) {\r\n            this.selection.$moveSelection(function(){\r\n                this.moveCursorBy(rows, 0);\r\n            });\r\n        } else if (select === false) {\r\n            this.selection.moveCursorBy(rows, 0);\r\n            this.selection.clearSelection();\r\n        }\r\n\r\n        var scrollTop = renderer.scrollTop;\r\n\r\n        renderer.scrollBy(0, rows * config.lineHeight);\r\n        if (select != null)\r\n            renderer.scrollCursorIntoView(null, 0.5);\r\n\r\n        renderer.animateScrolling(scrollTop);\r\n    };\r\n\r\n    /**\r\n     * Selects the text from the current position of the document until where a \"page down\" finishes.\r\n     **/\r\n    this.selectPageDown = function() {\r\n        this.$moveByPage(1, true);\r\n    };\r\n\r\n    /**\r\n     * Selects the text from the current position of the document until where a \"page up\" finishes.\r\n     **/\r\n    this.selectPageUp = function() {\r\n        this.$moveByPage(-1, true);\r\n    };\r\n\r\n    /**\r\n     * Shifts the document to wherever \"page down\" is, as well as moving the cursor position.\r\n     **/\r\n    this.gotoPageDown = function() {\r\n       this.$moveByPage(1, false);\r\n    };\r\n\r\n    /**\r\n     * Shifts the document to wherever \"page up\" is, as well as moving the cursor position.\r\n     **/\r\n    this.gotoPageUp = function() {\r\n        this.$moveByPage(-1, false);\r\n    };\r\n\r\n    /**\r\n     * Scrolls the document to wherever \"page down\" is, without changing the cursor position.\r\n     **/\r\n    this.scrollPageDown = function() {\r\n        this.$moveByPage(1);\r\n    };\r\n\r\n    /**\r\n     * Scrolls the document to wherever \"page up\" is, without changing the cursor position.\r\n     **/\r\n    this.scrollPageUp = function() {\r\n        this.$moveByPage(-1);\r\n    };\r\n\r\n    /**\r\n     * Moves the editor to the specified row.\r\n     * @related VirtualRenderer.scrollToRow\r\n     **/\r\n    this.scrollToRow = function(row) {\r\n        this.renderer.scrollToRow(row);\r\n    };\r\n\r\n    /**\r\n     * Scrolls to a line. If `center` is `true`, it puts the line in middle of screen (or attempts to).\r\n     * @param {Number} line The line to scroll to\r\n     * @param {Boolean} center If `true`\r\n     * @param {Boolean} animate If `true` animates scrolling\r\n     * @param {Function} callback Function to be called when the animation has finished\r\n     *\r\n     *\r\n     * @related VirtualRenderer.scrollToLine\r\n     **/\r\n    this.scrollToLine = function(line, center, animate, callback) {\r\n        this.renderer.scrollToLine(line, center, animate, callback);\r\n    };\r\n\r\n    /**\r\n     * Attempts to center the current selection on the screen.\r\n     **/\r\n    this.centerSelection = function() {\r\n        var range = this.getSelectionRange();\r\n        var pos = {\r\n            row: Math.floor(range.start.row + (range.end.row - range.start.row) / 2),\r\n            column: Math.floor(range.start.column + (range.end.column - range.start.column) / 2)\r\n        };\r\n        this.renderer.alignCursor(pos, 0.5);\r\n    };\r\n\r\n    /**\r\n     * Gets the current position of the cursor.\r\n     * @returns {Object} An object that looks something like this:\r\n     *\r\n     * ```json\r\n     * { row: currRow, column: currCol }\r\n     * ```\r\n     *\r\n     * @related Selection.getCursor\r\n     **/\r\n    this.getCursorPosition = function() {\r\n        return this.selection.getCursor();\r\n    };\r\n\r\n    /**\r\n     * Returns the screen position of the cursor.\r\n     * @returns {Number}\r\n     * @related EditSession.documentToScreenPosition\r\n     **/\r\n    this.getCursorPositionScreen = function() {\r\n        return this.session.documentToScreenPosition(this.getCursorPosition());\r\n    };\r\n\r\n    /**\r\n     * {:Selection.getRange}\r\n     * @returns {Range}\r\n     * @related Selection.getRange\r\n     **/\r\n    this.getSelectionRange = function() {\r\n        return this.selection.getRange();\r\n    };\r\n\r\n\r\n    /**\r\n     * Selects all the text in editor.\r\n     * @related Selection.selectAll\r\n     **/\r\n    this.selectAll = function() {\r\n        this.selection.selectAll();\r\n    };\r\n\r\n    /**\r\n     * {:Selection.clearSelection}\r\n     * @related Selection.clearSelection\r\n     **/\r\n    this.clearSelection = function() {\r\n        this.selection.clearSelection();\r\n    };\r\n\r\n    /**\r\n     * Moves the cursor to the specified row and column. Note that this does not de-select the current selection.\r\n     * @param {Number} row The new row number\r\n     * @param {Number} column The new column number\r\n     *\r\n     *\r\n     * @related Selection.moveCursorTo\r\n     **/\r\n    this.moveCursorTo = function(row, column) {\r\n        this.selection.moveCursorTo(row, column);\r\n    };\r\n\r\n    /**\r\n     * Moves the cursor to the position indicated by `pos.row` and `pos.column`.\r\n     * @param {Object} pos An object with two properties, row and column\r\n     *\r\n     *\r\n     * @related Selection.moveCursorToPosition\r\n     **/\r\n    this.moveCursorToPosition = function(pos) {\r\n        this.selection.moveCursorToPosition(pos);\r\n    };\r\n\r\n    /**\r\n     * Moves the cursor's row and column to the next matching bracket or HTML tag.\r\n     *\r\n     **/\r\n    this.jumpToMatching = function(select, expand) {\r\n        var cursor = this.getCursorPosition();\r\n        var iterator = new TokenIterator(this.session, cursor.row, cursor.column);\r\n        var prevToken = iterator.getCurrentToken();\r\n        var token = prevToken || iterator.stepForward();\r\n\r\n        if (!token) return;\r\n\r\n        //get next closing tag or bracket\r\n        var matchType;\r\n        var found = false;\r\n        var depth = {};\r\n        var i = cursor.column - token.start;\r\n        var bracketType;\r\n        var brackets = {\r\n            \")\": \"(\",\r\n            \"(\": \"(\",\r\n            \"]\": \"[\",\r\n            \"[\": \"[\",\r\n            \"{\": \"{\",\r\n            \"}\": \"{\"\r\n        };\r\n        \r\n        do {\r\n            if (token.value.match(/[{}()\\[\\]]/g)) {\r\n                for (; i < token.value.length && !found; i++) {\r\n                    if (!brackets[token.value[i]]) {\r\n                        continue;\r\n                    }\r\n\r\n                    bracketType = brackets[token.value[i]] + '.' + token.type.replace(\"rparen\", \"lparen\");\r\n\r\n                    if (isNaN(depth[bracketType])) {\r\n                        depth[bracketType] = 0;\r\n                    }\r\n\r\n                    switch (token.value[i]) {\r\n                        case '(':\r\n                        case '[':\r\n                        case '{':\r\n                            depth[bracketType]++;\r\n                            break;\r\n                        case ')':\r\n                        case ']':\r\n                        case '}':\r\n                            depth[bracketType]--;\r\n\r\n                            if (depth[bracketType] === -1) {\r\n                                matchType = 'bracket';\r\n                                found = true;\r\n                            }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            else if (token.type.indexOf('tag-name') !== -1) {\r\n                if (isNaN(depth[token.value])) {\r\n                    depth[token.value] = 0;\r\n                }\r\n                \r\n                if (prevToken.value === '<') {\r\n                    depth[token.value]++;\r\n                }\r\n                else if (prevToken.value === '</') {\r\n                    depth[token.value]--;\r\n                }\r\n                \r\n                if (depth[token.value] === -1) {\r\n                    matchType = 'tag';\r\n                    found = true;\r\n                }\r\n            }\r\n\r\n            if (!found) {\r\n                prevToken = token;\r\n                token = iterator.stepForward();\r\n                i = 0;\r\n            }\r\n        } while (token && !found);\r\n\r\n        //no match found\r\n        if (!matchType)\r\n            return;\r\n\r\n        var range, pos;\r\n        if (matchType === 'bracket') {\r\n            range = this.session.getBracketRange(cursor);\r\n            if (!range) {\r\n                range = new Range(\r\n                    iterator.getCurrentTokenRow(),\r\n                    iterator.getCurrentTokenColumn() + i - 1,\r\n                    iterator.getCurrentTokenRow(),\r\n                    iterator.getCurrentTokenColumn() + i - 1\r\n                );\r\n                pos = range.start;\r\n                if (expand || pos.row === cursor.row && Math.abs(pos.column - cursor.column) < 2)\r\n                    range = this.session.getBracketRange(pos);\r\n            }\r\n        }\r\n        else if (matchType === 'tag') {\r\n            if (token && token.type.indexOf('tag-name') !== -1) \r\n                var tag = token.value;\r\n            else\r\n                return;\r\n\r\n            range = new Range(\r\n                iterator.getCurrentTokenRow(),\r\n                iterator.getCurrentTokenColumn() - 2,\r\n                iterator.getCurrentTokenRow(),\r\n                iterator.getCurrentTokenColumn() - 2\r\n            );\r\n\r\n            //find matching tag\r\n            if (range.compare(cursor.row, cursor.column) === 0) {\r\n                found = false;\r\n                do {\r\n                    token = prevToken;\r\n                    prevToken = iterator.stepBackward();\r\n                    \r\n                    if (prevToken) {\r\n                        if (prevToken.type.indexOf('tag-close') !== -1) {\r\n                            range.setEnd(iterator.getCurrentTokenRow(), iterator.getCurrentTokenColumn() + 1);\r\n                        }\r\n\r\n                        if (token.value === tag && token.type.indexOf('tag-name') !== -1) {\r\n                            if (prevToken.value === '<') {\r\n                                depth[tag]++;\r\n                            }\r\n                            else if (prevToken.value === '</') {\r\n                                depth[tag]--;\r\n                            }\r\n                            \r\n                            if (depth[tag] === 0)\r\n                                found = true;\r\n                        }\r\n                    }\r\n                } while (prevToken && !found);\r\n            }\r\n\r\n            //we found it\r\n            if (token && token.type.indexOf('tag-name')) {\r\n                pos = range.start;\r\n                if (pos.row == cursor.row && Math.abs(pos.column - cursor.column) < 2)\r\n                    pos = range.end;\r\n            }\r\n        }\r\n\r\n        pos = range && range.cursor || pos;\r\n        if (pos) {\r\n            if (select) {\r\n                if (range && expand) {\r\n                    this.selection.setRange(range);\r\n                } else if (range && range.isEqual(this.getSelectionRange())) {\r\n                    this.clearSelection();\r\n                } else {\r\n                    this.selection.selectTo(pos.row, pos.column);\r\n                }\r\n            } else {\r\n                this.selection.moveTo(pos.row, pos.column);\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Moves the cursor to the specified line number, and also into the indicated column.\r\n     * @param {Number} lineNumber The line number to go to\r\n     * @param {Number} column A column number to go to\r\n     * @param {Boolean} animate If `true` animates scolling\r\n     *\r\n     **/\r\n    this.gotoLine = function(lineNumber, column, animate) {\r\n        this.selection.clearSelection();\r\n        this.session.unfold({row: lineNumber - 1, column: column || 0});\r\n\r\n        // todo: find a way to automatically exit multiselect mode\r\n        this.exitMultiSelectMode && this.exitMultiSelectMode();\r\n        this.moveCursorTo(lineNumber - 1, column || 0);\r\n\r\n        if (!this.isRowFullyVisible(lineNumber - 1))\r\n            this.scrollToLine(lineNumber - 1, true, animate);\r\n    };\r\n\r\n    /**\r\n     * Moves the cursor to the specified row and column. Note that this does de-select the current selection.\r\n     * @param {Number} row The new row number\r\n     * @param {Number} column The new column number\r\n     *\r\n     *\r\n     * @related Editor.moveCursorTo\r\n     **/\r\n    this.navigateTo = function(row, column) {\r\n        this.selection.moveTo(row, column);\r\n    };\r\n\r\n    /**\r\n     * Moves the cursor up in the document the specified number of times. Note that this does de-select the current selection.\r\n     * @param {Number} times The number of times to change navigation\r\n     *\r\n     *\r\n     **/\r\n    this.navigateUp = function(times) {\r\n        if (this.selection.isMultiLine() && !this.selection.isBackwards()) {\r\n            var selectionStart = this.selection.anchor.getPosition();\r\n            return this.moveCursorToPosition(selectionStart);\r\n        }\r\n        this.selection.clearSelection();\r\n        this.selection.moveCursorBy(-times || -1, 0);\r\n    };\r\n\r\n    /**\r\n     * Moves the cursor down in the document the specified number of times. Note that this does de-select the current selection.\r\n     * @param {Number} times The number of times to change navigation\r\n     *\r\n     *\r\n     **/\r\n    this.navigateDown = function(times) {\r\n        if (this.selection.isMultiLine() && this.selection.isBackwards()) {\r\n            var selectionEnd = this.selection.anchor.getPosition();\r\n            return this.moveCursorToPosition(selectionEnd);\r\n        }\r\n        this.selection.clearSelection();\r\n        this.selection.moveCursorBy(times || 1, 0);\r\n    };\r\n\r\n    /**\r\n     * Moves the cursor left in the document the specified number of times. Note that this does de-select the current selection.\r\n     * @param {Number} times The number of times to change navigation\r\n     *\r\n     *\r\n     **/\r\n    this.navigateLeft = function(times) {\r\n        if (!this.selection.isEmpty()) {\r\n            var selectionStart = this.getSelectionRange().start;\r\n            this.moveCursorToPosition(selectionStart);\r\n        }\r\n        else {\r\n            times = times || 1;\r\n            while (times--) {\r\n                this.selection.moveCursorLeft();\r\n            }\r\n        }\r\n        this.clearSelection();\r\n    };\r\n\r\n    /**\r\n     * Moves the cursor right in the document the specified number of times. Note that this does de-select the current selection.\r\n     * @param {Number} times The number of times to change navigation\r\n     *\r\n     *\r\n     **/\r\n    this.navigateRight = function(times) {\r\n        if (!this.selection.isEmpty()) {\r\n            var selectionEnd = this.getSelectionRange().end;\r\n            this.moveCursorToPosition(selectionEnd);\r\n        }\r\n        else {\r\n            times = times || 1;\r\n            while (times--) {\r\n                this.selection.moveCursorRight();\r\n            }\r\n        }\r\n        this.clearSelection();\r\n    };\r\n\r\n    /**\r\n     *\r\n     * Moves the cursor to the start of the current line. Note that this does de-select the current selection.\r\n     **/\r\n    this.navigateLineStart = function() {\r\n        this.selection.moveCursorLineStart();\r\n        this.clearSelection();\r\n    };\r\n\r\n    /**\r\n     *\r\n     * Moves the cursor to the end of the current line. Note that this does de-select the current selection.\r\n     **/\r\n    this.navigateLineEnd = function() {\r\n        this.selection.moveCursorLineEnd();\r\n        this.clearSelection();\r\n    };\r\n\r\n    /**\r\n     *\r\n     * Moves the cursor to the end of the current file. Note that this does de-select the current selection.\r\n     **/\r\n    this.navigateFileEnd = function() {\r\n        this.selection.moveCursorFileEnd();\r\n        this.clearSelection();\r\n    };\r\n\r\n    /**\r\n     *\r\n     * Moves the cursor to the start of the current file. Note that this does de-select the current selection.\r\n     **/\r\n    this.navigateFileStart = function() {\r\n        this.selection.moveCursorFileStart();\r\n        this.clearSelection();\r\n    };\r\n\r\n    /**\r\n     *\r\n     * Moves the cursor to the word immediately to the right of the current position. Note that this does de-select the current selection.\r\n     **/\r\n    this.navigateWordRight = function() {\r\n        this.selection.moveCursorWordRight();\r\n        this.clearSelection();\r\n    };\r\n\r\n    /**\r\n     *\r\n     * Moves the cursor to the word immediately to the left of the current position. Note that this does de-select the current selection.\r\n     **/\r\n    this.navigateWordLeft = function() {\r\n        this.selection.moveCursorWordLeft();\r\n        this.clearSelection();\r\n    };\r\n\r\n    /**\r\n     * Replaces the first occurrence of `options.needle` with the value in `replacement`.\r\n     * @param {String} replacement The text to replace with\r\n     * @param {Object} options The [[Search `Search`]] options to use\r\n     *\r\n     *\r\n     **/\r\n    this.replace = function(replacement, options) {\r\n        if (options)\r\n            this.$search.set(options);\r\n\r\n        var range = this.$search.find(this.session);\r\n        var replaced = 0;\r\n        if (!range)\r\n            return replaced;\r\n\r\n        if (this.$tryReplace(range, replacement)) {\r\n            replaced = 1;\r\n        }\r\n\r\n        this.selection.setSelectionRange(range);\r\n        this.renderer.scrollSelectionIntoView(range.start, range.end);\r\n\r\n        return replaced;\r\n    };\r\n\r\n    /**\r\n     * Replaces all occurrences of `options.needle` with the value in `replacement`.\r\n     * @param {String} replacement The text to replace with\r\n     * @param {Object} options The [[Search `Search`]] options to use\r\n     *\r\n     *\r\n     **/\r\n    this.replaceAll = function(replacement, options) {\r\n        if (options) {\r\n            this.$search.set(options);\r\n        }\r\n\r\n        var ranges = this.$search.findAll(this.session);\r\n        var replaced = 0;\r\n        if (!ranges.length)\r\n            return replaced;\r\n\r\n        var selection = this.getSelectionRange();\r\n        this.selection.moveTo(0, 0);\r\n\r\n        for (var i = ranges.length - 1; i >= 0; --i) {\r\n            if(this.$tryReplace(ranges[i], replacement)) {\r\n                replaced++;\r\n            }\r\n        }\r\n\r\n        this.selection.setSelectionRange(selection);\r\n\r\n        return replaced;\r\n    };\r\n\r\n    this.$tryReplace = function(range, replacement) {\r\n        var input = this.session.getTextRange(range);\r\n        replacement = this.$search.replace(input, replacement);\r\n        if (replacement !== null) {\r\n            range.end = this.session.replace(range, replacement);\r\n            return range;\r\n        } else {\r\n            return null;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * {:Search.getOptions} For more information on `options`, see [[Search `Search`]].\r\n     * @related Search.getOptions\r\n     * @returns {Object}\r\n     **/\r\n    this.getLastSearchOptions = function() {\r\n        return this.$search.getOptions();\r\n    };\r\n\r\n    /**\r\n     * Attempts to find `needle` within the document. For more information on `options`, see [[Search `Search`]].\r\n     * @param {String} needle The text to search for (optional)\r\n     * @param {Object} options An object defining various search properties\r\n     * @param {Boolean} animate If `true` animate scrolling\r\n     *\r\n     *\r\n     * @related Search.find\r\n     **/\r\n    this.find = function(needle, options, animate) {\r\n        if (!options)\r\n            options = {};\r\n\r\n        if (typeof needle == \"string\" || needle instanceof RegExp)\r\n            options.needle = needle;\r\n        else if (typeof needle == \"object\")\r\n            oop.mixin(options, needle);\r\n\r\n        var range = this.selection.getRange();\r\n        if (options.needle == null) {\r\n            needle = this.session.getTextRange(range)\r\n                || this.$search.$options.needle;\r\n            if (!needle) {\r\n                range = this.session.getWordRange(range.start.row, range.start.column);\r\n                needle = this.session.getTextRange(range);\r\n            }\r\n            this.$search.set({needle: needle});\r\n        }\r\n\r\n        this.$search.set(options);\r\n        if (!options.start)\r\n            this.$search.set({start: range});\r\n\r\n        var newRange = this.$search.find(this.session);\r\n        if (options.preventScroll)\r\n            return newRange;\r\n        if (newRange) {\r\n            this.revealRange(newRange, animate);\r\n            return newRange;\r\n        }\r\n        // clear selection if nothing is found\r\n        if (options.backwards)\r\n            range.start = range.end;\r\n        else\r\n            range.end = range.start;\r\n        this.selection.setRange(range);\r\n    };\r\n\r\n    /**\r\n     * Performs another search for `needle` in the document. For more information on `options`, see [[Search `Search`]].\r\n     * @param {Object} options search options\r\n     * @param {Boolean} animate If `true` animate scrolling\r\n     *\r\n     *\r\n     * @related Editor.find\r\n     **/\r\n    this.findNext = function(options, animate) {\r\n        this.find({skipCurrent: true, backwards: false}, options, animate);\r\n    };\r\n\r\n    /**\r\n     * Performs a search for `needle` backwards. For more information on `options`, see [[Search `Search`]].\r\n     * @param {Object} options search options\r\n     * @param {Boolean} animate If `true` animate scrolling\r\n     *\r\n     *\r\n     * @related Editor.find\r\n     **/\r\n    this.findPrevious = function(options, animate) {\r\n        this.find(options, {skipCurrent: true, backwards: true}, animate);\r\n    };\r\n\r\n    this.revealRange = function(range, animate) {\r\n        this.session.unfold(range);\r\n        this.selection.setSelectionRange(range);\r\n\r\n        var scrollTop = this.renderer.scrollTop;\r\n        this.renderer.scrollSelectionIntoView(range.start, range.end, 0.5);\r\n        if (animate !== false)\r\n            this.renderer.animateScrolling(scrollTop);\r\n    };\r\n\r\n    /**\r\n     * {:UndoManager.undo}\r\n     * @related UndoManager.undo\r\n     **/\r\n    this.undo = function() {\r\n        this.session.getUndoManager().undo(this.session);\r\n        this.renderer.scrollCursorIntoView(null, 0.5);\r\n    };\r\n\r\n    /**\r\n     * {:UndoManager.redo}\r\n     * @related UndoManager.redo\r\n     **/\r\n    this.redo = function() {\r\n        this.session.getUndoManager().redo(this.session);\r\n        this.renderer.scrollCursorIntoView(null, 0.5);\r\n    };\r\n\r\n    /**\r\n     *\r\n     * Cleans up the entire editor.\r\n     **/\r\n    this.destroy = function() {\r\n        this.renderer.destroy();\r\n        this._signal(\"destroy\", this);\r\n        if (this.session) {\r\n            this.session.destroy();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Enables automatic scrolling of the cursor into view when editor itself is inside scrollable element\r\n     * @param {Boolean} enable default true\r\n     **/\r\n    this.setAutoScrollEditorIntoView = function(enable) {\r\n        if (!enable)\r\n            return;\r\n        var rect;\r\n        var self = this;\r\n        var shouldScroll = false;\r\n        if (!this.$scrollAnchor)\r\n            this.$scrollAnchor = document.createElement(\"div\");\r\n        var scrollAnchor = this.$scrollAnchor;\r\n        scrollAnchor.style.cssText = \"position:absolute\";\r\n        this.container.insertBefore(scrollAnchor, this.container.firstChild);\r\n        var onChangeSelection = this.on(\"changeSelection\", function() {\r\n            shouldScroll = true;\r\n        });\r\n        // needed to not trigger sync reflow\r\n        var onBeforeRender = this.renderer.on(\"beforeRender\", function() {\r\n            if (shouldScroll)\r\n                rect = self.renderer.container.getBoundingClientRect();\r\n        });\r\n        var onAfterRender = this.renderer.on(\"afterRender\", function() {\r\n            if (shouldScroll && rect && (self.isFocused()\r\n                || self.searchBox && self.searchBox.isFocused())\r\n            ) {\r\n                var renderer = self.renderer;\r\n                var pos = renderer.$cursorLayer.$pixelPos;\r\n                var config = renderer.layerConfig;\r\n                var top = pos.top - config.offset;\r\n                if (pos.top >= 0 && top + rect.top < 0) {\r\n                    shouldScroll = true;\r\n                } else if (pos.top < config.height &&\r\n                    pos.top + rect.top + config.lineHeight > window.innerHeight) {\r\n                    shouldScroll = false;\r\n                } else {\r\n                    shouldScroll = null;\r\n                }\r\n                if (shouldScroll != null) {\r\n                    scrollAnchor.style.top = top + \"px\";\r\n                    scrollAnchor.style.left = pos.left + \"px\";\r\n                    scrollAnchor.style.height = config.lineHeight + \"px\";\r\n                    scrollAnchor.scrollIntoView(shouldScroll);\r\n                }\r\n                shouldScroll = rect = null;\r\n            }\r\n        });\r\n        this.setAutoScrollEditorIntoView = function(enable) {\r\n            if (enable)\r\n                return;\r\n            delete this.setAutoScrollEditorIntoView;\r\n            this.off(\"changeSelection\", onChangeSelection);\r\n            this.renderer.off(\"afterRender\", onAfterRender);\r\n            this.renderer.off(\"beforeRender\", onBeforeRender);\r\n        };\r\n    };\r\n\r\n\r\n    this.$resetCursorStyle = function() {\r\n        var style = this.$cursorStyle || \"ace\";\r\n        var cursorLayer = this.renderer.$cursorLayer;\r\n        if (!cursorLayer)\r\n            return;\r\n        cursorLayer.setSmoothBlinking(/smooth/.test(style));\r\n        cursorLayer.isBlinking = !this.$readOnly && style != \"wide\";\r\n        dom.setCssClass(cursorLayer.element, \"ace_slim-cursors\", /slim/.test(style));\r\n    };\r\n\r\n}).call(Editor.prototype);\r\n\r\n\r\n\r\nconfig.defineOptions(Editor.prototype, \"editor\", {\r\n    selectionStyle: {\r\n        set: function(style) {\r\n            this.onSelectionChange();\r\n            this._signal(\"changeSelectionStyle\", {data: style});\r\n        },\r\n        initialValue: \"line\"\r\n    },\r\n    highlightActiveLine: {\r\n        set: function() {this.$updateHighlightActiveLine();},\r\n        initialValue: true\r\n    },\r\n    highlightSelectedWord: {\r\n        set: function(shouldHighlight) {this.$onSelectionChange();},\r\n        initialValue: true\r\n    },\r\n    readOnly: {\r\n        set: function(readOnly) {\r\n            this.textInput.setReadOnly(readOnly);\r\n            this.$resetCursorStyle(); \r\n        },\r\n        initialValue: false\r\n    },\r\n    copyWithEmptySelection: {\r\n        set: function(value) {\r\n            this.textInput.setCopyWithEmptySelection(value);\r\n        },\r\n        initialValue: false\r\n    },\r\n    cursorStyle: {\r\n        set: function(val) { this.$resetCursorStyle(); },\r\n        values: [\"ace\", \"slim\", \"smooth\", \"wide\"],\r\n        initialValue: \"ace\"\r\n    },\r\n    mergeUndoDeltas: {\r\n        values: [false, true, \"always\"],\r\n        initialValue: true\r\n    },\r\n    behavioursEnabled: {initialValue: true},\r\n    wrapBehavioursEnabled: {initialValue: true},\r\n    autoScrollEditorIntoView: {\r\n        set: function(val) {this.setAutoScrollEditorIntoView(val);}\r\n    },\r\n    keyboardHandler: {\r\n        set: function(val) { this.setKeyboardHandler(val); },\r\n        get: function() { return this.$keybindingId; },\r\n        handlesSet: true\r\n    },\r\n    value: {\r\n        set: function(val) { this.session.setValue(val); },\r\n        get: function() { return this.getValue(); },\r\n        handlesSet: true,\r\n        hidden: true\r\n    },\r\n    session: {\r\n        set: function(val) { this.setSession(val); },\r\n        get: function() { return this.session; },\r\n        handlesSet: true,\r\n        hidden: true\r\n    },\r\n    \r\n    showLineNumbers: {\r\n        set: function(show) {\r\n            this.renderer.$gutterLayer.setShowLineNumbers(show);\r\n            this.renderer.$loop.schedule(this.renderer.CHANGE_GUTTER);\r\n            if (show && this.$relativeLineNumbers)\r\n                relativeNumberRenderer.attach(this);\r\n            else\r\n                relativeNumberRenderer.detach(this);\r\n        },\r\n        initialValue: true\r\n    },\r\n    relativeLineNumbers: {\r\n        set: function(value) {\r\n            if (this.$showLineNumbers && value)\r\n                relativeNumberRenderer.attach(this);\r\n            else\r\n                relativeNumberRenderer.detach(this);\r\n        }\r\n    },\r\n\r\n    hScrollBarAlwaysVisible: \"renderer\",\r\n    vScrollBarAlwaysVisible: \"renderer\",\r\n    highlightGutterLine: \"renderer\",\r\n    animatedScroll: \"renderer\",\r\n    showInvisibles: \"renderer\",\r\n    showPrintMargin: \"renderer\",\r\n    printMarginColumn: \"renderer\",\r\n    printMargin: \"renderer\",\r\n    fadeFoldWidgets: \"renderer\",\r\n    showFoldWidgets: \"renderer\",\r\n    displayIndentGuides: \"renderer\",\r\n    showGutter: \"renderer\",\r\n    fontSize: \"renderer\",\r\n    fontFamily: \"renderer\",\r\n    maxLines: \"renderer\",\r\n    minLines: \"renderer\",\r\n    scrollPastEnd: \"renderer\",\r\n    fixedWidthGutter: \"renderer\",\r\n    theme: \"renderer\",\r\n    hasCssTransforms: \"renderer\",\r\n    maxPixelHeight: \"renderer\",\r\n    useTextareaForIME: \"renderer\",\r\n\r\n    scrollSpeed: \"$mouseHandler\",\r\n    dragDelay: \"$mouseHandler\",\r\n    dragEnabled: \"$mouseHandler\",\r\n    focusTimeout: \"$mouseHandler\",\r\n    tooltipFollowsMouse: \"$mouseHandler\",\r\n\r\n    firstLineNumber: \"session\",\r\n    overwrite: \"session\",\r\n    newLineMode: \"session\",\r\n    useWorker: \"session\",\r\n    useSoftTabs: \"session\",\r\n    navigateWithinSoftTabs: \"session\",\r\n    tabSize: \"session\",\r\n    wrap: \"session\",\r\n    indentedSoftWrap: \"session\",\r\n    foldStyle: \"session\",\r\n    mode: \"session\"\r\n});\r\n\r\n\r\nvar relativeNumberRenderer = {\r\n    getText: function(session, row) {\r\n        return (Math.abs(session.selection.lead.row - row) || (row + 1 + (row < 9 ? \"\\xb7\" : \"\"))) + \"\";\r\n    },\r\n    getWidth: function(session, lastLineNumber, config) {\r\n        return Math.max(\r\n            lastLineNumber.toString().length,\r\n            (config.lastRow + 1).toString().length,\r\n            2\r\n        ) * config.characterWidth;\r\n    },\r\n    update: function(e, editor) {\r\n        editor.renderer.$loop.schedule(editor.renderer.CHANGE_GUTTER);\r\n    },\r\n    attach: function(editor) {\r\n        editor.renderer.$gutterLayer.$renderer = this;\r\n        editor.on(\"changeSelection\", this.update);\r\n        this.update(null, editor);\r\n    },\r\n    detach: function(editor) {\r\n        if (editor.renderer.$gutterLayer.$renderer == this)\r\n            editor.renderer.$gutterLayer.$renderer = null;\r\n        editor.off(\"changeSelection\", this.update);\r\n        this.update(null, editor);\r\n    }\r\n};\r\n\r\nexports.Editor = Editor;\r\n});\r\n"]}