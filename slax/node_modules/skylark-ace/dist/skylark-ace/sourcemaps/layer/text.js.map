{"version":3,"sources":["layer/text.js"],"names":["define","require","exports","module","oop","dom","lang","Lines","EventEmitter","Text","parentEl","this","element","createElement","className","appendChild","$updateEolChar","bind","$lines","implement","EOF_CHAR","EOL_CHAR_LF","EOL_CHAR_CRLF","EOL_CHAR","TAB_CHAR","SPACE_CHAR","$padding","MAX_LINE_LENGTH","doc","session","getNewLineCharacter","getNewLineMode","setPadding","padding","style","margin","getLineHeight","$fontMetrics","$characterSize","height","getCharacterWidth","width","$setFontMetrics","measure","on","e","_signal","$pollSizeChanges","checkForSizeChanges","$pollSizeChangesTimer","setSession","$computeTabString","showInvisibles","setShowInvisibles","displayIndentGuides","setDisplayIndentGuides","display","$tabStrings","onChangeTabSize","tabSize","getTabSize","tabStr","i","span","textContent","stringRepeat","push","createTextNode","$indentGuideRe","spaceClass","tabClass","spaceContent","tabContent","updateLines","config","firstRow","lastRow","update","first","Math","max","last","min","lineElements","childNodes","lineElementsIdx","row","foldLine","getFoldLine","containsRow","start","end","heightChanged","foldStart","getNextFoldLine","Infinity","lineElement","removeChildren","$renderLine","lineHeight","getRowLength","cells","length","cell","top","computeLineTop","scrollLines","oldConfig","pageChanged","moveContainer","oldLastRow","getFoldedRowCount","shift","pop","unshift","$renderLinesFragment","fragment","line","createCell","lineEl","setStyle","computeLineHeight","$useLineGroups","lines","getLength","$textToken","text","rparen","lparen","$renderToken","parent","screenColumn","token","value","m","re","valueFragment","createFragment","exec","tab","simpleSpace","controlCharacter","cjkSpace","cjk","before","index","slice","getScreenTabSize","cloneNode","com","characterWidth","type","classes","replace","renderIndentGuide","cols","search","count","substr","$createLineElement","$renderWrappedLine","tokens","splits","chars","split","splitChars","substring","indent","Number","MAX_VALUE","$renderSimpleLine","$renderOverflowMessage","overflowEl","position","right","$getFoldLineTokens","getTokens","lastLineEl","getRowSplitData","lastChild","invisibleEl","renderTokens","walk","placeholder","column","lastColumn","isNewRow","from","to","idx","col","addTokens","getLine","getUseWrapMode","destroy","call","prototype"],"mappings":"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","file":"../../layer/text.js","sourcesContent":["/* ***** BEGIN LICENSE BLOCK *****\r\n * Distributed under the BSD license:\r\n *\r\n * Copyright (c) 2010, Ajax.org B.V.\r\n * All rights reserved.\r\n * \r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *     * Redistributions of source code must retain the above copyright\r\n *       notice, this list of conditions and the following disclaimer.\r\n *     * Redistributions in binary form must reproduce the above copyright\r\n *       notice, this list of conditions and the following disclaimer in the\r\n *       documentation and/or other materials provided with the distribution.\r\n *     * Neither the name of Ajax.org B.V. nor the\r\n *       names of its contributors may be used to endorse or promote products\r\n *       derived from this software without specific prior written permission.\r\n * \r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\r\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY\r\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\r\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\r\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n *\r\n * ***** END LICENSE BLOCK ***** */\r\n\r\ndefine(function(require, exports, module) {\r\n\"use strict\";\r\n\r\nvar oop = require(\"../lib/oop\");\r\nvar dom = require(\"../lib/dom\");\r\nvar lang = require(\"../lib/lang\");\r\nvar Lines = require(\"./lines\").Lines;\r\nvar EventEmitter = require(\"../lib/event_emitter\").EventEmitter;\r\n\r\nvar Text = function(parentEl) {\r\n    this.dom = dom; \r\n    this.element = this.dom.createElement(\"div\");\r\n    this.element.className = \"ace_layer ace_text-layer\";\r\n    parentEl.appendChild(this.element);\r\n    this.$updateEolChar = this.$updateEolChar.bind(this);\r\n    this.$lines = new Lines(this.element);\r\n};\r\n\r\n(function() {\r\n\r\n    oop.implement(this, EventEmitter);\r\n\r\n    this.EOF_CHAR = \"\\xB6\";\r\n    this.EOL_CHAR_LF = \"\\xAC\";\r\n    this.EOL_CHAR_CRLF = \"\\xa4\";\r\n    this.EOL_CHAR = this.EOL_CHAR_LF;\r\n    this.TAB_CHAR = \"\\u2014\"; //\"\\u21E5\";\r\n    this.SPACE_CHAR = \"\\xB7\";\r\n    this.$padding = 0;\r\n    this.MAX_LINE_LENGTH = 10000;\r\n\r\n    this.$updateEolChar = function() {\r\n        var doc = this.session.doc;\r\n        var unixMode = doc.getNewLineCharacter() == \"\\n\" && doc.getNewLineMode() != \"windows\";\r\n        var EOL_CHAR = unixMode ? this.EOL_CHAR_LF : this.EOL_CHAR_CRLF;\r\n        if (this.EOL_CHAR != EOL_CHAR) {\r\n            this.EOL_CHAR = EOL_CHAR;\r\n            return true;\r\n        }\r\n    };\r\n\r\n    this.setPadding = function(padding) {\r\n        this.$padding = padding;\r\n        this.element.style.margin = \"0 \" + padding + \"px\";\r\n    };\r\n\r\n    this.getLineHeight = function() {\r\n        return this.$fontMetrics.$characterSize.height || 0;\r\n    };\r\n\r\n    this.getCharacterWidth = function() {\r\n        return this.$fontMetrics.$characterSize.width || 0;\r\n    };\r\n    \r\n    this.$setFontMetrics = function(measure) {\r\n        this.$fontMetrics = measure;\r\n        this.$fontMetrics.on(\"changeCharacterSize\", function(e) {\r\n            this._signal(\"changeCharacterSize\", e);\r\n        }.bind(this));\r\n        this.$pollSizeChanges();\r\n    };\r\n\r\n    this.checkForSizeChanges = function() {\r\n        this.$fontMetrics.checkForSizeChanges();\r\n    };\r\n    this.$pollSizeChanges = function() {\r\n        return this.$pollSizeChangesTimer = this.$fontMetrics.$pollSizeChanges();\r\n    };\r\n    this.setSession = function(session) {\r\n        this.session = session;\r\n        if (session)\r\n            this.$computeTabString();\r\n    };\r\n\r\n    this.showInvisibles = false;\r\n    this.setShowInvisibles = function(showInvisibles) {\r\n        if (this.showInvisibles == showInvisibles)\r\n            return false;\r\n\r\n        this.showInvisibles = showInvisibles;\r\n        this.$computeTabString();\r\n        return true;\r\n    };\r\n\r\n    this.displayIndentGuides = true;\r\n    this.setDisplayIndentGuides = function(display) {\r\n        if (this.displayIndentGuides == display)\r\n            return false;\r\n\r\n        this.displayIndentGuides = display;\r\n        this.$computeTabString();\r\n        return true;\r\n    };\r\n\r\n    this.$tabStrings = [];\r\n    this.onChangeTabSize =\r\n    this.$computeTabString = function() {\r\n        var tabSize = this.session.getTabSize();\r\n        this.tabSize = tabSize;\r\n        var tabStr = this.$tabStrings = [0];\r\n        for (var i = 1; i < tabSize + 1; i++) {\r\n            if (this.showInvisibles) {\r\n                var span = this.dom.createElement(\"span\");\r\n                span.className = \"ace_invisible ace_invisible_tab\";\r\n                span.textContent = lang.stringRepeat(this.TAB_CHAR, i);\r\n                tabStr.push(span);\r\n            } else {\r\n                tabStr.push(this.dom.createTextNode(lang.stringRepeat(\" \", i), this.element));\r\n            }\r\n        }\r\n        if (this.displayIndentGuides) {\r\n            this.$indentGuideRe =  /\\s\\S| \\t|\\t |\\s$/;\r\n            var className = \"ace_indent-guide\";\r\n            var spaceClass = \"\";\r\n            var tabClass = \"\";\r\n            if (this.showInvisibles) {\r\n                className += \" ace_invisible\";\r\n                spaceClass = \" ace_invisible_space\";\r\n                tabClass = \" ace_invisible_tab\";\r\n                var spaceContent = lang.stringRepeat(this.SPACE_CHAR, this.tabSize);\r\n                var tabContent = lang.stringRepeat(this.TAB_CHAR, this.tabSize);\r\n            } else {\r\n                var spaceContent = lang.stringRepeat(\" \", this.tabSize);\r\n                var tabContent = spaceContent;\r\n            }\r\n\r\n            var span = this.dom.createElement(\"span\");\r\n            span.className = className + spaceClass;\r\n            span.textContent = spaceContent;\r\n            this.$tabStrings[\" \"] = span;\r\n            \r\n            var span = this.dom.createElement(\"span\");\r\n            span.className = className + tabClass;\r\n            span.textContent = tabContent;\r\n            this.$tabStrings[\"\\t\"] = span;\r\n        }\r\n    };\r\n\r\n    this.updateLines = function(config, firstRow, lastRow) {\r\n        // Due to wrap line changes there can be new lines if e.g.\r\n        // the line to updated wrapped in the meantime.\r\n        if (this.config.lastRow != config.lastRow ||\r\n            this.config.firstRow != config.firstRow) {\r\n            return this.update(config);\r\n        }\r\n        \r\n        this.config = config;\r\n\r\n        var first = Math.max(firstRow, config.firstRow);\r\n        var last = Math.min(lastRow, config.lastRow);\r\n\r\n        var lineElements = this.element.childNodes;\r\n        var lineElementsIdx = 0;\r\n\r\n        for (var row = config.firstRow; row < first; row++) {\r\n            var foldLine = this.session.getFoldLine(row);\r\n            if (foldLine) {\r\n                if (foldLine.containsRow(first)) {\r\n                    first = foldLine.start.row;\r\n                    break;\r\n                } else {\r\n                    row = foldLine.end.row;\r\n                }\r\n            }\r\n            lineElementsIdx ++;\r\n        }\r\n\r\n        var heightChanged = false;\r\n        var row = first;\r\n        var foldLine = this.session.getNextFoldLine(row);\r\n        var foldStart = foldLine ? foldLine.start.row : Infinity;\r\n\r\n        while (true) {\r\n            if (row > foldStart) {\r\n                row = foldLine.end.row+1;\r\n                foldLine = this.session.getNextFoldLine(row, foldLine);\r\n                foldStart = foldLine ? foldLine.start.row :Infinity;\r\n            }\r\n            if (row > last)\r\n                break;\r\n\r\n            var lineElement = lineElements[lineElementsIdx++];\r\n            if (lineElement) {\r\n                this.dom.removeChildren(lineElement);\r\n                this.$renderLine(\r\n                    lineElement, row, row == foldStart ? foldLine : false\r\n                );\r\n                var height = (config.lineHeight * this.session.getRowLength(row)) + \"px\";\r\n                if (lineElement.style.height != height) {\r\n                    heightChanged = true;\r\n                    lineElement.style.height = height;\r\n                }\r\n            }\r\n            row++;\r\n        }\r\n        if (heightChanged) {\r\n            while (lineElementsIdx < this.$lines.cells.length) {\r\n                var cell = this.$lines.cells[lineElementsIdx++];\r\n                cell.element.style.top = this.$lines.computeLineTop(cell.row, config, this.session) + \"px\";\r\n            }\r\n        }\r\n    };\r\n\r\n    this.scrollLines = function(config) {\r\n        var oldConfig = this.config;\r\n        this.config = config;\r\n\r\n        if (this.$lines.pageChanged(oldConfig, config))\r\n            return this.update(config);\r\n            \r\n        this.$lines.moveContainer(config);\r\n        \r\n        var lastRow = config.lastRow;\r\n        var oldLastRow = oldConfig ? oldConfig.lastRow : -1;\r\n\r\n        if (!oldConfig || oldLastRow < config.firstRow)\r\n            return this.update(config);\r\n\r\n        if (lastRow < oldConfig.firstRow)\r\n            return this.update(config);\r\n\r\n        if (!oldConfig || oldConfig.lastRow < config.firstRow)\r\n            return this.update(config);\r\n\r\n        if (config.lastRow < oldConfig.firstRow)\r\n            return this.update(config);\r\n\r\n        if (oldConfig.firstRow < config.firstRow)\r\n            for (var row=this.session.getFoldedRowCount(oldConfig.firstRow, config.firstRow - 1); row>0; row--)\r\n                this.$lines.shift();\r\n\r\n        if (oldConfig.lastRow > config.lastRow)\r\n            for (var row=this.session.getFoldedRowCount(config.lastRow + 1, oldConfig.lastRow); row>0; row--)\r\n                this.$lines.pop();\r\n\r\n        if (config.firstRow < oldConfig.firstRow) {\r\n            this.$lines.unshift(this.$renderLinesFragment(config, config.firstRow, oldConfig.firstRow - 1));\r\n        }\r\n\r\n        if (config.lastRow > oldConfig.lastRow) {\r\n            this.$lines.push(this.$renderLinesFragment(config, oldConfig.lastRow + 1, config.lastRow));\r\n        }\r\n    };\r\n\r\n    this.$renderLinesFragment = function(config, firstRow, lastRow) {\r\n        var fragment = [];\r\n        var row = firstRow;\r\n        var foldLine = this.session.getNextFoldLine(row);\r\n        var foldStart = foldLine ? foldLine.start.row : Infinity;\r\n\r\n        while (true) {\r\n            if (row > foldStart) {\r\n                row = foldLine.end.row+1;\r\n                foldLine = this.session.getNextFoldLine(row, foldLine);\r\n                foldStart = foldLine ? foldLine.start.row : Infinity;\r\n            }\r\n            if (row > lastRow)\r\n                break;\r\n\r\n            var line = this.$lines.createCell(row, config, this.session);\r\n            \r\n            var lineEl = line.element;\r\n            this.dom.removeChildren(lineEl);\r\n            dom.setStyle(lineEl.style, \"height\", this.$lines.computeLineHeight(row, config, this.session) + \"px\");\r\n            dom.setStyle(lineEl.style, \"top\", this.$lines.computeLineTop(row, config, this.session) + \"px\");\r\n\r\n            // Get the tokens per line as there might be some lines in between\r\n            // beeing folded.\r\n            this.$renderLine(lineEl, row, row == foldStart ? foldLine : false);\r\n\r\n            if (this.$useLineGroups()) {\r\n                lineEl.className = \"ace_line_group\";\r\n            } else {\r\n                lineEl.className = \"ace_line\";\r\n            }\r\n            fragment.push(line);\r\n\r\n            row++;\r\n        }\r\n        return fragment;\r\n    };\r\n\r\n    this.update = function(config) {\r\n        this.$lines.moveContainer(config);\r\n        \r\n        this.config = config;\r\n\r\n        var firstRow = config.firstRow;\r\n        var lastRow = config.lastRow;\r\n\r\n        var lines = this.$lines;\r\n        while (lines.getLength())\r\n            lines.pop();\r\n            \r\n        lines.push(this.$renderLinesFragment(config, firstRow, lastRow));\r\n    };\r\n\r\n    this.$textToken = {\r\n        \"text\": true,\r\n        \"rparen\": true,\r\n        \"lparen\": true\r\n    };\r\n\r\n    this.$renderToken = function(parent, screenColumn, token, value) {\r\n        var self = this;\r\n        var re = /(\\t)|( +)|([\\x00-\\x1f\\x80-\\xa0\\xad\\u1680\\u180E\\u2000-\\u200f\\u2028\\u2029\\u202F\\u205F\\uFEFF\\uFFF9-\\uFFFC]+)|(\\u3000)|([\\u1100-\\u115F\\u11A3-\\u11A7\\u11FA-\\u11FF\\u2329-\\u232A\\u2E80-\\u2E99\\u2E9B-\\u2EF3\\u2F00-\\u2FD5\\u2FF0-\\u2FFB\\u3001-\\u303E\\u3041-\\u3096\\u3099-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u3190-\\u31BA\\u31C0-\\u31E3\\u31F0-\\u321E\\u3220-\\u3247\\u3250-\\u32FE\\u3300-\\u4DBF\\u4E00-\\uA48C\\uA490-\\uA4C6\\uA960-\\uA97C\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFAFF\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE66\\uFE68-\\uFE6B\\uFF01-\\uFF60\\uFFE0-\\uFFE6]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF])/g;\r\n        \r\n        var valueFragment = this.dom.createFragment(this.element);\r\n\r\n        var m;\r\n        var i = 0;\r\n        while (m = re.exec(value)) {\r\n            var tab = m[1];\r\n            var simpleSpace = m[2];\r\n            var controlCharacter = m[3];\r\n            var cjkSpace = m[4];\r\n            var cjk = m[5];\r\n            \r\n            if (!self.showInvisibles && simpleSpace)\r\n                continue;\r\n\r\n            var before = i != m.index ? value.slice(i, m.index) : \"\";\r\n\r\n            i = m.index + m[0].length;\r\n            \r\n            if (before) {\r\n                valueFragment.appendChild(this.dom.createTextNode(before, this.element));\r\n            }\r\n                \r\n            if (tab) {\r\n                var tabSize = self.session.getScreenTabSize(screenColumn + m.index);\r\n                valueFragment.appendChild(self.$tabStrings[tabSize].cloneNode(true));\r\n                screenColumn += tabSize - 1;\r\n            } else if (simpleSpace) {\r\n                if (self.showInvisibles) {\r\n                    var span = this.dom.createElement(\"span\");\r\n                    span.className = \"ace_invisible ace_invisible_space\";\r\n                    span.textContent = lang.stringRepeat(self.SPACE_CHAR, simpleSpace.length);\r\n                    valueFragment.appendChild(span);\r\n                } else {\r\n                    valueFragment.appendChild(this.com.createTextNode(simpleSpace, this.element));\r\n                }\r\n            } else if (controlCharacter) {\r\n                var span = this.dom.createElement(\"span\");\r\n                span.className = \"ace_invisible ace_invisible_space ace_invalid\";\r\n                span.textContent = lang.stringRepeat(self.SPACE_CHAR, controlCharacter.length);\r\n                valueFragment.appendChild(span);\r\n            } else if (cjkSpace) {\r\n                // U+3000 is both invisible AND full-width, so must be handled uniquely\r\n                var space = self.showInvisibles ? self.SPACE_CHAR : \"\";\r\n                screenColumn += 1;\r\n                \r\n                var span = this.dom.createElement(\"span\");\r\n                span.style.width = (self.config.characterWidth * 2) + \"px\";\r\n                span.className = self.showInvisibles ? \"ace_cjk ace_invisible ace_invisible_space\" : \"ace_cjk\";\r\n                span.textContent = self.showInvisibles ? self.SPACE_CHAR : \"\";\r\n                valueFragment.appendChild(span);\r\n            } else if (cjk) {\r\n                screenColumn += 1;\r\n                var span = dom.createElement(\"span\");\r\n                span.style.width = (self.config.characterWidth * 2) + \"px\";\r\n                span.className = \"ace_cjk\";\r\n                span.textContent = cjk;\r\n                valueFragment.appendChild(span);\r\n            }\r\n        }\r\n        \r\n        valueFragment.appendChild(this.dom.createTextNode(i ? value.slice(i) : value, this.element));\r\n\r\n        if (!this.$textToken[token.type]) {\r\n            var classes = \"ace_\" + token.type.replace(/\\./g, \" ace_\");\r\n            var span = this.dom.createElement(\"span\");\r\n            if (token.type == \"fold\")\r\n                span.style.width = (token.value.length * this.config.characterWidth) + \"px\";\r\n                \r\n            span.className = classes;\r\n            span.appendChild(valueFragment);\r\n            \r\n            parent.appendChild(span);\r\n        }\r\n        else {\r\n            parent.appendChild(valueFragment);\r\n        }\r\n        \r\n        return screenColumn + value.length;\r\n    };\r\n\r\n    this.renderIndentGuide = function(parent, value, max) {\r\n        var cols = value.search(this.$indentGuideRe);\r\n        if (cols <= 0 || cols >= max)\r\n            return value;\r\n        if (value[0] == \" \") {\r\n            cols -= cols % this.tabSize;\r\n            var count = cols/this.tabSize;\r\n            for (var i=0; i<count; i++) {\r\n                parent.appendChild(this.$tabStrings[\" \"].cloneNode(true));\r\n            }\r\n            return value.substr(cols);\r\n        } else if (value[0] == \"\\t\") {\r\n            for (var i=0; i<cols; i++) {\r\n                parent.appendChild(this.$tabStrings[\"\\t\"].cloneNode(true));\r\n            }\r\n            return value.substr(cols);\r\n        }\r\n        return value;\r\n    };\r\n\r\n    this.$createLineElement = function(parent) {\r\n        var lineEl = this.dom.createElement(\"div\");\r\n        lineEl.className = \"ace_line\";\r\n        lineEl.style.height = this.config.lineHeight + \"px\";\r\n        \r\n        return lineEl;\r\n    };\r\n\r\n    this.$renderWrappedLine = function(parent, tokens, splits) {\r\n        var chars = 0;\r\n        var split = 0;\r\n        var splitChars = splits[0];\r\n        var screenColumn = 0;\r\n\r\n        var lineEl = this.$createLineElement();\r\n        parent.appendChild(lineEl);\r\n        \r\n        for (var i = 0; i < tokens.length; i++) {\r\n            var token = tokens[i];\r\n            var value = token.value;\r\n            if (i == 0 && this.displayIndentGuides) {\r\n                chars = value.length;\r\n                value = this.renderIndentGuide(lineEl, value, splitChars);\r\n                if (!value)\r\n                    continue;\r\n                chars -= value.length;\r\n            }\r\n\r\n            if (chars + value.length < splitChars) {\r\n                screenColumn = this.$renderToken(lineEl, screenColumn, token, value);\r\n                chars += value.length;\r\n            } else {\r\n                while (chars + value.length >= splitChars) {\r\n                    screenColumn = this.$renderToken(\r\n                        lineEl, screenColumn,\r\n                        token, value.substring(0, splitChars - chars)\r\n                    );\r\n                    value = value.substring(splitChars - chars);\r\n                    chars = splitChars;\r\n\r\n                    lineEl = this.$createLineElement();\r\n                    parent.appendChild(lineEl);\r\n\r\n                    lineEl.appendChild(this.dom.createTextNode(lang.stringRepeat(\"\\xa0\", splits.indent), this.element));\r\n\r\n                    split ++;\r\n                    screenColumn = 0;\r\n                    splitChars = splits[split] || Number.MAX_VALUE;\r\n                }\r\n                if (value.length != 0) {\r\n                    chars += value.length;\r\n                    screenColumn = this.$renderToken(\r\n                        lineEl, screenColumn, token, value\r\n                    );\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    this.$renderSimpleLine = function(parent, tokens) {\r\n        var screenColumn = 0;\r\n        var token = tokens[0];\r\n        var value = token.value;\r\n        if (this.displayIndentGuides)\r\n            value = this.renderIndentGuide(parent, value);\r\n        if (value)\r\n            screenColumn = this.$renderToken(parent, screenColumn, token, value);\r\n        for (var i = 1; i < tokens.length; i++) {\r\n            token = tokens[i];\r\n            value = token.value;\r\n            if (screenColumn + value.length > this.MAX_LINE_LENGTH)\r\n                return this.$renderOverflowMessage(parent, screenColumn, token, value);\r\n            screenColumn = this.$renderToken(parent, screenColumn, token, value);\r\n        }\r\n    };\r\n    \r\n    this.$renderOverflowMessage = function(parent, screenColumn, token, value) {\r\n        this.$renderToken(parent, screenColumn, token,\r\n            value.slice(0, this.MAX_LINE_LENGTH - screenColumn));\r\n            \r\n        var overflowEl = this.dom.createElement(\"span\");\r\n        overflowEl.className = \"ace_inline_button ace_keyword ace_toggle_wrap\";\r\n        overflowEl.style.position = \"absolute\";\r\n        overflowEl.style.right = \"0\";\r\n        overflowEl.textContent = \"<click to see more...>\";\r\n        \r\n        parent.appendChild(overflowEl);        \r\n    };\r\n\r\n    // row is either first row of foldline or not in fold\r\n    this.$renderLine = function(parent, row, foldLine) {\r\n        if (!foldLine && foldLine != false)\r\n            foldLine = this.session.getFoldLine(row);\r\n\r\n        if (foldLine)\r\n            var tokens = this.$getFoldLineTokens(row, foldLine);\r\n        else\r\n            var tokens = this.session.getTokens(row);\r\n\r\n        var lastLineEl = parent;\r\n        if (tokens.length) {\r\n            var splits = this.session.getRowSplitData(row);\r\n            if (splits && splits.length) {\r\n                this.$renderWrappedLine(parent, tokens, splits);\r\n                var lastLineEl = parent.lastChild;\r\n            } else {\r\n                var lastLineEl = parent;\r\n                if (this.$useLineGroups()) {\r\n                    lastLineEl = this.$createLineElement();\r\n                    parent.appendChild(lastLineEl);\r\n                }\r\n                this.$renderSimpleLine(lastLineEl, tokens);\r\n            }\r\n        } else if (this.$useLineGroups()) {\r\n            lastLineEl = this.$createLineElement();\r\n            parent.appendChild(lastLineEl);\r\n        }\r\n\r\n        if (this.showInvisibles && lastLineEl) {\r\n            if (foldLine)\r\n                row = foldLine.end.row;\r\n\r\n            var invisibleEl = this.dom.createElement(\"span\");\r\n            invisibleEl.className = \"ace_invisible ace_invisible_eol\";\r\n            invisibleEl.textContent = row == this.session.getLength() - 1 ? this.EOF_CHAR : this.EOL_CHAR;\r\n            \r\n            lastLineEl.appendChild(invisibleEl);\r\n        }\r\n    };\r\n\r\n    this.$getFoldLineTokens = function(row, foldLine) {\r\n        var session = this.session;\r\n        var renderTokens = [];\r\n\r\n        function addTokens(tokens, from, to) {\r\n            var idx = 0, col = 0;\r\n            while ((col + tokens[idx].value.length) < from) {\r\n                col += tokens[idx].value.length;\r\n                idx++;\r\n\r\n                if (idx == tokens.length)\r\n                    return;\r\n            }\r\n            if (col != from) {\r\n                var value = tokens[idx].value.substring(from - col);\r\n                // Check if the token value is longer then the from...to spacing.\r\n                if (value.length > (to - from))\r\n                    value = value.substring(0, to - from);\r\n\r\n                renderTokens.push({\r\n                    type: tokens[idx].type,\r\n                    value: value\r\n                });\r\n\r\n                col = from + value.length;\r\n                idx += 1;\r\n            }\r\n\r\n            while (col < to && idx < tokens.length) {\r\n                var value = tokens[idx].value;\r\n                if (value.length + col > to) {\r\n                    renderTokens.push({\r\n                        type: tokens[idx].type,\r\n                        value: value.substring(0, to - col)\r\n                    });\r\n                } else\r\n                    renderTokens.push(tokens[idx]);\r\n                col += value.length;\r\n                idx += 1;\r\n            }\r\n        }\r\n\r\n        var tokens = session.getTokens(row);\r\n        foldLine.walk(function(placeholder, row, column, lastColumn, isNewRow) {\r\n            if (placeholder != null) {\r\n                renderTokens.push({\r\n                    type: \"fold\",\r\n                    value: placeholder\r\n                });\r\n            } else {\r\n                if (isNewRow)\r\n                    tokens = session.getTokens(row);\r\n\r\n                if (tokens.length)\r\n                    addTokens(tokens, lastColumn, column);\r\n            }\r\n        }, foldLine.end.row, this.session.getLine(foldLine.end.row).length);\r\n\r\n        return renderTokens;\r\n    };\r\n\r\n    this.$useLineGroups = function() {\r\n        // For the updateLines function to work correctly, it's important that the\r\n        // child nodes of this.element correspond on a 1-to-1 basis to rows in the\r\n        // document (as distinct from lines on the screen). For sessions that are\r\n        // wrapped, this means we need to add a layer to the node hierarchy (tagged\r\n        // with the class name ace_line_group).\r\n        return this.session.getUseWrapMode();\r\n    };\r\n\r\n    this.destroy = function() {};\r\n}).call(Text.prototype);\r\n\r\nexports.Text = Text;\r\n\r\n});\r\n"]}