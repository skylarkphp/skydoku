{"version":3,"sources":["skylark-domx-images.js"],"names":["define","skylark","langx","eventer","noder","finder","geom","styler","datax","transforms","$","watch","imgs","isArray","totalCount","length","progressedCount","successedCount","faileredCount","d","Deferred","complete","resolve","total","successed","failered","progress","img","isLoaded","progressed","defer","forEach","isCompleted","on","load","error","promise","undefined","naturalWidth","loaded","elm","options","addBackgroundImage","elm1","matches","exec","css","url","Image","src","push","nodeName","childImgs","findAll","i","background","children","viewer","el","style","clientSize","loadedCallback","onload","top","height","offsetHeight","left","width","offsetWidth","reset","visibility","onerror","_load","position","border","padding","margin","append","_init","ret","dispose","remove","name","args","makeArray","arguments","unshift","apply","images","fn","imagesLoaded","this","imagesViewer","transform","mixin","preload","urls","isString","attach","main"],"mappings":"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","file":"../skylark-domx-images.js","sourcesContent":["define('skylark-domx-images/images',[\r\n    \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-eventer\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-finder\",\r\n    \"skylark-domx-geom\",\r\n    \"skylark-domx-styler\",\r\n    \"skylark-domx-data\",\r\n    \"skylark-domx-transforms\",\r\n    \"skylark-domx-query\"\r\n], function(skylark,langx,eventer,noder,finder,geom,styler,datax,transforms,$) {\r\n\r\n  function watch(imgs) {\r\n    if (!langx.isArray(imgs)) {\r\n      imgs = [imgs];\r\n    }\r\n    var totalCount = imgs.length,\r\n        progressedCount = 0,\r\n        successedCount = 0,\r\n        faileredCount = 0,\r\n        d = new langx.Deferred();\r\n\r\n\r\n    function complete() {\r\n\r\n      d.resolve({\r\n        \"total\" : totalCount,\r\n        \"successed\" : successedCount,\r\n        \"failered\" : faileredCount,\r\n        \"imgs\" : imgs \r\n      });\r\n    }\r\n\r\n    function progress(img,isLoaded) {\r\n\r\n      progressedCount++;\r\n      if (isLoaded) {\r\n        successedCount ++ ; \r\n      } else {\r\n        faileredCount ++ ;\r\n      }\r\n\r\n      // progress event\r\n      d.progress({\r\n        \"img\" : img,\r\n        \"isLoaded\" : isLoaded,\r\n        \"progressed\" : progressedCount,\r\n        \"total\" : totalCount,\r\n        \"imgs\" : imgs \r\n      });\r\n\r\n      // check if completed\r\n      if ( progressedCount == totalCount ) {\r\n        complete();\r\n      }\r\n    }\r\n\r\n    function check() {\r\n      if (!imgs.length ) {\r\n        complete();\r\n        return;\r\n      }\r\n\r\n      imgs.forEach(function(img) {\r\n        if (isCompleted(img)) {\r\n          progress(img,isLoaded(img));\r\n        } else {\r\n          eventer.on(img,{\r\n            \"load\" : function() {\r\n              progress(img,true);\r\n            },\r\n\r\n            \"error\" : function() {\r\n              progress(img,false);\r\n            }\r\n          });      \r\n        }\r\n      });\r\n    }\r\n\r\n    langx.defer(check);\r\n\r\n    d.promise.totalCount = totalCount;\r\n    return d.promise;\r\n  }\r\n\r\n\r\n  function isCompleted(img) {\r\n     return img.complete && img.naturalWidth !== undefined;\r\n  }\r\n\r\n  function isLoaded(img) {\r\n    return img.complete && img.naturalWidth !== 0;\r\n  }\r\n\r\n  function loaded(elm,options) {\r\n    var imgs = [];\r\n\r\n    options = options || {};\r\n\r\n    function addBackgroundImage (elm1) {\r\n\r\n      var reURL = /url\\((['\"])?(.*?)\\1\\)/gi;\r\n      var matches = reURL.exec( styler.css(elm1,\"background-image\"));\r\n      var url = matches && matches[2];\r\n      if ( url ) {\r\n        var img = new Image();\r\n        img.src = url;\r\n        imgs.push(img);\r\n      }\r\n    }\r\n\r\n    // filter siblings\r\n    if ( elm.nodeName == 'IMG' ) {\r\n      imgs.push( elm );\r\n    } else {\r\n      // find children\r\n      var childImgs = finder.findAll(elm,'img');\r\n      // concat childElems to filterFound array\r\n      for ( var i=0; i < childImgs.length; i++ ) {\r\n        imgs.push(childImgs[i]);\r\n      }\r\n\r\n      // get background image on element\r\n      if ( options.background === true ) {\r\n        addBackgroundImage(elm);\r\n      } else  if ( typeof options.background == 'string' ) {\r\n        var children = finder.findAll(elm, options.background );\r\n        for ( i=0; i < children.length; i++ ) {\r\n          addBackgroundImage( children[i] );\r\n        }\r\n      }\r\n    }\r\n\r\n    return watch(imgs);\r\n  }\r\n\r\n  function preload(urls,options) {\r\n      if (langx.isString(urls)) {\r\n        urls = [urls];\r\n      }\r\n      var images = [];\r\n\r\n      urls.forEach(function(url){\r\n        var img = new Image();\r\n        img.src = url;\r\n        images.push(img);\r\n      });\r\n\r\n      return watch(images);\r\n  }\r\n\r\n\r\n  $.fn.imagesLoaded = function( options ) {\r\n    return loaded(this,options);\r\n  };\r\n\r\n\r\n  function viewer(el,options) {\r\n    var img ,\r\n        style = {},\r\n        clientSize = geom.clientSize(el),\r\n        loadedCallback = options.loaded,\r\n        faileredCallback = options.failered;\r\n\r\n    function onload() {\r\n        styler.css(img,{//居中\r\n          top: (clientSize.height - img.offsetHeight) / 2 + \"px\",\r\n          left: (clientSize.width - img.offsetWidth) / 2 + \"px\"\r\n        });\r\n\r\n        transforms.reset(img);\r\n\r\n        styler.css(img,{\r\n          visibility: \"visible\"\r\n        });\r\n\r\n        if (loadedCallback) {\r\n          loadedCallback();\r\n        }\r\n    }\r\n\r\n    function onerror() {\r\n\r\n    }\r\n    function _init() {\r\n      style = styler.css(el,[\"position\",\"overflow\"]);\r\n      if (style.position != \"relative\" && style.position != \"absolute\") { \r\n        styler.css(el,\"position\", \"relative\" );\r\n      }\r\n      styler.css(el,\"overflow\", \"hidden\" );\r\n\r\n      img = new Image();\r\n\r\n      styler.css(img,{\r\n        position: \"absolute\",\r\n        border: 0, padding: 0, margin: 0, width: \"auto\", height: \"auto\",\r\n        visibility: \"hidden\"\r\n      });\r\n\r\n      img.onload = onload;\r\n      img.onerror = onerror;\r\n\r\n      noder.append(el,img);\r\n\r\n      if (options.url) {\r\n        _load(options.url);\r\n      }\r\n    }\r\n\r\n    function _load(url) {\r\n        img.style.visibility = \"hidden\";\r\n        img.src = url;\r\n    }\r\n\r\n    function _dispose() {\r\n        noder.remove(img);\r\n        styler.css(el,style);\r\n        img = img.onload = img.onerror = null;\r\n    }\r\n\r\n    _init();\r\n\r\n    var ret =  {\r\n      load : _load,\r\n      dispose : _dispose\r\n    };\r\n\r\n    [\"vertical\",\"horizontal\",\"rotate\",\"left\",\"right\",\"scale\",\"zoom\",\"zoomin\",\"zoomout\",\"reset\"].forEach(\r\n      function(name){\r\n        ret[name] = function() {\r\n          var args = langx.makeArray(arguments);\r\n          args.unshift(img);\r\n          transforms[name].apply(null,args);\r\n        }\r\n      }\r\n    );\r\n\r\n    return ret;\r\n  }\r\n\r\n  $.fn.imagesViewer = function( options ) {\r\n    return viewer(this,options);\r\n  };\r\n\r\n  function images() {\r\n    return images;\r\n  }\r\n\r\n  images.transform = function (el,options) {\r\n  };\r\n\r\n  [\"vertical\",\"horizontal\",\"rotate\",\"left\",\"right\",\"scale\",\"zoom\",\"zoomin\",\"zoomout\",\"reset\"].forEach(\r\n    function(name){\r\n      images.transform[name] = transforms[name];\r\n    }\r\n  );\r\n\r\n\r\n  langx.mixin(images, {\r\n    isCompleted : isCompleted,\r\n\r\n    isLoaded : isLoaded,\r\n\r\n    loaded : loaded,\r\n\r\n    preload : preload,\r\n\r\n    viewer : viewer\r\n  });\r\n\r\n  return skylark.attach(\"domx.images\" , images);\r\n});\r\n\ndefine('skylark-domx-images/main',[\r\n\t\"./images\"\r\n],function(images){\r\n\treturn images;\r\n});\ndefine('skylark-domx-images', ['skylark-domx-images/main'], function (main) { return main; });\n\n"]}