{"version":3,"sources":["addon/lint/html-lint.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","window","HTMLHint","defaultRules","tagname-lowercase","attr-lowercase","attr-value-double-quotes","doctype-first","tag-pair","spec-char-escape","id-unique","src-not-empty","attr-no-duplication","registerHelper","text","options","found","verify","console","error","messages","rules","i","length","message","startLine","line","endLine","startCol","col","endCol","push","from","Pos","to","severity","type"],"mappings":";;;;;;;CAOA,SAAUA,GACc,iBAAXC,SAAwC,iBAAVC,OACvCF,EAAIG,QAAQ,wBAAyBA,QAAQ,aACrB,mBAAVC,QAAwBA,OAAOC,IAC7CD,QAAQ,uBAAwB,YAAaJ,GAE7CA,EAAIM,WAAYC,OAAOC,UAN3B,CAOG,SAASF,EAAYE,GACtB,aAEA,IAAIC,GACFC,qBAAqB,EACrBC,kBAAkB,EAClBC,4BAA4B,EAC5BC,iBAAiB,EACjBC,YAAY,EACZC,oBAAoB,EACpBC,aAAa,EACbC,iBAAiB,EACjBC,uBAAuB,GAGzBZ,EAAWa,eAAe,OAAQ,OAAQ,SAASC,EAAMC,GACvD,IAAIC,KAGJ,GAFId,IAAaA,EAASe,SAAQf,EAAWA,EAASA,UACjDA,IAAUA,EAAWD,OAAOC,WAC5BA,EAIH,OAHID,OAAOiB,SACPjB,OAAOiB,QAAQC,MAAM,kIAElBH,EAGT,IADA,IAAII,EAAWlB,EAASe,OAAOH,EAAMC,GAAWA,EAAQM,OAASlB,GACxDmB,EAAI,EAAGA,EAAIF,EAASG,OAAQD,IAAK,CACxC,IAAIE,EAAUJ,EAASE,GACnBG,EAAYD,EAAQE,KAAO,EAAGC,EAAUH,EAAQE,KAAO,EAAGE,EAAWJ,EAAQK,IAAM,EAAGC,EAASN,EAAQK,IAC3Gb,EAAMe,MACJC,KAAMhC,EAAWiC,IAAIR,EAAWG,GAChCM,GAAIlC,EAAWiC,IAAIN,EAASG,GAC5BN,QAASA,EAAQA,QACjBW,SAAWX,EAAQY,OAGvB,OAAOpB","file":"../../../addon/lint/html-lint.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n// Depends on htmlhint.js from http://htmlhint.com/js/htmlhint.js\n\n// declare global: HTMLHint\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"htmlhint\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"htmlhint\"], mod);\n  else // Plain browser env\n    mod(CodeMirror, window.HTMLHint);\n})(function(CodeMirror, HTMLHint) {\n  \"use strict\";\n\n  var defaultRules = {\n    \"tagname-lowercase\": true,\n    \"attr-lowercase\": true,\n    \"attr-value-double-quotes\": true,\n    \"doctype-first\": false,\n    \"tag-pair\": true,\n    \"spec-char-escape\": true,\n    \"id-unique\": true,\n    \"src-not-empty\": true,\n    \"attr-no-duplication\": true\n  };\n\n  CodeMirror.registerHelper(\"lint\", \"html\", function(text, options) {\n    var found = [];\n    if (HTMLHint && !HTMLHint.verify) HTMLHint = HTMLHint.HTMLHint;\n    if (!HTMLHint) HTMLHint = window.HTMLHint;\n    if (!HTMLHint) {\n      if (window.console) {\n          window.console.error(\"Error: HTMLHint not found, not defined on window, or not available through define/require, CodeMirror HTML linting cannot run.\");\n      }\n      return found;\n    }\n    var messages = HTMLHint.verify(text, options && options.rules || defaultRules);\n    for (var i = 0; i < messages.length; i++) {\n      var message = messages[i];\n      var startLine = message.line - 1, endLine = message.line - 1, startCol = message.col - 1, endCol = message.col;\n      found.push({\n        from: CodeMirror.Pos(startLine, startCol),\n        to: CodeMirror.Pos(endLine, endCol),\n        message: message.message,\n        severity : message.type\n      });\n    }\n    return found;\n  });\n});\n"]}