{"version":3,"sources":["addon/mode/loadmode.js"],"names":["mod","exports","module","require","define","amd","CM","CodeMirror","env","modeURL","loading","ensureDeps","mode","cont","deps","modes","dependencies","missing","i","length","hasOwnProperty","push","split","n","countDown","splitCallback","requireMode","name","file","replace","script","document","createElement","src","others","getElementsByTagName","list","on","parentNode","insertBefore","requirejs","autoLoadMode","instance","setOption","getOption"],"mappings":";;;;;;;CAGA,SAAUA,GACc,iBAAXC,SAAwC,iBAAVC,OACvCF,EAAIG,QAAQ,wBAAyB,OACb,mBAAVC,QAAwBA,OAAOC,IAC7CD,QAAQ,wBAAyB,SAASE,GAAMN,EAAIM,EAAI,SAExDN,EAAIO,WAAY,SANpB,CAOG,SAASA,EAAYC,GACjBD,EAAWE,UAASF,EAAWE,QAAU,oBAE9C,IAAIC,KAKJ,SAASC,EAAWC,EAAMC,GACxB,IAAIC,EAAOP,EAAWQ,MAAMH,GAAMI,aAClC,IAAKF,EAAM,OAAOD,IAElB,IADA,IAAII,KACKC,EAAI,EAAGA,EAAIJ,EAAKK,SAAUD,EAC5BX,EAAWQ,MAAMK,eAAeN,EAAKI,KACxCD,EAAQI,KAAKP,EAAKI,IAEtB,IAAKD,EAAQE,OAAQ,OAAON,IAC5B,IAAIS,EAbN,SAAuBT,EAAMU,GAC3B,IAAIC,EAAYD,EAChB,OAAO,WAAgC,KAAbC,GAAgBX,KAW9BY,CAAcZ,EAAMI,EAAQE,QACxC,IAASD,EAAI,EAAGA,EAAID,EAAQE,SAAUD,EACpCX,EAAWmB,YAAYT,EAAQC,GAAII,GAGvCf,EAAWmB,YAAc,SAASd,EAAMC,GAEtC,GADmB,iBAARD,IAAkBA,EAAOA,EAAKe,MACrCpB,EAAWQ,MAAMK,eAAeR,GAAO,OAAOD,EAAWC,EAAMC,GACnE,GAAIH,EAAQU,eAAeR,GAAO,OAAOF,EAAQE,GAAMS,KAAKR,GAE5D,IAAIe,EAAOrB,EAAWE,QAAQoB,QAAQ,MAAOjB,GAC7C,GAAW,SAAPJ,EAAgB,CAClB,IAAIsB,EAASC,SAASC,cAAc,UACpCF,EAAOG,IAAML,EACb,IAAIM,EAASH,SAASI,qBAAqB,UAAU,GACjDC,EAAO1B,EAAQE,IAASC,GAC5BN,EAAW8B,GAAGP,EAAQ,OAAQ,WAC5BnB,EAAWC,EAAM,WACf,IAAK,IAAIM,EAAI,EAAGA,EAAIkB,EAAKjB,SAAUD,EAAGkB,EAAKlB,SAG/CgB,EAAOI,WAAWC,aAAaT,EAAQI,OACvB,OAAP1B,GACTL,QAAQyB,GACRf,KACgB,OAAPL,GACTgC,WAAWZ,GAAOf,IAItBN,EAAWkC,aAAe,SAASC,EAAU9B,GACtCL,EAAWQ,MAAMK,eAAeR,IACnCL,EAAWmB,YAAYd,EAAM,WAC3B8B,EAASC,UAAU,OAAQD,EAASE,UAAU","file":"../../../addon/mode/loadmode.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), \"cjs\");\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], function(CM) { mod(CM, \"amd\"); });\n  else // Plain browser env\n    mod(CodeMirror, \"plain\");\n})(function(CodeMirror, env) {\n  if (!CodeMirror.modeURL) CodeMirror.modeURL = \"../mode/%N/%N.js\";\n\n  var loading = {};\n  function splitCallback(cont, n) {\n    var countDown = n;\n    return function() { if (--countDown == 0) cont(); };\n  }\n  function ensureDeps(mode, cont) {\n    var deps = CodeMirror.modes[mode].dependencies;\n    if (!deps) return cont();\n    var missing = [];\n    for (var i = 0; i < deps.length; ++i) {\n      if (!CodeMirror.modes.hasOwnProperty(deps[i]))\n        missing.push(deps[i]);\n    }\n    if (!missing.length) return cont();\n    var split = splitCallback(cont, missing.length);\n    for (var i = 0; i < missing.length; ++i)\n      CodeMirror.requireMode(missing[i], split);\n  }\n\n  CodeMirror.requireMode = function(mode, cont) {\n    if (typeof mode != \"string\") mode = mode.name;\n    if (CodeMirror.modes.hasOwnProperty(mode)) return ensureDeps(mode, cont);\n    if (loading.hasOwnProperty(mode)) return loading[mode].push(cont);\n\n    var file = CodeMirror.modeURL.replace(/%N/g, mode);\n    if (env == \"plain\") {\n      var script = document.createElement(\"script\");\n      script.src = file;\n      var others = document.getElementsByTagName(\"script\")[0];\n      var list = loading[mode] = [cont];\n      CodeMirror.on(script, \"load\", function() {\n        ensureDeps(mode, function() {\n          for (var i = 0; i < list.length; ++i) list[i]();\n        });\n      });\n      others.parentNode.insertBefore(script, others);\n    } else if (env == \"cjs\") {\n      require(file);\n      cont();\n    } else if (env == \"amd\") {\n      requirejs([file], cont);\n    }\n  };\n\n  CodeMirror.autoLoadMode = function(instance, mode) {\n    if (!CodeMirror.modes.hasOwnProperty(mode))\n      CodeMirror.requireMode(mode, function() {\n        instance.setOption(\"mode\", instance.getOption(\"mode\"));\n      });\n  };\n});\n"]}