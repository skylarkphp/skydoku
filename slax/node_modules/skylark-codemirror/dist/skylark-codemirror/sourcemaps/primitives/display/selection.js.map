{"version":3,"sources":["primitives/display/selection.js"],"names":["define","a","b","c","d","e","f","drawSelectionCursor","cm","head","output","pos","cursorCoords","options","singleCursorHeightPerLine","cursor","appendChild","elt","style","left","top","height","Math","max","bottom","cursorHeight","other","otherCursor","display","cmpCoords","drawSelectionRange","range","doc","fragment","document","createDocumentFragment","padding","paddingH","leftSide","rightSide","sizerWidth","displayWidth","sizer","offsetLeft","right","docLTR","direction","add","width","round","drawForLine","line","fromArg","toArg","start","end","lineObj","getLine","lineLen","text","length","coords","ch","bias","charCoords","Pos","wrapX","dir","side","extent","wrappedLineExtentChar","prop","begin","test","charAt","order","getOrder","iterateBidiSections","from","to","i","ltr","fromPos","toPos","openStart","openEnd","first","last","openRight","topLeft","topRight","botLeft","botRight","sFrom","sTo","fromLine","toLine","singleVLine","visualLine","leftEnd","rightStart","updateSelection","input","showSelection","prepareSelection","primary","result","curFragment","cursors","selFragment","selection","sel","ranges","primIndex","viewTo","viewFrom","collapsed","empty","showCursorWhenSelecting","restartBlink","state","focused","clearInterval","blinker","on","cursorDiv","visibility","cursorBlinkRate","setInterval"],"mappings":";;;;;;;AAAAA,QACI,cACA,gBACA,qBACA,sCACA,eACA,eACD,SAAUC,EAAGC,EAAGC,EAAGC,EAAGC,EAAGC,GACxB,aAsBA,SAASC,EAAoBC,EAAIC,EAAMC,GACnC,IAAIC,EAAMP,EAAEQ,aAAaJ,EAAIC,EAAM,MAAO,KAAM,MAAOD,EAAGK,QAAQC,2BAC9DC,EAASL,EAAOM,YAAYV,EAAEW,IAAI,MAAO,IAAQ,sBAIrD,GAHAF,EAAOG,MAAMC,KAAOR,EAAIQ,KAAO,KAC/BJ,EAAOG,MAAME,IAAMT,EAAIS,IAAM,KAC7BL,EAAOG,MAAMG,OAASC,KAAKC,IAAI,EAAGZ,EAAIa,OAASb,EAAIS,KAAOZ,EAAGK,QAAQY,aAAe,KAChFd,EAAIe,MAAO,CACX,IAAIC,EAAcjB,EAAOM,YAAYV,EAAEW,IAAI,MAAO,IAAQ,iDAC1DU,EAAYT,MAAMU,QAAU,GAC5BD,EAAYT,MAAMC,KAAOR,EAAIe,MAAMP,KAAO,KAC1CQ,EAAYT,MAAME,IAAMT,EAAIe,MAAMN,IAAM,KACxCO,EAAYT,MAAMG,OAA8C,KAApCV,EAAIe,MAAMF,OAASb,EAAIe,MAAMN,KAAc,MAG/E,SAASS,EAAU5B,EAAGC,GAClB,OAAOD,EAAEmB,IAAMlB,EAAEkB,KAAOnB,EAAEkB,KAAOjB,EAAEiB,KAEvC,SAASW,EAAmBtB,EAAIuB,EAAOrB,GACnC,IAAIkB,EAAUpB,EAAGoB,QAASI,EAAMxB,EAAGwB,IAC/BC,EAAWC,SAASC,yBACpBC,EAAUhC,EAAEiC,SAAS7B,EAAGoB,SAAUU,EAAWF,EAAQjB,KACrDoB,EAAYjB,KAAKC,IAAIK,EAAQY,WAAYpC,EAAEqC,aAAajC,GAAMoB,EAAQc,MAAMC,YAAcP,EAAQQ,MAClGC,EAA0B,OAAjBb,EAAIc,UACjB,SAASC,EAAI5B,EAAMC,EAAK4B,EAAOxB,GACvBJ,EAAM,IACNA,EAAM,GACVA,EAAME,KAAK2B,MAAM7B,GACjBI,EAASF,KAAK2B,MAAMzB,GACpBS,EAASjB,YAAYV,EAAEW,IAAI,MAAO,KAAM,mDAAqDE,2CACpEC,eAA4B,MAAT4B,EAAgBT,EAAYpB,EAAO6B,8CACnDxB,EAASJ,QAEzC,SAAS8B,EAAYC,EAAMC,EAASC,GAChC,IAEIC,EAAOC,EAFPC,EAAUrD,EAAEsD,QAAQzB,EAAKmB,GACzBO,EAAUF,EAAQG,KAAKC,OAE3B,SAASC,EAAOC,EAAIC,GAChB,OAAO3D,EAAE4D,WAAWxD,EAAIP,EAAEgE,IAAId,EAAMW,GAAK,MAAON,EAASO,GAE7D,SAASG,EAAMvD,EAAKwD,EAAKC,GACrB,IAAIC,EAASjE,EAAEkE,sBAAsB9D,EAAIgD,EAAS,KAAM7C,GACpD4D,EAAc,OAAPJ,IAAyB,SAARC,GAAmB,OAAS,QAExD,OAAOP,EADU,SAARO,EAAkBC,EAAOG,MAAQH,EAAOd,KAAO,KAAKkB,KAAKjB,EAAQG,KAAKe,OAAOL,EAAOd,IAAM,IAAM,EAAI,GAC3FgB,GAAMA,GAE5B,IAAII,EAAQtE,EAAEuE,SAASpB,EAASxB,EAAIc,WAwCpC,OAvCAzC,EAAEwE,oBAAoBF,EAAOvB,GAAW,EAAY,MAATC,EAAgBK,EAAUL,EAAO,CAACyB,EAAMC,EAAIZ,EAAKa,KACxF,IAAIC,EAAa,OAAPd,EACNe,EAAUrB,EAAOiB,EAAMG,EAAM,OAAS,SACtCE,EAAQtB,EAAOkB,EAAK,EAAGE,EAAM,QAAU,QACvCG,EAAuB,MAAXhC,GAA2B,GAAR0B,EAAWO,EAAmB,MAAThC,GAAiB0B,GAAMrB,EAC3E4B,EAAa,GAALN,EAAQO,GAAQZ,GAASK,GAAKL,EAAMf,OAAS,EACzD,GAAIuB,EAAM/D,IAAM8D,EAAQ9D,KAAO,EAAG,CAC9B,IACIoE,GAAa3C,EAASwC,EAAUD,IAAcG,EAC9CpE,GAFY0B,EAASuC,EAAYC,IAAYC,EAE3BhD,GAAY2C,EAAMC,EAAUC,GAAOhE,KACrDyB,EAAQ4C,EAAYjD,GAAa0C,EAAME,EAAQD,GAAStC,MAC5DG,EAAI5B,EAAM+D,EAAQ9D,IAAKwB,EAAQzB,EAAM+D,EAAQ1D,YAC1C,CACH,IAAIiE,EAASC,EAAUC,EAASC,EAC5BX,GACAQ,EAAU5C,GAAUuC,GAAaE,EAAQhD,EAAW4C,EAAQ/D,KAC5DuE,EAAW7C,EAASN,EAAY2B,EAAMY,EAAMX,EAAK,UACjDwB,EAAU9C,EAASP,EAAW4B,EAAMa,EAAIZ,EAAK,SAC7CyB,EAAW/C,GAAUwC,GAAWE,EAAOhD,EAAY4C,EAAMvC,QAEzD6C,EAAW5C,EAAoBqB,EAAMY,EAAMX,EAAK,UAA5B7B,EACpBoD,GAAY7C,GAAUuC,GAAaE,EAAQ/C,EAAY2C,EAAQtC,MAC/D+C,GAAW9C,GAAUwC,GAAWE,EAAOjD,EAAW6C,EAAMhE,KACxDyE,EAAY/C,EAAqBqB,EAAMa,EAAIZ,EAAK,SAA3B5B,GAEzBQ,EAAI0C,EAASP,EAAQ9D,IAAKsE,EAAWD,EAASP,EAAQ1D,QAClD0D,EAAQ1D,OAAS2D,EAAM/D,KACvB2B,EAAIT,EAAU4C,EAAQ1D,OAAQ,KAAM2D,EAAM/D,KAC9C2B,EAAI4C,EAASR,EAAM/D,IAAKwE,EAAWD,EAASR,EAAM3D,UAEjD8B,GAASzB,EAAUqD,EAAS5B,GAAS,KACtCA,EAAQ4B,GACRrD,EAAUsD,EAAO7B,GAAS,IAC1BA,EAAQ6B,KACP5B,GAAO1B,EAAUqD,EAAS3B,GAAO,KAClCA,EAAM2B,GACNrD,EAAUsD,EAAO5B,GAAO,IACxBA,EAAM4B,MAGV7B,MAAOA,EACPC,IAAKA,GAGb,IAAIsC,EAAQ9D,EAAM+C,OAAQgB,EAAM/D,EAAMgD,KACtC,GAAIc,EAAM1C,MAAQ2C,EAAI3C,KAClBD,EAAY2C,EAAM1C,KAAM0C,EAAM/B,GAAIgC,EAAIhC,QACnC,CACH,IAAIiC,EAAW5F,EAAEsD,QAAQzB,EAAK6D,EAAM1C,MAAO6C,EAAS7F,EAAEsD,QAAQzB,EAAK8D,EAAI3C,MACnE8C,EAAc/F,EAAEgG,WAAWH,IAAa7F,EAAEgG,WAAWF,GACrDG,EAAUjD,EAAY2C,EAAM1C,KAAM0C,EAAM/B,GAAImC,EAAcF,EAASpC,KAAKC,OAAS,EAAI,MAAML,IAC3F6C,EAAalD,EAAY4C,EAAI3C,KAAM8C,EAAc,EAAI,KAAMH,EAAIhC,IAAIR,MACnE2C,IACIE,EAAQ/E,IAAMgF,EAAWhF,IAAM,GAC/B2B,EAAIoD,EAAQvD,MAAOuD,EAAQ/E,IAAK,KAAM+E,EAAQ3E,QAC9CuB,EAAIT,EAAU8D,EAAWhF,IAAKgF,EAAWjF,KAAMiF,EAAW5E,SAE1DuB,EAAIoD,EAAQvD,MAAOuD,EAAQ/E,IAAKgF,EAAWjF,KAAOgF,EAAQvD,MAAOuD,EAAQ3E,SAG7E2E,EAAQ3E,OAAS4E,EAAWhF,KAC5B2B,EAAIT,EAAU6D,EAAQ3E,OAAQ,KAAM4E,EAAWhF,KAEvDV,EAAOM,YAAYiB,GAcvB,OACIoE,gBAjJJ,SAAyB7F,GACrBA,EAAGoB,QAAQ0E,MAAMC,cAAc/F,EAAGoB,QAAQ0E,MAAME,qBAiJhDA,iBA/IJ,SAA0BhG,EAAIiG,GAAU,GACpC,IAAIzE,EAAMxB,EAAGwB,IAAK0E,KACdC,EAAcD,EAAOE,QAAU1E,SAASC,yBACxC0E,EAAcH,EAAOI,UAAY5E,SAASC,yBAC9C,IAAK,IAAI6C,EAAI,EAAGA,EAAIhD,EAAI+E,IAAIC,OAAOpD,OAAQoB,IAAK,CAC5C,IAAKyB,GAAWzB,GAAKhD,EAAI+E,IAAIE,UACzB,SACJ,IAAIlF,EAAQC,EAAI+E,IAAIC,OAAOhC,GAC3B,GAAIjD,EAAM+C,OAAO3B,MAAQ3C,EAAGoB,QAAQsF,QAAUnF,EAAMgD,KAAK5B,KAAO3C,EAAGoB,QAAQuF,SACvE,SACJ,IAAIC,EAAYrF,EAAMsF,SAClBD,GAAa5G,EAAGK,QAAQyG,0BACxB/G,EAAoBC,EAAIuB,EAAMtB,KAAMkG,GACnCS,GACDtF,EAAmBtB,EAAIuB,EAAO8E,GAEtC,OAAOH,GAgIPnG,oBAAqBA,EACrBgH,aAhBJ,SAAsB/G,GAClB,IAAKA,EAAGgH,MAAMC,QACV,OACJ,IAAI7F,EAAUpB,EAAGoB,QACjB8F,cAAc9F,EAAQ+F,SACtB,IAAIC,GAAK,EACThG,EAAQiG,UAAU3G,MAAM4G,WAAa,GACjCtH,EAAGK,QAAQkH,gBAAkB,EAC7BnG,EAAQ+F,QAAUK,YAAY,IAAMpG,EAAQiG,UAAU3G,MAAM4G,YAAcF,GAAMA,GAAM,GAAK,SAAUpH,EAAGK,QAAQkH,iBAC3GvH,EAAGK,QAAQkH,gBAAkB,IAClCnG,EAAQiG,UAAU3G,MAAM4G,WAAa","file":"../../../primitives/display/selection.js","sourcesContent":["define([\n    '../line/pos',\n    '../line/spans',\n    '../line/utils_line',\n    '../measurement/position_measurement',\n    '../util/bidi',\n    '../util/dom'\n], function (a, b, c, d, e, f) {\n    'use strict';\n    function updateSelection(cm) {\n        cm.display.input.showSelection(cm.display.input.prepareSelection());\n    }\n    function prepareSelection(cm, primary = true) {\n        let doc = cm.doc, result = {};\n        let curFragment = result.cursors = document.createDocumentFragment();\n        let selFragment = result.selection = document.createDocumentFragment();\n        for (let i = 0; i < doc.sel.ranges.length; i++) {\n            if (!primary && i == doc.sel.primIndex)\n                continue;\n            let range = doc.sel.ranges[i];\n            if (range.from().line >= cm.display.viewTo || range.to().line < cm.display.viewFrom)\n                continue;\n            let collapsed = range.empty();\n            if (collapsed || cm.options.showCursorWhenSelecting)\n                drawSelectionCursor(cm, range.head, curFragment);\n            if (!collapsed)\n                drawSelectionRange(cm, range, selFragment);\n        }\n        return result;\n    }\n    function drawSelectionCursor(cm, head, output) {\n        let pos = d.cursorCoords(cm, head, 'div', null, null, !cm.options.singleCursorHeightPerLine);\n        let cursor = output.appendChild(f.elt('div', '\\xA0', 'CodeMirror-cursor'));\n        cursor.style.left = pos.left + 'px';\n        cursor.style.top = pos.top + 'px';\n        cursor.style.height = Math.max(0, pos.bottom - pos.top) * cm.options.cursorHeight + 'px';\n        if (pos.other) {\n            let otherCursor = output.appendChild(f.elt('div', '\\xA0', 'CodeMirror-cursor CodeMirror-secondarycursor'));\n            otherCursor.style.display = '';\n            otherCursor.style.left = pos.other.left + 'px';\n            otherCursor.style.top = pos.other.top + 'px';\n            otherCursor.style.height = (pos.other.bottom - pos.other.top) * 0.85 + 'px';\n        }\n    }\n    function cmpCoords(a, b) {\n        return a.top - b.top || a.left - b.left;\n    }\n    function drawSelectionRange(cm, range, output) {\n        let display = cm.display, doc = cm.doc;\n        let fragment = document.createDocumentFragment();\n        let padding = d.paddingH(cm.display), leftSide = padding.left;\n        let rightSide = Math.max(display.sizerWidth, d.displayWidth(cm) - display.sizer.offsetLeft) - padding.right;\n        let docLTR = doc.direction == 'ltr';\n        function add(left, top, width, bottom) {\n            if (top < 0)\n                top = 0;\n            top = Math.round(top);\n            bottom = Math.round(bottom);\n            fragment.appendChild(f.elt('div', null, 'CodeMirror-selected', `position: absolute; left: ${ left }px;\n                             top: ${ top }px; width: ${ width == null ? rightSide - left : width }px;\n                             height: ${ bottom - top }px`));\n        }\n        function drawForLine(line, fromArg, toArg) {\n            let lineObj = c.getLine(doc, line);\n            let lineLen = lineObj.text.length;\n            let start, end;\n            function coords(ch, bias) {\n                return d.charCoords(cm, a.Pos(line, ch), 'div', lineObj, bias);\n            }\n            function wrapX(pos, dir, side) {\n                let extent = d.wrappedLineExtentChar(cm, lineObj, null, pos);\n                let prop = dir == 'ltr' == (side == 'after') ? 'left' : 'right';\n                let ch = side == 'after' ? extent.begin : extent.end - (/\\s/.test(lineObj.text.charAt(extent.end - 1)) ? 2 : 1);\n                return coords(ch, prop)[prop];\n            }\n            let order = e.getOrder(lineObj, doc.direction);\n            e.iterateBidiSections(order, fromArg || 0, toArg == null ? lineLen : toArg, (from, to, dir, i) => {\n                let ltr = dir == 'ltr';\n                let fromPos = coords(from, ltr ? 'left' : 'right');\n                let toPos = coords(to - 1, ltr ? 'right' : 'left');\n                let openStart = fromArg == null && from == 0, openEnd = toArg == null && to == lineLen;\n                let first = i == 0, last = !order || i == order.length - 1;\n                if (toPos.top - fromPos.top <= 3) {\n                    let openLeft = (docLTR ? openStart : openEnd) && first;\n                    let openRight = (docLTR ? openEnd : openStart) && last;\n                    let left = openLeft ? leftSide : (ltr ? fromPos : toPos).left;\n                    let right = openRight ? rightSide : (ltr ? toPos : fromPos).right;\n                    add(left, fromPos.top, right - left, fromPos.bottom);\n                } else {\n                    let topLeft, topRight, botLeft, botRight;\n                    if (ltr) {\n                        topLeft = docLTR && openStart && first ? leftSide : fromPos.left;\n                        topRight = docLTR ? rightSide : wrapX(from, dir, 'before');\n                        botLeft = docLTR ? leftSide : wrapX(to, dir, 'after');\n                        botRight = docLTR && openEnd && last ? rightSide : toPos.right;\n                    } else {\n                        topLeft = !docLTR ? leftSide : wrapX(from, dir, 'before');\n                        topRight = !docLTR && openStart && first ? rightSide : fromPos.right;\n                        botLeft = !docLTR && openEnd && last ? leftSide : toPos.left;\n                        botRight = !docLTR ? rightSide : wrapX(to, dir, 'after');\n                    }\n                    add(topLeft, fromPos.top, topRight - topLeft, fromPos.bottom);\n                    if (fromPos.bottom < toPos.top)\n                        add(leftSide, fromPos.bottom, null, toPos.top);\n                    add(botLeft, toPos.top, botRight - botLeft, toPos.bottom);\n                }\n                if (!start || cmpCoords(fromPos, start) < 0)\n                    start = fromPos;\n                if (cmpCoords(toPos, start) < 0)\n                    start = toPos;\n                if (!end || cmpCoords(fromPos, end) < 0)\n                    end = fromPos;\n                if (cmpCoords(toPos, end) < 0)\n                    end = toPos;\n            });\n            return {\n                start: start,\n                end: end\n            };\n        }\n        let sFrom = range.from(), sTo = range.to();\n        if (sFrom.line == sTo.line) {\n            drawForLine(sFrom.line, sFrom.ch, sTo.ch);\n        } else {\n            let fromLine = c.getLine(doc, sFrom.line), toLine = c.getLine(doc, sTo.line);\n            let singleVLine = b.visualLine(fromLine) == b.visualLine(toLine);\n            let leftEnd = drawForLine(sFrom.line, sFrom.ch, singleVLine ? fromLine.text.length + 1 : null).end;\n            let rightStart = drawForLine(sTo.line, singleVLine ? 0 : null, sTo.ch).start;\n            if (singleVLine) {\n                if (leftEnd.top < rightStart.top - 2) {\n                    add(leftEnd.right, leftEnd.top, null, leftEnd.bottom);\n                    add(leftSide, rightStart.top, rightStart.left, rightStart.bottom);\n                } else {\n                    add(leftEnd.right, leftEnd.top, rightStart.left - leftEnd.right, leftEnd.bottom);\n                }\n            }\n            if (leftEnd.bottom < rightStart.top)\n                add(leftSide, leftEnd.bottom, null, rightStart.top);\n        }\n        output.appendChild(fragment);\n    }\n    function restartBlink(cm) {\n        if (!cm.state.focused)\n            return;\n        let display = cm.display;\n        clearInterval(display.blinker);\n        let on = true;\n        display.cursorDiv.style.visibility = '';\n        if (cm.options.cursorBlinkRate > 0)\n            display.blinker = setInterval(() => display.cursorDiv.style.visibility = (on = !on) ? '' : 'hidden', cm.options.cursorBlinkRate);\n        else if (cm.options.cursorBlinkRate < 0)\n            display.cursorDiv.style.visibility = 'hidden';\n    }\n    return {\n        updateSelection: updateSelection,\n        prepareSelection: prepareSelection,\n        drawSelectionCursor: drawSelectionCursor,\n        restartBlink: restartBlink\n    };\n});"]}