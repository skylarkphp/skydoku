{"version":3,"sources":["primitives/display/scrolling.js"],"names":["define","a","b","c","d","e","g","h","calculateScrollPos","cm","rect","display","snapMargin","textHeight","top","screentop","curOp","scrollTop","scroller","screen","displayHeight","result","bottom","docBottom","doc","height","paddingVert","atTop","atBottom","newTop","Math","min","screenleft","scrollLeft","screenw","displayWidth","options","fixedGutter","gutters","offsetWidth","tooWide","right","left","max","scrollToCoords","x","y","resolveScrollToPos","range","scrollToPos","scrollToCoordsRange","estimateCoords","from","to","margin","sPos","updateScrollTop","val","abs","gecko","updateDisplaySimple","setScrollTop","startWorker","forceScroll","scrollHeight","clientHeight","scrollbars","setScrollLeft","isScroller","scrollWidth","clientWidth","alignHorizontally","maybeScrollWindow","signalDOMEvent","box","sizer","getBoundingClientRect","doScroll","window","innerHeight","document","documentElement","phantom","scrollNode","elt","viewOffset","paddingTop","scrollGap","barHeight","lineSpace","appendChild","scrollIntoView","removeChild","scrollPosIntoView","pos","end","lineWrapping","ch","Pos","line","sticky","limit","changed","coords","cursorCoords","endCoords","scrollPos","startTop","startLeft","addToScrollTop","ensureCursorVisible","cur","getCursor","cursorScrollMargin","scrollToRange"],"mappings":";;;;;;;AAAAA,QACI,cACA,sCACA,kBACA,cACA,gBAEA,iBACA,oBACD,SACCC,EACAC,EACAC,EACAC,EACAC,EAEAC,EACAC,GAEA,aA6DA,SAASC,EAAmBC,EAAIC,GAC5B,IAAIC,EAAUF,EAAGE,QAASC,EAAaV,EAAEW,WAAWJ,EAAGE,SACnDD,EAAKI,IAAM,IACXJ,EAAKI,IAAM,GACf,IAAIC,EAAYN,EAAGO,OAA+B,MAAtBP,EAAGO,MAAMC,UAAoBR,EAAGO,MAAMC,UAAYN,EAAQO,SAASD,UAC3FE,EAASjB,EAAEkB,cAAcX,GAAKY,KAC9BX,EAAKY,OAASZ,EAAKI,IAAMK,IACzBT,EAAKY,OAASZ,EAAKI,IAAMK,GAC7B,IAAII,EAAYd,EAAGe,IAAIC,OAASvB,EAAEwB,YAAYf,GAC1CgB,EAAQjB,EAAKI,IAAMF,EAAYgB,EAAWlB,EAAKY,OAASC,EAAYX,EACxE,GAAIF,EAAKI,IAAMC,EACXM,EAAOJ,UAAYU,EAAQ,EAAIjB,EAAKI,SACjC,GAAIJ,EAAKY,OAASP,EAAYI,EAAQ,CACzC,IAAIU,EAASC,KAAKC,IAAIrB,EAAKI,KAAMc,EAAWL,EAAYb,EAAKY,QAAUH,GACnEU,GAAUd,IACVM,EAAOJ,UAAYY,GAE3B,IAAIG,EAAavB,EAAGO,OAAgC,MAAvBP,EAAGO,MAAMiB,WAAqBxB,EAAGO,MAAMiB,WAAatB,EAAQO,SAASe,WAC9FC,EAAUhC,EAAEiC,aAAa1B,IAAOA,EAAG2B,QAAQC,YAAc1B,EAAQ2B,QAAQC,YAAc,GACvFC,EAAU9B,EAAK+B,MAAQ/B,EAAKgC,KAAOR,EASvC,OARIM,IACA9B,EAAK+B,MAAQ/B,EAAKgC,KAAOR,GACzBxB,EAAKgC,KAAO,GACZrB,EAAOY,WAAa,EACfvB,EAAKgC,KAAOV,EACjBX,EAAOY,WAAaH,KAAKa,IAAI,EAAGjC,EAAKgC,MAAQF,EAAU,EAAI,KACtD9B,EAAK+B,MAAQP,EAAUF,EAAa,IACzCX,EAAOY,WAAavB,EAAK+B,OAASD,EAAU,EAAI,IAAMN,GACnDb,EAiBX,SAASuB,EAAenC,EAAIoC,EAAGC,GAClB,MAALD,GAAkB,MAALC,GACbC,EAAmBtC,GACd,MAALoC,IACApC,EAAGO,MAAMiB,WAAaY,GACjB,MAALC,IACArC,EAAGO,MAAMC,UAAY6B,GAM7B,SAASC,EAAmBtC,GACxB,IAAIuC,EAAQvC,EAAGO,MAAMiC,YACrB,GAAID,EAAO,CACPvC,EAAGO,MAAMiC,YAAc,KAEvBC,EAAoBzC,EADTP,EAAEiD,eAAe1C,EAAIuC,EAAMI,MAAYlD,EAAEiD,eAAe1C,EAAIuC,EAAMK,IAC3CL,EAAMM,SAGhD,SAASJ,EAAoBzC,EAAI2C,EAAMC,EAAIC,GACvC,IAAIC,EAAO/C,EAAmBC,GAC1BiC,KAAMZ,KAAKC,IAAIqB,EAAKV,KAAMW,EAAGX,MAC7B5B,IAAKgB,KAAKC,IAAIqB,EAAKtC,IAAKuC,EAAGvC,KAAOwC,EAClCb,MAAOX,KAAKa,IAAIS,EAAKX,MAAOY,EAAGZ,OAC/BnB,OAAQQ,KAAKa,IAAIS,EAAK9B,OAAQ+B,EAAG/B,QAAUgC,IAE/CV,EAAenC,EAAI8C,EAAKtB,WAAYsB,EAAKtC,WAE7C,SAASuC,EAAgB/C,EAAIgD,GACrB3B,KAAK4B,IAAIjD,EAAGe,IAAIP,UAAYwC,GAAO,IAElCtD,EAAEwD,OACHpD,EAAEqD,oBAAoBnD,GAAMK,IAAK2C,IACrCI,EAAapD,EAAIgD,GAAK,GAClBtD,EAAEwD,OACFpD,EAAEqD,oBAAoBnD,GAC1BA,EAAGqD,YAAYrD,EAAI,MAEvB,SAASoD,EAAapD,EAAIgD,EAAKM,GAC3BN,EAAM3B,KAAKC,IAAItB,EAAGE,QAAQO,SAAS8C,aAAevD,EAAGE,QAAQO,SAAS+C,aAAcR,IAChFhD,EAAGE,QAAQO,SAASD,WAAawC,GAAQM,KAE7CtD,EAAGe,IAAIP,UAAYwC,EACnBhD,EAAGE,QAAQuD,WAAWL,aAAaJ,GAC/BhD,EAAGE,QAAQO,SAASD,WAAawC,IACjChD,EAAGE,QAAQO,SAASD,UAAYwC,IAExC,SAASU,EAAc1D,EAAIgD,EAAKW,EAAYL,GACxCN,EAAM3B,KAAKC,IAAI0B,EAAKhD,EAAGE,QAAQO,SAASmD,YAAc5D,EAAGE,QAAQO,SAASoD,cACrEF,EAAaX,GAAOhD,EAAGe,IAAIS,WAAaH,KAAK4B,IAAIjD,EAAGe,IAAIS,WAAawB,GAAO,KAAOM,IAExFtD,EAAGe,IAAIS,WAAawB,EACpBnD,EAAEiE,kBAAkB9D,GAChBA,EAAGE,QAAQO,SAASe,YAAcwB,IAClChD,EAAGE,QAAQO,SAASe,WAAawB,GACrChD,EAAGE,QAAQuD,WAAWC,cAAcV,IAExC,OACIe,kBApKJ,SAA2B/D,EAAIC,GAC3B,GAAIL,EAAEoE,eAAehE,EAAI,wBACrB,OACJ,IAAIE,EAAUF,EAAGE,QAAS+D,EAAM/D,EAAQgE,MAAMC,wBAAyBC,EAAW,KAKlF,GAJInE,EAAKI,IAAM4D,EAAI5D,IAAM,EACrB+D,GAAW,EACNnE,EAAKY,OAASoD,EAAI5D,KAAOgE,OAAOC,aAAeC,SAASC,gBAAgBhB,gBAC7EY,GAAW,GACC,MAAZA,IAAqB1E,EAAE+E,QAAS,CAChC,IAAIC,EAAa/E,EAAEgF,IAAI,MAAO,IAAU,2DACnB1E,EAAKI,IAAMH,EAAQ0E,WAAanF,EAAEoF,WAAW7E,EAAGE,iDAC7CD,EAAKY,OAASZ,EAAKI,IAAMZ,EAAEqF,UAAU9E,GAAME,EAAQ6E,gDACrD9E,EAAKgC,kBAAoBZ,KAAKa,IAAI,EAAGjC,EAAK+B,MAAQ/B,EAAKgC,YAC7EjC,EAAGE,QAAQ8E,UAAUC,YAAYP,GACjCA,EAAWQ,eAAed,GAC1BpE,EAAGE,QAAQ8E,UAAUG,YAAYT,KAsJrCU,kBAnJJ,SAA2BpF,EAAIqF,EAAKC,EAAKzC,GAGrC,IAAI5C,EAFU,MAAV4C,IACAA,EAAS,GAER7C,EAAG2B,QAAQ4D,cAAgBF,GAAOC,IAEnCA,EAAoB,WADpBD,EAAMA,EAAIG,GAAKhG,EAAEiG,IAAIJ,EAAIK,KAAoB,UAAdL,EAAIM,OAAqBN,EAAIG,GAAK,EAAIH,EAAIG,GAAI,SAAWH,GAC9EM,OAAqBnG,EAAEiG,IAAIJ,EAAIK,KAAML,EAAIG,GAAK,EAAG,UAAYH,GAE3E,IAAK,IAAIO,EAAQ,EAAGA,EAAQ,EAAGA,IAAS,CACpC,IAAIC,GAAU,EACVC,EAASrG,EAAEsG,aAAa/F,EAAIqF,GAC5BW,EAAaV,GAAOA,GAAOD,EAAe5F,EAAEsG,aAAa/F,EAAIsF,GAA5BQ,EAOjCG,EAAYlG,EAAmBC,EANnCC,GACIgC,KAAMZ,KAAKC,IAAIwE,EAAO7D,KAAM+D,EAAU/D,MACtC5B,IAAKgB,KAAKC,IAAIwE,EAAOzF,IAAK2F,EAAU3F,KAAOwC,EAC3Cb,MAAOX,KAAKa,IAAI4D,EAAO7D,KAAM+D,EAAU/D,MACvCpB,OAAQQ,KAAKa,IAAI4D,EAAOjF,OAAQmF,EAAUnF,QAAUgC,IAGpDqD,EAAWlG,EAAGe,IAAIP,UAAW2F,EAAYnG,EAAGe,IAAIS,WAWpD,GAV2B,MAAvByE,EAAUzF,YACVuC,EAAgB/C,EAAIiG,EAAUzF,WAC1Ba,KAAK4B,IAAIjD,EAAGe,IAAIP,UAAY0F,GAAY,IACxCL,GAAU,IAEU,MAAxBI,EAAUzE,aACVkC,EAAc1D,EAAIiG,EAAUzE,YACxBH,KAAK4B,IAAIjD,EAAGe,IAAIS,WAAa2E,GAAa,IAC1CN,GAAU,KAEbA,EACD,MAER,OAAO5F,GAmHPiF,eAjHJ,SAAwBlF,EAAIC,GACxB,IAAIgG,EAAYlG,EAAmBC,EAAIC,GACZ,MAAvBgG,EAAUzF,WACVuC,EAAgB/C,EAAIiG,EAAUzF,WACN,MAAxByF,EAAUzE,YACVkC,EAAc1D,EAAIiG,EAAUzE,aA6GhC4E,eA7EJ,SAAwBpG,EAAIK,GACb,MAAPA,IAEJiC,EAAmBtC,GACnBA,EAAGO,MAAMC,WAAmC,MAAtBR,EAAGO,MAAMC,UAAoBR,EAAGe,IAAIP,UAAYR,EAAGO,MAAMC,WAAaH,IA0E5FgG,oBAxEJ,SAA6BrG,GACzBsC,EAAmBtC,GACnB,IAAIsG,EAAMtG,EAAGuG,YACbvG,EAAGO,MAAMiC,aACLG,KAAM2D,EACN1D,GAAI0D,EACJzD,OAAQ7C,EAAG2B,QAAQ6E,qBAmEvBrE,eAAgBA,EAChBsE,cAzDJ,SAAuBzG,EAAIuC,GACvBD,EAAmBtC,GACnBA,EAAGO,MAAMiC,YAAcD,GAwDvBE,oBAAqBA,EACrBM,gBAAiBA,EACjBK,aAAcA,EACdM,cAAeA","file":"../../../primitives/display/scrolling.js","sourcesContent":["define([\n    '../line/pos',\n    '../measurement/position_measurement',\n    '../util/browser',\n    '../util/dom',\n    '../util/event',\n    //'./highlight_worker',// dependence cycle \n    './line_numbers',\n    './update_display'\n], function (\n    a, \n    b, \n    c, \n    d, \n    e, \n//    highlight_worker, \n    g, \n    h\n) {\n    'use strict';\n    function maybeScrollWindow(cm, rect) {\n        if (e.signalDOMEvent(cm, 'scrollCursorIntoView'))\n            return;\n        let display = cm.display, box = display.sizer.getBoundingClientRect(), doScroll = null;\n        if (rect.top + box.top < 0)\n            doScroll = true;\n        else if (rect.bottom + box.top > (window.innerHeight || document.documentElement.clientHeight))\n            doScroll = false;\n        if (doScroll != null && !c.phantom) {\n            let scrollNode = d.elt('div', '\\u200B', null, `position: absolute;\n                         top: ${ rect.top - display.viewOffset - b.paddingTop(cm.display) }px;\n                         height: ${ rect.bottom - rect.top + b.scrollGap(cm) + display.barHeight }px;\n                         left: ${ rect.left }px; width: ${ Math.max(2, rect.right - rect.left) }px;`);\n            cm.display.lineSpace.appendChild(scrollNode);\n            scrollNode.scrollIntoView(doScroll);\n            cm.display.lineSpace.removeChild(scrollNode);\n        }\n    }\n    function scrollPosIntoView(cm, pos, end, margin) {\n        if (margin == null)\n            margin = 0;\n        let rect;\n        if (!cm.options.lineWrapping && pos == end) {\n            pos = pos.ch ? a.Pos(pos.line, pos.sticky == 'before' ? pos.ch - 1 : pos.ch, 'after') : pos;\n            end = pos.sticky == 'before' ? a.Pos(pos.line, pos.ch + 1, 'before') : pos;\n        }\n        for (let limit = 0; limit < 5; limit++) {\n            let changed = false;\n            let coords = b.cursorCoords(cm, pos);\n            let endCoords = !end || end == pos ? coords : b.cursorCoords(cm, end);\n            rect = {\n                left: Math.min(coords.left, endCoords.left),\n                top: Math.min(coords.top, endCoords.top) - margin,\n                right: Math.max(coords.left, endCoords.left),\n                bottom: Math.max(coords.bottom, endCoords.bottom) + margin\n            };\n            let scrollPos = calculateScrollPos(cm, rect);\n            let startTop = cm.doc.scrollTop, startLeft = cm.doc.scrollLeft;\n            if (scrollPos.scrollTop != null) {\n                updateScrollTop(cm, scrollPos.scrollTop);\n                if (Math.abs(cm.doc.scrollTop - startTop) > 1)\n                    changed = true;\n            }\n            if (scrollPos.scrollLeft != null) {\n                setScrollLeft(cm, scrollPos.scrollLeft);\n                if (Math.abs(cm.doc.scrollLeft - startLeft) > 1)\n                    changed = true;\n            }\n            if (!changed)\n                break;\n        }\n        return rect;\n    }\n    function scrollIntoView(cm, rect) {\n        let scrollPos = calculateScrollPos(cm, rect);\n        if (scrollPos.scrollTop != null)\n            updateScrollTop(cm, scrollPos.scrollTop);\n        if (scrollPos.scrollLeft != null)\n            setScrollLeft(cm, scrollPos.scrollLeft);\n    }\n    function calculateScrollPos(cm, rect) {\n        let display = cm.display, snapMargin = b.textHeight(cm.display);\n        if (rect.top < 0)\n            rect.top = 0;\n        let screentop = cm.curOp && cm.curOp.scrollTop != null ? cm.curOp.scrollTop : display.scroller.scrollTop;\n        let screen = b.displayHeight(cm), result = {};\n        if (rect.bottom - rect.top > screen)\n            rect.bottom = rect.top + screen;\n        let docBottom = cm.doc.height + b.paddingVert(display);\n        let atTop = rect.top < snapMargin, atBottom = rect.bottom > docBottom - snapMargin;\n        if (rect.top < screentop) {\n            result.scrollTop = atTop ? 0 : rect.top;\n        } else if (rect.bottom > screentop + screen) {\n            let newTop = Math.min(rect.top, (atBottom ? docBottom : rect.bottom) - screen);\n            if (newTop != screentop)\n                result.scrollTop = newTop;\n        }\n        let screenleft = cm.curOp && cm.curOp.scrollLeft != null ? cm.curOp.scrollLeft : display.scroller.scrollLeft;\n        let screenw = b.displayWidth(cm) - (cm.options.fixedGutter ? display.gutters.offsetWidth : 0);\n        let tooWide = rect.right - rect.left > screenw;\n        if (tooWide)\n            rect.right = rect.left + screenw;\n        if (rect.left < 10)\n            result.scrollLeft = 0;\n        else if (rect.left < screenleft)\n            result.scrollLeft = Math.max(0, rect.left - (tooWide ? 0 : 10));\n        else if (rect.right > screenw + screenleft - 3)\n            result.scrollLeft = rect.right + (tooWide ? 0 : 10) - screenw;\n        return result;\n    }\n    function addToScrollTop(cm, top) {\n        if (top == null)\n            return;\n        resolveScrollToPos(cm);\n        cm.curOp.scrollTop = (cm.curOp.scrollTop == null ? cm.doc.scrollTop : cm.curOp.scrollTop) + top;\n    }\n    function ensureCursorVisible(cm) {\n        resolveScrollToPos(cm);\n        let cur = cm.getCursor();\n        cm.curOp.scrollToPos = {\n            from: cur,\n            to: cur,\n            margin: cm.options.cursorScrollMargin\n        };\n    }\n    function scrollToCoords(cm, x, y) {\n        if (x != null || y != null)\n            resolveScrollToPos(cm);\n        if (x != null)\n            cm.curOp.scrollLeft = x;\n        if (y != null)\n            cm.curOp.scrollTop = y;\n    }\n    function scrollToRange(cm, range) {\n        resolveScrollToPos(cm);\n        cm.curOp.scrollToPos = range;\n    }\n    function resolveScrollToPos(cm) {\n        let range = cm.curOp.scrollToPos;\n        if (range) {\n            cm.curOp.scrollToPos = null;\n            let from = b.estimateCoords(cm, range.from), to = b.estimateCoords(cm, range.to);\n            scrollToCoordsRange(cm, from, to, range.margin);\n        }\n    }\n    function scrollToCoordsRange(cm, from, to, margin) {\n        let sPos = calculateScrollPos(cm, {\n            left: Math.min(from.left, to.left),\n            top: Math.min(from.top, to.top) - margin,\n            right: Math.max(from.right, to.right),\n            bottom: Math.max(from.bottom, to.bottom) + margin\n        });\n        scrollToCoords(cm, sPos.scrollLeft, sPos.scrollTop);\n    }\n    function updateScrollTop(cm, val) {\n        if (Math.abs(cm.doc.scrollTop - val) < 2)\n            return;\n        if (!c.gecko)\n            h.updateDisplaySimple(cm, { top: val });\n        setScrollTop(cm, val, true);\n        if (c.gecko)\n            h.updateDisplaySimple(cm);\n        cm.startWorker(cm, 100); // highlight_worker.startWorker(cm, 100);\n    }\n    function setScrollTop(cm, val, forceScroll) {\n        val = Math.min(cm.display.scroller.scrollHeight - cm.display.scroller.clientHeight, val);\n        if (cm.display.scroller.scrollTop == val && !forceScroll)\n            return;\n        cm.doc.scrollTop = val;\n        cm.display.scrollbars.setScrollTop(val);\n        if (cm.display.scroller.scrollTop != val)\n            cm.display.scroller.scrollTop = val;\n    }\n    function setScrollLeft(cm, val, isScroller, forceScroll) {\n        val = Math.min(val, cm.display.scroller.scrollWidth - cm.display.scroller.clientWidth);\n        if ((isScroller ? val == cm.doc.scrollLeft : Math.abs(cm.doc.scrollLeft - val) < 2) && !forceScroll)\n            return;\n        cm.doc.scrollLeft = val;\n        g.alignHorizontally(cm);\n        if (cm.display.scroller.scrollLeft != val)\n            cm.display.scroller.scrollLeft = val;\n        cm.display.scrollbars.setScrollLeft(val);\n    }\n    return {\n        maybeScrollWindow: maybeScrollWindow,\n        scrollPosIntoView: scrollPosIntoView,\n        scrollIntoView: scrollIntoView,\n        addToScrollTop: addToScrollTop,\n        ensureCursorVisible: ensureCursorVisible,\n        scrollToCoords: scrollToCoords,\n        scrollToRange: scrollToRange,\n        scrollToCoordsRange: scrollToCoordsRange,\n        updateScrollTop: updateScrollTop,\n        setScrollTop: setScrollTop,\n        setScrollLeft: setScrollLeft\n    };\n});"]}