{"version":3,"sources":["helper.js"],"names":["define","langx","$","textpad","helper","debounce","func","wait","immediate","timeout","context","this","args","arguments","callNow","clearTimeout","setTimeout","apply","options","string","type","indexOf","trim","substr","start","str2json","e","str","notevil","JSON","parse","replace","_","$1","Function"],"mappings":";;;;;;;AAAAA,QACI,sBACA,qBACH,aACC,SAASC,EAAMC,EAAEC,GACf,IAAIC,GACAC,SAAW,SAASC,EAAMC,EAAMC,GAC5B,IAAIC,EACJ,OAAO,WACH,IAAIC,EAAUC,KAAMC,EAAOC,UAKvBC,EAAUN,IAAcC,EAC5BM,aAAaN,GACbA,EAAUO,WANE,WACRP,EAAU,KACLD,GAAWF,EAAKW,MAAMP,EAASE,IAIZL,GACxBO,GAASR,EAAKW,MAAMP,EAASE,KAGzCM,QAAU,SAASC,GAEf,GAAwB,UAApBlB,EAAMmB,KAAKD,GAAmB,OAAOA,GAEb,GAAxBA,EAAOE,QAAQ,MAA0C,KAA5BF,EAAOG,OAAOC,QAAQ,KACnDJ,EAAS,IAAIA,EAAO,KAGxB,IAAIK,EAASL,EAASA,EAAOE,QAAQ,MAAQ,EAAIH,KAEjD,IAAc,GAAVM,EACA,IACIN,EAAUd,EAAOqB,SAASN,EAAOI,OAAOC,IAC1C,MAAOE,IAGb,OAAOR,GAEXO,SAAW,SAASE,EAAKC,GACrB,IACI,OAAIA,EACOC,KAAKC,MAAMH,EAEbI,QAAQ,iBAAkB,SAASC,EAAGC,GAAI,MAAO,IAAIA,EAAG,OAExDF,QAAQ,aAAc,SAASC,EAAGC,GAAI,MAAO,IAAIA,EAAG,OAGlD,IAAKC,SAAS,GAAI,cAAgBP,EAAM,6CAAxC,GAEb,MAAMD,GAAK,OAAO,KAK5B,OAAOvB,EAAQC,OAASA","file":"../helper.js","sourcesContent":["define([\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-query\",\r\n\t\"./textpad\"\r\n],function(langx,$,textpad) {\r\n    var helper = {\r\n        debounce : function(func, wait, immediate) {\r\n            var timeout;\r\n            return function() {\r\n                var context = this, args = arguments;\r\n                var later = function() {\r\n                    timeout = null;\r\n                    if (!immediate) func.apply(context, args);\r\n                };\r\n                var callNow = immediate && !timeout;\r\n                clearTimeout(timeout);\r\n                timeout = setTimeout(later, wait);\r\n                if (callNow) func.apply(context, args);\r\n            };\r\n        },\r\n        options : function(string) {\r\n\r\n            if (langx.type(string)!='string') return string;\r\n\r\n            if (string.indexOf(':') != -1 && string.trim().substr(-1) != '}') {\r\n                string = '{'+string+'}';\r\n            }\r\n\r\n            var start = (string ? string.indexOf(\"{\") : -1), options = {};\r\n\r\n            if (start != -1) {\r\n                try {\r\n                    options = helper.str2json(string.substr(start));\r\n                } catch (e) {}\r\n            }\r\n\r\n            return options;\r\n        },\r\n        str2json : function(str, notevil) {\r\n            try {\r\n                if (notevil) {\r\n                    return JSON.parse(str\r\n                        // wrap keys without quote with valid double quote\r\n                        .replace(/([\\$\\w]+)\\s*:/g, function(_, $1){return '\"'+$1+'\":';})\r\n                        // replacing single quote wrapped ones to double quote\r\n                        .replace(/'([^']+)'/g, function(_, $1){return '\"'+$1+'\"';})\r\n                    );\r\n                } else {\r\n                    return (new Function(\"\", \"var json = \" + str + \"; return JSON.parse(JSON.stringify(json));\"))();\r\n                }\r\n            } catch(e) { return false; }\r\n        }\r\n    };\r\n\r\n\r\n    return textpad.helper = helper;\r\n\r\n  \t\r\n });"]}