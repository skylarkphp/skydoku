/**
 * skylark-langx-numbers - The skylark JavaScript language extension library.
 * @author Hudaokeji Co.,Ltd
 * @version v0.9.0
 * @link www.skylarkjs.org
 * @license MIT
 */
define(["./numbers","./Matrix3","./Vector3"],function(t,n,o){var i=new o,r=new o,s=new n;function a(t,n){this.normal=void 0!==t?t:new o(1,0,0),this.constant=void 0!==n?n:0}return Object.assign(a.prototype,{set:function(t,n){return this.normal.copy(t),this.constant=n,this},setComponents:function(t,n,o,i){return this.normal.set(t,n,o),this.constant=i,this},setFromNormalAndCoplanarPoint:function(t,n){return this.normal.copy(t),this.constant=-n.dot(this.normal),this},setFromCoplanarPoints:function(t,n,o){var s=i.subVectors(o,n).cross(r.subVectors(t,n)).normalize();return this.setFromNormalAndCoplanarPoint(s,t),this},clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.normal.copy(t.normal),this.constant=t.constant,this},normalize:function(){var t=1/this.normal.length();return this.normal.multiplyScalar(t),this.constant*=t,this},negate:function(){return this.constant*=-1,this.normal.negate(),this},distanceToPoint:function(t){return this.normal.dot(t)+this.constant},distanceToSphere:function(t){return this.distanceToPoint(t.center)-t.radius},projectPoint:function(t,n){return void 0===n&&(console.warn("mathsPlane: .projectPoint() target is now required"),n=new o),n.copy(this.normal).multiplyScalar(-this.distanceToPoint(t)).add(t)},intersectLine:function(t,n){void 0===n&&(console.warn("mathsPlane: .intersectLine() target is now required"),n=new o);var r=t.delta(i),s=this.normal.dot(r);if(0===s)return 0===this.distanceToPoint(t.start)?n.copy(t.start):void 0;var a=-(t.start.dot(this.normal)+this.constant)/s;return a<0||a>1?void 0:n.copy(r).multiplyScalar(a).add(t.start)},intersectsLine:function(t){var n=this.distanceToPoint(t.start),o=this.distanceToPoint(t.end);return n<0&&o>0||o<0&&n>0},intersectsBox:function(t){return t.intersectsPlane(this)},intersectsSphere:function(t){return t.intersectsPlane(this)},coplanarPoint:function(t){return void 0===t&&(console.warn("mathsPlane: .coplanarPoint() target is now required"),t=new o),t.copy(this.normal).multiplyScalar(-this.constant)},applyMatrix4:function(t,n){var o=n||s.getNormalMatrix(t),r=this.coplanarPoint(i).applyMatrix4(t),a=this.normal.applyMatrix3(o).normalize();return this.constant=-r.dot(a),this},translate:function(t){return this.constant-=t.dot(this.normal),this},equals:function(t){return t.normal.equals(this.normal)&&t.constant===this.constant}}),t.Plane=a});
//# sourceMappingURL=sourcemaps/Plane.js.map
