{"version":3,"sources":["base64.js"],"names":["define","strings","base64","decode","input","binary","chr1","chr2","chr3","enc2","enc3","enc4","output","i","replace","length","this","_keyStr","indexOf","charAt","String","fromCharCode","utftext","string","c","c1","c2","charCodeAt","c3","_utf8_decode","encode","enc1","n","_utf8_encode","isNaN"],"mappings":";;;;;;;AAAAA,QACC,aACC,SAASC,GA8IV,OAAOA,EAAQC,QACdC,OAzCD,SAAgBC,EAAOC,GACtBA,EAAoB,MAAVA,GAAkBA,EAC5B,IACIC,EAAMC,EAAMC,EACNC,EAAMC,EAAMC,EAFlBC,EAAS,GAGTC,EAAI,EAIR,IAFAT,EAAQA,EAAMU,QAAQ,sBAAuB,IAEtCD,EAAIT,EAAMW,QAOhBT,EALOU,KAAKC,QAAQC,QAAQd,EAAMe,OAAON,OAKzB,GAJhBJ,EAAOO,KAAKC,QAAQC,QAAQd,EAAMe,OAAON,QAIX,EAC9BN,GAAgB,GAAPE,IAAc,GAJvBC,EAAOM,KAAKC,QAAQC,QAAQd,EAAMe,OAAON,QAIJ,EACrCL,GAAgB,EAAPE,IAAa,GAJtBC,EAAOK,KAAKC,QAAQC,QAAQd,EAAMe,OAAON,OAMzCD,GAAkBQ,OAAOC,aAAaf,GAE1B,IAARI,IACHE,GAAkBQ,OAAOC,aAAad,IAE3B,IAARI,IACHC,GAAkBQ,OAAOC,aAAab,IASxC,OAJKH,IACJO,EArGF,SAAsBU,GAKrB,IAJA,IAAIC,EAAS,GACTV,EAAI,EACJW,EAAIC,GAAKC,GAAK,EAEVb,EAAIS,EAAQP,SAEnBS,EAAIF,EAAQK,WAAWd,IAEf,KACPU,GAAUH,OAAOC,aAAaG,GAC9BX,KAEQW,EAAI,KAASA,EAAI,KACzBE,GAAKJ,EAAQK,WAAWd,EAAE,GAC1BU,GAAUH,OAAOC,cAAmB,GAAJG,IAAW,EAAW,GAALE,IACjDb,GAAK,IAGLa,GAAKJ,EAAQK,WAAWd,EAAE,GAC1Be,GAAKN,EAAQK,WAAWd,EAAE,GAC1BU,GAAUH,OAAOC,cAAmB,GAAJG,IAAW,IAAa,GAALE,KAAY,EAAW,GAALE,IACrEf,GAAK,GAKP,OAAOU,EA0EGM,CAAajB,IAGhBA,GAOPkB,OAhFD,SAAgB1B,EAAOC,GAEtB,IACIC,EAAMC,EAAMC,EAAMuB,EAAMtB,EAAMC,EAAMC,EADpCC,EAAS,GAETC,EAAI,EAOR,KAVAR,EAAoB,MAAVA,GAAkBA,KAO3BD,EAlEF,SAAsBmB,GACrBA,EAASA,EAAOT,QAAQ,QAAQ,MAGhC,IAFA,IAAIQ,EAAU,GAELU,EAAI,EAAGA,EAAIT,EAAOR,OAAQiB,IAAK,CAEvC,IAAIR,EAAID,EAAOI,WAAWK,GAEtBR,EAAI,IACPF,GAAWF,OAAOC,aAAaG,GAEvBA,EAAI,KAASA,EAAI,MACzBF,GAAWF,OAAOC,aAAcG,GAAK,EAAK,KAC1CF,GAAWF,OAAOC,aAAkB,GAAJG,EAAU,OAG1CF,GAAWF,OAAOC,aAAcG,GAAK,GAAM,KAC3CF,GAAWF,OAAOC,aAAeG,GAAK,EAAK,GAAM,KACjDF,GAAWF,OAAOC,aAAkB,GAAJG,EAAU,MAK5C,OAAOF,EA2CEW,CAAa7B,IAGfS,EAAIT,EAAMW,QAMhBgB,GAJAzB,EAAOF,EAAMuB,WAAWd,OAIT,EACfJ,GAAgB,EAAPH,IAAa,GAJtBC,EAAOH,EAAMuB,WAAWd,OAIY,EACpCH,GAAgB,GAAPH,IAAc,GAJvBC,EAAOJ,EAAMuB,WAAWd,OAIa,EACrCF,EAAc,GAAPH,EAEH0B,MAAM3B,GACTG,EAAOC,EAAO,GACJuB,MAAM1B,KAChBG,EAAO,IAGRC,EAASA,EACTI,KAAKC,QAAQE,OAAOY,GAAQf,KAAKC,QAAQE,OAAOV,GAChDO,KAAKC,QAAQE,OAAOT,GAAQM,KAAKC,QAAQE,OAAOR,GAIjD,OAAOC","file":"../base64.js","sourcesContent":["define([\r\n\t\"./strings\"\r\n],function(strings) {\r\n\r\n\t// private property\r\n\tconst _keyStr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\r\n\r\n\t// private method for UTF-8 encoding\r\n\tfunction _utf8_encode(string) {\r\n\t\tstring = string.replace(/\\r\\n/g,\"\\n\");\r\n\t\tvar utftext = \"\";\r\n\r\n\t\tfor (var n = 0; n < string.length; n++) {\r\n\r\n\t\t\tvar c = string.charCodeAt(n);\r\n\r\n\t\t\tif (c < 128) {\r\n\t\t\t\tutftext += String.fromCharCode(c);\r\n\t\t\t}\r\n\t\t\telse if((c > 127) && (c < 2048)) {\r\n\t\t\t\tutftext += String.fromCharCode((c >> 6) | 192);\r\n\t\t\t\tutftext += String.fromCharCode((c & 63) | 128);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tutftext += String.fromCharCode((c >> 12) | 224);\r\n\t\t\t\tutftext += String.fromCharCode(((c >> 6) & 63) | 128);\r\n\t\t\t\tutftext += String.fromCharCode((c & 63) | 128);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn utftext;\r\n\t}\r\n\r\n\t// private method for UTF-8 decoding\r\n\tfunction _utf8_decode(utftext) {\r\n\t\tvar string = \"\";\r\n\t\tvar i = 0;\r\n\t\tvar c = c1 = c2 = 0;\r\n\r\n\t\twhile ( i < utftext.length ) {\r\n\r\n\t\t\tc = utftext.charCodeAt(i);\r\n\r\n\t\t\tif (c < 128) {\r\n\t\t\t\tstring += String.fromCharCode(c);\r\n\t\t\t\ti++;\r\n\t\t\t}\r\n\t\t\telse if((c > 191) && (c < 224)) {\r\n\t\t\t\tc2 = utftext.charCodeAt(i+1);\r\n\t\t\t\tstring += String.fromCharCode(((c & 31) << 6) | (c2 & 63));\r\n\t\t\t\ti += 2;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tc2 = utftext.charCodeAt(i+1);\r\n\t\t\t\tc3 = utftext.charCodeAt(i+2);\r\n\t\t\t\tstring += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\r\n\t\t\t\ti += 3;\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn string;\r\n\t}\r\n\r\n\t// public method for encoding\r\n\tfunction encode(input, binary) {\r\n\t\tbinary = (binary != null) ? binary : false;\r\n\t\tvar output = \"\";\r\n\t\tvar chr1, chr2, chr3, enc1, enc2, enc3, enc4;\r\n\t\tvar i = 0;\r\n\r\n\t\tif (!binary)\r\n\t\t{\r\n\t\t\tinput = _utf8_encode(input);\r\n\t\t}\r\n\r\n\t\twhile (i < input.length) {\r\n\r\n\t\t\tchr1 = input.charCodeAt(i++);\r\n\t\t\tchr2 = input.charCodeAt(i++);\r\n\t\t\tchr3 = input.charCodeAt(i++);\r\n\r\n\t\t\tenc1 = chr1 >> 2;\r\n\t\t\tenc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\r\n\t\t\tenc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\r\n\t\t\tenc4 = chr3 & 63;\r\n\r\n\t\t\tif (isNaN(chr2)) {\r\n\t\t\t\tenc3 = enc4 = 64;\r\n\t\t\t} else if (isNaN(chr3)) {\r\n\t\t\t\tenc4 = 64;\r\n\t\t\t}\r\n\r\n\t\t\toutput = output +\r\n\t\t\tthis._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +\r\n\t\t\tthis._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);\r\n\r\n\t\t}\r\n\r\n\t\treturn output;\r\n\t}\r\n\r\n\t// public method for decoding\r\n\tfunction decode(input, binary) {\r\n\t\tbinary = (binary != null) ? binary : false;\r\n\t\tvar output = \"\";\r\n\t\tvar chr1, chr2, chr3;\r\n\t\tvar enc1, enc2, enc3, enc4;\r\n\t\tvar i = 0;\r\n\r\n\t\tinput = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\r\n\r\n\t\twhile (i < input.length) {\r\n\r\n\t\t\tenc1 = this._keyStr.indexOf(input.charAt(i++));\r\n\t\t\tenc2 = this._keyStr.indexOf(input.charAt(i++));\r\n\t\t\tenc3 = this._keyStr.indexOf(input.charAt(i++));\r\n\t\t\tenc4 = this._keyStr.indexOf(input.charAt(i++));\r\n\r\n\t\t\tchr1 = (enc1 << 2) | (enc2 >> 4);\r\n\t\t\tchr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\r\n\t\t\tchr3 = ((enc3 & 3) << 6) | enc4;\r\n\r\n\t\t\toutput = output + String.fromCharCode(chr1);\r\n\r\n\t\t\tif (enc3 != 64) {\r\n\t\t\t\toutput = output + String.fromCharCode(chr2);\r\n\t\t\t}\r\n\t\t\tif (enc4 != 64) {\r\n\t\t\t\toutput = output + String.fromCharCode(chr3);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif (!binary) {\r\n\t\t\toutput = _utf8_decode(output);\r\n\t\t}\r\n\r\n\t\treturn output;\r\n\r\n\t}\r\n\r\n\r\n\treturn strings.base64 = {\r\n\t\tdecode,\r\n\t\tencode\r\n\t};\r\n\t\r\n});"]}