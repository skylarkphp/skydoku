{"version":3,"sources":["skylark-domx-tables.js"],"names":["define","skylark","langx","$","tables","_changeCellTag","$tr","tagName","find","each","i","cell","$cell","replaceWith","html","deleteTable","td","callback","$block","$table","$td","closest","next","remove","refreshTableWidth","setTimeout","cols","tableWidth","width","eq","attr","outerWidth","undecorate","table","parent","length","mixin","createTable","row","col","phBr","$tbody","$thead","k","l","r","ref","ref1","appendTo","append","decorate","cssClasses","$colgroup","$headRow","$wrapper","tableDecorate","wrap","first","before","prepend","prependTo","class","resizeHandle","contenteditable","deleteCol","$newTd","index","noOtherCol","noOtherRow","siblings","prev","tr","deleteRow","$newTr","$nextTr","_nextRow","$prevTr","_prevRow","is","insertCol","direction","$col","$newCol","cellTag","Math","max","parseFloat","insertRow","colNum","resizable","container","options","clsResizeHandle","selectorWrapper","wrapper","selectorResizeHandle","on","e","$resizeHandle","this","parents","hasClass","currentTarget","pageX","offset","left","hide","data","show","css","position","$handle","$leftCol","$leftTd","$rightCol","$rightTd","startHandleLeft","startLeftWidth","startRightWidth","startX","deltaX","leftWidth","rightWidth","one","off","removeClass","addClass","attach","main"],"mappings":"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","file":"../skylark-domx-tables.js","sourcesContent":["define('skylark-domx-tables/tables',[\r\n    \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-query\",\r\n    \"skylark-domx-styler\",\r\n    \"skylark-domx-eventer\",\r\n    \"skylark-domx-fx\",\r\n    \"skylark-domx-data\",\r\n    \"skylark-domx-finder\",\r\n    \"skylark-domx-geom\"\r\n], function(skylark, langx,$) {\r\n  //TODO : don't use query\r\n\r\n  function tables() {\r\n      return tables;\r\n  }\r\n\r\n  function _changeCellTag($tr, tagName) {\r\n    return $tr.find('td, th').each(function(i, cell) {\r\n      var $cell;\r\n      $cell = $(cell);\r\n      return $cell.replaceWith(\"<\" + tagName + \">\" + ($cell.html()) + \"</\" + tagName + \">\");\r\n    });\r\n  }\r\n\r\n  function _nextRow($tr) {\r\n    var $nextTr;\r\n    $nextTr = $tr.next('tr');\r\n    if ($nextTr.length < 1 && $tr.parent('thead').length > 0) {\r\n      $nextTr = $tr.parent('thead').next('tbody').find('tr:first');\r\n    }\r\n    return $nextTr;\r\n  };\r\n\r\n  function _prevRow($tr) {\r\n    var $prevTr;\r\n    $prevTr = $tr.prev('tr');\r\n    if ($prevTr.length < 1 && $tr.parent('tbody').length > 0) {\r\n      $prevTr = $tr.parent('tbody').prev('thead').find('tr');\r\n    }\r\n    return $prevTr;\r\n  }\r\n\r\n  function createTable(row, col, phBr) {\r\n    var $table, $tbody, $td, $thead, $tr, c, k, l, r, ref, ref1;\r\n    $table = $('<table/>');\r\n    $thead = $('<thead/>').appendTo($table);\r\n    $tbody = $('<tbody/>').appendTo($table);\r\n    for (r = k = 0, ref = row; 0 <= ref ? k < ref : k > ref; r = 0 <= ref ? ++k : --k) {\r\n        $tr = $('<tr/>');\r\n        $tr.appendTo(r === 0 ? $thead : $tbody);\r\n        for (c = l = 0, ref1 = col; 0 <= ref1 ? l < ref1 : l > ref1; c = 0 <= ref1 ? ++l : --l) {\r\n          $td = $(r === 0 ? '<th/>' : '<td/>').appendTo($tr);\r\n          if (phBr) {\r\n              $td.append(phBr);\r\n          }\r\n        }\r\n    }   \r\n    return $table[0];\r\n  }\r\n    \r\n\r\n  //cls = simditor-table\r\n  function decorate(table,cssClasses) {\r\n    var $table = $(table);\r\n\r\n    var $colgroup, $headRow, $resizeHandle, $tbody, $thead, $wrapper;\r\n    if ($table.parent('.' + cssClasses.tableDecorate).length > 0) {\r\n      undecorate(table);\r\n    }\r\n    $table.wrap('<div class=\"' + cssClasses.tableDecorate + '\"></div>');\r\n    $wrapper = $table.parent('.' + cssClasses.tableDecorate );\r\n    $colgroup = $table.find('colgroup');\r\n    if ($table.find('thead').length < 1) {\r\n      $thead = $('<thead />');\r\n      $headRow = $table.find('tr').first();\r\n      $thead.append($headRow);\r\n      _changeCellTag($headRow, 'th');\r\n      $tbody = $table.find('tbody');\r\n      if ($tbody.length > 0) {\r\n        $tbody.before($thead);\r\n      } else {\r\n        $table.prepend($thead);\r\n      }\r\n    }\r\n    if ($colgroup.length < 1) {\r\n      $colgroup = $('<colgroup/>').prependTo($table);\r\n      $table.find('thead tr th').each(function(i, td) {\r\n        var $col;\r\n        return $col = $('<col/>').appendTo($colgroup);\r\n      });\r\n      refreshTableWidth($table);\r\n    }\r\n    $resizeHandle = $('<div />', {\r\n      \"class\": cssClasses.resizeHandle, // 'simditor-resize-handle',\r\n      contenteditable: 'false'\r\n    }).appendTo($wrapper);\r\n    return $table.parent();\r\n  }\r\n\r\n  function deleteTable(td,callback) {\r\n    var $td = $(td);\r\n\r\n    var $block, $table;\r\n    $table = $td.closest('.simditor-table');\r\n    $block = $table.next('p');\r\n    $table.remove();\r\n    if (callback) {\r\n      callback($block);\r\n    }\r\n  }\r\n\r\n  function deleteRow(td,callback) {\r\n    var $td = $(td);\r\n\r\n    var $newTr, $tr, index;\r\n    $tr = $td.parent('tr');\r\n    if ($tr.closest('table').find('tr').length < 1) {\r\n      return deleteTable(td);\r\n    } else {\r\n      $newTr = _nextRow($tr);\r\n      if (!($newTr.length > 0)) {\r\n        $newTr = _prevRow($tr);\r\n      }\r\n      index = $tr.find('td, th').index($td);\r\n      if ($tr.parent().is('thead')) {\r\n        $newTr.appendTo($tr.parent());\r\n        _changeCellTag($newTr, 'th');\r\n      }\r\n      $tr.remove();\r\n    \r\n      if (callback) {\r\n        callback($newTr[0],index);\r\n      }\r\n      //return this.editor.selection.setRangeAtEndOf($newTr.find('td, th').eq(index));\r\n    }\r\n  }\r\n\r\n  function insertRow(td, direction,phBr,callback) {\r\n    var $td = $(td);\r\n\r\n    var $newTr, $table, $tr, cellTag, colNum, i, index, k, ref;\r\n    if (direction == null) {\r\n      direction = 'after';\r\n    }\r\n    $tr = $td.parent('tr');\r\n    $table = $tr.closest('table');\r\n    colNum = 0;\r\n    $table.find('tr').each(function(i, tr) {\r\n      return colNum = Math.max(colNum, $(tr).find('td').length);\r\n    });\r\n    index = $tr.find('td, th').index($td);\r\n    $newTr = $('<tr/>');\r\n    cellTag = 'td';\r\n    if (direction === 'after' && $tr.parent().is('thead')) {\r\n      $tr.parent().next('tbody').prepend($newTr);\r\n    } else if (direction === 'before' && $tr.parent().is('thead')) {\r\n      $tr.before($newTr);\r\n      $tr.parent().next('tbody').prepend($tr);\r\n      _changeCellTag($tr, 'td');\r\n      cellTag = 'th';\r\n    } else {\r\n      $tr[direction]($newTr);\r\n    }\r\n    for (i = k = 1, ref = colNum; 1 <= ref ? k <= ref : k >= ref; i = 1 <= ref ? ++k : --k) {\r\n      $(\"<\" + cellTag + \"/>\").append(phBr).appendTo($newTr);\r\n    }\r\n\r\n    if (callback) {\r\n      callback($newTr[0],index);\r\n    }\r\n  }\r\n\r\n  function deleteCol(td,callback) {\r\n    var $td = $(td);\r\n\r\n    var $newTd, $table, $tr, index, noOtherCol, noOtherRow;\r\n    $tr = $td.parent('tr');\r\n    noOtherRow = $tr.closest('table').find('tr').length < 2;\r\n    noOtherCol = $td.siblings('td, th').length < 1;\r\n    if (noOtherRow && noOtherCol) {\r\n      return deleteTable(td);\r\n    } else {\r\n      index = $tr.find('td, th').index($td);\r\n      $newTd = $td.next('td, th');\r\n      if (!($newTd.length > 0)) {\r\n        $newTd = $tr.prev('td, th');\r\n      }\r\n      $table = $tr.closest('table');\r\n      $table.find('col').eq(index).remove();\r\n      $table.find('tr').each(function(i, tr) {\r\n        return $(tr).find('td, th').eq(index).remove();\r\n      });\r\n      refreshTableWidth($table);\r\n      //return this.editor.selection.setRangeAtEndOf($newTd);\r\n      if (callback) {\r\n        callback($newTd[0]);\r\n      }\r\n    }\r\n  }\r\n\r\n  function insertCol(td, direction,phBr,callback) {\r\n    var $td = $(td);\r\n\r\n    var $col, $newCol, $newTd, $table, $tr, index, tableWidth, width;\r\n    if (direction == null) {\r\n      direction = 'after';\r\n    }\r\n    $tr = $td.parent('tr');\r\n    index = $tr.find('td, th').index($td);\r\n    $table = $td.closest('table');\r\n    $col = $table.find('col').eq(index);\r\n    $table.find('tr').each((function(_this) {\r\n      return function(i, tr) {\r\n        var $newTd, cellTag;\r\n        cellTag = $(tr).parent().is('thead') ? 'th' : 'td';\r\n        $newTd = $(\"<\" + cellTag + \"/>\").append(phBr);\r\n        return $(tr).find('td, th').eq(index)[direction]($newTd);\r\n      };\r\n    })(this));\r\n    $newCol = $('<col/>');\r\n    $col[direction]($newCol);\r\n    tableWidth = $table.width();\r\n    width = Math.max(parseFloat($col.attr('width')) / 2, 50 / tableWidth * 100);\r\n    $col.attr('width', width + '%');\r\n    $newCol.attr('width', width + '%');\r\n    refreshTableWidth($table);\r\n    $newTd = direction === 'after' ? $td.next('td, th') : $td.prev('td, th');\r\n    //return this.editor.selection.setRangeAtStartOf($newTd);\r\n    if (callback) {\r\n      callback($newTd[0]);\r\n    }\r\n  }\r\n\r\n\r\n  function refreshTableWidth($table) {\r\n    return setTimeout((function(_this) {\r\n      return function() {\r\n        var cols, tableWidth;\r\n        tableWidth = $table.width();\r\n        cols = $table.find('col');\r\n        return $table.find('thead tr th').each(function(i, td) {\r\n          var $col;\r\n          $col = cols.eq(i);\r\n          return $col.attr('width', ($(td).outerWidth() / tableWidth * 100) + '%');\r\n        });\r\n      };\r\n    })(this), 0);\r\n  }\r\n\r\n\r\n  function resizable(container,options) {\r\n    var cssClasses = options.cssClasses,\r\n        clsResizeHandle = cssClasses.resizeHandle, // simditor-resize-handle\r\n        clsWrapper = cssClasses.wrapper, // .simditor-table\r\n        selectorWrapper = \".\" + clsWrapper,\r\n        selectorResizeHandle = \".\" + clsResizeHandle;\r\n\r\n    $(container).on('mousemove.table', selectorWrapper +' td, ' + selectorWrapper +' th', function(e) {\r\n      var $col, $colgroup, $resizeHandle, $td, $wrapper, index, ref, ref1, x;\r\n      $wrapper = $(this).parents(selectorWrapper);\r\n      $resizeHandle = $wrapper.find(selectorResizeHandle);\r\n      $colgroup = $wrapper.find('colgroup');\r\n      if ($wrapper.hasClass('resizing')) {\r\n        return;\r\n      }\r\n      $td = $(e.currentTarget);\r\n      x = e.pageX - $(e.currentTarget).offset().left;\r\n      if (x < 5 && $td.prev().length > 0) {\r\n        $td = $td.prev();\r\n      }\r\n      if ($td.next('td, th').length < 1) {\r\n        $resizeHandle.hide();\r\n        return;\r\n      }\r\n      if ((ref = $resizeHandle.data('td')) != null ? ref.is($td) : void 0) {\r\n        $resizeHandle.show();\r\n        return;\r\n      }\r\n      index = $td.parent().find('td, th').index($td);\r\n      $col = $colgroup.find('col').eq(index);\r\n      if ((ref1 = $resizeHandle.data('col')) != null ? ref1.is($col) : void 0) {\r\n        $resizeHandle.show();\r\n        return;\r\n      }\r\n      return $resizeHandle.css('left', $td.position().left + $td.outerWidth() - 5).data('td', $td).data('col', $col).show();\r\n    });\r\n\r\n    $(container).on('mouseleave'+ selectorWrapper, selectorWrapper, function(e) {\r\n      return $(this).find(selectorResizeHandle).hide();\r\n    });\r\n    return $(container).on('mousedown'+ selectorResizeHandle, selectorResizeHandle, function(e) {\r\n      var $handle, $leftCol, $leftTd, $rightCol, $rightTd, $wrapper, minWidth, startHandleLeft, startLeftWidth, startRightWidth, startX, tableWidth;\r\n      $wrapper = $(this).parent(selectorWrapper);\r\n      $handle = $(e.currentTarget);\r\n      $leftTd = $handle.data('td');\r\n      $leftCol = $handle.data('col');\r\n      $rightTd = $leftTd.next('td, th');\r\n      $rightCol = $leftCol.next('col');\r\n      startX = e.pageX;\r\n      startLeftWidth = $leftTd.outerWidth() * 1;\r\n      startRightWidth = $rightTd.outerWidth() * 1;\r\n      startHandleLeft = parseFloat($handle.css('left'));\r\n      tableWidth = $leftTd.closest(selectorWrapper).width();\r\n      minWidth = 50;\r\n      $(container).on('mousemove.resize-table', function(e) {\r\n        var deltaX, leftWidth, rightWidth;\r\n        deltaX = e.pageX - startX;\r\n        leftWidth = startLeftWidth + deltaX;\r\n        rightWidth = startRightWidth - deltaX;\r\n        if (leftWidth < minWidth) {\r\n          leftWidth = minWidth;\r\n          deltaX = minWidth - startLeftWidth;\r\n          rightWidth = startRightWidth - deltaX;\r\n        } else if (rightWidth < minWidth) {\r\n          rightWidth = minWidth;\r\n          deltaX = startRightWidth - minWidth;\r\n          leftWidth = startLeftWidth + deltaX;\r\n        }\r\n        $leftCol.attr('width', (leftWidth / tableWidth * 100) + '%');\r\n        $rightCol.attr('width', (rightWidth / tableWidth * 100) + '%');\r\n        return $handle.css('left', startHandleLeft + deltaX);\r\n      });\r\n      $(container).one('mouseup.resize-table', function(e) {\r\n        //$editor.sync();\r\n        $(container).off('.resize-table');\r\n        return $wrapper.removeClass('resizing');\r\n      });\r\n      $wrapper.addClass('resizing');\r\n      return false;\r\n    });\r\n  };\r\n\r\n  function undecorate(table) {\r\n    var $table = $(table);\r\n    if (!($table.parent('.simditor-table').length > 0)) {\r\n      return;\r\n    }\r\n    return $table.parent().replaceWith($table)[0];\r\n  };\r\n\r\n\r\n\r\n  langx.mixin(tables,{\r\n    \"createTable\" : createTable,\r\n    \"decorate\" : decorate,\r\n    \"deleteCol\" : deleteCol,\r\n    \"deleteRow\" : deleteRow,\r\n    \"deleteTable\" : deleteTable,\r\n    \"insertCol\" : insertCol,\r\n    \"insertRow\" : insertRow,\r\n    \"refreshTableWidth\" : refreshTableWidth,\r\n    \"resizable\" : resizable,\r\n    \"undecorate\" : undecorate\r\n  })\r\n\r\n\r\n  return skylark.attach(\"domx.tables\", tables);\r\n});\ndefine('skylark-domx-tables/main',[\r\n\t\"./tables\"\r\n],function(tables){\r\n\treturn tables;\r\n});\ndefine('skylark-domx-tables', ['skylark-domx-tables/main'], function (main) { return main; });\n\n"]}