{"version":3,"sources":["skylark-domx-eventer.js"],"names":["define","skylark","langx","browser","finder","noder","datax","mixin","each","Array","prototype","slice","uid","ignoreProperties","eventMethods","preventDefault","stopImmediatePropagation","stopPropagation","readyRE","compatible","event","source","isDefaultPrevented","name","predicate","sourceMethod","this","returnTrue","apply","arguments","returnFalse","parse","segs","split","type","ns","sort","join","createEvent","EventCtors","window","NativeEvents","compositionstart","compositionend","compositionupdate","beforecopy","beforecut","beforepaste","copy","cut","paste","drag","dragend","dragenter","dragexit","dragleave","dragover","dragstart","drop","abort","change","error","selectionchange","submit","reset","focus","blur","focusin","focusout","keydown","keypress","keyup","message","click","contextmenu","dblclick","mousedown","mouseup","mousemove","mouseover","mouseout","mouseenter","mouseleave","textInput","touchstart","touchmove","touchend","load","resize","select","scroll","unload","wheel","props","isString","parsed","bubbles","cancelable","namespace","ctor","idx","getEventCtor","e","safeMixin","createProxy","src","key","proxy","originalEvent","test","undefined","specialEvents","focusinSupported","hover","realEvent","handlers","EventBindings","klass","init","target","_target","_event","_bindings","add","fn","options","bindings","binding","push","self","_listener","domEvt","elm","args","_args","isDefined","concat","match","isImmediatePropagationStopped","selector","one","data","indexOf","closest","currentTarget","liveFired","related","relatedTarget","contains","remove","result","addEventListener","console","warn","matcher","RegExp","replace","filter","removing","length","removeEventListener","EventsHandler","_handler","register","callback","specialEvent","bindingEvent","bindType","bindEventName","events","unregister","listener","findHandler","id","handler","on","isPlainObject","isFunction","forEach","ready","document","readyState","body","defer","keyCodeLookup","backspace","comma","delete","down","end","enter","escape","home","left","page_down","page_up","period","right","space","tab","up","eventer","support","transition","transitionEnd","delegateType","create","keys","off","shortcuts","registry","run","shortcut","n","metaKey","ctrlKey","ctrl","alt","altKey","shift","shiftKey","keyCode","charCode","nodeName","pattern","toLowerCase","shortcutKey","setting","charCodeAt","toUpperCase","regKey","special","stop","all","trigger","evented","Event","dispatchEvent","call","attach","velm","$","delegate","method","VisualElement","wraps","wrapper_every_act","main"],"mappings":"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","file":"../skylark-domx-eventer.js","sourcesContent":["define('skylark-domx-eventer/eventer',[\r\n    \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-browser\",\r\n    \"skylark-domx-finder\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-data\"\r\n], function(skylark, langx, browser, finder, noder, datax) {\r\n    var mixin = langx.mixin,\r\n        each = langx.each,\r\n        slice = Array.prototype.slice,\r\n        uid = langx.uid,\r\n        ignoreProperties = /^([A-Z]|returnValue$|layer[XY]$)/,\r\n        eventMethods = {\r\n            preventDefault: \"isDefaultPrevented\",\r\n            stopImmediatePropagation: \"isImmediatePropagationStopped\",\r\n            stopPropagation: \"isPropagationStopped\"\r\n        },\r\n        readyRE = /complete|loaded|interactive/;\r\n\r\n    function compatible(event, source) {\r\n        if (source || !event.isDefaultPrevented) {\r\n            if (!source) {\r\n                source = event;\r\n            }\r\n\r\n            langx.each(eventMethods, function(name, predicate) {\r\n                var sourceMethod = source[name];\r\n                event[name] = function() {\r\n                    this[predicate] = langx.returnTrue;\r\n                    return sourceMethod && sourceMethod.apply(source, arguments);\r\n                }\r\n                event[predicate] = langx.returnFalse;\r\n            });\r\n        }\r\n        return event;\r\n    }\r\n\r\n    function parse(event) {\r\n        var segs = (\"\" + event).split(\".\");\r\n        return {\r\n            type: segs[0],\r\n            ns: segs.slice(1).sort().join(\" \")\r\n        };\r\n    }\r\n\r\n    //create a custom dom event\r\n    var createEvent = (function() {\r\n        var EventCtors = [\r\n                window[\"CustomEvent\"], // 0 default\r\n                window[\"CompositionEvent\"], // 1\r\n                window[\"DragEvent\"], // 2\r\n                window[\"Event\"], // 3\r\n                window[\"FocusEvent\"], // 4\r\n                window[\"KeyboardEvent\"], // 5\r\n                window[\"MessageEvent\"], // 6\r\n                window[\"MouseEvent\"], // 7\r\n                window[\"MouseScrollEvent\"], // 8\r\n                window[\"MouseWheelEvent\"], // 9\r\n                window[\"MutationEvent\"], // 10\r\n                window[\"ProgressEvent\"], // 11\r\n                window[\"TextEvent\"], // 12\r\n                window[\"TouchEvent\"], // 13\r\n                window[\"UIEvent\"], // 14\r\n                window[\"WheelEvent\"], // 15\r\n                window[\"ClipboardEvent\"] // 16\r\n            ],\r\n            NativeEvents = {\r\n                \"compositionstart\": 1, // CompositionEvent\r\n                \"compositionend\": 1, // CompositionEvent\r\n                \"compositionupdate\": 1, // CompositionEvent\r\n\r\n                \"beforecopy\": 16, // ClipboardEvent\r\n                \"beforecut\": 16, // ClipboardEvent\r\n                \"beforepaste\": 16, // ClipboardEvent\r\n                \"copy\": 16, // ClipboardEvent\r\n                \"cut\": 16, // ClipboardEvent\r\n                \"paste\": 16, // ClipboardEvent\r\n\r\n                \"drag\": 2, // DragEvent\r\n                \"dragend\": 2, // DragEvent\r\n                \"dragenter\": 2, // DragEvent\r\n                \"dragexit\": 2, // DragEvent\r\n                \"dragleave\": 2, // DragEvent\r\n                \"dragover\": 2, // DragEvent\r\n                \"dragstart\": 2, // DragEvent\r\n                \"drop\": 2, // DragEvent\r\n\r\n                \"abort\": 3, // Event\r\n                \"change\": 3, // Event\r\n                \"error\": 3, // Event\r\n                \"selectionchange\": 3, // Event\r\n                \"submit\": 3, // Event\r\n                \"reset\": 3, // Event\r\n\r\n                \"focus\": 4, // FocusEvent\r\n                \"blur\": 4, // FocusEvent\r\n                \"focusin\": 4, // FocusEvent\r\n                \"focusout\": 4, // FocusEvent\r\n\r\n                \"keydown\": 5, // KeyboardEvent\r\n                \"keypress\": 5, // KeyboardEvent\r\n                \"keyup\": 5, // KeyboardEvent\r\n\r\n                \"message\": 6, // MessageEvent\r\n\r\n                \"click\": 7, // MouseEvent\r\n                \"contextmenu\": 7, // MouseEvent\r\n                \"dblclick\": 7, // MouseEvent\r\n                \"mousedown\": 7, // MouseEvent\r\n                \"mouseup\": 7, // MouseEvent\r\n                \"mousemove\": 7, // MouseEvent\r\n                \"mouseover\": 7, // MouseEvent\r\n                \"mouseout\": 7, // MouseEvent\r\n                \"mouseenter\": 7, // MouseEvent\r\n                \"mouseleave\": 7, // MouseEvent\r\n\r\n\r\n                \"textInput\": 12, // TextEvent\r\n\r\n                \"touchstart\": 13, // TouchEvent\r\n                \"touchmove\": 13, // TouchEvent\r\n                \"touchend\": 13, // TouchEvent\r\n\r\n                \"load\": 14, // UIEvent\r\n                \"resize\": 14, // UIEvent\r\n                \"select\": 14, // UIEvent\r\n                \"scroll\": 14, // UIEvent\r\n                \"unload\": 14, // UIEvent,\r\n\r\n                \"wheel\": 15 // WheelEvent\r\n            };\r\n\r\n        function getEventCtor(type) {\r\n            var idx = NativeEvents[type];\r\n            if (!idx) {\r\n                idx = 0;\r\n            }\r\n            return EventCtors[idx];\r\n        }\r\n\r\n        return function(type, props) {\r\n            //create a custom dom event\r\n\r\n            if (langx.isString(type)) {\r\n                props = props || {};\r\n            } else {\r\n                props = type || {};\r\n                type = props.type || \"\";\r\n            }\r\n            var parsed = parse(type);\r\n            type = parsed.type;\r\n\r\n            props = langx.mixin({\r\n                bubbles: true,\r\n                cancelable: true\r\n            }, props);\r\n\r\n            if (parsed.ns) {\r\n                props.namespace = parsed.ns;\r\n            }\r\n\r\n            var ctor = getEventCtor(type),\r\n                e = new ctor(type, props);\r\n\r\n            langx.safeMixin(e, props);\r\n\r\n            return compatible(e);\r\n        };\r\n    })();\r\n\r\n    function createProxy(src, props) {\r\n        var key,\r\n            proxy = {\r\n                originalEvent: src\r\n            };\r\n        for (key in src) {\r\n            if (key !== \"keyIdentifier\" && !ignoreProperties.test(key) && src[key] !== undefined) {\r\n                proxy[key] = src[key];\r\n            }\r\n        }\r\n        if (props) {\r\n            langx.mixin(proxy, props);\r\n        }\r\n        return compatible(proxy, src);\r\n    }\r\n\r\n    var\r\n        specialEvents = {},\r\n        focusinSupported = \"onfocusin\" in window,\r\n        focus = { focus: \"focusin\", blur: \"focusout\" },\r\n        hover = { mouseenter: \"mouseover\", mouseleave: \"mouseout\" },\r\n        realEvent = function(type) {\r\n            return hover[type] || (focusinSupported && focus[type]) || type;\r\n        },\r\n        handlers = {},\r\n        EventBindings = langx.klass({\r\n            init: function(target, event) {\r\n                this._target = target;\r\n                this._event = event;\r\n                this._bindings = [];\r\n            },\r\n\r\n            add: function(fn, options) {\r\n                var bindings = this._bindings,\r\n                    binding = {\r\n                        fn: fn,\r\n                        options: langx.mixin({}, options)\r\n                    };\r\n\r\n                bindings.push(binding);\r\n\r\n                var self = this;\r\n                if (!self._listener) {\r\n                    self._listener = function(domEvt) {\r\n                        var elm = this,\r\n                            e = createProxy(domEvt),\r\n                            args = domEvt._args,\r\n                            bindings = self._bindings,\r\n                            ns = e.namespace;\r\n\r\n                        if (langx.isDefined(args)) {\r\n                            args = [e].concat(args);\r\n                        } else {\r\n                            args = [e];\r\n                        }\r\n\r\n                        langx.each(bindings, function(idx, binding) {\r\n                            var match = elm;\r\n                            if (e.isImmediatePropagationStopped && e.isImmediatePropagationStopped()) {\r\n                                return false;\r\n                            }\r\n                            var fn = binding.fn,\r\n                                options = binding.options || {},\r\n                                selector = options.selector,\r\n                                one = options.one,\r\n                                data = options.data;\r\n\r\n                            if (ns && ns != options.ns && options.ns.indexOf(ns) === -1) {\r\n                                return;\r\n                            }\r\n                            if (selector) {\r\n                                match = finder.closest(e.target, selector);\r\n                                if (match && match !== elm) {\r\n                                    langx.mixin(e, {\r\n                                        currentTarget: match,\r\n                                        liveFired: elm\r\n                                    });\r\n                                } else {\r\n                                    return;\r\n                                }\r\n                            }\r\n\r\n                            var originalEvent = self._event;\r\n                            if (originalEvent in hover) {\r\n                                var related = e.relatedTarget;\r\n                                if (related && (related === match || noder.contains(match, related))) {\r\n                                    return;\r\n                                }\r\n                            }\r\n\r\n                            if (langx.isDefined(data)) {\r\n                                e.data = data;\r\n                            }\r\n\r\n                            if (one) {\r\n                                self.remove(fn, options);\r\n                            }\r\n\r\n                            var result = fn.apply(match, args);\r\n\r\n                            if (result === false) {\r\n                                e.preventDefault();\r\n                                e.stopPropagation();\r\n                            }\r\n                        });;\r\n                    };\r\n\r\n                    var event = self._event;\r\n                    /*\r\n                                        if (event in hover) {\r\n                                            var l = self._listener;\r\n                                            self._listener = function(e) {\r\n                                                var related = e.relatedTarget;\r\n                                                if (!related || (related !== this && !noder.contains(this, related))) {\r\n                                                    return l.apply(this, arguments);\r\n                                                }\r\n                                            }\r\n                                        }\r\n                    */\r\n\r\n                    if (self._target.addEventListener) {\r\n                        self._target.addEventListener(realEvent(event), self._listener, false);\r\n                    } else {\r\n                        console.warn(\"invalid eventer object\", self._target);\r\n                    }\r\n                }\r\n\r\n            },\r\n            remove: function(fn, options) {\r\n                options = langx.mixin({}, options);\r\n\r\n                function matcherFor(ns) {\r\n                    return new RegExp(\"(?:^| )\" + ns.replace(\" \", \" .* ?\") + \"(?: |$)\");\r\n                }\r\n                var matcher;\r\n                if (options.ns) {\r\n                    matcher = matcherFor(options.ns);\r\n                }\r\n\r\n                this._bindings = this._bindings.filter(function(binding) {\r\n                    var removing = (!fn || fn === binding.fn) &&\r\n                        (!matcher || matcher.test(binding.options.ns)) &&\r\n                        (!options.selector || options.selector == binding.options.selector);\r\n\r\n                    return !removing;\r\n                });\r\n                if (this._bindings.length == 0) {\r\n                    if (this._target.removeEventListener) {\r\n                        this._target.removeEventListener(realEvent(this._event), this._listener, false);\r\n                    }\r\n                    this._listener = null;\r\n                }\r\n            }\r\n        }),\r\n        EventsHandler = langx.klass({\r\n            init: function(elm) {\r\n                this._target = elm;\r\n                this._handler = {};\r\n            },\r\n\r\n            // add a event listener\r\n            // selector Optional\r\n            register: function(event, callback, options) {\r\n                // Seperate the event from the namespace\r\n                var parsed = parse(event),\r\n                    event = parsed.type,\r\n                    specialEvent = specialEvents[event],\r\n                    bindingEvent = specialEvent && (specialEvent.bindType || specialEvent.bindEventName);\r\n\r\n                var events = this._handler;\r\n\r\n                // Check if there is already a handler for this event\r\n                if (events[event] === undefined) {\r\n                    events[event] = new EventBindings(this._target, bindingEvent || event);\r\n                }\r\n\r\n                // Register the new callback function\r\n                events[event].add(callback, langx.mixin({\r\n                    ns: parsed.ns\r\n                }, options)); // options:{selector:xxx}\r\n            },\r\n\r\n            // remove a event listener\r\n            unregister: function(event, fn, options) {\r\n                // Check for parameter validtiy\r\n                var events = this._handler,\r\n                    parsed = parse(event);\r\n                event = parsed.type;\r\n\r\n                if (event) {\r\n                    var listener = events[event];\r\n\r\n                    if (listener) {\r\n                        listener.remove(fn, langx.mixin({\r\n                            ns: parsed.ns\r\n                        }, options));\r\n                    }\r\n                } else {\r\n                    //remove all events\r\n                    for (event in events) {\r\n                        var listener = events[event];\r\n                        listener.remove(fn, langx.mixin({\r\n                            ns: parsed.ns\r\n                        }, options));\r\n                    }\r\n                }\r\n            }\r\n        }),\r\n\r\n        findHandler = function(elm) {\r\n            var id = uid(elm),\r\n                handler = handlers[id];\r\n            if (!handler) {\r\n                handler = handlers[id] = new EventsHandler(elm);\r\n            }\r\n            return handler;\r\n        };\r\n\r\n    /*   \r\n     * Remove an event handler for one or more events from the specified element.\r\n     * @param {HTMLElement} elm  \r\n     * @param {String} events\r\n     * @param {String　Optional } selector\r\n     * @param {Function} callback\r\n     */\r\n    function off(elm, events, selector, callback) {\r\n        var $this = this\r\n        if (langx.isPlainObject(events)) {\r\n            langx.each(events, function(type, fn) {\r\n                off(elm, type, selector, fn);\r\n            })\r\n            return $this;\r\n        }\r\n\r\n        if (!langx.isString(selector) && !langx.isFunction(callback) && callback !== false) {\r\n            callback = selector;\r\n            selector = undefined;\r\n        }\r\n\r\n        if (callback === false) {\r\n            callback = langx.returnFalse;\r\n        }\r\n\r\n        if (typeof events == \"string\") {\r\n            if (events.indexOf(\",\") > -1) {\r\n                events = events.split(\",\");\r\n            } else {\r\n                events = events.split(/\\s/);\r\n            }\r\n        }\r\n\r\n        var handler = findHandler(elm);\r\n\r\n        if (events) events.forEach(function(event) {\r\n\r\n            handler.unregister(event, callback, {\r\n                selector: selector,\r\n            });\r\n        });\r\n        return this;\r\n    }\r\n\r\n    /*   \r\n     * Attach an event handler function for one or more events to the selected elements.\r\n     * @param {HTMLElement} elm  \r\n     * @param {String} events\r\n     * @param {String　Optional} selector\r\n     * @param {Anything Optional} data\r\n     * @param {Function} callback\r\n     * @param {Boolean　Optional} one\r\n     */\r\n    function on(elm, events, selector, data, callback, one) {\r\n\r\n        var autoRemove, delegator;\r\n        if (langx.isPlainObject(events)) {\r\n            langx.each(events, function(type, fn) {\r\n                on(elm, type, selector, data, fn, one);\r\n            });\r\n            return this;\r\n        }\r\n\r\n        if (!langx.isString(selector) && !langx.isFunction(callback)) {\r\n            callback = data;\r\n            data = selector;\r\n            selector = undefined;\r\n        }\r\n\r\n        if (langx.isFunction(data)) {\r\n            callback = data;\r\n            data = undefined;\r\n        }\r\n\r\n        if (callback === false) {\r\n            callback = langx.returnFalse;\r\n        }\r\n\r\n        if (typeof events == \"string\") {\r\n            if (events.indexOf(\",\") > -1) {\r\n                events = events.split(\",\");\r\n            } else {\r\n                events = events.split(/\\s/);\r\n            }\r\n        }\r\n\r\n        var handler = findHandler(elm);\r\n\r\n        events.forEach(function(event) {\r\n            if (event == \"ready\") {\r\n                return ready(callback);\r\n            }\r\n            handler.register(event, callback, {\r\n                data: data,\r\n                selector: selector,\r\n                one: !!one\r\n            });\r\n        });\r\n        return this;\r\n    }\r\n\r\n    /*   \r\n     * Attach a handler to an event for the elements. The handler is executed at most once per \r\n     * @param {HTMLElement} elm  \r\n     * @param {String} event\r\n     * @param {String　Optional} selector\r\n     * @param {Anything Optional} data\r\n     * @param {Function} callback\r\n     */\r\n    function one(elm, events, selector, data, callback) {\r\n        on(elm, events, selector, data, callback, 1);\r\n\r\n        return this;\r\n    }\r\n\r\n    /*   \r\n     * Prevents propagation and clobbers the default action of the passed event. The same as calling event.preventDefault() and event.stopPropagation(). \r\n     * @param {String} event\r\n     */\r\n    function stop(event) {\r\n        if (window.document.all) {\r\n            event.keyCode = 0;\r\n        }\r\n        if (event.preventDefault) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n        }\r\n        return this;\r\n    }\r\n    /*   \r\n     * Execute all handlers and behaviors attached to the matched elements for the given event  \r\n     * @param {String} evented\r\n     * @param {String} type\r\n     * @param {Array or PlainObject } args\r\n     */\r\n    function trigger(evented, type, args) {\r\n        var e;\r\n        if (type instanceof Event) {\r\n            e = type;\r\n        } else {\r\n            e = createEvent(type, args);\r\n        }\r\n        e._args = args;\r\n\r\n        var fn = (evented.dispatchEvent || evented.trigger);\r\n        if (fn) {\r\n            fn.call(evented, e);\r\n        } else {\r\n            console.warn(\"The evented parameter is not a eventable object\");\r\n        }\r\n\r\n        return this;\r\n    }\r\n    /*   \r\n     * Specify a function to execute when the DOM is fully loaded.  \r\n     * @param {Function} callback\r\n     */\r\n    function ready(callback) {\r\n        // need to check if document.body exists for IE as that browser reports\r\n        // document ready when it hasn't yet created the body elm\r\n        if (readyRE.test(document.readyState) && document.body) {\r\n            langx.defer(callback);\r\n        } else {\r\n            document.addEventListener('DOMContentLoaded', callback, false);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    var keyCodeLookup = {\r\n        \"backspace\": 8,\r\n        \"comma\": 188,\r\n        \"delete\": 46,\r\n        \"down\": 40,\r\n        \"end\": 35,\r\n        \"enter\": 13,\r\n        \"escape\": 27,\r\n        \"home\": 36,\r\n        \"left\": 37,\r\n        \"page_down\": 34,\r\n        \"page_up\": 33,\r\n        \"period\": 190,\r\n        \"right\": 39,\r\n        \"space\": 32,\r\n        \"tab\": 9,\r\n        \"up\": 38\r\n    };\r\n    //example:\r\n    //shortcuts(elm).add(\"CTRL+ALT+SHIFT+X\",function(){console.log(\"test!\")});\r\n    function shortcuts(elm) {\r\n\r\n        var registry = datax.data(elm, \"shortcuts\");\r\n        if (!registry) {\r\n            registry = {};\r\n            datax.data(elm, \"shortcuts\", registry);\r\n            var run = function(shortcut, event) {\r\n                var n = event.metaKey || event.ctrlKey;\r\n                if (shortcut.ctrl == n && shortcut.alt == event.altKey && shortcut.shift == event.shiftKey) {\r\n                    if (event.keyCode == shortcut.keyCode || event.charCode && event.charCode == shortcut.charCode) {\r\n                        event.preventDefault();\r\n                        if (\"keydown\" == event.type) {\r\n                            shortcut.fn(event);\r\n                        }\r\n                        return true;\r\n                    }\r\n                }\r\n            };\r\n            on(elm, \"keyup keypress keydown\", function(event) {\r\n                if (!(/INPUT|TEXTAREA/.test(event.target.nodeName))) {\r\n                    for (var key in registry) {\r\n                        run(registry[key], event);\r\n                    }\r\n                }\r\n            });\r\n\r\n        }\r\n\r\n        return {\r\n            add: function(pattern, fn) {\r\n                var shortcutKeys;\r\n                if (pattern.indexOf(\",\") > -1) {\r\n                    shortcutKeys = pattern.toLowerCase().split(\",\");\r\n                } else {\r\n                    shortcutKeys = pattern.toLowerCase().split(\" \");\r\n                }\r\n                shortcutKeys.forEach(function(shortcutKey) {\r\n                    var setting = {\r\n                        fn: fn,\r\n                        alt: false,\r\n                        ctrl: false,\r\n                        shift: false\r\n                    };\r\n                    shortcutKey.split(\"+\").forEach(function(key) {\r\n                        switch (key) {\r\n                            case \"alt\":\r\n                            case \"ctrl\":\r\n                            case \"shift\":\r\n                                setting[key] = true;\r\n                                break;\r\n                            default:\r\n                                setting.charCode = key.charCodeAt(0);\r\n                                setting.keyCode = keyCodeLookup[key] || key.toUpperCase().charCodeAt(0);\r\n                        }\r\n                    });\r\n                    var regKey = (setting.ctrl ? \"ctrl\" : \"\") + \",\" + (setting.alt ? \"alt\" : \"\") + \",\" + (setting.shift ? \"shift\" : \"\") + \",\" + setting.keyCode;\r\n                    registry[regKey] = setting;\r\n                })\r\n            }\r\n\r\n        };\r\n\r\n    }\r\n\r\n    if (browser.support.transition) {\r\n        specialEvents.transitionEnd = {\r\n//          handle: function (e) {\r\n//            if ($(e.target).is(this)) return e.handleObj.handler.apply(this, arguments)\r\n//          },\r\n          bindType: browser.support.transition.end,\r\n          delegateType: browser.support.transition.end\r\n        }        \r\n    }\r\n\r\n    function eventer() {\r\n        return eventer;\r\n    }\r\n\r\n    langx.mixin(eventer, {\r\n        create: createEvent,\r\n\r\n        keys: keyCodeLookup,\r\n\r\n        off: off,\r\n\r\n        on: on,\r\n\r\n        one: one,\r\n\r\n        proxy: createProxy,\r\n\r\n        ready: ready,\r\n\r\n        shortcuts: shortcuts,\r\n\r\n        special: specialEvents,\r\n\r\n        stop: stop,\r\n\r\n        trigger: trigger\r\n\r\n    });\r\n\r\n    return skylark.attach(\"domx.eventer\",eventer);\r\n});\ndefine('skylark-domx-eventer/main',[\r\n    \"skylark-langx/langx\",\r\n    \"./eventer\",\r\n    \"skylark-domx-velm\",\r\n    \"skylark-domx-query\"        \r\n],function(langx,eventer,velm,$){\r\n\r\n    // from ./eventer\r\n    velm.delegate([\r\n        \"off\",\r\n        \"on\",\r\n        \"one\",\r\n        \"shortcuts\",\r\n        \"trigger\"\r\n    ], eventer);\r\n\r\n    // events\r\n    var events = [ 'keyUp', 'keyDown', 'mouseOver', 'mouseOut', 'click', 'dblClick', 'change' ];\r\n\r\n    events.forEach( function ( event ) {\r\n\r\n        var method = event;\r\n\r\n        velm.VisualElement.prototype[method ] = function ( callback ) {\r\n\r\n            this.on( event.toLowerCase(), callback);\r\n\r\n            return this;\r\n        };\r\n\r\n    });\r\n\r\n    $.fn.on = $.wraps.wrapper_every_act(eventer.on, eventer);\r\n\r\n    $.fn.off = $.wraps.wrapper_every_act(eventer.off, eventer);\r\n\r\n    $.fn.trigger = $.wraps.wrapper_every_act(eventer.trigger, eventer);\r\n\r\n    ('focusin focusout focus blur load resize scroll unload click dblclick ' +\r\n        'mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave ' +\r\n        'change select keydown keypress keyup error transitionEnd').split(' ').forEach(function(event) {\r\n        $.fn[event] = function(data, callback) {\r\n            return (0 in arguments) ?\r\n                this.on(event, data, callback) :\r\n                this.trigger(event)\r\n        }\r\n    });\r\n\r\n    $.fn.one = function(event, selector, data, callback) {\r\n        if (!langx.isString(selector) && !langx.isFunction(callback)) {\r\n            callback = data;\r\n            data = selector;\r\n            selector = null;\r\n        }\r\n\r\n        if (langx.isFunction(data)) {\r\n            callback = data;\r\n            data = null;\r\n        }\r\n\r\n        return this.on(event, selector, data, callback, 1)\r\n    }; \r\n\r\n    $.ready = eventer.ready;\r\n\r\n    return eventer;\r\n});\ndefine('skylark-domx-eventer', ['skylark-domx-eventer/main'], function (main) { return main; });\n\n"]}